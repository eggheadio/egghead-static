[
  {
    "id": "podcasts-00000000000000000308",
    "title": "How Shirley Wu Built A Career As A Freelance Data Visualizer",
    "summary": "Shirley Wu chats about her career as a freelancer, what data visualization is, how to get started with learning data visualization, taking data visualization into the real world, and her tech stack.",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/a1d2092e-d41e-4765-abc7-e52e6af006d9/edited-shirley-wu-podcast-01_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/e21d35da-a28e-4f59-97cc-3c82e6b81011/08ab216f-1f92-4c1f-a3d0-fa23d72a764f/logo.jpg",
    "simplecast_uid": "a1d2092e-d41e-4765-abc7-e52e6af006d9",
    "transcript": "<p><strong>Joel Hooks:</strong><br />Hi Shirley.</p><p><strong>Shirley Wu:</strong><br />Hi Joel. Thank you so much for having me.</p><p><strong>Joel Hooks:</strong><br />I'm very stoked. I'm so excited to talk to you. We're going to talk about data visualization. That's kind of your thing, that's what you're known for. But I wanted to first start out and talk to you about how you work because over the last three or four years, you took the switch from being a full-time employee to being a freelancer to working for yourself.</p><p><strong>Joel Hooks:</strong><br />And I was wondering what caused you to make that decision, make that leap into this world of freelance work?</p><p><strong>Shirley Wu:</strong><br />Yeah. So, I have to say that I actually never expected to freelance in the sense that I've always been extremely risk averse, like don't even want to do stocks, that's how risk averse I am, and so I always thought of freelancing as something that was way too scary not to have that regular pay check. But then when I was 24 and I was working my first year at a startup, and I was realizing that I was working nights and weekends, I wasn't having much else of a life. And that's when I started doing more and more side projects. And then two years later I was kind of trying to figure out my next step, and that kind of realization I had at 24 it kept on sticking with me, and I had a few friends in data visualization that were also freelancing at that time, and they were kind of super amazing about explaining the whole process to me, being like, \"Hey, there is risk, but here's how you kind of go and set up all the legal process, and all the financial process, and accounting so that you don't have all of that risk.\" And I was like, \"Oh, maybe this is something I can try.\"</p><p><strong>Shirley Wu:</strong><br />Maybe this is something I can try and figure out what it is that I really enjoyed doing, because I knew I enjoyed doing data visualization, but I didn't know what industry I'd like it to be in. So, I was like, \"Oh maybe I'll go freelance for a year or two and figure out what it is that I want to do with my life.\" I'm like, \"Go back into full-time.\" And I figured it out three years later I'm like, \"Nope. I like it here.\"</p><p><strong>Joel Hooks:</strong><br />Yeah. Sticking with it.</p><p><strong>Shirley Wu:</strong><br />Working for myself.</p><p><strong>Joel Hooks:</strong><br />What's the best part about being a freelancer?</p><p><strong>Shirley Wu:</strong><br />The freedom. What I did not realize about myself until I quit is how much I actually hated being told what to do.</p><p><strong>Joel Hooks:</strong><br />Yeah, yeah. I feel that.</p><p><strong>Shirley Wu:</strong><br />And I mean, I did it. I was like, \"Oh this is what a full-time job is.\" I get told what to do my managers and by bosses, and once I became my own boss I was like, \"Oh I can take on whatever clients I want to, and I don't have to take on clients and projects I don't want to.\" I can do podcast recordings if I want, I can travel to conferences if I want.</p><p><strong>Shirley Wu:</strong><br />I can do whatever I want, and that freedom is really amazing. So, that is my favorite thing.</p><p><strong>Joel Hooks:</strong><br />Yeah. Recently you took months off to go do a fellowship at NYU, right?</p><p><strong>Shirley Wu:</strong><br />Yeah.</p><p><strong>Joel Hooks:</strong><br />You're able to do that, and that's not necessarily something you can do when you're working as a salaried employee. I mean, there might be a company that accepts that, but that's unusual and something of the freedom to do.</p><p><strong>Shirley Wu:</strong><br />Yeah, you're right. A company might accept it, but only if I've worked there for three, four or five years. Prove them myself as a worthy employee.</p><p><strong>Joel Hooks:</strong><br />Like a sabbatical?</p><p><strong>Shirley Wu:</strong><br />Yeah like a sabbatical sort of thing. They will probably let me do three months or something like that. But yeah, being freelancing, being free meant that, \"Okay. This is kind of something I want for the next step of my career.\" When I kind of really looked back at what I wanted to do next, I was like, \"Oh I want to do more art kind of things next.\" And went to NYU, went to ITP for three months, and that was really amazing.</p><p><strong>Shirley Wu:</strong><br />Very bad financial decision, but extremely worth it for everything else.</p><p><strong>Joel Hooks:</strong><br />I think going to New York in general is just a bad financial decision for almost anybody.</p><p><strong>Shirley Wu:</strong><br />Oh yeah, and I was paying rent in Brooklyn, and a mortgage in SF.</p><p><strong>Joel Hooks:</strong><br />Oh yeah. Nice. Double duty.</p><p><strong>Shirley Wu:</strong><br />Oh yeah.</p><p><strong>Joel Hooks:</strong><br />So, what's the worst part about being a freelancer? Maybe not the worst part, but what are the drawbacks of this type of work?</p><p><strong>Shirley Wu:</strong><br />I mean, there's two things that are really hard for me. The first is just the amount of stress of worrying about money, and I think it's especially really hard being in San Francisco, and being consistently surrounded by the knowledge that I could be making more at a full-time job. And I think that part is really hard, and I find that I actually talked about this in Ken's podcast actually where he asked me what was something that I really disliked.</p><p><strong>Shirley Wu:</strong><br />And I think one of the things I really dislike is I can't help but think about potential projects and potential clients as the monetary figure. Like, \"If I take on this project, then because is smaller, so I have to take on another project.\" Or something like that. And I that, I really don't like having to think that way, and always having to think about the money, and I just wish I could be like, \"Oh this client is a really great client.\" I just really want to work with them.</p><p><strong>Shirley Wu:</strong><br />Or I had to recently turn down a client I was extremely excited about because they just didn't have the budget. But yeah, for me the first part is kind of always being stressed about the money, and the second part I think is very related, which is because I'm a freelancer and there's an actual value to my hour and daily rate, it means that if I don't check myself, I end up just constantly working, and I don't have a good balance, and I don't give enough time with my family or friends or my husband, and I fall really easily into a rabbit hole, which is working because I'm like, \"Oh if I just work another a day, that's more money.\"</p><p><strong>Joel Hooks:</strong><br />Because it's a service, right? You're providing a service, and that service is you, and your time, and your billing rate, right? I don't know. I would always find myself when I was freelancing applying my hourly rate to non-work things. I could be making $150 an hour right now, but instead I'm having a burrito. I don't think so.</p><p><strong>Shirley Wu:</strong><br />Or conversely I'm just a horrible person where I'm like, \"Oh I can buy this thing, and it's only an X number of hours of my time.\"</p><p><strong>Joel Hooks:</strong><br />Yeah. That new thing costs ... That's three house of work or two hours of work, and-</p><p><strong>Shirley Wu:</strong><br />Yeah. And I'm like, \"Oh it's okay then because it's not actually that much of my hourly rate.\"</p><p><strong>Joel Hooks:</strong><br />I think it's true. It's not much different in that regard to me than working a full-time job, right? You're still are providing the service, but it gives you a different mindset in terms of how you're viewing kind of the value of your time.</p><p><strong>Joel Hooks:</strong><br />I'm curious. Do you bill on an hourly basis or a daily basis or a weekly basis? How do you approach projects like that from a billing perspective?</p><p><strong>Shirley Wu:</strong><br />I actually haven't done a client project in a while because I had the fellowship thing, so this is now a review for me.</p><p><strong>Joel Hooks:</strong><br />Oh getting back into it?</p><p><strong>Shirley Wu:</strong><br />Yeah. I need to get back into it. So, I bill daily, and this is after I tried a couple of different ways. First, I tried to bill hourly, and that was really bad because it was really stressful being like, \"Okay now. I need to turn off the clock to go eat lunch, and I need to turn off the clock to go to the bathroom.\"</p><p><strong>Shirley Wu:</strong><br />And so, I tried by project, and that was also really bad because projects inevitably balloon and steal more in time. And so, now I just do it by daily, and then I give my clients a rough project estimate, and I say any extra days are an additional charge.</p><p><strong>Joel Hooks:</strong><br />Yeah. How do you find new clients? Where is your work coming from? Like you said, you're getting back into it, so this is probably on your mind even. Where are they coming from? Is it something you seek or are they seeking you out or where are your leads coming from?</p><p><strong>Shirley Wu:</strong><br />Yeah. So, for most of my freelancing I've been really lucky in that they've always found me just because what I've put out there on the internet with my projects or with the conference talks I do. I think the conference talks actually help a lot because it leads to very eventual clients. Not immediate, but people will remember, \"Oh that's what she does.\"</p><p><strong>Shirley Wu:</strong><br />And then when they have a project, they'll think of me. So, most of my leads have been because of putting my work out there and they find me, so I've been lucky in that way. I used to be picky about the projects I take in that I always wanted it to have something that's an interesting technical challenge or an interesting topic.</p><p><strong>Shirley Wu:</strong><br />But in the past year, I've been really trying to figure out what it is that I want to be ... What kind of projects do I want to be working that are meaningful to me. And so, I found that I've become even more picky unfortunately, and so now I'm trying to figure out how to pitch potential clients that I'm really interested in working on. It's very mixed results because it's very hard to pitch someone that has never thought about data visualization and hasn't made any budget for it that they might need, what I want to do for them.</p><p><strong>Joel Hooks:</strong><br />That's interesting though because it's kind of flipping on its head because you'd find whatever the subject matter, people would find you and they would have some result. But instead, you are seeing potential projects in spaces that you are interested in, that you feel passionate about and pitching more services to them. So, it's putting you in a more sales role in some way or something.</p><p><strong>Shirley Wu:</strong><br />Yeah. And that's something that I've been really struggling with, and this is something else that I realized recently, which is that I really can't do all this by myself anymore because I think when I was able to do things with clients coming in, it meant that I was spending most of my time working on the projects, and thus working on billable hours, and there's all these overhead. But it wasn't so bad. It was maybe 30% of my time to talk with potential clients or do the contracts or do the billing, and maybe that was 30, 40% of my time, which is kind of large, but it's doable.</p><p><strong>Shirley Wu:</strong><br />And now that I'm seeing projects that I want to work on, organizations I want to work with, and I have to kind of figure out a pitch for them, it's a lot of time and I don't think I can ... That's what I'm trying to figure out for the new year of really figuring out, maybe a person that I can really work with for that sales part. Yeah.</p><p><strong>Joel Hooks:</strong><br />Yeah. Almost like an agent or a sales person or just somebody to collaborate with to handle and take some of that burden off, so you can think about kind of the core problems that you're interested in, and let somebody that's good at that stuff handle that.</p><p><strong>Shirley Wu:</strong><br />Yeah. I just want to do the creative things.</p><p><strong>Joel Hooks:</strong><br />Yeah. It would be nice. I feel you there. I just want to tinker with code all day, and then you end up ... There's all this other stuff that you end up needing to do just to manage a business, and I feel freelancing, it's puts all this administrative burden on yourself now, right? If you're working for a company, they kind of handle a lot of the administration for you, and the paperwork, and this, that and the other.</p><p><strong>Joel Hooks:</strong><br />But now, you're responsible for it. So, not only do you deal with clients and all this stuff, you end up with dealing with state, and local, and federal taxes-</p><p><strong>Shirley Wu:</strong><br />Oh my god yeah.</p><p><strong>Joel Hooks:</strong><br />... and all that fun stuff. It's a give and take. I think the freedom is ultimately worth it for a lot of people, but at the same time it's like, \"Can you take this and can you handle it?\" I think three years in or four years in now almost, obviously it's setting well with you. You didn't give up your experiment?</p><p><strong>Shirley Wu:</strong><br />No, no. In fact, I'm doubling down on it.</p><p><strong>Joel Hooks:</strong><br />Yeah, yeah. That's what you got to do. Well, I guess it's working out, so now I need to just go full force. That makes sense. But I want to take it back. I want to take it way back, and I want to know how you got into programming computers and technology in general. Where did this start for you?</p><p><strong>Shirley Wu:</strong><br />Oh. Oh wow. If we take it way, way back.</p><p><strong>Joel Hooks:</strong><br />Yeah, all the way.</p><p><strong>Shirley Wu:</strong><br />It when I was 10, I was like, \"I'm going to be a Pixar animator.\"</p><p><strong>Joel Hooks:</strong><br />Oh yeah.</p><p><strong>Shirley Wu:</strong><br />I guess that's the way, way back.</p><p><strong>Joel Hooks:</strong><br />I went to college for that actually.</p><p><strong>Shirley Wu:</strong><br />Really?</p><p><strong>Joel Hooks:</strong><br />That's what my degree is. I didn't make it to Pixar, but that was the goal at the time. It was right when Toy Story came out, and I wanted to be a Pixar animator, so I studied 3D graphics.</p><p><strong>Shirley Wu:</strong><br />That's so cool.</p><p><strong>Joel Hooks:</strong><br />Yeah.</p><p><strong>Shirley Wu:</strong><br />Do you still do that?</p><p><strong>Joel Hooks:</strong><br />No. I ended up doing ... I did forensic animation like death on the highway, car crash stuff for about 13 years, and then I switched to programming because the salary ceiling for that particular career is pretty low. Yeah. So, anyway you wanted to be a Pixar animator.</p><p><strong>Shirley Wu:</strong><br />Oh yes. Yeah. So, I think when I was 10, and then at that time I didn't even know what that means or what that requires. And then I went to middle school, I went to high school, it was on the back of my mind. My high school didn't offer any computer science classes, so I couldn't kind of take that.</p><p><strong>Shirley Wu:</strong><br />In high school, I actually ... I guess I can admit this now because it's a decade later or something. So, in high school I think around my freshman year, my first experience with tech was I think in middle school because we took a computer typing class that taught a little bit of basic web design, and because of that I started designing websites. And my first ever website for myself was freshman year, and I designed a whole website where I would go into IRC and download manga, and then I would upload it to my website and manage it.</p><p><strong>Joel Hooks:</strong><br />I see. You're running a pirate manga site. Is that's what was going on? Nice.</p><p><strong>Shirley Wu:</strong><br />I know. Yeah. That was my very first website, and I did the HTML and CSS, and I was too scared of the JavaScript part because nobody around me coded or anything, so I had nobody to ask for help. Google wasn't a thing, and so I just did the HTML and CSS, and yeah I helped redistribute manga from questionably acquired sources.</p><p><strong>Joel Hooks:</strong><br />You're doing a public service. You're hooking people up.</p><p><strong>Shirley Wu:</strong><br />Yeah. I learned a lot.</p><p><strong>Joel Hooks:</strong><br />So, how did that lead you to being a data visualization expert? What's the leap there? How did you cross that chasm?</p><p><strong>Shirley Wu:</strong><br />Actually, that was the first time I \"publicly admitted\" that I used to redistribute manga. But no, it has absolutely nothing to do with each other I think. Although, I think that interest in web and web design led me to take a web design mini-class in college, and I think that's what ultimately led me to my first job just because I ... Yeah.</p><p><strong>Shirley Wu:</strong><br />So, I think that was when ... My first job was as a front end developer at a big data company, and that was my first year was when D3 was just released, and they just wanted someone to look at it, and so that's how I got into D3, and that's how I was introduced to data visualization, and I didn't even know that was a thing that existed. And that's the kind of thin connection between those two.</p><p><strong>Joel Hooks:</strong><br />Yeah. I think it's great though. Just that introduction. It's like, \"Oh, well, I want to put something out there. I love this stuff.\" And you have the fandom and the desire to share it with others, so you used the tools that you have available to get it out there. I mean, that's really great.</p><p><strong>Shirley Wu:</strong><br />Thank you.</p><p><strong>Joel Hooks:</strong><br />So, what is data visualization? How do you define it or how do you explain it to people? What's the elevator pitch for data visualization?</p><p><strong>Shirley Wu:</strong><br />Oh I don't have a good elevator pitch. It's when you take lots of data, and especially if there's thousands of rows, and it's hard for you to just look in Excel, and you visualize that into some sort of graph or chart, the most simple could be a bar chart or a ... I only condone pie charts in very specific use cases, but some sort of a graph so that you can understand trends within it easier.</p><p><strong>Shirley Wu:</strong><br />So, I think that's kind of my simplified version of explanation of data visualization.</p><p><strong>Joel Hooks:</strong><br />And how did you get into it? You said you left college, you started as a front end developer, you're at a company that dealt with a lot of data and they wanted you to look at D3. So, what kind of work were you doing there, and how did that lead to what you're doing today?</p><p><strong>Shirley Wu:</strong><br />Yeah. So, I think I came into data visualization in a rather untraditional way, but considering how new data visualization is, I think most of us come into it in an untraditional way. So, I started because I think my company just wanted to build some sort of tree, an XML tree into their products, so people could I think edit some sort of an application that they were doing, and so they needed D3 for that.</p><p><strong>Shirley Wu:</strong><br />And once I grasped D3, I was like, \"Oh this is super fun.\" And I got really into it, and I started doing more and more things with D3, and trying to explore more of the library, and at a certain point I got involved with Bay Area D3 user group, which is the meetup group here for D3, and that's when I started meeting other people that were doing similar things because D3 at that time, and still now though. It's such a niche thing that I couldn't find anybody else at my own company to talk about with.</p><p><strong>Shirley Wu:</strong><br />So, I found this kind of community, and there was a really good support group sort of thing, and then that's where I learned that there's so much more to data visualization. First of all, what I was doing was called data visualization, and second of all, there's so much more to data visualization. And so, what I was doing was just the code part, and it was specifically coding for the web, but there is also the design part, and the data analysis, and part a whole industry of data journalism that's about storytelling.</p><p><strong>Shirley Wu:</strong><br />And it was ... Yeah. So, I think that's kind of how I really got into this whole thing of data visualization of being first introduced to such a small part, and then realizing that there's a whole world of it. And it particularly kind of stuck with me because I've always loved math in school, I always loved working with numbers. I loved to code just because I loved the feeling of creating something, and it makes so much sense to me.</p><p><strong>Shirley Wu:</strong><br />The logical part of it just makes a lot of sense to me, and I actually grew up painting for 14 years, and I gave that up in university. And so, I loved the fact that visualization had an artistic design sort of aspect to it.</p><p><strong>Joel Hooks:</strong><br />That was going to be my next question actually because I get the fundamental kind of, \"Here's some data. We need to look at it.\" But then the quality, it's like you got to draw some sort of balance between the art, and the data, and the usefulness of what you're presenting to people.</p><p><strong>Shirley Wu:</strong><br />Yeah, yeah. And I think that balance is sometimes really hard. Well, okay. So, there's what I try to do now, which is that to balance the telling the data or telling a story that's informed by the data versus kind of the more artistic thing, I think there's always attention of how artistic do you go or how creative do you go, so that it catches people's attention versus how much do you restrain that, so that it's easy for people to get what you're trying to say right away?</p><p><strong>Shirley Wu:</strong><br />And I think there's always attention there, and I don't think it's one or the other. I think it's a spectrum, and I think it really depends on what you're trying to do with the piece. So, if you're in the New York Times and you're trying to convince ... Or not convince, but you're trying to tell a story to an audience.</p><p><strong>Shirley Wu:</strong><br />Maybe you don't want something that's super flashy, but then maybe there's ... I always love Giorgia Lupi's work, and she's a data designer in New York City, and she recently released a fashion line around data about three women. About Ada Lovelace, Amanda Jensen, and Rachel Carson, and her work is always so much more on the art side. And it's extremely beautiful, and it takes a lot of time for you to kind of go through and understand the underlying data just because she encodes so much.</p><p><strong>Shirley Wu:</strong><br />It always takes an hour for me to decode it all. But for her, especially for that fashion line, her purpose is art, her purpose is fashion. And so, that's why I think there is a spectrum in which you can slide back and forth.</p><p><strong>Shirley Wu:</strong><br />I think these days to me, how I decide where in that spectrum is always like, \"What do I want for the end user to experience?\" Whereas before when I was just coding and I hadn't thought about the design part years ago, I used to just be like, \"I'm just going to do this for the technical fun of it.\"</p><p><strong>Joel Hooks:</strong><br />Yeah. I mean, I suspect sometimes you want ... If I'm doing some sort of high frequency trading stock dashboard-</p><p><strong>Shirley Wu:</strong><br />Okay. You want-</p><p><strong>Joel Hooks:</strong><br />Look, the point is I want to look at it and I want to know what's going on right now.</p><p><strong>Shirley Wu:</strong><br />Yeah, yeah.</p><p><strong>Joel Hooks:</strong><br />But with a project like you were talking about Giorgia's work where it's more artistic, the data is still there, you want people to figure it out, but you want them to spend time and almost marinate in the data, and can feel what's going on versus instant information. So, there's a huge spectrum in between that as well.</p><p><strong>Shirley Wu:</strong><br />Yeah. And for her, the beauty is the number one thing. And for me, I think I lean more towards the beauty is more ... I like projects where the beauty is the main thing.</p><p><strong>Joel Hooks:</strong><br />And I think regardless, right? It needs to be aesthetically pleasing even if you are talking about a high frequency trading dashboard. People want to look at that, and if you had to stare at this thing all day, it needs to look good, right? You can't just have some sort of bootstrap looking graph.</p><p><strong>Joel Hooks:</strong><br />I guess you can. It depends on the use case. I'm not going to-</p><p><strong>Shirley Wu:</strong><br />I think people are extremely tolerant when they have to do something, and that's their only option. I think people are truly tolerant.</p><p><strong>Joel Hooks:</strong><br />Yeah. They'll take what they can get?</p><p><strong>Shirley Wu:</strong><br />Yeah.</p><p><strong>Joel Hooks:</strong><br />\"That's fine. It works for now.\" So, what do you tell people ... I have to imagine people ask you like, \"How do I get into this? How do I get into data visualization and do this on the job?\" What's your advice and where do you suggest they start?</p><p><strong>Shirley Wu:</strong><br />Oh yeah. And so, actually in the last year, it's great because I now have a very easy answer to this question, which is there is now an organization called Data Visualization Society, and it's got 10,000 members, and a very active Slack with a lot of different channels that discuss different things, and they also kind of try to collect resources for beginners to tell them where to start. And so, they've actually made my job really easy, so I just tell people to go to Data Vis Society, and I'm sure they'll be able to find their way from there.</p><p><strong>Shirley Wu:</strong><br />But what I used to say is I used to ask people like, \"Okay. What is ...\" Even when you say, \"I want to get into data visualization.\" Data visualization, I think of it as multiple different parts. And so, those parts are like data analysis that feeds in, and there's the information design, there's coding on the web or coding I think with Tableau or with any of the other software that's out there, and there's also the storytelling aspect of it.</p><p><strong>Shirley Wu:</strong><br />It's a very wide range that kind of all feeds into data visualization. And so, the first question I always ask is what is your background? Are you already a developer? Are you already a designer? Are you already one of those things or are you coming in completely new?</p><p><strong>Shirley Wu:</strong><br />And the second question I ask is given that background, what is an area that you want to concentrate on first? Because it would be very hard for you to try to tackle all of it first, and so what is the area that you want to get better at first? For most people, I suggest that they try working on the design part first, the information design part first because I think that's the most important thing in making sure that a person creates visualizations that are good.</p><p><strong>Joel Hooks:</strong><br />Yeah. Because information design is the underlying data, right?</p><p><strong>Shirley Wu:</strong><br />Yeah.</p><p><strong>Joel Hooks:</strong><br />Would that be correct? We need to take some raw data and create something useful, otherwise you'll never get to where you want to be. Your end result isn't going to be good.</p><p><strong>Shirley Wu:</strong><br />Yeah. Kind of the whole study of if given this sort of data, what sort of graph should we apply it to feed it into? Or how do we design this thing in such that it makes the most sense to people? Or even just questioning what the purpose of the visualization is? It's kind of the whole design approach, but with a more specific kind of information visualization lens to it.</p><p><strong>Shirley Wu:</strong><br />And so, I usually suggest people to go there, and then from there either if they don't want to code, then maybe they can try out some of the software that's kind of feeds your data in and choose your graph options, or choose different options, and then they can try and cut out the code that way. Or if they do want to code, then here's the list of workshops that are out there or online resources. And if you want to do the data part, here's this list of resources.</p><p><strong>Shirley Wu:</strong><br />So, that's the longer answer to how do I get started with data visualization.</p><p><strong>Joel Hooks:</strong><br />I mean, in some levels you could open Excel and drop your data in there, and start playing ... There's charts and graphs in Excel, and at that point you are visualizing data, and it might not be the artistic expression or really have the ultimate end meeting, but we can start exploring, then we can start exploring data visualization at that level.</p><p><strong>Shirley Wu:</strong><br />Yeah, yeah. You're right. I always forget things.</p><p><strong>Joel Hooks:</strong><br />I think a lot of us do especially if you've been coding a long time, you forget that Excel exists, which is probably the number one coding environment on the planet but lots of people that aren't programmers use Excel and do these kinds of things on a daily basis than it is a programming environment.</p><p><strong>Shirley Wu:</strong><br />Yeah, you're absolutely right. I make the mistake of just trying to use code as my big hammer solution to everything, and I'm trying to get better at that.</p><p><strong>Joel Hooks:</strong><br />Yeah. You and me both. I love it.</p><p><strong>Shirley Wu:</strong><br />Oh, and then I follow up and tell them once you feel like you got good fundaments, then try and figure out a small bite sized chunk project that you can do, that you can apply all those skills to, then go from there. So, that's the end part of the answer to the question.</p><p><strong>Joel Hooks:</strong><br />You see, and just related to that, when people want to learn something or they're trying something new whether it's data visualization or programming computers in general, do people try to attack projects that are maybe too big or too ambitious when we could maybe achieve something if we had a smaller scope?</p><p><strong>Shirley Wu:</strong><br />Yeah, I think so. And I think it's especially easy to do that with data visualization I think because I think if you've never worked on a data visualization project, I think it's hard to grasp all the components that might go into it maybe. Maybe somewhere you could be like ... Especially if they're trying to learn ... Maybe if they're trying to learn the code part especially, they might believe, \"Oh, that bar graph looks really easy to code.\" Or something.</p><p><strong>Shirley Wu:</strong><br />And then five hours in D3 later, they're like, \"Why? This is so complicated.\" And so, I think there is a tendency to get too ambitious because I think people think especially with the data vis environment now having flourished quite a bit with really beautiful examples out there, people might be like, \"Oh if mine doesn't look like that, then it's not worth undertaking.\" So, now start small, just have that backlog of very small projects that you might never publish because you're not proud of it.</p><p><strong>Shirley Wu:</strong><br />But then that's how it gets to the projects that you do feel proud of, that are bigger that you can't publish. I have a lot of projects that I don't even want to publish again.</p><p><strong>Joel Hooks:</strong><br />Yeah. Do you think there's room for ... How much room in the industry is there for more data visualization specialists?</p><p><strong>Shirley Wu:</strong><br />So, I was looking into a podcast that was a year in review kind of round-up of data vis, and the podcast is called Data Stories. It's a very long running podcast in data visualization. And I think the general excitement is that the community feels like it's finally starting to get more mainstream recognition as a kind of ... That data visualization isn't just kind of a skill that's tacked on, but might actually be a whole job function.</p><p><strong>Shirley Wu:</strong><br />And so, I think it's probably getting quite exciting.</p><p><strong>Joel Hooks:</strong><br />So, expanding versus contracting, there's going to be more opportunities? It's viable. It's a viable, viable career becoming more valuable.</p><p><strong>Shirley Wu:</strong><br />Yeah. But I think I'm probably bias and they're bias because we're in the community, and we probably hope that's ... But I think that there's a lot of factors clinging to the fact that it's probably more expanding and will.</p><p><strong>Joel Hooks:</strong><br />I think something you said with the data vis society, right? There's this whole group that's come out to help people learn and grow, and to me that's a very positive indicator in terms of a specialty. You see communities sprouting up around a certain topic, then there's more insurance there to me anyway-</p><p><strong>Shirley Wu:</strong><br />Oh yeah.</p><p><strong>Joel Hooks:</strong><br />... that there's probably more opportunities, right?</p><p><strong>Shirley Wu:</strong><br />And it's grown to 10,000 members in less than a year. So, I think there is really a need and want for it.</p><p><strong>Joel Hooks:</strong><br />How does data visualization relate to generative art? And are they related? And is generative art an interesting path into data visualization?</p><p><strong>Shirley Wu:</strong><br />So, I think it's very similar, and I don't do generative art, so I don't want to be like-</p><p><strong>Joel Hooks:</strong><br />I don't know. I'd argue. I seem some of your stuff. It looks pretty artistic and generative. It's not random. I think that's the difference, right? You're taking data sets versus this idea that we're just going to go random.</p><p><strong>Shirley Wu:</strong><br />Yeah. So, that is the number one difference in my head is that ... Well, I actually think of it as three separate things. There's data visualization, data art, and then generative art. So, data visualization is there's a goal to it. You're taking data and you're trying to communicate something or you're trying to build a tool to help people explore that data.</p><p><strong>Shirley Wu:</strong><br />So, there is a goal, and I think the community usually is much more strict about it. They might be like, \"You shouldn't be here seeing this thing here.\" But then data art is when you take a data set and you're just creating something aesthetically pleasing that you just are trying to enjoy, and I like that one just because I feel like there just isn't as much of an expectation there.</p><p><strong>Shirley Wu:</strong><br />And then generative art is, in my head when it's randomly generated. It doesn't have any data set to it.</p><p><strong>Joel Hooks:</strong><br />And more purely aesthetic maybe?</p><p><strong>Shirley Wu:</strong><br />And very beautiful. Yeah.</p><p><strong>Joel Hooks:</strong><br />Yeah. Well, I mean some of it is, but you know. So, what are you currently working on? What's your tech stack, and what do you like working with?</p><p><strong>Shirley Wu:</strong><br />Well, let me answer what am I currently working with. With this turn of the new year, I'm in this weird place of ... I have to confess, I've always kind of felt really weird being put in a box of being like, \"Oh you do data visualization.\" Of being like, \"Oh Shirley equals data visualization.\"</p><p><strong>Joel Hooks:</strong><br />Like a label, right?</p><p><strong>Shirley Wu:</strong><br />Like a label.</p><p><strong>Joel Hooks:</strong><br />Like a strict label, \"This is what I do. I'm a data visualization professional.\"</p><p><strong>Shirley Wu:</strong><br />Yeah. And I understand that it helps people kind of put the world into order, but it really makes me kind of-</p><p><strong>Joel Hooks:</strong><br />It's limiting.</p><p><strong>Shirley Wu:</strong><br />Unhappy. Yeah. And so, I think what I want to go do more in the future is it involves data, it involves code, it involves visualizing data, but I want to ... It involves I think I want to do more art, but I want to ... What I did at NYU was physical data installation, and one of the things I'm most obsessed with right now is trying to figure out how I can take the visualizations that I do in a browser, and bring it out into the real world, and kind of expand it into the real world all around us, and have it be able to immerse us so that we can feel more of a connection to that data set, and more of a connection to that story.</p><p><strong>Shirley Wu:</strong><br />I've just been kind of frustrated with how little retention there might be if you're just scrolling through a story, even if it's beautifully done, even if the data set is amazing inspirational, the story is great. I think the impact it could have is not as good as, like in a screen, as if you could walk through it, and interact with it with your whole body, and that's the thing I'm really excited about right now. I don't know if that's data visualization, but it's-</p><p><strong>Joel Hooks:</strong><br />It could be. I see that, and there's the physical. We have five senses, right? And when we're looking at the screen, we're really engaging our eyes, and our scroll finger, and even something as engaging ... I love the pudding, right? I love those stories, and I go through them, and then you're doing that.</p><p><strong>Joel Hooks:</strong><br />But what if I can be immersed in that, and I've seen a lot of these. I've seen a lot of these interactive kind of creative spaces whether they're in museums or in projects popping up, and more of that. I think there's augmented reality, and virtual reality, and then the actual physically being there to touch this and interact with it I think is powerful.</p><p><strong>Shirley Wu:</strong><br />Yeah.</p><p><strong>Joel Hooks:</strong><br />And it has a lot of potential. Are you working on something right now or how far into that space have you explored?</p><p><strong>Shirley Wu:</strong><br />I'm taking baby steps in. I just finished something at ITP for my fellowship, and we're kind of doing the write up for that right now, and we're trying to kind of plan the launch of that right now, and it's very interesting. Before \"launching\" a project for me would just be posting the link, and it's just a website, and people can go to it.</p><p><strong>Shirley Wu:</strong><br />But now it's like you have to edit all the footage, and-</p><p><strong>Joel Hooks:</strong><br />It's a whole thing.</p><p><strong>Shirley Wu:</strong><br />Yeah. But it was showcased at the ITP winter show, and it was extremely well received. And so, we want to kind of start pitching it to festivals or kind of like the creative coding festivals or pitching it to some of the art and technology organizations, and seeing if there would be people interested in sponsoring it for kind of like a more refined version too. Some, that's where I'm at, and I still want to create data visualizations, but I want to expand also into this world of trying to tell stories that are meaningful to me and hopefully meaningful to a lot of others in kind of an immersive space. So, that's my goal for the next few years.</p><p><strong>Joel Hooks:</strong><br />I look forward to seeing that-</p><p><strong>Shirley Wu:</strong><br />Thanks so much.</p><p><strong>Joel Hooks:</strong><br />... and seeing what you can come up with. That will be exciting. And I love that. I love the idea of being more interactive, and being more immersed, and I feel you're right on the money in terms of what sticks with you, right? If we engaged with all five of our sense, what can we come away with versus something that we just see and scroll through, and maybe click away or whatever. I think that's interesting.</p><p><strong>Shirley Wu:</strong><br />Yeah. And I really liked what you were saying about ... Yeah. There's a lot of things happening now in museums and stuff that you can experience with your whole being, but I feel like with a lot of those, I think the opportunity for me personally is that for a lot of those, it's not yet data driven. The story might not be as clear. Maybe it's for the aesthetic of it or a lot of places are it's for the Instagram.</p><p><strong>Shirley Wu:</strong><br />But I really want to put in that kind of meaningful data set. I don't know. Yeah. That's my-</p><p><strong>Joel Hooks:</strong><br />Did you happen check out Zero Space when you were in New York?</p><p><strong>Shirley Wu:</strong><br />No.</p><p><strong>Joel Hooks:</strong><br />Have you kind of seen Zero Space? They built it as an immersive art playground, and they kind of took over a whole old building. Joshua Davis had a lot to do with it, but it's more of a psychedelic, kind of an artistic expression versus a data expression. And to me, if you combine something like that with knowledge and, I don't know, the actual data and teaching along with the kind of entertainment value of the art, and kind of the immersive experience, I think there's a lot of room in that particular space.</p><p><strong>Shirley Wu:</strong><br />Yeah. That's the hope, and the other thing I want to figure out this year is trying to figure out how to expand beyond just myself, and working with more people for these bigger production sort of things.</p><p><strong>Joel Hooks:</strong><br />Yeah, that's interesting too, and it's funny because it goes back to freelance, right? Where you are kind of this lone gun, and you're out there, and you have to do everything versus having a team. And that's one of the things that for me, it gets lonely sometimes for me to be a freelancer, and you're working for people with people, but you don't have this consistent team where you have the same vision for multiple years.</p><p><strong>Joel Hooks:</strong><br />And we've built that over the last few years. At egghead, it's been really nice to have this consistent group of people, and you do things, and you expand on what you know, and kind of have a shared vision and outcome, and that's been really good too. But then it brings all sorts of ... You have a bunch of people's interest, and there's all sorts of given and take there too I feel like.</p><p><strong>Shirley Wu:</strong><br />Yeah.</p><p><strong>Joel Hooks:</strong><br />So, are you using Vue? Is that what you use these days?</p><p><strong>Shirley Wu:</strong><br />Yes. My technical stack is D3 is the one that's consistent. I'm now using Vue for kind of my framework, the entire web framework. I'm using GreenSock for animation.</p><p><strong>Joel Hooks:</strong><br />That's awesome.</p><p><strong>Shirley Wu:</strong><br />And I use GreenSock when I have to do those ... We call it scrollytelling when the visualization changes based on your scroll. And so, for that I use GreenSock and this website called Scrollama, which is by Russell from The Pudding. Scrolllama.js. And so, I use those two together.</p><p><strong>Shirley Wu:</strong><br />And so, my tech stack usually is all front end or for the front end part of it is you Vue, D3, GreenSock, Scrollama if I need it, and Lodash.</p><p><strong>Joel Hooks:</strong><br />Are you big explorer of technologies, like when a new framework drops, do you have to get in there and try it out as quickly as possible?</p><p><strong>Shirley Wu:</strong><br />Oh no, no, no. I'm a very late adopter to things. It took me half-a-year of people telling me like, \"Hey Shirley, you should really, really check out Vue.\" I think maybe a year for me to be like, \"Okay. I'll check out Vue.\"</p><p><strong>Shirley Wu:</strong><br />No. I like to kind of get to know something, to take something and then really get to know it, and get very deep with it just because I think I'm actually a very slow learner. And so, for me to learn something new I have to really put in and invest that time. But because of that, I tend to then understand something quite deeply, and so I don't explore new things very often, although when I do see things it would be really helpful for what I do, I do try and go learn it.</p><p><strong>Shirley Wu:</strong><br />So, I went and learned Three.js and WebGL, so that I can think in 3D space, so that I can start thinking about how to think in the physical world, then at NYU I audited physical computations. So, that was like Arduinos, and sensors, and whatever I need for my goal is what I go learn. But I'm too slow to be able to be like, \"Every new thing that comes out I'm going to go try.\"</p><p><strong>Joel Hooks:</strong><br />Yeah. So, what do you love about Vue? What hooked you and caused you to make that choice? If you're making these reasoned responsible decisions, and I totally approve of that. I really think that's ... Become an expert. You have your general career figured out, like specialization and using the tools that you know is really quite a good thing. But I'm curious about what it is you love about Vue, and what keeps you sticking with that tool.</p><p><strong>Shirley Wu:</strong><br />Because we first met at React Rally, huh?</p><p><strong>Joel Hooks:</strong><br />We did.</p><p><strong>Shirley Wu:</strong><br />I still really loved that community.</p><p><strong>Joel Hooks:</strong><br />Yeah, yeah. Me too.</p><p><strong>Shirley Wu:</strong><br />The thing that got me to switch from React to Vue was really two main reasons, and those two reasons are both because I think it plays much more nicely with D3, and what I need to do with data visualization. And so, the first reason is because of their reactivity system. I haven't looked at React since ... I mean March of 2018, so I'm sure React changes all the time, so maybe they already have this.</p><p><strong>Shirley Wu:</strong><br />But Vue's reactivity system when I first looked at it, it just made a lot of sense to me because it meant that every time a user manipulated the data, the underlying data or edited it, I don't need to go and write anything to hook that up, and I can just listen for those changes in the templates. If I just tell it like, \"I want this SVG element to use this data.\" I don't have to then be like, \"Okay. When this data changes, update it.\" It would just automatically update it for me.</p><p><strong>Shirley Wu:</strong><br />So, from that perspective it saves me a lot of, a lot of lines of code just because having a system that helps me manage those data updates and makes it as easy as possible for me is a huge thing for when I'm doing data visualization. And the second reason is because Vue unlike React at the time, Vue treats animations as a first class citizen. I don't know if that's because Sarah is on the core team, but it has such good GreenSock support.</p><p><strong>Shirley Wu:</strong><br />And even without GreenSock, it's very much built in. And so, again with data visualization, animation is huge.</p><p><strong>Joel Hooks:</strong><br />Yeah. Absolutely.</p><p><strong>Shirley Wu:</strong><br />And so, having that support in Vue just made things so much easier whereas before with React, I really had to fight React for any of my visualizations to do any sort of animations.</p><p><strong>Joel Hooks:</strong><br />Yeah. So, Vue, it's just friendlier for data visualization, and your work flow is that you're doing in D3 and the entire stack of tools that you're using right now to do what you do. It just makes it easier.</p><p><strong>Shirley Wu:</strong><br />Yeah.</p><p><strong>Joel Hooks:</strong><br />That makes sense. Why is D3, why does it have this reputation as being so challenging? What's the deal and why are people scared of D3, and should they be? Not scared of it, it doesn't literally cause fear, but you know what I mean.</p><p><strong>Shirley Wu:</strong><br />Yeah. I get what you mean, and I've had brilliant programmers tell me that they're scared of D3, and I think for me I got into D3 before I knew any other JavaScript libraries. So, I was like, \"Oh I guess this must be how things work.\"</p><p><strong>Joel Hooks:</strong><br />I think they call it Stockholm Syndrome. I don't know. No.</p><p><strong>Shirley Wu:</strong><br />Yeah, yeah, yeah. And I didn't know that's how things worked, but I think that's precisely where the challenge of it is, is that it's structured. The way that you have to think about D3 is so different from a lot of the other JavaScript libraries out there that people have already become so familiar with, and I really think it's that kind of mental shift that you have to do. I think that's the challenging part.</p><p><strong>Shirley Wu:</strong><br />But other than that, I think once you ... I would say there's a learning curve at the very beginning where have to get over the mental kind of gymnastics that is the core enter update exit pattern, and then after that a lot of things. Basically, they're I think selection and data binding. That core kind of part, and then after that everything else in the library, most of them make a lot of sense.</p><p><strong>Shirley Wu:</strong><br />But I've also been teaching D3 as a ... If you're already a front end developer, if you're already familiar with React or Vue, the way D3's enter update exit pattern works is essentially how Vue and React ... Not in implementation, but conceptually how it's working underneath the hood. So, if you replace that part where I think a lot of programmers find a little bit challenging in D3, the selection, data binding, enter update exit, if you replace that with Vue or React, D3 actually gets very easy to work with because D3 is very largely modular.</p><p><strong>Shirley Wu:</strong><br />And so, you can then think of D3 as your tool to help you kind of calculate when you take data, and you want to calculate that into a tree layout or a force diagram or something. You can just pick and choose parts of the D3 library and just use that.</p><p><strong>Joel Hooks:</strong><br />So, you're using it like an engine, and you're feeding it data and getting some sort of transformed data back that you can use with Vue or React or whatever to present that data. So, it's not necessarily can be, but it's not necessarily the presentation layer? Is that fair?</p><p><strong>Shirley Wu:</strong><br />Yeah. Yes.</p><p><strong>Joel Hooks:</strong><br />Is this true that maybe people also have used D3 in the past and having used it like what I'll say modern D3, right? Because it's improved over the years, right? Like version four felt like it was a huge improvement over three, API-wise in terms of learning and the community is grown over the years?</p><p><strong>Shirley Wu:</strong><br />Oh yeah. I think there was definitely a bit more ... I think the core concepts have remained the same over version three, four. Three to four was a really big step, but even then I think the core parts of it have remained the same or have remained similar. There was big change there, but I think now it's probably much friendlier to get into.</p><p><strong>Joel Hooks:</strong><br />It felt friendlier. That was the world that I had in my head actually was that it just feels friendlier, and I don't know if that's ... The community reaching a tipping point, critical mass, documentation, tutorials, courses, there's all these books, there's all this stuff that's come out of it over the years.</p><p><strong>Joel Hooks:</strong><br />So, now if you came into it earlier years ago, and they're like, \"Oh no. That's not for me.\" Maybe now is the time to come back and give it another try. I'm going to plug your courses because you have some very excellent courses on front end masters, and I think-</p><p><strong>Shirley Wu:</strong><br />Thank you so much.</p><p><strong>Joel Hooks:</strong><br />... you did mention that when I asked where should people go to learn data visualization, your courses are actually a really good spot to do that no doubt.</p><p><strong>Shirley Wu:</strong><br />Thank you so much.</p><p><strong>Joel Hooks:</strong><br />Masters are set for them. Totally worth your time to watch that if you're interested in these topics and want to learn more directly from Shirley. Shirley, thank you so much. I really appreciate you taking the time out of your day-</p><p><strong>Shirley Wu:</strong><br />Thank you.</p><p><strong>Joel Hooks:</strong><br />... to have this conversation, and I look forward to taking to you soon.</p><p><strong>Shirley Wu:</strong><br />Definitely. Thank you so much Joel.</p>",
    "slug": "how-shirley-wu-built-a-career-as-a-freelance-data-visualizer",
    "description": "<p>Shirley Wu is a freelance data visualization expert. Data visualization, at its core, is when you take lots of data, and it's hard for you to look in Excel. You visualize that into some graph or chart, and the most simple could be a bar chart or some graph so that you can understand trends within it easier. </p><p>In data visualization, there is an entire spectrum of approaches you can take with a dataset. You have to decide on the balance between art and the data. With clients, choosing where in that spectrum is asking yourself, \"What do I want for the end-user to experience?\" The difference between a purely artistic piece and a visualization is that with data visualization, there's a goal to it. You're taking data, and you're trying to communicate something, or you're trying to build a tool to help people explore that data.  </p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/how-shirley-wu-built-a-career-as-a-freelance-data-visualizer/transcript\">\"How Shirley Wu Built A Career As A Freelance Data Visualizer\" Transcript</a></p><h3>Resources</h3><ul><li><a href=\"https://www.datavisualizationsociety.com/\">Data Visualization Society</a></li><li><a href=\"https://datastori.es/\">Data Stories Podcast</a></li><li><a href=\"https://russellgoldenberg.github.io/scrollama/basic/\">scrollama.js</a></li><li><a href=\"https://greensock.com/\">GreenSock</a></li></ul><h3>Shirley Wu</h3><ul><li><a href=\"https://twitter.com/sxywu?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor\">Twitter</a></li><li><a href=\"https://github.com/sxywu\">Github</a></li><li><a href=\"https://www.youtube.com/channel/UC4yYE5Qo1cOMeeALjvRDxYw\">YouTube</a></li><li><a href=\"https://sxywu.com/\">Website</a></li><li><a href=\"https://medium.com/@sxywu\">Medium</a></li><li><a href=\"https://www.linkedin.com/in/shirleyxywu\">LinkedIn</a></li><li><a href=\"https://frontendmasters.com/teachers/shirley-wu/\">Frontend Masters</a></li></ul><h3>Joel Hooks</h3><ul><li><a href=\"https://twitter.com/jhooks\">Twitter</a></li><li><a href=\"https://joelhooks.com/\">Website</a></li></ul>",
    "duration": 3032,
    "episode_number": 67,
    "contributors": [
      "Joel Hooks"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/4g3ve",
    "path": "/podcasts/how-shirley-wu-built-a-career-as-a-freelance-data-visualizer",
    "published_at": "March 13th, 2020",
    "url": "https://egghead.io/api/v1/podcasts/how-shirley-wu-built-a-career-as-a-freelance-data-visualizer",
    "edit_podcast_url": "https://egghead.io/podcasts/how-shirley-wu-built-a-career-as-a-freelance-data-visualizer/edit"
  },
  {
    "id": "podcasts-00000000000000000305",
    "title": "How Courtland Allen Grew Indie Hackers with Content, Consistency, and Community",
    "summary": "Courtland Allen, the founder of indiehackers.com, chats with Joel about what defines an Indie Hacker, how he started his website, community building, the influence of revenue, and the subtle ways that you can lose your independency.",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/f8418e0e-b522-4d5d-a8ae-77d6d0a67ebb/courtland-allen-podcast-edited_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/e21d35da-a28e-4f59-97cc-3c82e6b81011/fea98f8f-ba8e-4018-8284-578ea0dbfa3a/logo.jpg",
    "simplecast_uid": "f8418e0e-b522-4d5d-a8ae-77d6d0a67ebb",
    "transcript": "<p><strong>Joel Hooks:</strong><br />Hi, Courtland.</p><p><strong>Courtland Allen:</strong><br />Hey, what's up, Joel?</p><p><strong>Joel Hooks:</strong><br />Oh, living the dream. How about you?</p><p><strong>Courtland Allen:</strong><br />Doing the same thing. I wonder if we're living the same dream.</p><p><strong>Joel Hooks:</strong><br />Probably not. I think we're probably in alternate timelines. I don't know.</p><p><strong>Courtland Allen:</strong><br />We could be incepeted right now.</p><p><strong>Joel Hooks:</strong><br />It's true. So, I have a question. What is an indie hacker?</p><p><strong>Courtland Allen:</strong><br />That's a great question. An indie hacker is basically somebody who's decided to take an alternate path, besides working for the man, and basically make enough money to give them some form of freedom. Generally speaking, indie hackers care a lot about freedom, that's financial freedom, the creative freedom to work on whatever they want, the temporal freedom to work at whatever time they have the energy, or whenever they feel comfortable working. The location freedom to work from wherever they want.</p><p><strong>Courtland Allen:</strong><br />So, typically, indie hackers are developers building online businesses, but I've interviewed a lot of indie hackers who are not that exact profile. I think the main point of being an indie hacker is that you are working for your freedom. You're working for your independence, hence indie.</p><p><strong>Joel Hooks:</strong><br />Yeah, you don't want to be tied to somebody else's cart, I guess. You're out there going it on your own, kind of an entrepreneur, too. I think that's the gist of it, right? We're out there trying to build businesses and create something that we can rely on for our own incomes and kind of sustainable lifestyle.</p><p><strong>Courtland Allen:</strong><br />It's a fancy term for entrepreneur. You figured me out.</p><p><strong>Joel Hooks:</strong><br />Yeah, so you run a website, indiehackers.com, as it happens, and what is that? What is indiehackers.com? We talk about an indie hacker, what that person is, but what is indiehackers.com?</p><p><strong>Courtland Allen:</strong><br />Indiehackers.com is sort of the embodiment of a community of these individual indie hackers. And, it's actually several different things, but I think community is sort of the best way to describe it, because really the idea is it's people helping people. It's not me teaching people how to be indie hackers. There's no courses that you sign up for. It's more so the community of indie hackers themselves sharing their stories, sharing their learnings, sharing their milestones and accomplishments, asking each other questions, so that each one of them can help the others like them basically follow in their footsteps, and run these profitable online businesses, and achieve whatever form of freedom they want.</p><p><strong>Courtland Allen:</strong><br />The website is a good way to get to the podcast and some of these text interviews I do on the website, but it's mainly just a community forum. So, you go on the website. You see there's different groups for podcasters, or for developers or for no-code makers or for digital nomads. And, just thousands and thousands of questions that people are asking, and also pages that people can create for the products and services that they're working on, where they can share their milestones, and others can congratulate them and say, \"That's awesome,\" or ask some questions, \"How'd you do that?\" And learn how to do the same thing themselves.</p><p><strong>Joel Hooks:</strong><br />And was there nothing similar online? Why did you start Indie Hackers? Why was that a project for you?</p><p><strong>Courtland Allen:</strong><br />It's changed a lot since I started it. It was initially kind of ... There were similar things that just weren't that good. So, I wanted to start a business of my own. I wanted to be an indie hacker. I didn't want to raise a ton of money. I live in San Francisco. I did Y Combinator eight years ago. I've been very heavily situated inside of this high growth, VC funded startup milieu, but I never really loved that approach. It doesn't really resonate with me. And so, I was looking for a way to just build a business that would make enough money for me to do what I was saying. I'd gain all these sorts of freedom, and then figure out what I would do from there, or maybe just keep running that business.</p><p><strong>Courtland Allen:</strong><br />But, I couldn't find a good place online to learn how to do this. Most people doing this aren't front page news and not in Tech Crunch, so you kind of have to dig to find good examples. And this is 2016, and the best place that I knew was Hacker News. So, in Hacker News, it's also a forum for tech people, a ton of posts would get made, usually once a month, where hundreds of people would comment and basically share like, \"Oh, how are you building your one person SaaS business?\" Or, \"How are you making a profit from your side projects?\"</p><p><strong>Courtland Allen:</strong><br />And my strategy or my goal really, was just to read a bunch of these comments and stories that people shared, and hopefully, discern some sort of method to the madness and recognize a pattern and figure out what I was going to do. And in a very meta sort of way, while I was reading that, that actually happened. But, what I figured was that, \"Hey, there's lots of other people doing exactly what I'm doing, but this forum factor is really crappy. These stories are often missing a lot of crucial information. People are always asking for revenue numbers, or strategies, or tactics, or proof, and it's just not there. And I could do a much better version of this that's actually tailor made for the people who are just like me, trying to figure this out. I can make sure I interview people, rather than just have people impromptu share stories, so I can ask them the right questions, get the right information in there. Sort of filter and make sure only good stories are in there, and turn it into something.\"</p><p><strong>Courtland Allen:</strong><br />So, that's what I did. Took about three weeks to go from just having that kind of idea, sort of flash of insight. But it wasn't a flash of insight. It was three days of just hardcore research and just thinking, and a bunch of other bad ideas, that I decided not to go with before I had that one. But, three weeks between then and launching it.</p><p><strong>Courtland Allen:</strong><br />And then, for the first two months, Indie Hackers was nothing but just a blog. I would interview people. They would come on, they'd share their numbers. People could jump in the comments and answer questions. And over the next six months or so, I added the podcast, I created the community forum. We started doing in-person meetups, et cetera, et cetera. So, it didn't really become a community until I'd been working on it for six or eight months.</p><p><strong>Joel Hooks:</strong><br />So, it's kind of an alternate to Hacker News, which still goes today and is, I don't know. Some people don't like it. Right? It kind of has a reputation. It's very venture capital focused, which makes sense, just from kind of where it spawned from. So, you build Indie Hackers, and when did you reach critical mass? Because, creating a community is non-trivial, you can't manage a community into existence. So, how do you as an individual foster that and grow it? Is it just kind of sticking with it, or just showing up, or how did you build a community?</p><p><strong>Courtland Allen:</strong><br />Yeah, it's a lot of things. So, when I first started it, I knew that I eventually wanted it to become a community. My biggest inspiration was this other website called Nomad List, started by Peter Levels, and I could see him in all those comments on Hacker News, basically sharing the exact set of steps that he went through to build his community for digital nomads, and I was kind of following that playbook. And so it was like, \"Okay, first I'll produce super helpful content that will be useful to people like me. I'll sort of parlay that into a mailing list, and once I'm able to reach people on a routine, weekly basis, then essentially I'll keep doing these interviews, but then I'll work on a community aspect,\" which for me was going to be an online forum which I built from scratch.</p><p><strong>Courtland Allen:</strong><br />And like you said, you can't just manage it into existence. The first few months really was just empty. It was me doing kind of the Reddit strategy, making a bunch of fake accounts, asking myself questions, talking to myself, and then sending out these discussions in my weekly news letter, alongside the interviews that I was doing. And people really came for the interviews, but every now and then, they would look at these discussions happening on this sort of makeshift forum, which there weren't very many at that time, and it was all just me, and they would jump in. And I would find myself talking to a real person on the internet. And then at some point, I remember the first day I saw two people talking to each other on the forum, and then one of them left and it went back to one.</p><p><strong>Courtland Allen:</strong><br />So, it was just week after week of me making posts and questions, and try to start discussions and sending them out, and eventually more and more people joining. And, I don't think it hit any point that you could consider critical mass until maybe, God, it had to be about a year. Maybe a little less than a year after I started it, where I and longer had to make any posts. I could go away for weeks or months at a time and the forum would sustain itself. That was kind of the basic strategy, of just me making tons of posts. Me having some other sort of method to get people in the door, which is the interviews and the mailing list, and to constantly promote the forum and the community to those people.</p><p><strong>Courtland Allen:</strong><br />And then, since then there's been a bunch of different tweaks to get it to grow faster, to make it more meaningful, to make it more valuable. For example, the forum was never the home page of Indie Hackers the first year and a half. It was kind of buried on this other link you had to click, that said forum. And in January of last year, 2018, I switched it up. So, when you go to indiehackers.com, the forum is front and center. The interviews, you have to click to go to those, now. The forum is the primary thing. And that led to a huge spike in usership, and user base, and just people actually making posts.</p><p><strong>Courtland Allen:</strong><br />We did sort of a product help launch at that time, for the forum as well. So, the forum had been around for a year and a half before we launched it on Product Hunt. That basically caused kind of a step change in the number of people using it, although there were some negative side effects with that. And, also I kind of tweaked the algorithm to make the forum sort of rotate a little bit faster. So, at first basically, I was very concerned with the fact that most forum posts weren't that good. So, you'd go to the website, you'd look at the forum, and right at the top, there'd be kind of a crappy question that doesn't make any sense. So, a weird advertisement that someone posted. I'd just be kind of embarrassed about it, and wanted to showcase the best posts.</p><p><strong>Courtland Allen:</strong><br />So, I made sure the algorithm would basically keep the best posts that had the most comments and the most views at the top of the forum for a very long time, and eventually I realized that it's actually having the opposite of the intended effect that I wanted, which is people to sort of form a habit, to come check the forum and ask questions there and get help from others. I wanted people to come roughly daily, or at least once or twice a week, but if I kept the same post at the top of the forum for multiple days, what happened is, somebody would check the forum, they would see that post and they'd be like, \"Oh, I've seen that already. Let me come back tomorrow.\" And they'd come back tomorrow, and then it'd be the same post at the top of the forum. And so, they would automatically assume-</p><p><strong>Joel Hooks:</strong><br />It's dead.</p><p><strong>Courtland Allen:</strong><br />Yeah, exactly. So they would just stop coming. And they'd be, \"Oh, let me adjust my frequency of visiting to once a week, or once a month, since it doesn't update that often.\" So, I made a kind of a tweak also early last year, to make sure the forum moves a lot faster. And that was a pretty dramatic change to how many people started making posts and asking questions, and helping others.</p><p><strong>Joel Hooks:</strong><br />So, you get the quality, but you get the rotation, so it's fresh and people can come back and be interested and engaged, and participate?</p><p><strong>Courtland Allen:</strong><br />Exactly. And, I think the quality is very directly linked to the quantity. Essentially, if you take the top 1% of a hundred forum posts, that's only going to be one great post. But, if you have a thousand people making posts, and you get the top 1% of that, you're going to have 10 great posts at the top of the forum. And so, it's really important to have a lot of people making posts, and then just servicing the best ones.</p><p><strong>Joel Hooks:</strong><br />So, this started out, I assume as a business idea. You wanted to create this community and monetize it in some way. People are always using that word. How are you going to monetize this? What was the plan initially to make money, and make this sustainable for yourself?</p><p><strong>Courtland Allen:</strong><br />Yeah, I had two options that I was looking at initially. I ended up only doing one of them. So, the first option that I didn't go with, was to actually charge money to be a part of the community. Figured I'd keep it free for a while, and then after it hit some sort of critical mass, and it was super valuable and people liked it, I would charge, I don't know, 100 bucks a year. Something, to be a community member. And that would sort of double as a way to also clean up the proven spam, because spammers' not going to pay a hundred bucks a year to join your community and post spam.</p><p><strong>Courtland Allen:</strong><br />I never ended up doing that. What I ended up doing instead, and was kind of my plan to start with, was sponsorships. And so, Indie Hackers basically attracted an audience of developers and entrepreneurs who are pretty lucrative to advertise to. And who are ambitious, who generally have a decent amount of money to spend, and who are willing to spend that money to make whatever dream they're chasing become a reality. And so, I had advertisers on the podcast, and on the email newsletter, and also advertisers who would do interviews basically, and pay for those interview slots, basically sustaining the business.</p><p><strong>Courtland Allen:</strong><br />So, and around March of 2017, which is eight months after I started Indie Hackers, I think I did $7,000 in revenue, and it was 90% advertising and then 10% affiliate links and random other stuff that I played around with, donations, et cetera.</p><p><strong>Joel Hooks:</strong><br />And is that still what you do today?</p><p><strong>Courtland Allen:</strong><br />Nope. So, basically what happened is, right after I got to the point where I could sustain my life, or after I basically hit that point of freedom and I could pay for my rent, and my food, et cetera, I was making seven grand, feeling pretty good about it, I got an email from Patrick Collison, CEO of Stripe. And he's like, \"Hey, can we buy Indie Hackers? You open to being acquired?\" And that was so far beyond my radar of what I even thought was possible. I never even considered getting acquired. I never considered raising money, because it's Indie Hackers. It's all about being indie.</p><p><strong>Courtland Allen:</strong><br />But, I talked to him, and we met, and I think our end just aligned in three ways. Number one, my mission and what I wanted Indie Hackers to do, not just for myself in terms of my own freedom, but for others and helping others achieve things, Stripe was perfectly aligned on that. For Stripe, they actually make more money as a company if more people are starting businesses, so they really like Indie Hackers because it inspires people to start companies, when they read each others' stories.</p><p><strong>Courtland Allen:</strong><br />Number two, I think for the people on Indie Hackers, they're just going to be better off if I'm not spending half my week trying to sell ads. Selling ads didn't make the website any better for them, so I figured if I had full time sort of availability just to make the website and the community better, it'd be a win for them. And financially, it's also a big win for myself. I didn't really like spending that much time selling ads either. I'd grown the revenue to about 7K, but there're definite limits where I was going to have to figure other things out. And I was in the middle of searching for a better business model at the time when Patrick emailed me.</p><p><strong>Courtland Allen:</strong><br />So, about a month later, I joined Stripe. I've been working on Indie Hackers at Stripe, sort of an independent team for the last two and a half years, and we immediately shut down all sort of revenue generating activity for Indie Hackers. It doesn't make a dime. All it does is, basically it attempts to help founders help each other.</p><p><strong>Joel Hooks:</strong><br />And you're still there. I think that's a testament to Stripe and this process, because a lot of times when something's acquired and it requires the founder to go along with the entity, a year later or whatever, you'll see them leave. But you're still there.</p><p><strong>Courtland Allen:</strong><br />Totally.</p><p><strong>Joel Hooks:</strong><br />Yeah.</p><p><strong>Courtland Allen:</strong><br />Yeah, and I'm still there totally because I like working at Indie Hackers, and my lifestyle hasn't changed that much. It's not like I have some sort of golden handcuffs where I can't leave, but the second I get this financial windfall, I'm out. I think you're dead on it. It's a testament to how Stripe has run things, and really just wanting to nurture the community, and having these aligned incentives. Because, I think if you start something where your incentives are misaligned with someone else's, even if it's only by one or two degrees in the beginning, that widens into a pretty huge gap later on. And we're perfectly aligned. So, I don't see myself leaving Stripe anytime soon.</p><p><strong>Joel Hooks:</strong><br />How has the pressure, the lack of pressure to monetize this thing affected your priorities, and how you work, and how Indie Hackers has grown since Stripe came into the picture?</p><p><strong>Courtland Allen:</strong><br />It's good and bad. I think sometimes you need that external pressure to constrain what you can do. A good example would be, before I started Indie Hackers, I basically quit my job as a contractor and I had a year of runway. I spent the first six months of that just messing around, doing ... I don't know, working on terrible things that I should not have been working on, just wasting time. And then I looked up, and six months had gone by, and my bank account was depleted by half and I'd made zero progress. And I was like, \"Oh, shit. I need to actually do something.\" And so, having that financial pressure was kind of like a forcing function for starting something that would actually work, and having much more discipline.</p><p><strong>Courtland Allen:</strong><br />And I think also while I was running Indie Hackers, it was the same thing. I've got to make enough money to pay my rent, so, I need to actually do a good job growing the community, et cetera. The second you take away that pressure, this happens to a lot of companies that raise money, or you get acquired, and the acquirer's sort of funding you, you don't have that pressure. You don't have any sort of driving do or die pressure, to make you make the best decisions. And so I think that for a good while in the beginning, I was just doing way too many things. I tried doing everything, and I didn't have really any sort of signal to say, \"Oh, this is a bad thing to do,\" because I could just do it.</p><p><strong>Courtland Allen:</strong><br />Nowadays, I'm a lot more focused on very specific things that I want to grow and do better at but, so I think it's a double edge sword. I think the pressure you can have, or the incentive you can have to do the right things when you have revenue pressure is good, but also the time that I have to focus on things that aren't necessarily profitable, but are still really helpful to people nowadays is super cool, and I think I can do some things that a lot of other legitimate businesses can't do, because they need everything to be profitable. Or, most things at least.</p><p><strong>Joel Hooks:</strong><br />Yeah, I can see where you'd lose ... I guess it's like hustle, right? If you have to hustle and you're trying to survive, and then it's your brain's in one mode and then if not, then you're in another. And you end up needing to be more disciplined maybe.</p><p><strong>Courtland Allen:</strong><br />Yep, totally.</p><p><strong>Joel Hooks:</strong><br />How has working on Indie Hackers and being part of this community changed your overall perspective, if it has?</p><p><strong>Courtland Allen:</strong><br />Yeah, it's changed me a lot. I think before working on Indie Hackers, I didn't know anything about business. I knew a lot about being a developer. I knew how to write JavaScript. I knew some backend stuff, and deploying code on servers, and knew a lot about being a designer. But, I think one of my goals when I started Indie Hackers was to learn more about the other side of things. I mean, you've got a lot of developers that you work with. I'm sure you learn a lot from them. You've got a podcast. I'm sure you learn a lot from your podcast guests. With Indie Hackers, most of what I do is I just meet people, and I interview them, and I talk to them.</p><p><strong>Courtland Allen:</strong><br />And when you talk to thousands of people, you start to recognize patterns, and like, \"Okay, what's successful for them? What's not successful for them?\" In a way that I think it's harder to do if you're sort of an individual contributor, working a job where you become a super expert at what it is you're doing, but you never really come up for air and see the whole picture. So, I think working at Indie Hackers has taught me a lot of practical advice about starting companies. I think also, it's given me a lot more respect for inspiration. I'd always treated inspiration before Indie Hackers as just one of these fluffy words that doesn't matter that much, but it's been pretty amazing to see that the course of someone's entire life will often change, because they read a story about something else that somebody else did. And that, that can happen at scale with literally hundreds of thousands of people whose lives are like irrevocably changed because they read a story.</p><p><strong>Courtland Allen:</strong><br />So, I think a lot about the mechanism behind inspiration, why it's valuable, how it works, and I think it's one of those things that I'm probably never going to let go of. It's probably going to affect everything I do in the future.</p><p><strong>Joel Hooks:</strong><br />Yeah, so you mentioned patterns and that you've seen these recurring patterns, when people were trying to become Indie Hackers, or start their own thing. What are some that stand out to you as maybe outliers that occur more than other things? What are some of the patterns that you've noticed?</p><p><strong>Courtland Allen:</strong><br />A big one is the prevalence of education based businesses, one of which you run, with egghead. There's kind of this common wisdom that if you're starting a business, you really need to target other businesses, because they have the money, they're the best customers. And there's a lot of truth there. I've done a few analysis of all the different products that people have posted about on Indie Hackers, and I think the B2B businesses make something like two or three times as much money as the B2C businesses. But, I don't think that's because selling to consumers doesn't work. I think that's because consumers just buy very different things than businesses.</p><p><strong>Courtland Allen:</strong><br />And one of the things that consumers are really happy to invest meaningful amounts of money into is education. They can see a way that they can make their life better in the future. Some goal they want to achieve. Others, it's a better job, or a better life, or more fame, or something. People are more than happy to pay 50 grand a year to go to a college, to teach them that, or to pay hundreds of thousands of dollars for courses that actually help them. And so, education has been just a super consistent trend that I've seen for people who want to help other people, and actually make a living and get paid doing it.</p><p><strong>Courtland Allen:</strong><br />And I think it's interesting to me, how different a lot of these education businesses look. You kind of think about education, you think classrooms. You think courses or videos, which granted, works very well. But, there's also people educating others by interviewing them on podcasts, by writing up their thoughts in a newsletter or a blog. Ben Thompson from Stratechery is a really good example. He's just been blogging three or four times a week, for the last eight years or something. And I think the last time he publicly released his numbers, he had 10,000 subscribers or something who were paying him a hundred bucks a year. So he's making a million dollars a year just blogging, and teaching people about the tech industry and the different trends. And I've heard through the grapevine that he's making more than 10 times that now, which is an absolutely insane number. So, that's a good example of someone who's educating, and doing what he loves, and also helping others and making a killing. Which is kind of like the fully, what is that, three things, four things? Trifecta of what you want I think, as an indie hacker.</p><p><strong>Courtland Allen:</strong><br />Some other trends I've seen, I think being thoughtful about what you build is worth its weight in gold, especially if you're new. I think if you're more experienced and you've been through the ringer, you don't necessarily have to be as thoughtful up front about what you're building, because you've internalized a lot of these lessons at a subconscious level. You're like, \"I'm never going to work on a business I don't like again.\" Or, \"I'm never going to work on something out of my personal interest zone again.\" And then you make better decisions.</p><p><strong>Courtland Allen:</strong><br />But, for a lot of people who are newer, who don't have this intuition built up from starting and failing things a bunch of times, I think it's they tend to fare a lot better if they're really thoughtful up front about their business, and if they can just sort of trust that the lessons that others have learned, that they've read about are true, rather than just kind of following their own blind intuition up front, and saying, \"This failed for everybody else, but it's going to work for me.\" And so there's just a lot of lessons there about picking a market that actually has money, for example. Or, starting by analyzing what you're good at and what people are willing to buy, rather than just building a solution and going in search of people who are going to use it, which is usually kind of a sure fire way to fail.</p><p><strong>Courtland Allen:</strong><br />Building an MVP, even though you might want to build the biggest, craziest thing right up front, and spend 12 months building it and then unveil it to the world. That's the intuitive approach to take, but I think the more practiced, studied approach if you read a lot of what others have done and what's worked for them is to start small, which you did with egghead.</p><p><strong>Joel Hooks:</strong><br />Yeah.</p><p><strong>Courtland Allen:</strong><br />And I like telling people your story about how you basically found another guy's videos on YouTube and his email list, and that's how you sort of validated the idea that you could sell these courses, and that didn't stop you from building something that's bigger and more meaningful later on. And I think that's a hard lesson for a lot of people to internalize, unless they've been bitten by that themselves. So, that's just a few of the patterns that I've seen, that have worked.</p><p><strong>Joel Hooks:</strong><br />I think that once you get experience, you have what we pretty commonly refer to as wisdom, but when you are lacking experience, the thoughtfulness is relying on other people's wisdom to some extent. You are always going to have to make your own decisions, but for me, I didn't know what I was doing so, I read the best books, I find the best mentors, and usually I'm paying them, right? Taking courses myself. It's Amy Hoy, other folks that I looked up to, and were able to supply me with their wisdom, that I'm able to roll in. Because, it's floundering around, but I can look at people that I admire and aspire to be like, and kind of mimic them in my own way. And that was huge for me, and as I've gone, now I have my own ideas and my own wisdom, based on my experience. But when you're just starting, they don't have that. Then how are you going to learn?</p><p><strong>Courtland Allen:</strong><br />I think it's just tough for a lot of people to learn from other people. It's so, when you learn from your own experience, it's so-</p><p><strong>Joel Hooks:</strong><br />Ironic, right?</p><p><strong>Courtland Allen:</strong><br />Yeah, it's ironic. Because, if you learn from your own experience, it's just so real. You never forget the lessons you've learned by getting burned yourself, but it's obviously a pretty terrible way to go through life, only learning lessons the hard way, and never picking up a book or having a mentor, or taking a course or a class, or something. So, I think a lot of being a founder, especially if you're new, is just getting over that hurdle and not sort of becoming a slave to your intuition where you don't really have the experience to have a good intuition for things.</p><p><strong>Joel Hooks:</strong><br />It's interesting, because there's a balance too, and something I fell in is like, \"I'm going to get all the books, and I'm going to read this entire stack of books before I do anything.\" And I started out that way, and I still love the books, and I still buy them and read them when I can, but I'm not as reliant on having to know everything, everything being perfect. So, what's the balance of my personal knowledge versus actually doing something, so I can learn as well. I think a lot of times, failure is part of the process, and it feels like, and I've seen this, maybe it's a trope, that you have to fail and fail fast. And I'm wondering, is that something we have to do? Do we have to go through this failures to get to success?</p><p><strong>Courtland Allen:</strong><br />I have a lot to say about this, and what you said earlier, so the whole process first of just being stuck in a reading and learning phase, and feeling like you're never going to get out, and you can't start because you don't know everything, is super real. It happens to a lot of people. I think to some extent, the more you read, and the more you listen to podcasts like this, and the more you learn from others, the more you realize that you don't know. And the more paralyzing it can be. I have kind of a trick for this, which is to just write down what I've learned.</p><p><strong>Courtland Allen:</strong><br />So, if I'm going into a new field, I did this before I started Indie Hackers, and I was sort of reading all these stories. I was just writing down lessons that I'd learned, and trying to categorize them, and at some point, I just found myself writing down the same lessons, over and over, and over again. And it was pretty rare that I would come across something new, which I think gave me some concrete confidence like, \"Okay, I'm getting diminishing returns here, I need to start.\" Whereas, I think if you're not writing things down, it's kind of harder to track your progress. It's easier to think that you haven't made that much progress and that you haven't really learned that much. So, that's one kind of hack there.</p><p><strong>Courtland Allen:</strong><br />As for your second question which is, do we need to fail to succeed? I mean, the technical answer to that is no. I've interviewed so many people who just straight up succeeded on their first business. But at the end of the day, there's also a lot of luck involved, and there's also a lot of knowledge that you can take into maybe your first business from other things you've done in life. Even working a job, that can help you, and so I don't think you necessarily need to fail. But, it's good to embrace the high likelihood that the things you start won't work out, and that you might need to tweak them or move onto other things altogether. And I think if you want to succeed over the long term, it's good to be comfortable with failure over the short term.</p><p><strong>Courtland Allen:</strong><br />I started a bunch of things that did not work out before I started Indie Hackers. Even some of my role models like Peter Levels, he did a 12 startups in 12 months thing, and none of those things really took off until month seven or eight, when he started Nomad List. And I think just having that repeat experience of working at all these different projects taught him so many different things. It's just something so valuable about starting over from scratch. Even as a developer, I remember learning how to code, and the first that thing I did was, I worked on this one giant slog of a project for a year. And then, when I started something new, I'd completely forgot how to star. I had to relearn a bunch of stuff, and I ended up just learning a lot faster when I was launching lots of small, new projects that I could start from scratch at the beginning, over and over again, and use my learnings from the previous projects to start better the next time around.</p><p><strong>Courtland Allen:</strong><br />So, I think being willing to fail, which sort of implies being willing to start lots of different small projects is super helpful as a founder, and you learn more lessons that way than working on one sort of singular business that you push through, even though it's not going that well.</p><p><strong>Joel Hooks:</strong><br />Yeah. Egghead's my first business, but I also look at it like a sequence of small failures and slightly larger wins, how it's ended up panning out for me over time. There's plenty of things that we tried, and they don't work, but we were able to kind of push through and try something different. And I kind of miss the idea of starting. I wish I could kind of rewind the whole thing sometimes, and start from scratch, but once it's in flight, you can't. It feels like you can't, anyway.</p><p><strong>Courtland Allen:</strong><br />Yeah, you get a lot of momentum, but the good thing is that once you're profitable, you can launch this kind of side projects, and side businesses and efforts. And that's kind of like starting from scratch, though with the added advantage that you've got an actual main business that's working out.</p><p><strong>Joel Hooks:</strong><br />Yeah, and we've been doing that. We launched micro sites and kind of have this service business, where we have testing JavaScript with Kent C. Dodds, and Pure React with Dave Ceddia. And we're able to take what we know and then almost start from scratch. We get to use our platform and leverage these assets that we have, but then also roll that into something new, so we get to explore modern technology, and keep our ... Because, another thing, especially the business that we're in, you let your technical skills atrophy over time. You get comfortable and it just kind of works, and then you wake up, and then you have this legacy mess, which is a risk that we kind of run into. It's fine, but that's one of the kind of the drawbacks I think, to having some moderate success and not failing is that you just kind of roll with that success, and you lose some of that hustle that we talked about earlier as well.</p><p><strong>Courtland Allen:</strong><br />Totally. And I think the concept of technical debt is a funny one, because I see so many successful companies like yours, even like Stripe, where it's there's just a lot of technical debt, and there's a lot of stuff that was hacked together in the early days. And then a lot of founders are like, \"Oh, well how do I avoid that? How do I make sure my code's perfect in the early days?\" But for me, it's kind of the opposite because it's if you see all these successful businesses that were able to make it to where they are now despite having all this technical debt, and that's kind of proof positive that technical debt is either, maybe not a good thing, but at the very least, it's not the most important thing to focus on.</p><p><strong>Courtland Allen:</strong><br />But the skills atrophying, that's definitely true. You got to pick a tech stack. You sort of coast off your knowledge and you ride that while the world around you changes. Every time I've started a business and then come up for air a couple years later, especially in the world of front end engineering, it's just been so much new stuff and I'm way behind on it. I feel like I have to spend a few months just catching up and learning.</p><p><strong>Joel Hooks:</strong><br />My friend, Chris Biscardi, who's an egghead instructor has a podcast called Ohm Goals. And they had an episode and they got into this idea of planning for deletion, or optimizing for deletion where when you write software and you write these modules, you think, \"This is something that we need to be able to delete. It can be completely removed or replaced.\" And I never did that. I didn't build egghead with that mindset, but it really changed how I look at these things, because if you do that, if you think, \"Well, this is going to get deleted, it's good for about a year and then I'm going to delete it,\" that felt like something that I could truly optimize for and would improve, versus some of the other things that you might optimize for when you're developing software.</p><p><strong>Courtland Allen:</strong><br />Yeah, I certainly didn't do that either with Indie Hackers, but it sounds like a great idea in hindsight.</p><p><strong>Joel Hooks:</strong><br />Yeah, so you said that you built indiehackers.com from scratch. You built your own bespoke forum software. What's your tech stack? What is it running on right now?</p><p><strong>Courtland Allen:</strong><br />Yeah, so I am using Ember JS, which is sort of like a front end framework for making single page applications. One of my favorites. I am using on the backend Firebase, which handles both, it's kind of like a database and also authentication. And it also plugs into Google Cloud, so you can do ... It's kind of an alternative to Amazon S3 for storing files and images, and user avatars in my case. And that's pretty much it. It's hosted on a website called Render, which is not too different from maybe Heroku or something. But they just kind of host this node express app which runs my Ember app, and what's called fast boot mode, which is basically just server side rendering for an Ember app. So, essentially, we come to the site, and I can actually show you a rendered version of Indie Hackers, even though it's a JavaScript framework while it sort of boots up the JavaScript.</p><p><strong>Courtland Allen:</strong><br />I have a lot of regrets about my tech stack choice. If I could build it today, I would probably have used React, even though I love Ember. I think it's a joy to work with. There are just certain things that are complicated about it. The payload size is huge, because the entire site is in JavaScript and it's tough to split it up. It's a joy to work in, but it's not necessarily best user experience for the kind of site that I built. But again, I didn't build for deletion. I built everything in a way where it's on and connected, and it'd be very difficult and time consuming to rewrite it. And people like the site anyway and it's been quite fun to actually build what's essentially, not just community software but almost kind of like a social network at this point, from scratch by myself.</p><p><strong>Joel Hooks:</strong><br />Why not use something off the shelf like Discourse?</p><p><strong>Courtland Allen:</strong><br />When I started Indie Hackers, I had my whole list of mistakes I'd made in the past, and things that I had learned from, and some of that was intuitive and some of that I actually wrote down. And one of the biggest things that I had done in the past as a software engineer is spend way too much time coding. I had so many apps and projects I worked on where I didn't release it or launch it for six months plus, after I started coding it. And I just neglected everything, because I loved writing code so much. And so, I resolved to basically avoid that fate with the next thing I worked on, because again, I only had six months of runway in my bank account, and I couldn't take six months to launch something.</p><p><strong>Courtland Allen:</strong><br />And so, that's one of the big reasons I picked Indie Hackers, because it was just kind of a glorified blog at that point, and I knew it wouldn't take very long to release it. But, then I gave myself kind of the caveat that since there's really no code to write, I could just use Word Press, or Ghost, or Medium for Indie Hackers. That, I would allow myself to at least build my own blogging software, which didn't take very long. It only took a week, or a week and a half, or something for the very bare bones, Indie Hackers blog. And that eventually ballooned into, \"Well, I'll allow myself to build my own forum software,\" which again, only took a week to build the basic forum section where people could make posts and respond to each other, and leave comments and stuff like that. But, it just ballooned. You know how these things go.</p><p><strong>Joel Hooks:</strong><br />Yes, I do.</p><p><strong>Courtland Allen:</strong><br />You just get more and more features you need. It gets more and more complex. It's bigger and bigger. Strategically, I'm still glad I did it this way. I think that it's pretty important if you have a business that's kind of in a crowded market, where there's lots of people doing what you do, that you differentiate it in some way. And when I looked out into the sea of all these other websites that are interviewing founders, that are sort of sharing entrepreneurship stories, they all looked the same. They were all blog posts on Medium, or just the same thing. They were all white, so I made Indie Hackers dark blue.</p><p><strong>Courtland Allen:</strong><br />Is it more readable to make a dark blue site? Certainly not. Lots of people complained about it, but it's memorable. Where if you came to Indie Hackers and read a good interview, and you came a couple weeks later, you would instantly recognize, \"Hey, I've been on this blue site before and it was pretty good.\" And so I had a lot of things like that, where I was doing things just to be different. And I think coding from scratch kind of helped me do that.</p><p><strong>Joel Hooks:</strong><br />Yeah, I mean I can see that, because I had a friend recently tell me that egghead should probably be a Word Press site with a few plugins, and I was like, \"I mean, that might be true,\" but I also felt the need to indulge myself a little bit in the same way that you do. I like to hack. I take the hackers part of being an Indie Hacker fairly seriously, and it's something that I personally enjoy. It's my puzzle and what brings me a lot of satisfaction for better or worse, to actually build and create, and form something, and mold it to the needs of my community.</p><p><strong>Courtland Allen:</strong><br />Coding is so fun. I was just talking to my brother about this, this morning. It's just this super tight feedback loop from typing something, and then it gets transformed, and you go over to your browser to see what it looks like, and how it works, and it works, and it's great, and there's just nothing else that's like it. And it you're going to start a business, you should indulge yourself. You should enjoy running your business. And even if that means you're not as efficient or as fast as you possibly could be, who cares? Your life is better, and that's the whole point.</p><p><strong>Joel Hooks:</strong><br />It's essential to me, long term. If you're in a business and you want to run this thing, and you want to do it for a period of time, longer than a year or two, if you don't enjoy it, it's going to kill you slowly, and maybe quickly in some cases. It's just, that is not sustainable to me.</p><p><strong>Courtland Allen:</strong><br />Yeah. I just gave this talk at Hustle Con about ID validation, and most of the talk was about the actual business idea, your market, how you're going to distribute it to customers, the product, the business model. But, the first part of it was, just examining yourself, and asking yourself questions about who you are, and what your goals are, and what your skill set is. Because, if you don't really have a control over that, if you don't really understand those things, you're much more likely to build a business that you don't act enjoy running, which happens all the time. I have so many podcast guests who after we finish recording, they're like, \"Yeah, I can't wait to sell my business and stop something I actually like running, because I don't like this company that much.\"</p><p><strong>Joel Hooks:</strong><br />Well, and sometimes you'll grow the thing, and it gets to the point where it's not what you started or not what you thought it would be. And, you're here in a position where now you have a thing that you just don't really like, or you don't enjoy running. Which, I talked to Rosie Sherry who's your community manager at Indie Hackers which you know, but that's what she said. She started this thing and she loves it, but at the same time it grew into something and the day to day just wasn't something that she enjoyed, and she wanted to progress her career and had to figure out a way to get out while leaving her community intact.</p><p><strong>Courtland Allen:</strong><br />Yep, exactly. And it's kind of like a death by a thousand cuts. It's your business and so you're the one who runs it. You're the one who's faced with all these decision points for how to grow, and sometimes you just see these opportunities for like, \"I could do this thing and make it so much more profitable,\" or, \"So much more impactful or bigger, but also it goes against what I would enjoy running.\" And I think when you're faced with those decision points, it's a tough choice. Do you do the thing that makes your business more successful, that maybe even makes your customers happy, or do you do the thing that you like running? And it's pretty easy to eventually get trapped in a place where your business is big and successful like Rosie's was, but also you can't wait to exit.</p><p><strong>Joel Hooks:</strong><br />Yeah, I think that's to me the independence of when you talk about the indie part of Indie Hackers. The independence, the not being beholded to venture capitalists or some other entity. We're able to kind of make those decisions, too, and you're able to drive your business in a way that you want to without that sort of external pressure which can seriously undermine that idea and move your business into a place where you don't like it anymore as well.</p><p><strong>Courtland Allen:</strong><br />Yeah. Exactly. The independence is huge. I mean, even there's just so many subtle ways you can lose that independence, too. At Indie Hackers, since I was monetizing through ads and sponsorships, I saw kind of first hand in a very small way how your customers being these advertisers shifts your priorities and your focus when you're running a business. I can't even imagine what's it's like to work at a big media company, for example, where that's 80% of your profits and it's hundreds of millions of dollars. But for me, even when it was in the low thousands, it was advertisers had requests for certain episodes I would produce, or certain ways my website could function or look, et cetera. And suddenly, I wasn't just doing things that were for my users or for myself. I was doing things for these other customers. And I really didn't like the way that, that was shaping up and I can only imagine it would have gotten worse as I got more dependent on that.</p><p><strong>Courtland Allen:</strong><br />So, I think there's just a ton of ways that your business can sort of get away from you and you could become less independent. It's not just venture capitalists, it's not just investors. It can also be your business model itself, or your customers.</p><p><strong>Joel Hooks:</strong><br />Yeah, money's the ...</p><p><strong>Courtland Allen:</strong><br />Yeah, it's money.</p><p><strong>Joel Hooks:</strong><br />The common thread, right? We all need to live and eat, and sometimes you have to do what you have to do, and whether it's VC or advertising, or whatever you need to do to sustain your business. It's fine, but now you're servicing an additional client alongside of your community, and the clients that are using your product.</p><p><strong>Courtland Allen:</strong><br />Yeah, I think you nailed it. Money's the common factor.</p><p><strong>Joel Hooks:</strong><br />Yeah. So, you've interviewed a lot of really interesting people that started businesses, that are indie hackers. Is there any common advice that you've seen across those, or common threads of interest that might help other people get started and kind of build their own business?</p><p><strong>Courtland Allen:</strong><br />The most common piece of advice that people give, because I ask everybody at the end of the podcast, what's your advice for these fledgling founders or maybe aspiring founders, haven't gotten started yet. And the most common advice is, \"Just get started.\" And this goes back to what you were saying earlier, where it's so easy to get trapped into this educational wormhole, where you never escape from just reading and dreaming, and you never start anything. But, there's just so much of an advantage if you just start, especially if you're not too worried about failing, and just start something. And see how it goes. And you're going to learn a ton on the job. You're going to do a lot of just in time learning, which is fine. But if you never start it, it doesn't matter how much you read. It doesn't matter how much you learn, you're not going to get anywhere, and oftentimes all that information's going to paralyze you.</p><p><strong>Courtland Allen:</strong><br />And I'm probably sounding a little contradictory here, because I'm a huge fan of being very thoughtful and deliberate, and learning these lessons, but if you're one of these people who had consumed a ton of material and you just haven't started something, just start something. Start something small, start something easy. Don't worry too much about how it goes. Start an education business. Teach somebody what you learned and see how that goes. And I think that's kind of the best advice that I've heard so many people give, even though it's simple and kind of boring.</p><p><strong>Joel Hooks:</strong><br />Oh, no. I think it's good advice, and I would definitely agree with you. And I want to say, I really appreciate it Courtland. I appreciate you coming on and talking to me today. Thank you very much, and I'll talk to you soon.</p><p><strong>Courtland Allen:</strong><br />Yeah, thanks so much for having me, Joel. It was a blast.</p><p><strong>Joel Hooks:</strong><br />Cheers.</p>",
    "slug": "how-courtland-allen-found-freedom-with-content-consistency-and-community",
    "description": "<p>\"Indie Hacker\" - An entrepreneur that is working to gain some form of independence.</p><p>Courtland Allen is the founder of indiehackers.com. He didn't take the venture capital approach. He just wanted to make enough money to support what he was trying to do. Courtland was trying to build a community of indie hackers who would share their stories, help each other, and support one another.</p><p>You can't force community growth. It takes good content, time, and consistency. At first, Courtland would make good content and share it with his mailing list, and he'd also make fake accounts and have discussions with himself on the indie hackers forum to try and spark real interactions. The efforts paid off. Over a year, a real community blossomed.</p><p>It's tempting to rely on your intuition when you are first starting as an indie hacker. But, Courtland encourages you to take a more thoughtful approach by relying more on the experiences of others. Over time you'll develop wisdom.</p><p>You can go too far, though. If you spend too much time preparing and learning, you'll realize how much you don't know, and it can be crippling. In Courtland's interviews with indie hackers, the most common advice people have is to go for it! Be okay with experiencing failures and starting over.</p><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/how-courtland-allen-found-freedom-with-content-consistency-and-community/transcript\">\"How Courtland Allen Found Freedom with Content, Consistency, and Community\" Transcript</a></p><h3>Resources</h3><ul><li><a href=\"https://www.indiehackers.com/\">Indie Hackers</a></li><li><a href=\"https://news.ycombinator.com/\">Hacker News</a></li><li><a href=\"https://nomadlist.com/\">Nomad List</a></li><li><a href=\"https://stratechery.com/\">stratechery</a></li><li><a href=\"https://owngoals.stream/\">Own goals</a></li><li><a href=\"https://www.discourse.org/\">Discourse</a></li></ul><h3>Courtland Allen</h3><ul><li><a href=\"https://twitter.com/csallen?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor\">Twitter</a></li><li><a href=\"https://www.linkedin.com/in/courtlandallen\">LinkedIn</a></li></ul><h3>Joel Hooks</h3><ul><li><a href=\"https://twitter.com/jhooks\">Twitter</a></li><li><a href=\"https://joelhooks.com/\">Website</a></li></ul>",
    "duration": 2450,
    "episode_number": 66,
    "contributors": [
      "Joel Hooks"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/t4z88",
    "path": "/podcasts/how-courtland-allen-found-freedom-with-content-consistency-and-community",
    "published_at": "February 28th, 2020",
    "url": "https://egghead.io/api/v1/podcasts/how-courtland-allen-found-freedom-with-content-consistency-and-community",
    "edit_podcast_url": "https://egghead.io/podcasts/how-courtland-allen-found-freedom-with-content-consistency-and-community/edit"
  },
  {
    "id": "podcasts-00000000000000000302",
    "title": "Why Segun Adebayo Calls Himself A UX Engineer Instead Of A Designer",
    "summary": "Segun Adebayo talks about how he ended up becoming a UX engineer as well as the Chakra UI design system.",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/5d7ec3fd-ea3a-47dc-b00e-3f40a2e4c5d7/segun-adebayo-podcast-edit-2_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/e21d35da-a28e-4f59-97cc-3c82e6b81011/e7a23942-2e20-4a08-bf95-84a9869ee042/art.jpg",
    "simplecast_uid": "5d7ec3fd-ea3a-47dc-b00e-3f40a2e4c5d7",
    "transcript": "<p><strong>Joel Hooks:</strong>         Hi, Segun.</p><p><strong>Segun Adebayo:</strong>      Hi, Joel. How are you doing?</p><p><strong>Joel Hooks:</strong>         Doing excellent. I'm really looking forward to talking to you today. We, at Egghead, started using your library, your Chakra UI, so it's something I'm really interested in.</p><p><strong>Segun Adebayo:</strong>      Awesome.</p><p><strong>Joel Hooks:</strong>         But first I wanted to ask you, just how did you get started? What has your career been like, and how did you get to the point where you're developing full design systems as open source projects? What got you to this point?</p><p><strong>Segun Adebayo:</strong>      Okay. I would say I didn't really start out as a front end developer. My journey started about five years ago, I started with UI design. Back then it wasn't called UI design, I guess it was called mock up design, with Photoshop. So I used Adobe Photoshop then, to try to create designs. And shortly after a while, most of the clients I worked with asked to convert their designs to WordPress, I should've known my first introduction to this thing called web design, or web development, because I had some issues with WordPress, struggled with themes and plugins, and I just gave up. And after that time, with anything that has to do with development on HTML, or CSS right. So I went straight into UI design fully using Sketch and Figma for quite a while.</p><p><strong>Segun Adebayo:</strong>      So I attempted to try again, To come back to front end development just to see this time it won't be as frustrating for me. And it turned out to be really good, I think one of the things that scared me back then was jQuery with all the different options, and config, and only things you have to do. So I mean that scared me. But when I came back to it about two years ago, and seeing reality on how easy it is for me to create components. I think it really just stuck for me, and it mainly helped me to really stop my journey to front end development. To be honest, I think one of the things that helped me was I tried to build an application called CareerLyft, CareerLyft is an online platform to help people create their resumes really fast. So I'm currently working on CareerLyft, building CareerLyft Really helped me to master most of the core concepts of HTML and CSS.</p><p><strong>Joel Hooks:</strong>         So you were doing design, and you're a UI designer, and you tried and PHP and WordPress just didn't do it. But then when you came back to try this you hit react, and so you're saying CareerLyft, this site that you built to help people with their resumes, it's kind of the side project, or your project that you could control and play with and felt safe to build on. Is that correct?</p><p><strong>Segun Adebayo:</strong>      Yes. So CareerLyft is my project, I started it with a couple of friends, so we built it together, and we decided to launch it to see if people would be interested in trying it out, and even paying for it. So it's been amazing so far.</p><p><strong>Joel Hooks:</strong>         And did they? have they paid for it? Has it been a success in your eyes?</p><p><strong>Segun Adebayo:</strong>      Oh yes. It has been a success. I mean quite a number of people actually pay for it. It's a subscription service. So quite a number of people pay for it and I'm quite excited about that.</p><p><strong>Joel Hooks:</strong>         Is that your full time job at this point, or are you still working outside of that?</p><p><strong>Segun Adebayo:</strong>      I'm still working outside of that at the moment.</p><p><strong>Joel Hooks:</strong>         Okay. That's cool though. And I love that, because I know the feeling when somebody is buying something that you've made, and it's useful to them, and they're actually getting the value out of it, and paying a subscription. I don't think there's anything I felt in my career quite the same as that. Just that feeling is amazing.</p><p><strong>Segun Adebayo:</strong>      Yeah, it's really amazing.</p><p><strong>Joel Hooks:</strong>         So you've stopped calling yourself a designer, and I'm really curious about that, and would love to hear more about why you stopped referring to yourself as strictly a designer.</p><p><strong>Segun Adebayo:</strong>      Yes. So I wouldn't say that I'm no longer a designer to be honest. I think I'm still a designer at heart. I changed that because I feel like I can be of help to people beyond just design. I could of help to more clients, and help them be able to engineer the applications beyond just the visual design. Because I think the scope is quite limited when I call myself a UI designer. When people reach out to me they reach out to me for mockups or sketch designs, but I know my skillset is way beyond that. So I decided to broaden the net. It'd be so people know what I'm really good at.</p><p><strong>Joel Hooks:</strong>         So what do you prefer now? What do you prefer to do you have as your job title?</p><p><strong>Segun Adebayo:</strong>      I think I will say UI engineer, if there's a role like that. I think there's a role called UX engineer.</p><p><strong>Joel Hooks:</strong>         Yeah. Use experience.</p><p><strong>Segun Adebayo:</strong>      Yeah. UX engineer sounds more like a good role.</p><p><strong>Joel Hooks:</strong>         Yeah. And to me, I'm primarily a coder, but I have a little bit of a design background, and when I think user experience, I think of the whole experience, which includes both visual design, and the code, and then a bunch of other factors as well. Do you generally recommend that other visual designers learn to code if they're interested in it?</p><p><strong>Segun Adebayo:</strong>      Yes, I do. I really recommend it. The reason why I say so from personal experience, is when I go into React, and I started working on components, it immediately mirrored how I used to create components in sketch. How I used to create symbols in Sketch, and components in Figma. And then it all made sense to me because I was really using Sketch back in the time when I needed it, to grid components with different states, and different configurations. So coming to React and knowing that I can change the configuration with props really made a lot of sense. So I think as a designer, if you're really interested in learning how to code, you would have more advantage over someone with an engineer who doesn't know how to design.</p><p><strong>Joel Hooks:</strong>         I think a lot of people are intimidated just by the thought of code, do you have any advice to them? If somebody is interested in it, but they feel intimidated. Like this isn't something they can do. What do you tell people that are trying to get into, or trying to crossover more into the development space from design?</p><p><strong>Segun Adebayo:</strong>      Okay. So one of the things I tell people when I try to teach them front end development is it's not as hard as it seems or it looks, right. Because I know sometimes people get overwhelmed by the post on Twitter, The post on Instagram by people who are doing great things, and feel like it's quite a lot of work. But I feel like once you're a designer for example, it's going to be quite easy to move over to the front end development, because you already have the mental framework you need to be able to move over. But if you don't have design background, it's not as hard as it looks. So don't be scared, just try it out. You can start with the HTML, CSS. And just try to master the fundamentals, and then try to go to advanced. Because it might scare you from going forward.</p><p><strong>Joel Hooks:</strong>         Now what about the other way? If there's a developer that is interested in learning design, because I think that's always difficult, right? It's the communication. How do we talk to each other as developers and designers. But if I'm a developer and I want to pick up some more design so I can communicate both with my customers and my coworkers, what's your advice to a developer that wants to learn more about design?</p><p><strong>Segun Adebayo:</strong>      Okay, so one of the things I would recommend is to check out Sarah Drasner's course on Design for Developers. That's a really good course to start out with. I would also recommend Refactoring UI by Adam Wathan. I think it's also going to help you as a developer learn about design. Because I know sometimes just coming from the world of development and design is a huge leap. Sometimes most developers are not patient enough to go through that phase. So I think that just taking it beat by beat, and watching course, reading book. It might just start to incline gradually towards design. And I mean just over time you start to see that you have a better taste, and you're able to make your UIs look really good with time, as you practice and watch all these videos.</p><p><strong>Joel Hooks:</strong>         So for me, and I don't know if this is your experience as well, but for me one of the biggest benefits of both design and development experience, is the ability to communicate with collaborators. Like even if I'm never going to be a design expert, I still want to be able to communicate design with designers, right? Because it can be really challenging. So if we learn each other's vocabulary, we end up being more effective as teams I feel.</p><p><strong>Segun Adebayo:</strong>      Yeah. That's a good point as well. Designers have a vocabulary by default, and same with developers. So sometimes, I mean just like you said, I'm collaborating often with the designer who helps you learn how to see design. And it also works the other way as well. So a designer working closely with the developer would also see and learn how to view design. Because I think sometimes the two views of design can be different from a developer and a designer standpoint. So collaboration really helps as well.</p><p><strong>Joel Hooks:</strong>         Yeah. And Sarah Drasner's Design for Developers is on front end masters, and it's an amazing course, and I recommend that to everybody. And I think refactoring UI is incredibly interesting because what they have created is not only that book, but the book is really fantastic, but then they're basing it on Tailwind, which is a really nice CSS framework. It allows you to make less design decisions and still create nice things. Have you used Tailwind at all as well?</p><p><strong>Segun Adebayo:</strong>      Yes, I've used Tailwind and it's really amazing. I mean it's one of the things that really inspired me when I started Chakra UI, It was just a way for me to learn Tailwind works. Having worked behind the scenes, and seeing it's possible to replicate that in React, so yes it really helped me.</p><p><strong>Joel Hooks:</strong>         So what is Chakra UI? I think this is a good time to talk about this design system, this library, the set of components that you built. Can you explain what it is?</p><p><strong>Segun Adebayo:</strong>      Okay. I think I will start with why I made Chakra UI, one of the key reasons why I started it was really just for me to learn, to be honest. I think one of the key values I have personally is to be comfortable learning in public. So the current state on my knowledge can not really go in public for people to learn from. That's one of the key values I personally follow. So what I wanted to do was to learn mostly how to create reusable and composable components. So I didn't just stumble on this idea all of a sudden, but working with other React libraries like Material UI or Ant Design, and just a couple of other UI libraries out there.</p><p><strong>Segun Adebayo:</strong>      I feel the pain it takes to styling components. I see the pain that it takes to make the component accessible. Most of all is key details are missing. I mean all of these UI libraries, even though I think quite a number of them do a lot of accessibility, but I feel it can be better in terms of the experience of using these components, styling them, making sure they're accessible, and giving developers the freedom to be able to do anything they like with the components.</p><p><strong>Segun Adebayo:</strong>      So, that's really where it started from. So take for example, if you're working in a company and a designer sends you in design in Figma, there's always some pain to take that design and convert it to code almost every single time. It feels like the developer is [inaudible 00:12:56] right? Writing in one job styles over and over again, and if it feels quite painful. So I wanted to see if I could make that process really easy, and leverage on React composition [inaudible 00:13:13], which I learned from Ryan Florence thanks to him. So I watched his React training course online, I already talked about composing components in React, I mean after that course was when I was really inspired to start Chakra UI.</p><p><strong>Joel Hooks:</strong>         Yeah. And so you mentioned... I think that his course is amazing. And you mentioned accessibility as one of the core concerns of Chakra, and making that something that we as developers can just kind of have, right? But why is that important? Why is it important to have a component set that has accessibility as a primary concern?</p><p><strong>Segun Adebayo:</strong>      Yeah, so one of the things that breaks my heart these days, is they found that most applications are not accessible. So let's start from a simple example. If I open a website and I just try to talk to the website, somehow in some websites, I don't even know where my focus is. I mean that's just from a keyboard navigation perspective. And in some other cases, I'm not able to get to some parts of the website, except by using mouse. Even for screen readers as well, If I place focus on a element, is it speaking out the correct things? Are the attributes that element, or is it just saying a generic element? So that was really the key concern for me, I thought if we could make components accessible by default, most developers will not have to think about accessibility as it comes out of the box, and they can just compose components however they like.</p><p><strong>Joel Hooks:</strong>         Do you think people avoid accessibility because it's too much work, or what's the objection, and why are people not adding this to their application?</p><p><strong>Segun Adebayo:</strong>      I don't think it's too much work, but yes, I agree. Sometimes it can be quite annoying to want to factor in accessibility, particularly for the keyboard aspect, and for screen readers. And what I think maybe we could do better, in terms of the resources out there to help people build up physical components. Because there are not many resources, like tools or videos that can help people learn about accessibility.</p><p><strong>Segun Adebayo:</strong>      So one key example I can give is: let's assume you're trying to view a tab, or a tabs component that has different tabs. And when I was learning HTML and CSS, they told us to be able to style the active tab, just pass a class name or activity, and then just style it that way. And after a while, I come into accessibility and I learn that okay, this is an HTML attribute that I can add to the tags, to let screen readers know that this is an active tab. But if I didn't check for that information, that would be lost. And I would just be using CSS to style an active tab, when there is actually an external attribute to do that.</p><p><strong>Joel Hooks:</strong>         Yeah. So you tab around and visually it would change. But if you're using a screen reader, or perhaps the design for whatever reason isn't obvious enough, then you don't notice.</p><p><strong>Segun Adebayo:</strong>      Exactly.</p><p><strong>Joel Hooks:</strong>         Can you explain some of the design principles that went into Chakra?</p><p><strong>Segun Adebayo:</strong>      Okay, so one of them would be composition. That really just means that people should be able to... Any complex rigid components should be broken down into small parts, and composed together to fund the main component. So take for example a model, I mean in a model you have the model backdrop, and you have the model content area, right? So I mean that should really be composed together as individual React components, as opposed to baking them together into one giant component that cannot be overrided or styled. That's just a common problem. So composition really just means composing all the different parts of a complex component together and giving people the ability to style, and even just extend the functionality of any component.</p><p><strong>Segun Adebayo:</strong>      All right, so that's one core principle, and obviously the second one would be accessibility, which includes adding the proper Aria attributes, as much as possible providing support for keyboard navigation. How many areas we need to trap focus, see if you can trap focus, and see how it works. I think the last would be making it easy to style a component. [inaudible 00:18:21] styling. So right now in Chakra UI we work with Styled System as the base library, thanks to Brent Jackson. I mean I think Style System is one of the... It's an amazing library. So what we do Chakra UI, we extend Style System functionalities. So it's really easy to start. So what I added to Chakra UI, which I really love, is the ability to style the interactive states of the component. So the over, the [inaudible 00:18:52], the disabled, the selected, the checked skit, are really easy to style the outcrops as opposed to trying to use the emotion style or creating in CSS.</p><p><strong>Joel Hooks:</strong>         So I think you bring up Styled System, and I think what's interesting to me about that particular approach is that it feels like it's based on kind of a specification, and it's something that we can use across various component libraries, and it gives us things like styled components, and you can use it with emotion, and you get rebase, and reflex box, and all these different pieces that at the core have the same fundamental idea about how we style components, and I think that's been a revelation. And I was wondering how was that working with Styled System for you, and what do you think about this idea of a common core that we can all use to style components.</p><p><strong>Segun Adebayo:</strong>      Yes. The Styled System specifications is really amazing. One of the things that I like is the fact that more and more people are taught in Styled System specifications, and even Styled System itself. One thing I would really love to see in the community is more of a unification of all these design systems, and component libraries. I mean for there to be some sort of uniformity across, so that it's easy for us to contribute and grow together. I mean as opposed to having different types of specifications for theme objects. So I think Styled System really does an amazing job. And more and more people I talk to use Styled System. That's why I think I made a decision to just go with it.</p><p><strong>Joel Hooks:</strong>         And it's system UI, is the theme specification that they run underneath there. But to me it's been a completely game changer across the board. And I see more and more people adopting it, and closing in on this, and it's something that's flexible, and considerate, and very very usable and lightweight. It's not a huge specification. It's a very lightweight specification too which I feel is important. What did you learn about design systems while you were building Chakra?</p><p><strong>Segun Adebayo:</strong>      So one of the key things I think I learned, before I started building Chakra, I knew about design systems, and the way I always describe it would be sort of a system that helps a company create digital products really easily and really fast. I always compare it to the human body, and we have all sorts of systems in our body, and those systems are in place and you don't even have to think about them. They just work every single day. Right? So I thought of a design system as a way to solve problems within an organization to create digital products that solve real problems. So it extends beyond just being a component library. It goes beyond, and I think I would define it as, I mean the patterns, the principles, the collaboration between teams to really make it easy to solve any problem a company has to solve. It is sort of a system of designing, of solving the problem. That's how I like to see it sometimes. Not just a UI component library.</p><p><strong>Joel Hooks:</strong>         I think people often think of it as a UI component library. I kind of feel like literally every company that's building webpages, or web applications, or whatever, has a design system? Even if it's not something that they've documented, right? It's like the human body, right? You have a body, you have systems. If you don't think about it, the systems are still there. They just might be bad. Would you agree with that?</p><p><strong>Segun Adebayo:</strong>      Yeah, I agree with that.</p><p><strong>Joel Hooks:</strong>         So, if you want to be intentional about your design system then you can build on the shoulders of those that have come before you. And I think often the kind of Holy grail, is this idea of we're going to have a component set that we can use across the entire organization. And I look at something like Atlaskit, where Atlassian has built this monumental design system. And I think, wow, that's millions and millions of dollars, and so many man years of effort to produce something like that. How do people get started if we haven't defined a design system at all. Where do we even begin? Like as an organization to start bringing together a design system that we can talk about and collaborate on?</p><p><strong>Segun Adebayo:</strong>      Okay. So one of the key things I've learned recently about this end system is, you don't just make a design system because you just like the idea of a design system. Right? So if you have an existing product, most likely you should create a design system to help that product. It's always best when you have something that already exists, and you're trying to improve it and make it look consistent, or feel consistent. Then is a good time to think about having a design system, for those that are just wanting to start the product. The design system makes sense, but then as you keep growing and adding more features to your product, or your software, you might most likely notice that you'll have to revise almost every single component as you go.</p><p><strong>Segun Adebayo:</strong>      So it works both ways. It's a lot easier when you have an existing product and you can see the need, to keep your product consistent. You can literally see that maybe two different pages of your site are not looking consistent and they look like sites from two different companies. So that's really the first place to start. And then the second one, to really identify key areas that really need help. If you have an existing product, you want to look through it, look through all the inconsistent parts, possibly take screenshots of all the inconsistent parts, and then try to sit down to list out all the things you might need for you to design the system. So you list out all the components, all the principles you have to follow to ensure that everything stays uniform.</p><p><strong>Joel Hooks:</strong>         So I think one of the interesting aspects of what you've done is you've created this open source project and I'm wondering, how has that been, launching an open source project and putting it out into the world and dealing with contributors and that sort of thing. How's your experience been on the open source side of this project?</p><p><strong>Segun Adebayo:</strong>      Yeah, one of the things I was told a while ago when I wanted to start, was not to get into the world of open source, and just keep your teams to yourself, and no one cares about your components. Just do your team by yourself. But I thought that the fastest way to learn is actually to learn it to other people. And to make your ideas available to other people, so they could possibly extend it, and even give you more perspective. So this is my very first attempt at open source. Creating chakra UI has really helped me learn about GitHub. I pull requests on issues, I mean before Chakra UI I didn't even know what this meant.</p><p><strong>Segun Adebayo:</strong>      But when I was working on [inaudible 00:26:38] we use GitLab. So I was just new to the world of GitHub, and all the issues and pull requests, initially it feel quite complex and complicated, but just looking through the systems, people submitting issues, complaining about different parts, and people genuinely contributing to it. It really made me feel good that there were other people who can take this idea and even help to evolve the idea. Some issues expanded to even work better. And so I really liked the idea and the concept of open source. I really appreciate everyone that's contributed to Chakra UI so far. It's been amazing for me.</p><p><strong>Joel Hooks:</strong>         Yeah, it's great. I think it's just amazing that it's this global experience. We can all work on this thing and make a better user experience, make the web more accessible, make our projects better, make our work better. It's really, really quite wonderful.</p><p><strong>Segun Adebayo:</strong>      Yeah.</p><p><strong>Joel Hooks:</strong>         Segun, it's been really great talking to you. Thank you for taking time out of your day. I really appreciate it. We really appreciate the work you do on Chakra. At Egghead, it's something that we enjoy, and from everybody, thank you so much for the time and effort you put into this.</p><p><strong>Segun Adebayo:</strong>      Awesome. Thank you, Joel. Thank you for having me on this podcast. I'm really excited to have the opportunity to talk about Chakra UI. I'm really happy to hear that Egghead is using Chakra UI to be honest. Awesome. Thank you.</p><p><strong>Joel Hooks:</strong>         Thank you so much.</p>",
    "slug": "why-segun-adebayo-calls-himself-a-ux-engineer-instead-of-a-designer",
    "description": "<p>Segun Adebayo was turned off of web development after struggling with Wordpress' themes and plugins, and so he went straight into UI design entirely using Sketch and Figma for quite some time. It was React that brought him back into the development fold. The way React made it so easy to create components stuck with him.</p><p>Segun is still a designer at heart, but his skillset goes beyond design. If he calls himself a designer, it limits what people want from him. By calling himself, a UX Engineer Segun can create higher expectations of his skills, and people come to him for a broader range of problems.</p><p>One of the key reasons Segun started his side-project, Chakra UI, was to learn. One of his fundamental values is learning in public. Chakra UI is a passion project for Segun. It breaks his heart that most applications aren't accessible. Accessibility is one of the three core principles of Chakra UI along with composition, and being easy to style. Accessibility was one of the other key reasons for Segun starting Chakra UI. He wanted to create a design system that would make it easier for other developers to make the web accessible.</p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/why-segun-adebayo-calls-himself-a-ux-engineer-instead-of-a-designer/transcript\">\"Why Segun Adebayo Calls Himself A UX Engineer Instead Of A Designer\" Transcript</a></p><h3>Resources</h3><ul><li><a href=\"https://reacttraining.com/\">React Training</a></li><li><a href=\"https://frontendmasters.com/courses/design-for-developers/\">Design For Developers</a></li><li><a href=\"https://refactoringui.com/book/\">Refactoring UI</a></li><li><a href=\"https://chakra-ui.com/\">Chakra UI</a></li></ul><h3>Segun Adebayo</h3><ul><li><a href=\"https://twitter.com/thesegunadebayo\">Twitter</a></li></ul><h3>Joel Hooks</h3><ul><li><a href=\"https://twitter.com/jhooks\">Twitter</a></li><li><a href=\"https://joelhooks.com/\">Website</a></li></ul>",
    "duration": 1690,
    "episode_number": 65,
    "contributors": [
      "Joel Hooks"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/bpyzz",
    "path": "/podcasts/why-segun-adebayo-calls-himself-a-ux-engineer-instead-of-a-designer",
    "published_at": "January 10th, 2020",
    "url": "https://egghead.io/api/v1/podcasts/why-segun-adebayo-calls-himself-a-ux-engineer-instead-of-a-designer",
    "edit_podcast_url": "https://egghead.io/podcasts/why-segun-adebayo-calls-himself-a-ux-engineer-instead-of-a-designer/edit"
  },
  {
    "id": "podcasts-00000000000000000301",
    "title": "Turn a side project into a career with Nick DeJesus",
    "summary": "Nick DeJesus talks to Joel Hooks about how he went from a gamer to a developer because of one side-project.",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/21093f2d-e9e9-41ea-bc33-99c7fbe4848d/nick-dejesus-podcast_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/55d7f360-05c1-43af-9c2d-eb89e156734a/f5498238-f2f5-4d6f-81df-e16e8091897e/logo.jpg",
    "simplecast_uid": "21093f2d-e9e9-41ea-bc33-99c7fbe4848d",
    "transcript": "<p><strong>Joel Hooks:</strong>         Hey Nick. So, there's a few things I'm interested in that you're working on. One of them is you've been digging at the Gatsby themes and you, you teach at program called Resilient Coders which is a boot camp that has a model that I feel like is unique and different and I'm really interested in getting into that. But first, I wanted to learn what a T7 Chicken is.</p><p><strong>Nick DeJesus:</strong>       So, T7 Chicken is pretty much where it all began for me as far as my journey into development. So I am a professional Tekken player which is a ... Tekken is a fighting game that's been around for a very long time. And so, I got pretty good at Tekken. I got really decent at it. I made it ... a name for myself years ago and one thing that was really frustrating about Tekken is that it's very hard to be good at that game or, at the time, the information to get better at the game was not very accessible.</p><p><strong>Nick DeJesus:</strong>       People were doing weird things like finding these obscure webpages, saving them on their ... they HTML files on their phones and what not and so, I was like, you know, that really sucks. I wish that there was a mobile app that would allow me to get this information. But I had absolutely no idea how to code at the time, so-</p><p><strong>Joel Hooks:</strong>         So, you weren't a programmer at all?</p><p><strong>Nick DeJesus:</strong>       I was not a programmer at all. I was just a gamer.</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Nick DeJesus:</strong>       And so, I did download this one app and I was not satisfied with it at all and I paid, like, three bucks for it. It's really hard to get Android users to pay for anything, okay? So-</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Nick DeJesus:</strong>       ... after paying that three bucks, I was, like, very disappointed and I was disappointed to the point where I was literally inspired to learn how to code and do it myself. And so, like, the rest is kind of history from there. I started looking into ... I originally wanted to be an Android developer and I was looking at all these forums and asking for help.</p><p><strong>Nick DeJesus:</strong>       I found this one guy who was ... I don't even know why he helped me so much, but, he was so nice and he as literally doing his best to teach me Java at the time and so what's when the app was actually called Tekken Chicken where I got a C&D for having the Tekken name-</p><p><strong>Joel Hooks:</strong>         Yeah, they didn't like that.</p><p><strong>Nick DeJesus:</strong>       Yeah. And so that was out for Android only. That pissed off a lot of iOS users and so I said, you know what? Let me learn web development because that's more accessible. Everyone can have it and I won't have to worry about iOS versus Android or whatever and then Facebook announced React Native and so I felt like switching to web development was the best possible decision I've ever made and I was ... and since then, I've been able to ... I've launched it about ... I've launched it two times. There's T7 Chicken which is no longer available and now I'm at T7 Chicken Plus. I have over 30000 users-</p><p><strong>Joel Hooks:</strong>         Okay.</p><p><strong>Nick DeJesus:</strong>       ... right now.</p><p><strong>Joel Hooks:</strong>         So you're talking about Android users not wanting to pay for anything. Are you charging for this app or is it free or ... how's that work?</p><p><strong>Nick DeJesus:</strong>       So, it's been ... it's free with ads and eventually I'd like to set something up where you pay to remove ads. I get from ad revenue, which is insane, I would get like 500K impressions a month and that's, like, $30, $40.</p><p><strong>Joel Hooks:</strong>         Ads are kind of ridiculous, almost, with ... you know, you think like 500000 impressions, you're probably raking it in and I wonder, you know, like generally at economy, how sustainable it is and is that a model that you think going forward ... I mean, have you tried, you haven't tried anything else yet, right? So ads was your first approach to making money on this app?</p><p><strong>Nick DeJesus:</strong>       Yeah. Yeah that was the first approach and the real angle I'm trying to go for is not ... I already knew that ads aren't a very sustainable thing unless you have millions of users and really disruptive ads so I wanted to have ads there to, kind of, annoy my users and then if they wanted to remove them, then they would pay to get them removed. But, a lot of people actually ... like, a lot of my users are very happy with the app and they want to support me financially, so that's sort of, like ... I kind of put a thing there to give them an incentive to pay.</p><p><strong>Nick DeJesus:</strong>       It's weird. I think even if I had, like, a sort of a give us money thing, I think I'd still actually get something from what I have right now.</p><p><strong>Joel Hooks:</strong>         I think you'd be surprised, honestly, if you added the kind of get out of jail card in there and let people just pay the $3. Because, then like, you know, the people that complain about free stuff, which I just suspect gaming communities ... you say pro gamers, but, you know, I don't know how many people are making a living wage off of playing Tekken. You'd probably know better than me, but-</p><p><strong>Nick DeJesus:</strong>       Not many. There's this one guy who's literally getting paid to live his life by Red Bull which is really nice, but, he's also, like, probably the best player in the whole world. Like, top five at least.</p><p><strong>Joel Hooks:</strong>         Yeah, yeah, I mean that's where you have to be, I would assume.</p><p><strong>Nick DeJesus:</strong>       Right.</p><p><strong>Joel Hooks:</strong>         So what did you learn, like, as a developer and because you started out not a developer and you went through this and now you're teaching people to be web developers. But what, you know, like, before you started, before you did any of this, what ... was there any choice that you wish you hadn't made right from the start? Like, technology wise, I guess?</p><p><strong>Nick DeJesus:</strong>       Yeah. So, there's so much that I could have definitely done a lot better. I think, for me, this is sort of a debate, right? Like, some people are ... a lot of developers say don't go straight into learning Reactor or learning whatever. Focus on the fundamentals, first, and so I did not take that fundamental route. The way ... and sort of my style for getting stuff done for the most part is if i need something, I figure out how to use it and then I get it done, and then I ship, right? And, it's brought me quite a lot of success, but if I did spend that time to get a lot more fundamental with just programming in generally and some computer science concepts and stuff.</p><p><strong>Nick DeJesus:</strong>       I think a lot of the work would have been ... wouldn't have felt as difficult as it did at the time. Like, I ... the first time I shipped this app with Reactive Native took me a whole ... almost like a whole year and I had volunteers helping me. I couldn't tell what was going on in their code and it was just a giant mess. I redid that and it took me about, maybe, two or three months just with, mostly, just my spare time after work or on the weekends.</p><p><strong>Joel Hooks:</strong>         So how long has this app existed, like, from start to finish? From idea to now?</p><p><strong>Nick DeJesus:</strong>       Oh man, it's so, so long ago. Honestly I think I made the first one on Android only during Tekken 6. That's like almost ... I think that's, like, almost 10-years ago.</p><p><strong>Joel Hooks:</strong>         Oh, wow. That's a journey, huh?</p><p><strong>Nick DeJesus:</strong>       Yeah. Yeah. So the first time it launched, I had a ... up to 10000 users and then every iteration after has sort of been that community and then it kind of grows. I don't know where I'm at, now. I haven't checked in a while, but, you know, it's a community that I'm very active in. I'm actually going to a tournament in Thailand this week.</p><p><strong>Joel Hooks:</strong>         Okay, cool.</p><p><strong>Nick DeJesus:</strong>       So, that's helped a lot with, you know, being ... just having that community, that group, that, you know, is always going to be there to support me when I launch something Tekken related.</p><p><strong>Joel Hooks:</strong>         I think it's interesting because, to me, and some of the best advice I've ever had is if you're going to build something and you want to distribute it, you're building it for a group of people and often that works best if you belong to that group also, right? Like say you're building for a community that you also belong to ... and when we started egghead, that was kind of the idea. Like, we're developers so let's make a thing for developers. We weren't just trying to make something for some other audience that we don't have any relation to. It really helped. It helps to get your thing, get it in their hands because you can speak their language.</p><p><strong>Nick DeJesus:</strong>       Well, yeah. One of the best feelings ever is when I go to a tournament in any part of the world, and I look across the floor and I see everybody using T7 Chicken just before their matches. It's the greatest feeling. And it's reached the point where people don't even know that I made it, so come people meet me and stuff and then a week or two later, they find me on Facebook and they're like I had no idea you were the guy that made the app!</p><p><strong>Joel Hooks:</strong>         That's funny. Why are side projects important in general? Do you think they're important and, if so, then why would you say that?</p><p><strong>Nick DeJesus:</strong>       Oh, man. I think they are ridiculously important. For many ... like, there's a lot of different angles here so I'm going to start with personally, I do ... I just personally feel like you will always learn the most from a personal project. Almost more than what you would learn, of course, depending on your job and what company or whatever ... but I have not gotten more exposure to technology by having a nine to five coding job than I have with personal projects and so ... and, you know, like, when you are working on something at work, especially when you just got ... I think that's more important for people who just start in this industry where ... where you're managers aren't going to assign you big, heavy work. Like ... or, or tasks that will help you level up very quickly or get that promotion or whatever.</p><p><strong>Nick DeJesus:</strong>       Like, for example, I have never during a nine to five job had the pleasure of setting up a continuous integration for anything. Yet, I know how to do all that stuff because this is how I launched T7 Chicken using Microsoft App Center. So, there's ... and that's just a small example. There's so many things that you could be supplementing yourself with that you might not be getting from work that would help you at work or just even having ... even if you don't have a nine to five coding job and you want one, having a solid project is really good to reference for when companies are interviewing you.</p><p><strong>Nick DeJesus:</strong>       Another thing about personal projects is, and this is probably my favorite part, is that we all, as individuals, care about different things, right? like, I care a lot about Tekken and now that I, you know, I've acquired this ability to code, I am making products that help the Tekken community. A community that I care about and so, Tekken is whatever. It's like a video game, or something, but there are ... I know that people ... you might care more about an unrepresented community and for whatever reason there's not many people in that community that are coding or what would make these, the apps or the experiences that they would like to see, you know, and so here you are and you have this ability to contribute to that community and you could, like, I just genuinely think you could make the world a better place by focusing on something that you care about.</p><p><strong>Joel Hooks:</strong>         And, you know, I think it's interesting when you, when you're talking about coding a this power of expression, right? Like, you were able to build something and you're able to use your brain and your imagination to create something useful that doesn't exist, right? Like, T7 Chicken didn't exist. This was a resource that did not exist and now it does for your community and your people that you care about and enhances not only their lives, but enhances your lives, too.</p><p><strong>Joel Hooks:</strong>         I don't know if you've ever read, there's a book called Apprenticeship Patterns that I love and recommended to people but one of the chapters is called Breakable Toys and what they talk about in this book is a side project is your breakable toy, right? It doesn't matter what you do to it. If you break it, you know, like some people might be upset but it doesn't ... its yours and it's yours to break and yours to manipulate. Like, for me, like my blog or for a lot of people, their personal site or building an app or, you know, some sort of joke or game or whatever, you can build it and it's yours and you can break it and learn from it and add whatever you want to it and take whatever you want away and it's really, really a powerful, powerful lever when you're trying to learn.</p><p><strong>Joel Hooks:</strong>         And, you either break in or enhance your skills or just enjoy yourself, you know? Like do this and have fun doing it. I can kind of see what side of it versus when you're building somebody else's app. That's kind of a grind.</p><p><strong>Nick DeJesus:</strong>       Yeah. And a lot of stuff that I learned on the job, like, I would actually picking up stories that were relative to T7 Chicken. Something, like, maybe ... for example, setting something up with a specific flow with Redux or something and I'm like, oh, I have Redux in my app and I need to accomplish the same thing with Redux, so, let me pick up that ticket, learn how to get it done at work. Get my code feedback and whatever, and then run back to my app and apply the same thing.</p><p><strong>Joel Hooks:</strong>         So, speaking of getting paid to learn how to code, I'm curious about Resilient Coders and what makes, you know, what is Resilient Coders and what makes it different from other boot camps? Because there's a lot of boot camps on the market these days. It's a big business. It's billions of dollars business every year teaching people to code. But what makes Resilient Coders different?</p><p><strong>Nick DeJesus:</strong>       Resilient Coders ... I think, so there's a lot of boot camps that are focusing on diversity and inclusion and I don't think that ... I believe that Resilient Coders has the absolutely best approach for that and I think the biggest thing is the fact that we pay our boot campers to learn how to code and we don't ask them to pay us back in money at all. We tell them to pay it back in sweat.</p><p><strong>Nick DeJesus:</strong>       So, once the, you know, one they graduate we want them to come back and help the next cohort and continue on with that as each cohort graduates and so, a big thing about the ... so that's like one thing that's different on paper. The part that's not on paper is sort of the focus on the individual.</p><p><strong>Nick DeJesus:</strong>       so, a lot of boot camps, they focus on the technology, right? So you go in, you jump in a boot camp and you're in there for like two or three months. You're getting exposed to all the cutting edge technology and all the skills. Everyone has the same exact personal projects or project done or whatever for demoing and what not and it's all skill focused.</p><p><strong>Nick DeJesus:</strong>       We're very people focused, right? And so, the secret sauce to Resilient Coders isn't so much that we're exposing them to the technology, but we are teaching them how to learn how to code. I mean, how to learn how to learn.</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Nick DeJesus:</strong>       So ... and so that's very important because, you know, getting into this technology field, technology's always adapting. Not everyone has a stack of Node and Reactor or whatever. We want to be able to open them up to any, any kind of work environment and technology that can get exposed to whatever and we'll trust that they'll be fine.</p><p><strong>Nick DeJesus:</strong>       And we're also having conversations with hiring partners about focusing more on hiring on potential rather than, what's the word? Pedigree.</p><p><strong>Joel Hooks:</strong>         Yeah. A certificate or-</p><p><strong>Nick DeJesus:</strong>       Yeah.</p><p><strong>Joel Hooks:</strong>         ... the ability to prove right now that you can do the thing. It's what can they do in a year from now-</p><p><strong>Nick DeJesus:</strong>       Right.</p><p><strong>Joel Hooks:</strong>         ... and to me it's like that learning how to learn approach is really, like, that's the fundamentals.</p><p><strong>Nick DeJesus:</strong>       Yup.</p><p><strong>Joel Hooks:</strong>         We can talk about all the fundamentals of code and classes and object oriented and functional programming and all that stuff, but, if you're not committed to be, essentially, a lifelong learner, this is going to be a really hard career. I think for anybody.</p><p><strong>Nick DeJesus:</strong>       Right. Exactly and so ... and there's something to be said about boot camps that do accept money from the people they teach and, you know, not everybody ... so, in the program, we do ... it is possible for students to get removed from thee program and it's not because they can't become developers or anything. It's just because they need a little bit more time, right?</p><p><strong>Nick DeJesus:</strong>       And so, when ... when you have a program where you're taking money, you know, you kind of just already have the money. Like, you don't really have to care as much about somebody graduating or not, you know?</p><p><strong>Joel Hooks:</strong>         Yeah, and in a lot of cases, they can garnish your wages or come after you, you know, whether you graduate or not.</p><p><strong>Nick DeJesus:</strong>       Right.</p><p><strong>Joel Hooks:</strong>         I know that's a case for someone, like ... the ones where they take a portion of your income after graduation. You know, if you're there two months and drop out, they're going to still, they're going to come after you and garnish your wages and what not.</p><p><strong>Nick DeJesus:</strong>       Yeah. No, we don't do that. We-</p><p><strong>Joel Hooks:</strong>         Yeah, that's good.</p><p><strong>Nick DeJesus:</strong>       Yeah.</p><p><strong>Joel Hooks:</strong>         So, I mean, how is that sustainable, though? Like, paying people to code? I don't know, what even ... is there a business model in there or is it kind of like a public benefit company or a non-profit? How does that work?</p><p><strong>Nick DeJesus:</strong>       So, it's a non-profit and that is something that's sort of the ... what we've been trying to figure out for years, basically, right? So, it's all donations and for the most part, it's come from, like, generous individuals, generous companies. It's very, the pay is very meager. It's 500, it's a $500 stipend bi-weekly. It's ... you know, most of the time, it's just barely enough to make sure that they can afford rent or something or the basic needs, right?</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Nick DeJesus:</strong>       So, things have been picking up for us these days. We're getting the curriculum is much ... is getting solid. It's getting better and better with each cohort and so we're starting to see a lot more companies getting interested. Our biggest champion right now is Wayfair. They've taken over 20 of our boot campers this year.</p><p><strong>Joel Hooks:</strong>         Oh, that makes sense. Like a corporate relationship where you're, you're training people and then kind of curating people with the potential that would fit in at the company?</p><p><strong>Nick DeJesus:</strong>       Exactly and so Wayfair actually is ... so, I think last cohort, they reserved eight spots for our boot campers.</p><p><strong>Joel Hooks:</strong>         Okay.</p><p><strong>Nick DeJesus:</strong>       And so we're working on trying to get ... and so other companies are actually reserving spots from the graduating cohorts and so, like, as far as the whole money thing, eventually it looks like we might be able to start getting sort of referral bonuses. I don't think that's the word I want to use.</p><p><strong>Nick DeJesus:</strong>       But-</p><p><strong>Joel Hooks:</strong>         Almost like a recruiter, right?</p><p><strong>Nick DeJesus:</strong>       Yeah, exactly.</p><p><strong>Joel Hooks:</strong>         Pricing people and you get paid, because they pay recruiters whatever percentage or thousand of dollars or whatever when somebody gets placed.</p><p><strong>Nick DeJesus:</strong>       Right.</p><p><strong>Joel Hooks:</strong>         And that can be expensive, too. Like, I know that for sure.</p><p><strong>Nick DeJesus:</strong>       Yeah. Its more or less a donation, like a ... it's not a legit payment thing that's set up, but, yes it's very expensive to hire. I think, on average, it costs like $30000 just to find somebody.</p><p><strong>Joel Hooks:</strong>         Yeah, and then, like you train them up and it's an investment-</p><p><strong>Nick DeJesus:</strong>       Right.</p><p><strong>Joel Hooks:</strong>         ... from the employers side, too.</p><p><strong>Nick DeJesus:</strong>       Yeah, exactly.</p><p><strong>Joel Hooks:</strong>         This is something ... I've been really passionate about this idea, this idea that we can pay people to learn how to code for quite a few years myself and it's something I experiment with at egghead and, you know, we don't have the money to do the scale I'd love to, but I think it's interesting to kind of flip that boot camp model on it's head. Instead of, you know, kind of being predatory even, in some circumstances, it's like doing the opposite. How do we lift people up and how do we give them a chance and how do we help them?</p><p><strong>Joel Hooks:</strong>         Because, like the financial part, especially for people that are switching careers, can be incredible difficult, right? Like, you're trying to work a job and learn a new skill and go to school and study and do all this stuff and still put food on the table. It's incredibly stressful and these are people that deserve it and need a chance and figuring out how to help them has been a challenge.</p><p><strong>Joel Hooks:</strong>         But it's a good challenge. It's like on the ... when you have a challenge and it's worthy, it's worthy of your time and effort to thin about and try to figure out how can we flip that whole model on it's head. With education in general, I think it applies ... it fits so well in software just because of the, the upside financial potential in software's pretty big.</p><p><strong>Nick DeJesus:</strong>       Right. And I ... and you can't really, you can't truly claim to be an inclusive boot camp if you're not thinking about, if you're not paying people of color to learn how to code. Like, there's ... you just can't. I don't know ... there's a lot more I could say about that, but it's kind of not possible.</p><p><strong>Joel Hooks:</strong>         So, what's your, what's your advice? What do you tell people when, you know, I assume people ask you how do get started? How do I learn how to code? What's your, kind of, top tips that you like to tell people when they're trying to break in into this field?</p><p><strong>Nick DeJesus:</strong>       So, I think the first thing I think about is, sort of, what ... what motivates them? That's always my first question because if there's anything-</p><p><strong>Joel Hooks:</strong>         Kind of why?</p><p><strong>Nick DeJesus:</strong>       Yeah! Exactly. I always ask why. I'm like what interest you in, about technology? Like why, why do you want to do this and that's really important because I don't think I would have been able to do it myself without the why and so, for me, the why was, you know, because Tekken's really hard to learn so now i need to learn how to code to make it easier.</p><p><strong>Nick DeJesus:</strong>       And so it's a really corny why. It's all around gaming and stuff, but that was my why. That's what kept me, that's what kept me going, right? And so I usually ... and I don't ... I also don't like imposing like what I know or what I've learned and suggesting that's the best thing.</p><p><strong>Joel Hooks:</strong>         Well, that's your path, right? That's not going to be ... your path isn't my path-</p><p><strong>Nick DeJesus:</strong>       Right.</p><p><strong>Joel Hooks:</strong>         ... isn't somebody else's path. It's more like, you know, this is some stuff that worked for me. I don't know what might work for you.</p><p><strong>Nick DeJesus:</strong>       Right. So, I like to ask these kinds of questions and sometimes somebody would say, like, they're not interested ... I'd ask stuff like are you interested in mobile apps or website, in websites and they'd say no, I'm more into AI or something and I'd, I might suggest Python or something. But then I'll let them know, like, I can't really help you there because that's not my thing.</p><p><strong>Nick DeJesus:</strong>       But, for the most part, I always start off with the why. I cannot imagine ... and so, like, the boot campers are Resilient Coders all have veery important why's, right? Like, and it's still like family. Most of the stories there's like family or some kind of struggle they dealt with or the fear of losing jobs to automation and stuff like that. Every boot campers has a solid why and that's-</p><p><strong>Joel Hooks:</strong>         Its like the core, fundamentally, like getting paid? Is that a strong enough why?</p><p><strong>Nick DeJesus:</strong>       So, it could be. It could be. But, like, who doesn't want to get paid more, right? There's ... that's such an easy thing to say and, I mean, I feel like that is always part of it, too, so it's like, you know, I have this family. I need to change. I'm not learning. I'm not happy. I want to learn how to code. I want to increase my salary and I'm doing it for my family. Like, that's more powerful to me but I don't ... if ... it just ... you just have to feel it, you know? At the end of the day.</p><p><strong>Joel Hooks:</strong>         Yeah. I think, like, you can start that way and you know, honestly, that was why I got into doing this to begin with but after that, like, if you don't enjoy it, for one thing, it's going to be really hard to sustain and then, you know, you're working for more purpose after your bills are paid, right? Like then what's the why?</p><p><strong>Nick DeJesus:</strong>       Yeah, exactly. And you might end up loving it after starting. You never know.</p><p><strong>Joel Hooks:</strong>         Yeah. I love it. Like, the puzzle aspect was a real fun treat for me way it turns out here. Just solving Rubik's Cubes all day. I've been tickled ever since.</p><p><strong>Joel Hooks:</strong>         So how do you approach, like, when you're going to learn something new, what's ... how do you start? What's your approach? Do you get the books? Do you, you know, search the internet? Watch videos? What do you do to learn and how do you get started when you're learning something new?</p><p><strong>Nick DeJesus:</strong>       So a big part of it for me is just jumping right in. Like, I think there's a lot of fear ... a lot of people have these fears of, you know, oh, I don't know how to do this thing or I'm not smart enough or ... what's the thing? I think I saw it in your newsletter. It was like analysis paralysis or something?</p><p><strong>Joel Hooks:</strong>         Yeah, where you just ... I mean, I'll do this. I'll, like I'll order all the best books, stack them up on my desk, and until I'm through and I studied and know the thing in depth, I'll kind of wait to start. Versus just, like, jumping in and making something. Like, to me, and that goes back to frameworks versus fundamentals, too-</p><p><strong>Nick DeJesus:</strong>       Right.</p><p><strong>Joel Hooks:</strong>         ... right? Like are you going to ... do you have to learn all the fundamentals or can you just pick up a framework and start building something?</p><p><strong>Nick DeJesus:</strong>       Right. So I don't do that at all. I'm very ... I'm like the opposite of that. I just jump right in and it's actually terrifying most of the time. I'm always making like these new wrenches for my sense of security and stuff like that but for the most part, once I get started, i get comfortable. I start seeing working examples that I made.</p><p><strong>Nick DeJesus:</strong>       There's a big difference between going online and looking at a working example from someone else versus making your own working example-</p><p><strong>Joel Hooks:</strong>         Yeah, like from scratch?</p><p><strong>Nick DeJesus:</strong>       ... and then-</p><p><strong>Joel Hooks:</strong>         Like where you're moving, you're moving the blocks around or else you're building it from scratch, kind of?</p><p><strong>Nick DeJesus:</strong>       Yeah, exactly. And so, once I feel kind of ... I usually find my footing that way but the other part of it is community and so I'm always in, like, developer Discord channels or I've got somebody ... there's always like, a couple people I'll hit up who I know are familiar with the technology so ... and I always come to them when I'm, like, I've already got stuff done. I don't want to waste too much time, so I'm like, I got ... I'm trying to get from point A to B. I've done all of these things. I'm at this very point right now. Have you seen this? Do you know what to do? How could you help me, kind of thing.</p><p><strong>Joel Hooks:</strong>         I always look at it as almost like, it's almost like credit, right? Like you can go in there and if you come in with some basic question, you're going to use up your credit. Instead, you want to come in there and ask a really good question so when you ask, one, you're respecting peoples time. Two, you get a better answer and three, they don't, you know, they don't feel like they're being let me Google that for you.</p><p><strong>Nick DeJesus:</strong>       Yeah, exactly. I try to make sure that I do my due diligence before I ask a question. I think that's super important when reaching out for help. I make sure when I'm stuck, I've done everything I possibly can. I've Googled stuff. I hit up Stack OverFlow. Reddit. Whatever. And if I'm truly stuck, when I ask these questions, I make sure I lay out everything I've done from start to finish just so that they're not wasting time. I try to think about it like, I try to predict the kind of questions people would ask me to help me troubleshoot and I try to answer them on the way.</p><p><strong>Joel Hooks:</strong>         That makes sense. So you just kind of go down the list. Like this, they're going to ask me this so I might as well look that up now and you can do it yourself up until you get truly stuck.</p><p><strong>Nick DeJesus:</strong>       Yeah, yeah. Pretty much.</p><p><strong>Joel Hooks:</strong>         Then you can present it. Yeah. I was going to say, I'm curious what you're excited about right now? What are you working on? What are you learning right now as a developer?</p><p><strong>Nick DeJesus:</strong>       So, I am really excited about Gatsby. Like, I have been ... so, since I've started web development, if i have to be honest, I haven't really enjoyed web development that much. I've always preferred doing react native so that's where, like, what made me excited all the time. I ... it's weird to say this, but I literally now am having way more fun with Gatsby. For the past two or three months, I have been neglecting T7 Chicken just learning about Gatsby. Making themes and the development experience is really smooth and I can get a lot done.</p><p><strong>Joel Hooks:</strong>         I think it takes away ... and you combine it with Nullify or the other services where its just like one click and everything's going and you said, you know, you've done continuous integration and deployment in your other apps, but then, like, you don't have to really even think about it. You just push to get hub and then your thing works.</p><p><strong>Joel Hooks:</strong>         Like, and I feel like the same way. I'm having more fun now as a front end developer and I've been at this, like, 20-years and more fun now than I've ever had. And its because there's all these abstractions that solve the problems. And let me ... you still have to solve problems, but you kind of get to focus on a different layer of it which is really cool.</p><p><strong>Nick DeJesus:</strong>       Yeah and ... yeah, and I feel like the stuff that we're doing now with Gatsby is stuff that, you know, you would normally need a whole team for. I feel like a one-man team with Gatsby.</p><p><strong>Joel Hooks:</strong>         Yeah. Yeah, and especially ... so you're building a theme and that's ... you';ve been talking about that. What kind of themes have you been working on in general?</p><p><strong>Nick DeJesus:</strong>       So, what's got me going is I have a whole mono-repo focused on Stripe based themes. I thought it would be really cool to have the ability to pass your Stripe API keys to a Gatsby theme and that theme would spin up an entire storefront experience complete with a shopping cart and all of that.</p><p><strong>Joel Hooks:</strong>         Has it worked? Like, does that work? You can do that?</p><p><strong>Nick DeJesus:</strong>       Yeah! Yeah! I could ... I could spin up, like ... I could spin up an e-commerce store in like five or 10-minutes just from ... as long as the products are in the Stripe account and I get the Stripe API keys, and so there's much more than just the, the sku's and product, objects that I'm using there. I'm actually, for the past week, I've been working on doing something with subscriptions and so I made a theme that lays out a subscription sort of like a list of subscription products that you could buy on a monthly basis and then, after making that, I was like I wonder if I could, sort of, make a self-hosted Patreon and so, I just added like Firebase to it and now there's like authentication and I'm now, I'm now trying to figure out the piece where you hide content behind the pay wall and I'm like 90% there.</p><p><strong>Joel Hooks:</strong>         What was the motivation? Like, why did you ... is this just something to do something? Are you scratching your own itch or what's going on there?</p><p><strong>Nick DeJesus:</strong>       So, it started with T7 Chicken!</p><p><strong>Joel Hooks:</strong>         Oh, okay. Make sense.</p><p><strong>Nick DeJesus:</strong>       It's been really successful and I ... it's time for me to start monetizing this app and Tekken is doing great this year. Like, they're doing such great work with the fan service. We have Negan from the Walking Dead in the game. Not sure how that happened. But it's like, it's like doing really, really well and so ... it's been more work for me, as well. And so, I wanted to sort of set up a landing page and a storefront and I was looking at all these options.</p><p><strong>Nick DeJesus:</strong>       I was looking at Shopify and Squarespace. You know, as a developer, I kind of just want, want to do things on my own, you know? And so ... and then I thought about it. As I was working on it, I thought about how this is something that I might want to be able to do multiple times for different brands or whatever-</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Nick DeJesus:</strong>       ... and I ... I did a little bit of Googling and this is how I found out about Gatsby themes. So I figured, oh, okay, I will just make this storefront experience with Stripe using a Gatsby theme and then I can use that over and over and over. But I did not expect ... I actually totally underestimated how much work it takes to make an e-commerce store with shopping cart and everything.</p><p><strong>Joel Hooks:</strong>         Yeah. Yeah, I agree with that. We have one and we, we just worked the Gatsby store so they have their store and it's a, you know, it's a Shopify-fronted thing. And, honestly, I'm a little jealous because I love Stripe and I love Stripe Checkout. I think it's a really, really cool product and they're, they're capabilities are pretty neat and you marry that to Gatsby and you really have something, something cool.</p><p><strong>Joel Hooks:</strong>         I know, you know, it's like ... you talk about Patreon and I wonder what subset of that audience is technically, because its ... Gatsby's ... Gatsby's nontrivial, I would say, on a ... from a technical standpoint in terms of implementation so, have you thought about that? Like, who is this targeting? Is this for developers? I would assume so.</p><p><strong>Nick DeJesus:</strong>       Yeah, so this is definitely targeting developers. The way I see it is if ... so, first of all, there's a lot of ... like you said, there's a lot of incentive for people to go from Patreon to their own self-hosted site, right? Technology wise and speed and SEO customization and all that stuff. The SEO piece is actually, I think, really big, too, because ... so, like, there are celebrities that have Patreon accounts but you'll never find them because it's not searchable. It's all under Patreon's SEO, you know what I'm saying?</p><p><strong>Joel Hooks:</strong>         Yeah, it's kind of like Teachable is, maybe, a little bit similar to me because it's ... they're not, they're not necessarily a directory. They're just a service and then it's kind of on you-</p><p><strong>Nick DeJesus:</strong>       Right. So, yeah. This is definitely for developers and I would, and I kind of ... I've kind of been thinking about, like, this idea of having all these Stripe-based themes and developers would be able ... I plan on consulting and freelancing and stuff with stuff. It would be really cool if other developers were doing the same thing with the foundation that I laid out. So that's been ... that's been something really cool to think about and I think, like, I've been coding for all these years and stuff and I have yet to, sort of, make like a contribution to a developer community and I think this is it for me.</p><p><strong>Joel Hooks:</strong>         Yeah. That's good. I like that a lot. I really appreciate the work that you're doing. I was wondering, how ... if people do ... does Resilient Coders take donations? Is that something that people can participate in?</p><p><strong>Nick DeJesus:</strong>       Yes. They do take donations and, actually, I have ... I'm working on a non-profit theme with Stripe.</p><p><strong>Joel Hooks:</strong>         Okay, cool.</p><p><strong>Nick DeJesus:</strong>       Yeah!</p><p><strong>Joel Hooks:</strong>         That's awesome.</p><p><strong>Nick DeJesus:</strong>       So, so I can't wait to drop this one. I'm taking the design and experience from Charity Waters donation page but it's basically the same thing where you can make one-time payments or a monthly subscriptions.</p><p><strong>Joel Hooks:</strong>         That's great.</p><p><strong>Nick DeJesus:</strong>       Yeah. But, right now, if you do to resilientcoders.org there is a place where you can donate and right now, we have it set up though, like PayPal or something.</p><p><strong>Joel Hooks:</strong>         Yeah, we'll drop a link in the show notes so if people want to check that out, I highly encourage you to do so because I think Resilient Coders, you guys are doing a really great work and I want to see that, and see more of it. I really appreciate it, Nick. Thanks for hanging out with me this evening and I'll talk to you soon.</p><p><strong>Nick DeJesus:</strong>       Thank you so much.</p>",
    "slug": "turn-a-side-project-into-a-career-with-nick-dejesus",
    "description": "<p>T7 Chicken was where it all began with Nick's journey into development. Nick had no development experience. Still, he wasn't satisfied with the websites and apps available for Tekken framerate data, so he took it upon himself to learn Android development to create his mobile app. </p><p>Nick had the support of the Tekken community and received programming help from people online. Projects like these are so crucial for rapidly growing as a developer, and you won't get the same experience at work. It's making something you need for your community. It's also a place where you are free to experiment with new technologies. </p><p>Most of us wouldn't be where we are today in our careers without the help of the online programming community. Nick gives back through his work as a mentor at the Resilient Coders bootcamp. </p><p>Resilient Coders is different from most bootcamps. They pay their students to learn to code! They are a non-profit and rely on donations from generous individuals and companies to operate. Paying their students allows them to be truly inclusive by providing an opportunity for people who don't have the privilege of being able to survive without some form of income. </p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/why-do-you-do-it-with-nick-dejesus/transcript\">\"Why do you do it? With Nick DeJesus\" Transcript</a></p><h3>Resources</h3><ul><li><a href=\"https://www.resilientcoders.org/\">Resilient Coders</a></li><li><a href=\"https://twitter.com/t7chicken\">T7 Chicken Twitter</a></li><li><a href=\"https://apps.apple.com/us/app/t7-chicken-plus/id1443049601\">iOS: T7 Chicken</a></li><li><a href=\"https://play.google.com/store/apps/details?id=com.t7chickenplus&hl=en_US\">Android: T7 Chicken</a></li><li><a href=\"https://www.amazon.com/Apprenticeship-Patterns-Guidance-Aspiring-Craftsman/dp/0596518382/ref=sr_1_1?keywords=apprenticeship+patterns&qid=1576015744&s=books&sr=1-1\">Apprenticeship Patterns: Guidance for the Aspiring Software Craftsman</a></li></ul><h3>Nick DeJesus</h3><ul><li><a href=\"https://twitter.com/Dayhaysoos\">Twitter</a></li><li><a href=\"http://www.nickdejes.us/\">Website</a></li></ul><h3>Joel Hooks</h3><ul><li><a href=\"https://twitter.com/jhooks\">Twitter</a></li><li><a href=\"https://joelhooks.com/\">Website</a></li></ul>",
    "duration": 2220,
    "episode_number": 64,
    "contributors": [
      "Joel Hooks"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/y2q8t",
    "path": "/podcasts/turn-a-side-project-into-a-career-with-nick-dejesus",
    "published_at": "January 3rd, 2020",
    "url": "https://egghead.io/api/v1/podcasts/turn-a-side-project-into-a-career-with-nick-dejesus",
    "edit_podcast_url": "https://egghead.io/podcasts/turn-a-side-project-into-a-career-with-nick-dejesus/edit"
  },
  {
    "id": "podcasts-00000000000000000254",
    "title": "Writing The Book On Data Visualization With Amelia Wattenberger",
    "summary": "Amelia Wattenberger talks with Joel Hooks about the book she wrote on data visualization with D3. ",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/4995cd48-4a36-44a4-9359-6d4c7d36721d/amelia-wattenberger-podcast_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/55d7f360-05c1-43af-9c2d-eb89e156734a/e3d5b874-4aed-4cd5-8665-613eba7bb6d0/logo.jpg",
    "simplecast_uid": "4995cd48-4a36-44a4-9359-6d4c7d36721d",
    "transcript": "<p><strong>Amelia:</strong>             Hey Joel.</p><p><strong>Joel:</strong>               How are you doing today?</p><p><strong>Amelia:</strong>             I'm good. How are you?</p><p><strong>Joel:</strong>               I'm doing all right. I'm really excited to talk to you. You recently dropped this amazing post on React hooks that completely blew my mind and was probably one of the coolest presentations of not only React hooks but programming concepts in general. And I want to get into that. But first I am going to go right into this book that you've written Fullstack D3 and Data Visualization. It's a 600 page book. This is something that if you had a physical printed copy you could use to defend yourself. And I'm wondering, I want to talk about your book more, but I was also wondering what the experience was like for you writing something like this, writing something this comprehensive and how was that as a process?</p><p><strong>Amelia:</strong>             Yeah. Yeah. And the funny thing is we're actually working on a hardcover right now and these are very beefy books. I think they're three pounds or something. The funny part is I didn't ever start, I never thought to myself, \"Hey, I want to write a book or I'm going to write a book.\" The way it started is that Fullstack, which is now New Line, but at the time they were Fullstack. They had a survey for people who wanted to submit book ideas just to see if it would be a good fit and I stumbled across this survey and I was originally thinking, \"Hey, it'd be awesome to write a book on React.\" This is something I've been focusing on for awhile. I have a ton of opinions. I think it's hard to wrap your head around and I can provide a unique insight and then I realized that they already have one or two books on React.</p><p><strong>Amelia:</strong>             So I was racking my brains trying to think about what else would I be passionate about that I would want to think about for the amount of time that it would take to write a book. And I've been working as a front end developer and designer on dashboards for must be eight or nine years now. So data visualization is definitely something that has been something that I have to think about all the time.</p><p><strong>Joel:</strong>               Yeah. It's on your mind a lot.</p><p><strong>Amelia:</strong>             Yes, a lot. It's never actually been part of my job description or anything, but it's something I think about a lot. So I submitted the survey saying, \"Oh, would you be interested in writing a book about data visualization?\" Originally thinking it would be a theory book and thinking that they would say no because it's kind of out of left field for Fullstack since they write about frameworks a lot of the time. And they came back and they were like, \"Yeah, that sounds interesting.\" And so it was just a very inner process of the next step was writing an outline. So we did some research into what are the biggest blockers that people run into and what is it like as a developer trying to visualize data or learn D3.JS, D3.JS is kind of the defacto library that people will use to create custom data visualizations on the web.</p><p><strong>Joel:</strong>               I would say it has a reputation also. Both as amazing software and also accepting that it takes a little bit of effort to learn, I think.</p><p><strong>Amelia:</strong>             Yeah, it definitely has a learning curve, that's for sure. I see it as there's a spectrum of, at the top of this or on the right of the spectrum, you have tools like Tableau or like very full feature charting libraries that will do most of the work for you and you just input a dataset and then you say, \"I want a line chart or a bar chart.\"</p><p><strong>Joel:</strong>               Would you say that that literally puts you in a box though?</p><p><strong>Amelia:</strong>             Yes, yes. And I have a lot of opinions on that. There's pros and cons.</p><p><strong>Joel:</strong>               Yeah, yeah, for sure.</p><p><strong>Amelia:</strong>             And then all the way on the other side of the spectrum is D3 where it's not opinionated. You can do basically whatever you want with it. It's kind of just a library of tools that you can use to visualize data and it's all the way over here so it has the pros of being flexible, you can do whatever you want with it. And then the cons are you have to know what you're doing kind of and it takes a long time to learn. So I think that's the trouble that most people run into. And then a lot of people, they'll just end up moving more towards the middle of the spectrum where there's fairly low level charting libraries where you can, like if you're in Reacts, you can use the React charting library and stay in React and say, \"Hey, I want to learn chart.\"</p><p><strong>Joel:</strong>               Built on D3 too. They're charting libraries that are abstractions on top of D3, which is kind of a low level data visualization tool.</p><p><strong>Amelia:</strong>             Yes. I think pretty much all charting libraries on the web use D# to some extent.</p><p><strong>Joel:</strong>               Yeah. It's a good place to start. Starting from scratch with your ... to get what D3 offers from scratch is, I would call it non trivial, I think.</p><p><strong>Amelia:</strong>             Yeah. Yeah. That's part of the reason. That's so true. And that was a big motivation behind writing the book is because I went down the same path that most people go down with D3 where they're like, \"I work at this company and they need a dashboard or they need charts. They have this data they need to visualize. I have no idea what's going on. Let me Google bar chart in JavaScript. Look, I found an example, I'm going to copy and paste this code and then somehow it works or it doesn't work and I'm going to bang my head against it.\" But it's hard to know what every line of that code does. Because it's new concepts. Every single line is a new concept I've never run into before as a normal developer.</p><p><strong>Joel:</strong>               Yeah. You can get it done, you'll find it on Stack Overflow and you drop in your bar chart and it's like, \"Okay, well this works. Just please don't touch it. Please don't.\"</p><p><strong>Amelia:</strong>             Yeah. You'll have comments like, \"Don't touch this line. I don't know why it's working, but it does.\"</p><p><strong>Joel:</strong>               Do not change anything. This is it, yeah. So you mentioned your research process for the book and I'm wondering could you go into more depth? How do you even approach that and with Fullstack at the time. I know some of those folks that they work over there and I was wondering, are they supporting that process and helping you do the research or how did that work in terms of figuring out how you going to write something and kind of keeping the scope contained but also making it bountiful as well.</p><p><strong>Amelia:</strong>             Yeah. Yeah. Without them I 100% would not have written a book. They have good experience and processes. So doing research for the outline, we'd do things like look on Stack Overflow to see what are the biggest issues people have with D3. Find the watering holes too.</p><p><strong>Joel:</strong>               Sales Safari. That all comes from Amy Hoy. So you say watering holes. So Amy Hoy is where RA Lerner and myself were in the same graduating class of Amy Hoy's, how to start an internet business seven years ago. So Fullstack and Egghead actually started at the same time. So watering holes, can you explain what a watering hole is?</p><p><strong>Amelia:</strong>             I'm using jargon that I don't completely understand.</p><p><strong>Joel:</strong>               No, I think it's awesome actually that it comes up, that's amazing. It's really cool.</p><p><strong>Amelia:</strong>             As far as I understand it, a watering hole is where people within the community who would be reading the book, would go to discuss like, \"Hey, I'm having this problem.\"</p><p><strong>Joel:</strong>               Or talk about their pain.</p><p><strong>Amelia:</strong>             Yeah, yeah. So that's the perfect place to go to understand for the people who would be reading the book, what would they need and that they're not getting online. Because there's tons of tutorials, there's tons of chart examples online and for some reason that doesn't do it. That doesn't get someone from not knowing how to use D3, to knowing how to create a chart. So figuring out where those holes are.</p><p><strong>Joel:</strong>               I think that's an interesting point too because a lot of times I hear this even down to the blog post level, where somebody will say, \"The feeling is this has already been written.\" And I was wondering, did you feel that when you're starting out? Like there's already books on D3, there's already blog posts or did you have the confidence to say, \"Well my opinions need to be expressed and I have a lot to say.\" Or how did that work for you?</p><p><strong>Amelia:</strong>             Oh my goodness. So much though, because I mean imposter syndrome is just really easy to have in the first place. And also when you're doing the research, you're also looking at prior art, existing books that have been written on the same thing you want to write a book about and you go through and look at the table of contents, you see what they wrote about just to figure out how someone else would break down this subject.</p><p><strong>Joel:</strong>               Yeah. Structurally right?</p><p><strong>Amelia:</strong>             Yeah, yeah. So I've seen all of the books on D3.JS and I at least skimmed over all of them before writing it. So it's hard to do that kind of research and then still feel like, \"Hey, I'm going to write another book. I know there's already 20 books, but one more would be great.\" But I think, what I tell myself is that everyone has a unique perspective. So I think it's not that everyone's perspective is important, but there are going to be certain learning styles that work for some people and others that work for others. So you can't do wrong by providing more learning materials for something.</p><p><strong>Joel:</strong>               Nobody's ever going to say there are too many books on D3. We need less books on D3 or JavaScript or React or anything in my opinion, it's like you have a unique journey. You learned it a certain way. You are a professional and an expert and you have something to offer. And maybe not 650 pages of book, not everybody has that in them. But how do you compare that to, you blog and you write tutorials that way as well, how do you compare the book process to how you develop say a blog post?</p><p><strong>Amelia:</strong>             Yeah, that's a good question. I think it was actually a lot easier for me because of the work that was put in at the beginning. We did a lot of work for creating the outline and figuring out what each chapter would cover. And then what I really loved about writing this book is that each of at least the first six chapters is working through a code example. So the first chapter gets you through creating a line chart, I think. And then the second chapter is a bar chart. The third chapter is a scatter plot, while teaching different concepts throughout the tutorial through a specific chart, which is nice to keep it concrete that way. And it also made it nicer for me for writing it because I'm a developer by trade. This is what I have historically been doing and have a lot of experience at, so being able to ease into a chapter by working on the code first and then iterating on the code and taking notes on what did I struggle with or what are some gotchas that people might run into?</p><p><strong>Joel:</strong>               Trying to learn it yourself, getting back into that beginner's mind.</p><p><strong>Amelia:</strong>             Yeah, yeah, yeah. Which I think could be really hard because you're really trying to pull people up to where you are.</p><p><strong>Joel:</strong>               Yeah. So you approach an example and you're approaching it as if you ... like what do I need to do to learn this, is a different mindset than, what I need to do to get the job done and get the bar chart up for whatever at work. It's a different kind of process if you are actually wanting to analyze what it is you want to teach and show somebody else. A lot of people too, because there's a lot of people that are hopefully going to read the book and come behind you so they are all going to struggle at some level, I would assume.</p><p><strong>Amelia:</strong>             Yeah. Yeah totally. And that kind of approach made it, I think a lot easier to write each chapter of the book. The chapters, they just kind of like, I would sit down and just start writing and they would come pretty easily. But then sometimes with blog posts they're not well scoped and I am the queen of scope creep. I will scope croup the thing to death, so there's not those constraints. So I'll just sit down. This past blog post I sat down and I said, \"I have like one statement to make.\" And then six, 10 hours later I had a lot more text on the page than I was expecting.</p><p><strong>Joel:</strong>               Do you consider blog posts done? When you write something like that is it finished or are you ... I've been lately saying I'm tending a garden in a lot of ways and trying to come back to things and think about them and not be so bent on making a complete tutorial when I write these things.</p><p><strong>Amelia:</strong>             Yeah, I definitely prefer that outlook. One, because it makes it easier to throw out into the world because they never truly feel finished with anything. And two, because I don't know, I guess the concept of the blog is kind of interesting, especially for a technical blog to say, \"This is my newest blog posts.\" It doesn't matter when you wrote these things.</p><p><strong>Joel:</strong>               Date matters almost not at all.</p><p><strong>Amelia:</strong>             Yeah. Or it shouldn't. I would say for a good blog.</p><p><strong>Joel:</strong>               It's the number one way to devalue your blog posts to those folks listening, is to put a date on it because people will look at that day and go, \"Oh, this is three years old. This doesn't matter anymore.\" And guess what? It still does. Technology does not move as fast.</p><p><strong>Amelia:</strong>             This has expired. This is stale. We can't use this anymore. It is nice sometimes when D3 went through a little bit of a syntax change for version four. So in that kind of thing the date would matter. But honestly-</p><p><strong>Joel:</strong>               The date or the version number matter more to me. to me it's like D3, D4 because we have some D3 content on Egghead and it's like even the old stuff is actually still valuable in terms of concepts and context. As long as you understand that if you try to use the newest library it's going to be broken.</p><p><strong>Amelia:</strong>             Yeah, totally, totally.</p><p><strong>Joel:</strong>               In a book like yours, there's a lot of interesting concepts in there and to me one of the coolest thing that ... I've read a few data visualization books and I've never seen somebody right up front encourage people to bring their own data and I thought that was amazing. You say, \"Hey, go get a data set for your town and your weather.\" And I want to know why did you make that choice and where did that come from?</p><p><strong>Amelia:</strong>             Yeah, that was probably the hardest part of writing the book is figuring out what dataset to use because there's both too many and too few data sets out there.</p><p><strong>Joel:</strong>               Lot of data, too few good datasets maybe, I don't know how you'd phrase it.</p><p><strong>Amelia:</strong>             Yeah, a lot to dig through and then you have to figure out can I use it in a book? That kind of thing. And then is this something everyone will understand or are there too many metrics? Is it going to be overwhelming? And so what I ended up using was a weather dataset, which it was actually really hard to find one that people wouldn't need to go through too many steps to get their own weather dataset. I was pretty shocked about that. But it's ideally the last year of daily weather points. So for each day you have what was the precipitation rate and did it snow, what was the temperature, what was the min temperature. So it was just a good set of numerical data and quantitative data and qualitative data and a year's a good length to play with.</p><p><strong>Joel:</strong>               I think you don't have to explain it to anybody either too and that's important. Some data domains you're going to have to ... people are going to have to actually learn and understand the domain and with weather we all have to wear a coat or some shorts or whatever.</p><p><strong>Amelia:</strong>             Yeah, most people have some concepts of weather.</p><p><strong>Joel:</strong>               Yeah hopefully.</p><p><strong>Amelia:</strong>             And another thing that was really cool about it, well, so part of the reason that I like for readers to grab their own dataset is I could include, I think I include New York city data, but that might be very meaningless to someone who lives in South America. It's just numbers at that point. But for someone to go and get the weather data for where they are, it all of a sudden becomes meaningful. When they finish the first chart, which is max temperature over time, they get to actually see what it was for where they are, which kind of gives you more of the feeling that you will hopefully get when you visualize your data at work or your own personal data.</p><p><strong>Joel:</strong>               I think it's interesting too because when you mention it that way it gives a person ... you might remember that day, when you see that hottest point on your graph, you might remember that hottest day of the year or the coldest day of the year or that period where it was super frosty or whatever. And then you can relate to that data and start to understand. So we have the D3 part, which is its own ball of wax, and then you actually have the data visualization piece, which to me, you get into design and how do you do this and how do I make something useful and being able to contextually feel that like, \"Oh that was when it was colder. I remember that.\" I think that's probably pretty important as well.</p><p><strong>Amelia:</strong>             Yeah, yeah. Yeah. We did a beta reader group, so before the book was finished and published, we had a group of people, it was a really great group. They would go through each of the examples and they would read through the chapters. And in my first drafts, I wanted people to plot where freezing was on the chart. And thankfully we did a beta reader group because someone in Africa said, \"Hey this rectangle does not show up on my chart.\" Because their temperature never gets below freezing. And I was like, \"Oh of course.\"</p><p><strong>Joel:</strong>               Yeah, that makes sense. So speaking of the data visualization side of this, how do people start learning the design principles you need to create some sort of data visualization? You need to be a designer or what sort of core skills can you learn to get started visualizing data and making meaningful visualizations that other people can use?</p><p><strong>Amelia:</strong>             Yeah, yeah, that's a good question. I figured when I first thought about this book, I thought I would focus pretty extensively on this because it's a huge question and it's something that especially developers struggle with. But we have one or two chapters that help you deal with, \"Hey, I have this dataset. What do I do?\" And I think that one of the biggest issues that people have is that they'll look at one of these chart taxonomy charts or they'll think of, \"Oh, these are the basic chart types.\" And then they'll say, \"Okay, which one fits my data? Oh, is this a bar chart? Is this a line chart? Is this a scatterplot?\"</p><p><strong>Amelia:</strong>             And, I don't know, that frustrates me a lot because I would really prefer people to see it as, I have these metrics, let me figure out what's important. There's the different ways to display a metric, to visualize it, work better or worse based on what dimension you're displaying it in. So say I have temperature, I can show that as a vertical position, I can show that as a color, I can show that as the size of a circle and there's a ton of basic physical properties and facts about human perception that all come into play and it gets much more complicated when you try to understand data visualization on a fundamental level, but you're going to end up with better charts that are easier to read for your users than if you approach it from a chart picker kind of approach.</p><p><strong>Joel:</strong>               I think for me personally, and this is a long running subject and I'm not a very good ... I don't have a lot of practical experience, it's just an area I'm interested in. And I read The Visual Display of Quantitative Information by Edward Tufte and I was almost intimidated and discouraged from even trying because I'm looking at that and it's like, \"I'll never get to this level.\" Which is probably true. I just don't have the time and energy. But do we have to go that far? Do we have to take it to that extreme to get useful information and data visualization that is interesting and useful to the people that are looking at it, which is probably the actual point.</p><p><strong>Amelia:</strong>             Yeah, yeah. Yeah. It really depends. It's interesting, I'm part of this Slack group for people who do data visualization and it's interesting the variety of backgrounds that people are coming from and the amount that they actually do data visualization in their day to day jobs. I feel like it's the new UX design or UX research.</p><p><strong>Joel:</strong>               It's definitely a subset of that for sure, I would think.</p><p><strong>Amelia:</strong>             Yeah. Yeah. And I found that a lot of my user experience design background has come into play. There's a lot of crossovers with UX design and data visualization and the way I like to look at it is visualizing data is really just communicating. It's just trying to show a reader what the shape is of the underlying data.</p><p><strong>Joel:</strong>               I liked what you said too, where it's, you have different extremes and different ways, these are all numbers, but you can apply color values or shapes or size and all these different ways and kind of almost play and explore and what's meaningful and what registers, to get the idea across to have the ultimate outcome of the dataset that you're trying to help people to understand. That's the true point. And that's the point of user experience. It's not, is this site pretty, it's, are we building something that's useful and gets the outcomes that people want.</p><p><strong>Amelia:</strong>             Yeah, exactly. There's the user experience design part and there's the UI design part of, I just want it to look nice and have my brand colors.</p><p><strong>Joel:</strong>               Yeah. And I mean, you can make nice looking charts that are totally meaningless, they're missing labels on their axes or they're like, \"Wow, cool chart.\" But if it's not helping anybody and then not to say for the sake of art, you can't make cool charts. But generally speaking, we're trying to convey information and encourage specific thoughts.</p><p><strong>Amelia:</strong>             Yeah, yeah. There's this whole field called data art which is kind of like an offshoot of data visualization, which is just, we've made art from data and there's this underlying data that I promise you it's there but you can't understand it.</p><p><strong>Joel:</strong>               I love graph data with physics applied. You have big graphs and the physics go in and different weights for different data pieces. And it's kind of like what you're saying where there's colors and all this stuff. And even when it's meaningful data and you can spot patterns and do different stuff with it, I love it as a purely aesthetic, visual, like look at that data. And I might be a nerd, I don't know.</p><p><strong>Amelia:</strong>             Yeah, yeah. I also like data visualization because it's in this in between, between science and art. We try to create rules for data visualization, but also there are no rules.</p><p><strong>Joel:</strong>               Often interesting results are when they break the rules.</p><p><strong>Amelia:</strong>             Yeah, exactly.</p><p><strong>Joel:</strong>               Something like, well I would have never thought of that. And you see it in a new light.</p><p><strong>Amelia:</strong>             Yeah. There's this recent proliferation of bar chart races on Twitter. Which is just, it's a bar chart that changes. So I forget, the original was showing brands over time or something like that and it was, you have to sit there and watch it for a minute or two minutes, just sitting here. You're just sitting here watching something for two minutes when this could easily have been shown with a line chart. So there's something so weird about what is appealing to people, why am I willing to sit here for two minutes and watch these bars?</p><p><strong>Joel:</strong>               Almost like the entertainment value of it, to convey information as well. Engaging people that length of time. I really now I feel like I need to get more deep into data visualization, Twitter because it sounds like my kind of place.</p><p><strong>Amelia:</strong>             It's a great place.</p><p><strong>Joel:</strong>               Yeah, I imagine. So I want to talk about this blog post thinking in React hooks. I think it blew up. Was that safe to say that you had a lot of interest in this particular post?</p><p><strong>Amelia:</strong>             Yeah. It's so funny because I'm sitting here thinking like, \"Yeah, I've made better things. It's okay.\"</p><p><strong>Joel:</strong>               It's neat though. And I think what blows people's minds is you scroll through this post and it's talking about hooks, which is interesting, anyway, it's kind of a new way of thinking about our React applications and everybody's kind of in the midst of, I need to learn this thing. And they've only been around for a year and it's this whole paradigm shift. But then you get in and it's colorful. The code examples are great. There's neat elements that happen on the screen to show me, don't do this and do this. And I feel like that sort of presentation is really, really great to help introduce something that's a very dense and kind of anxiety filling concept for a lot of people. Like, \"Oh I got to like change my React app. What does this mean to me?\" And you are really teaching people to literally think in hooks. And I was wondering, how did you go from not even knowing what a React hook was, to kind of having this delightful visual explanation of React hooks that you shared with the entire world?</p><p><strong>Amelia:</strong>             That's a good question. Yeah, actually, I was a late adopter of hooks, I kind of just ignored it for a while.</p><p><strong>Joel:</strong>               I like to wait ane see a little bit.</p><p><strong>Amelia:</strong>             Yeah, I'll let someone else guinea pig that one. I guess, this is the one I was talking about previously where I noticed myself starting to use because I think most people try to map hooks on to their existing knowledge of life cycle events with class components. And I started off that same way saying, \"Okay, use effect is this.\" And it's component did mount and [inaudible 00:27:53]. And then I noticed myself starting to use them in a way that was more syncing data and it felt more natural. And when I had realized that it was kind of more of a paradigm shift, I was like, \"Oh this would be good to write about because it's something that wasn't immediately obvious to me.\"</p><p><strong>Amelia:</strong>             So that's where it started. And then it was really just working through like, \"Okay, put yourself back in the old mindset. What would you need to bridge the gap, to explain to you how you would need to change your mental model.' And then so I think what people find cool about the thinking in hooks, I post is that there's side-by-side old and new examples, which I had originally and then I posted on Twitter asking, I forget what I asked, but people responded with examples of git merge tools where they use those smooth curves in between like ...</p><p><strong>Joel:</strong>               The connecting lines.</p><p><strong>Amelia:</strong>             Yeah, the old code and the new code. And at first I was like, \"No, that seems really hard.\"</p><p><strong>Joel:</strong>               It's true.</p><p><strong>Amelia:</strong>             Yeah. And then I finally talked myself into trying it and it actually ended up being easier than I had originally thought. Just using SVG curves.</p><p><strong>Joel:</strong>               SVG is amazing.</p><p><strong>Amelia:</strong>             It really is.</p><p><strong>Joel:</strong>               Yeah. Yeah. It's a wonderful, wonderful tool.</p><p><strong>Amelia:</strong>             Yeah. SVG is great. And I think not enough people understand it.</p><p><strong>Joel:</strong>               I always send people to Sarah Drasner's book. I think it's in terms of getting to know SVG and truly kind of understanding the potential, her book is really pretty awesome.</p><p><strong>Amelia:</strong>             Yeah. Yeah. She's great. I did a workshop at a conference recently, at a data visualization conference recently talking about these are the basics of this SVG and even researching that, I couldn't find any good resources other than the MDN docs for figuring out what are the basic shapes? So we're planning-</p><p><strong>Joel:</strong>               It's been around a long time too right?</p><p><strong>Amelia:</strong>             Yeah, yeah. It's been, I don't know, 10 years or something crazy. And one of the hard things with SVG is that the implementation is so inconsistent across browsers, that it can be frustrating. And then I can see that people would just try it and then like, \"Oh, I looked at it in Firefox. It doesn't work. I don't know, I give up, let's get a graphic.\" So yeah, I think part of what's cool about this post is the SVG curves between the old and new code.</p><p><strong>Joel:</strong>               Again, certainly understandable and familiar. There's a comforting familiarity to it that makes it like, \"Oh, okay, I see.\" And it's a diff and we kind of get that as developers, it's speaking the right language, but visually.</p><p><strong>Amelia:</strong>             Yeah, yeah, exactly. And I'm always trying to find ways to use web technology because I feel like we've just taken books and we've taken newspapers and we've put them in our computers and we're like, \"Yep, this is the best it's going to get. This is the way people learn.\"</p><p><strong>Joel:</strong>               Lies.</p><p><strong>Amelia:</strong>             It's a lie.</p><p><strong>Joel:</strong>               Yeah, it's true. There's so much potential. And that's what blew my mind when I saw your post was it's just peeling it back. And Bret Victor's been talking about this for a long time and there's a lot of talk about the potential of learning on the web, but I don't feel like we've seen that. Egghead is videos and then we also have texts. But how do you combine all of this to give people a really truly engaging, effective, learning experience that helps them meet their goals. And there's a lot of work to do I think.</p><p><strong>Joel:</strong>               I'm so happy to see your style of presentation and pushing the envelope. And I think it's going to be ... it really is, it's inspiring us to push our work further and I think it's going to help people and it's really truly a great resource. And I wanted to thank you for creating that and kind of pushing the envelope because I think that takes a level of commitment and even bravery to get out there and do that sort of thing. So I appreciate that. Thank you.</p><p><strong>Amelia:</strong>             Thanks. I appreciate your appreciation. I feel like I partially don't deserve it because a lot of the motivation behind it is that I don't love writing.</p><p><strong>Joel:</strong>               Oh, so you can get away with not writing by, okay, well I'll spend 25 hours making visualizations instead of just writing words.</p><p><strong>Amelia:</strong>             Yes. I'm very good at procrastination.</p><p><strong>Joel:</strong>               That's a fine approach. And then I also love how ... and you give us a bunch of resources down at the bottom and you kind of amplify other voices and the whole thing is just, it would be like my starting point. Oh you want to learn hooks, here go jump into this and this should give you a good idea. And I also love how you did it collaboratively. You asked for feedback, you didn't try to hold this thing and do the big reveal at the end. It's like, hey. And how did that go for you actually? I was curious, kind of doing the writing in public and creating that thing. Was that a good experience?</p><p><strong>Amelia:</strong>             Yeah, I really love doing that for a few reasons. One is that Sharon along the way keeps me motivated because people will say like ... I'll work in the evenings and then I'll post a screenshot on Twitter and then I can wake up the next day and have people saying like, \"Oh, this is great.\" Which is really nice because I'll creep the scope but then share along the way so then it'll keep you motivated even though-</p><p><strong>Joel:</strong>               Keep you in check too.</p><p><strong>Amelia:</strong>             Yeah, doing way too much. And people have great ideas on Twitter, the swoops in this blog posts were definitely not totally my idea and I don't know, I have the nicest Twitter followers, so people are generally really nice.</p><p><strong>Joel:</strong>               Yeah. Twitter for the most part is a pretty great place. That has helped me. If you can avoid the not great parts of Twitter, the great part to make the whole thing worth it.</p><p><strong>Amelia:</strong>             Yeah. Yeah. Still in that positive for me, although I hear once you pass 10 K followers, it gets ...</p><p><strong>Joel:</strong>               I just did. I sat at like 9,700 Twitter followers for probably six weeks and then in a week finally. It hasn't changed for me.</p><p><strong>Amelia:</strong>             Okay, good.</p><p><strong>Joel:</strong>               But I know everybody's experience is different. Amelia, thank you so much for hanging out with me this afternoon and chatting about this stuff. I really appreciate it. I think people should totally check out your book. It sounds like your Twitter is a good place to find you as well. Thank you again and I look forward to talking to you in the future.</p><p><strong>Amelia:</strong>             Yeah, thanks so much. This has been a ton of fun.</p>",
    "slug": "writing-the-book-on-data-visualization-with-amelia-wattenberger",
    "description": "<p>D3.js is the defacto library that people use to create custom data visualizations on the web today. It's powerful and flexible. You can do whatever you want with it. However, that kind of power and flexibility comes at the cost of complexity. You have to know what you're doing, and it takes a long time to learn. </p><p>There's existing content written on D3, but there's always room for another voice. With the help of Newline, Amelia wrote the book of over 600 pages, <strong>Fullstack D3 and Data Visualization</strong>. In this book, she teaches all the theory and application you need to know to make badass visualizations using D3. </p><p>Amelia also takes the unique approach of having you use your own dataset! Data that means something to you is going to be much more interesting than anything that could be provided.</p><p>As a React developer, Amelia wrote the excellent blog post <a href=\"https://wattenberger.com/blog/react-hooks\">Thinking in React Hooks</a>. She says that you have to make a paradigm shift with hooks. You can't keep thinking about your components in terms of lifecycle, but instead, think about them in terms of data synchronization. </p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/writing-the-book-on-data-visualization-with-amelia-wattenberger/transcript\">\"Writing The Book On Data Visualization With Amelia Wattenberger\" Transcript</a></p><h3>Resources</h3><ul><li><a href=\"https://www.newline.co/fullstack-d3\">Fullstack D3 and Data Visualization</a></li><li><a href=\"https://www.amazon.com/Visual-Display-Quantitative-Information/dp/1930824130\">The Visual Display of Quantitative Information by Edward Tufte</a></li><li><a href=\"https://wattenberger.com/blog/react-hooks\">Thinking in React Hooks</a></li></ul><h3>Amelia Wattenberger</h3><ul><li><a href=\"https://twitter.com/wattenberger\">Twitter</a></li><li><a href=\"https://wattenberger.com/\">Website</a></li></ul><h3>Joel Hooks</h3><ul><li><a href=\"https://twitter.com/jhooks\">Twitter</a></li><li><a href=\"https://joelhooks.com/\">Website</a></li></ul>",
    "duration": 2102,
    "episode_number": 63,
    "contributors": [
      "Joel Hooks"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/svmg5",
    "path": "/podcasts/writing-the-book-on-data-visualization-with-amelia-wattenberger",
    "published_at": "December 11th, 2019",
    "url": "https://egghead.io/api/v1/podcasts/writing-the-book-on-data-visualization-with-amelia-wattenberger",
    "edit_podcast_url": "https://egghead.io/podcasts/writing-the-book-on-data-visualization-with-amelia-wattenberger/edit"
  },
  {
    "id": "podcasts-00000000000000000287",
    "title": "Test Driven Accessibility with Erin Doyle",
    "summary": "Erin Doyle talks with Joel Hooks about React and how she takes a test driven approach to accessibility.",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/858342e8-af72-4f87-8c06-a8bbe4591493/edited2-2019-06-11-t06-49-37pm-joelhooks_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/55d7f360-05c1-43af-9c2d-eb89e156734a/851204d0-ec32-411e-b441-ab3e0dbd8109/logo.jpg",
    "simplecast_uid": "858342e8-af72-4f87-8c06-a8bbe4591493",
    "transcript": "<p><strong>Joel Hooks:</strong>         Hi Erin.</p><p><strong>Erin Doyle:</strong>         Hey Joel.</p><p><strong>Joel Hooks:</strong>         So I'm really looking forward to talking to you. I think accessibility is one of the key essential questions in software development right now, especially in the the web development space and you are a software developer and an accessibility cha champion. But first I wanted to get to know you a little and I wanted to understand maybe how you got started in web development to begin with.</p><p><strong>Erin Doyle:</strong>         Yeah, absolutely. So I don't know, just from when I was really young. I was one of the few kids I knew that like had a computer at a really young age, and I just loved doing stuff on the computer and figuring it all out. So when I went to school it was like, do I do computer science? I also was really into music, so I ended up going the music route. But I continued to take classes and tinker in my free time. And by the time I graduated, unfortunately I just finished a degree in something I decided I didn't want to do anymore and that I actually really loved programming.</p><p><strong>Erin Doyle:</strong>         So I found a job that thankfully allowed me to work on projects. They wouldn't hire me to become a fully fledged programmer without a degree. At that point of time you had to have the credentials and I didn't. But I was able to tinker and work on special projects, and prove that I could do it. And in the meantime went and got a Master's in computer science. And finally by the time I had that I was pretty much doing the job and was loving it. So it's something that I've just been jazzed about from the beginning.</p><p><strong>Joel Hooks:</strong>         So when you're a youngster, get into computers and exploring that, what drew you in? What was exciting to you at that time?</p><p><strong>Erin Doyle:</strong>         I'm not quite sure what it was, but they were just so fun, and I'd say even thrilling, like using a computer and maybe having to figure something out, or having to fix something was thrilling, once I did. And I guess maybe that's part of what I love about programming. It's this emotional roller coaster of like, \"I've got a problem to solve. Either I need to do something new or something's not working, and I need to figure out how to get it to work.\" And maybe I bang my head against the wall for a little while and I get frustrated, and it's always just a matter of time. I almost feel like there's nothing we can't do, we just have to give it enough time and eventually you figure out the solution. And I feel like I'm a rock star. Like \"Yeah, I figured it out, I'm awesome.\" And then you iterate, you start again.</p><p><strong>Joel Hooks:</strong>         I don't think there's nothing I've ever experienced in my life that took me from the highs of feeling like some sort of genius for a minute, to the lows of feeling like I'm absolutely incompetent quite like programming computers.</p><p><strong>Erin Doyle:</strong>         It's really pretty amazing like that. We really do have that constant bipolar nature to it. Yeah, you do go home at the end of the day sometimes and you're like, \"Oh, I'm an idiot, I suck. I can't do it, so embarrassed.\" And then you figure it out, and like you said, you're like, \"I am awesome. I am a genius.\"</p><p><strong>Joel Hooks:</strong>         Often after that night's sleep where you wake up in the morning with do your eyes popped open and going, \"I know how to do it.\"</p><p><strong>Erin Doyle:</strong>         Yes, and it's amazing.</p><p><strong>Joel Hooks:</strong>         Yes, It's wonderful.</p><p><strong>Erin Doyle:</strong>         It is.</p><p><strong>Joel Hooks:</strong>         And I think it's that kind of feedback loop. It's almost like a puzzle, we're constantly solving this infinite puzzle. And there's so many rungs of mastery to climb too, which is awesome.</p><p><strong>Erin Doyle:</strong>         Absolutely, that's definitely a cool part. It's like no matter how long you've been doing it, there's still the times where you know nothing. Or you continue to make stupid mistakes, and there's always more to learn. So it's like we're constantly beginners, so it's really cool in that way.</p><p><strong>Joel Hooks:</strong>         I think it's interesting that you studied music. And I don't know if you've noticed this before, but I've talked to quite a few people that have gone that route. Where they studied music and got through their undergraduate degree, and discovered that that music probably wasn't going to be their career and switched to programming. And I was wondering, have you ever noticed any correlation or any similarities between those two disciplines that would cause that phenomena?</p><p><strong>Erin Doyle:</strong>         I have. I've definitely no known a number of people who had music backgrounds or music degrees and ended up in programming. And I don't think I've ever really put my finger on why those tend to be drawn to each other. Maybe it's discipline, you have to have an immense amount of discipline to be a musician, and that was maybe one of the things that turned me off. They were telling me I needed to practice five hours a day, and that was just more than I wanted to commit. But there's just something about the learning process, and the practicing and the dedication that...</p><p><strong>Joel Hooks:</strong>         The mindset that goes along with [inaudible 00:05:14]?</p><p><strong>Erin Doyle:</strong>         Yeah, I think that somehow those two relate really well to each other. And maybe like you're saying, the mindset, the thought process, somehow they do correlate well. And I don't totally understand it, but like I said, I've known a lot of people come from music backgrounds who end up in programming. It's pretty cool.</p><p><strong>Joel Hooks:</strong>         Mm-hmm (affirmative), it's neat. So what are you doing now? What's your job and what tools do you use?</p><p><strong>Erin Doyle:</strong>         So I work on a team that focuses primarily on e-commerce business to consumer retail application. We're in the gift cards space, and we re-wrote this application from scratch about three years ago with a new React-based stack. And that's when I started working at this company. So I'm a full stack, I've always done full stack which I really enjoy. I like being the jack of all trades, and I have to be okay with being master of none. But we cover... Of course accessibility has been a top priority of this application that we're primarily focused on. But it's got a lot of fun challenges. There's localization, internationalization, security, performance, all of those things. I think because it's e-commerce, we have to constantly be thinking about all of those things.</p><p><strong>Joel Hooks:</strong>         So you use React, and I was wondering how that's been for you as a tool, using react to build this? And a big rewrite too, so that's a significant improvement.</p><p><strong>Erin Doyle:</strong>         Yeah. So when I joined this company and they were starting this app from the ground up with React, I was coming from more of an Angular background. I was a huge Angular fan. And up until that point I was thinking, \"Oh, React is just this fad.\" My first look at it was like, \"Oh, JSX is weird, I'm not sure I like it.\" And it wasn't until I finally stopped, opened my mind, did some research on it, it didn't take long before I really saw the power and beauty of it.</p><p><strong>Erin Doyle:</strong>         And definitely as we started developing the app, especially from the beginning where you're still figuring out how you want to architect things. And you end up needing to move components around, or compose things differently. It was just so much easier to do that with React. I feel like the way you can architecture components makes reuse so easy, and it really makes accessibility easier, I found. You can create lower level, we call them primitives, so primitive UI-related or concerned components that have the accessibility built into them. And then you can reuse them throughout your application.</p><p><strong>Erin Doyle:</strong>         Every single time you need an input, you don't have to write all the accessibility around that input and remember what attributes do I need, and what do I need for this and that? You can build that into your component, and then it's just always there. And we've gone on to share... We've got a primitives library that we created, which the components are accessible. And they've also got styling built into them. And we've been able to share those across all of our React applications, so we've got consistent design across applications and we've got accessibility covered across applications. So it's been really helpful in that way.</p><p><strong>Joel Hooks:</strong>         So you teach accessibility workshops for web developers. And I was wondering, I'm sure this comes in part of the intro to a workshop, but what is accessibility? What does accessibility mean in terms of of web apps?</p><p><strong>Erin Doyle:</strong>         Yeah. So when it comes to web applications, we're talking about making sure that the web is usable by everybody. And a lot of focus ends up being put on people with disabilities. People who are blind, deaf, have cognitive issues, motor skill issues. But it really encompasses way more people than that. There are people who have temporary impairments, maybe you broke your arm. Or you're on some medication that makes your head foggy, so you have cognitive difficulty. Or maybe it's environmental, maybe you're outside and you're using your mobile device and there's screen glare, so the contrast is impacted. Maybe you're in a noisy space, so you can't hear something you're trying to listen to without subtitles.</p><p><strong>Erin Doyle:</strong>         Those things can happen to anybody at any time. And then as we age, we pick up various impairments with our vision, our motor skills, our cognitive abilities. So really at any point in time, anybody is going to be impacted by the web being inaccessible.</p><p><strong>Joel Hooks:</strong>         It's all of us.</p><p><strong>Erin Doyle:</strong>         Yeah, it's all of us at any time, and it's however we need to use the web. So whatever tools we need to use. If it's a screen reader, if it's voice control. If it's a Braille display, if it's switched selectors. There's an immense amount of assistive technologies and tools. Or even just strategies, zooming into the page to make it bigger, or using a high contrast tool. There's a lot of stuff out there that people need to use, so the web has to work in all of those ways.</p><p><strong>Joel Hooks:</strong>         Would you describe it as a full stack problem?</p><p><strong>Erin Doyle:</strong>         Well, I'm sure you could find a way to see it that way. If your performance is bad, if your response time from the server is not good, you're impacting people who are in an area that doesn't have good reception. Or maybe more impoverished area, where people can't afford computers and mobile devices with higher processing capabilities, so you're impacted people way. Even internationalization can be seen as an accessibility issue. If your site's not supporting all languages, and localizing all dates. And it's really pretty multifaceted.</p><p><strong>Joel Hooks:</strong>         Yeah, I was wondering when you could say, \"Well, it's not my problem. I do this in this space, so I don't have anything to do with accessibility.\" But I have a hard time... Because like you said, it's like performance and it's such an integral part to how we [crosstalk 00:12:23].</p><p><strong>Erin Doyle:</strong>         Yeah, and I hear that a lot. I hear people say, \"Oh, well I do this, so it's not something I have to worry about.\" I've even heard, \"Well, our app is internal and we don't have anybody that works here with a disability, so we don't have to worry about that yet.\"</p><p><strong>Joel Hooks:</strong>         I wonder what... That's like a chicken and the egg problem, that sounds like.</p><p><strong>Erin Doyle:</strong>         Yeah. I heard a great story from someone who told being about a coworker that they had, that was using their internal app. And they didn't know that this person was colorblind, and apparently their internal app does not support high contrast tools, and it's not colorblind friendly. So they were talking to this person and they said, \"Yeah, I actually can't see what's on that page, so I have to go do this extra thing in order to do this part of my job.\" And that person was amazed, they were like, \"Wow, I didn't know that this was impacting someone here, because I didn't know they had an impairment or disability all this time.\" So you don't always know that someone's being impacted by a lack of accessibility. So even if being an internal app, you can't just say, \"Oh, we don't have anybody that this is impacting.\" Because maybe you do, and you just don't know.</p><p><strong>Joel Hooks:</strong>         I think a lot of times folks that are, for lack of a better word suffering, don't want to be complainer's and they don't speak up all the time, right? They're just used to it, and used to our world being inaccessible to them, so they have all these work arounds that that are a huge cognitive load for them and extra work that they [crosstalk 00:14:02].</p><p><strong>Erin Doyle:</strong>         Yeah. When you actually experience using the tools or the strategies that people have to use and you experience various websites and applications from their perspective, you learn how painful it really is. And I think that they do, they get used to a certain level of things just being terrible all the time.</p><p><strong>Joel Hooks:</strong>         So what initially drew you into this world of trying to make web applications more accessible [crosstalk 00:14:35]?</p><p><strong>Erin Doyle:</strong>         Yeah. I wish I could say that it's just because I'm a really altruistic person that cares about my fellow human, and of course I care about my fellow human. But what got me started was just that thankfully my company that I work for now made accessibility a priority. And up until then, I didn't know anything about it really. I'd never worked for a place where it was a priority, and I just had no concept of how many people in the world are impacted and in what ways they were impacted. I just didn't think it was that many people. I just thought, \"Oh well, I guess if you're buying you can't use the Web,\" which is really naive.</p><p><strong>Erin Doyle:</strong>         So again, thankfully this application that I work on now when we started it, accessibility was top priority. From the beginning, from the ground up, we wanted the app to be accessible. And because my company does e-commerce, they recognize the importance of we want everybody to be able to check out, we want to make money. And we also want to avoid lawsuits, and they're very real. So that was a priority for our customers, and that was a priority internally. So I just had to be tossed into the deep end and learn from the ground up, how do you make a website accessible?</p><p><strong>Erin Doyle:</strong>         It was a lot to learn, and what was really helpful... Finding tools that helped. And then we worked with a company that did auditing of our application for accessibility issues, and they actually have people with various disabilities impairments testing on the actual assistive technologies that people are using, and reporting findings back to us. So through that experience, they would give us a finding. When I use just the keyboard, I can't get to this part of the page. Or if I'm using high contrast mode this thing is invisible, I can't even see it. And that really opened my eyes to a whole range of groups of people that we were impacting that I didn't realize were impacted that way.</p><p><strong>Joel Hooks:</strong>         Yeah, actually testing with users essentially, that [crosstalk 00:17:02].</p><p><strong>Erin Doyle:</strong>         Yeah. So they taught us, \"Well, if I'm a person who can't use a mouse, I'm going to need to use keyboard.\" And this is the expected keyboard navigation. There are patterns for how a widget should behave, certain keys on the keyboard should have certain expected behavior. And I had no idea. So it was definitely a lot to learn but a great experience.</p><p><strong>Joel Hooks:</strong>         And you mentioned tools, and I know you've been involved in helping to create tools to make and identify accessibility problems. And I was wondering what your experience is and what your favorite tools are?</p><p><strong>Erin Doyle:</strong>         So pretty much anything that the group DQ Systems or DQ Labs puts out is awesome. I see them as one of the top authorities in the accessibility space. They do consulting and training and knowledge sharing, and they have a whole suite of tools. And they've got a ton of credibility in the space. So they've got a Chrome plugin called Axe, which you can run on your pages and it shows you findings. And any finding that they report links to more resources where you can learn more. They tell you what standard and level of compliance is impacted, what user groups are impacted and in what way. So I found that to be a really great way to learn. Start by testing.</p><p><strong>Erin Doyle:</strong>         One of the things I teach in my workshops is taking a test driven approach. So you've got these tools, you test, you find bugs, and then you learn about them. You learn like this thing that's wrong, why is it wrong? Who's it impacting? And then, what are the ways to fix it? And you just iterate on that. So they're plugin Ax is great for that. It used to be called Lighthouse, built into Chrome. Now I think they just call it Audit. That's actually built on the Axe engine, so I think the results it should be reporting are probably the same. It just just depends on what user interface you like better.</p><p><strong>Erin Doyle:</strong>         They've also got a library that you can use for, I believe Selenium tests. So if you want to automate your front end tests, they've got that. And then I think fairly recently they put out a tool that basically replaces, in my opinion, React Alley, which was a library I used to work on. And it audits your app at runtime in development, you wouldn't want it running in production. But as you use your app, it will analyze what's in the Dom and then output it to the console any findings as you use it. And that's really great to use in conjunction with... There's an [inaudible 00:20:04] plugin that will do the static code analysis for findings. So it's like a...</p><p><strong>Joel Hooks:</strong>         Yeah, I've seen a JSX analyzer that for react apps particularly that [inaudible 00:20:16].</p><p><strong>Erin Doyle:</strong>         Yeah. So that's a nice layering. Start by just analyzing your static code, that's the lowest hanging fruit and then start checking it at runtime as you're working through it and then start doing scans with the browser plugin. And they even have an enterprise level tool, which my company's checking out where you can automate scans and it will spider its way through your whole app and then send you any findings. So you could just schedule it and have it constantly running, and anytime there's something new that pops up, you're alerted to it. So it's nice.</p><p><strong>Joel Hooks:</strong>         And then all the way through like having actual real humans with impairments, trying to use your application I think would be the final layer of checking.</p><p><strong>Erin Doyle:</strong>         Yeah, absolutely. That's something that I definitely learned, and that's a misconception I run into a lot is that people think, \"Oh, well I'll just use these tools to scan my app. Especially those that give me a rating, like am I 100%? Or if there's no findings, I must be 100%,\" and they think that that's it. But really, you have to have people manually testing. Unfortunately it takes time. It's time consuming, but you need people using the actual devices that people are going to be using. So the screen readers, all of them, using a keyboard only, using various high contrast modes.</p><p><strong>Joel Hooks:</strong>         I'd probably go as far as to say that the automated tools analysis are the table stakes. That there's no excuse for not using them and that we should all be running static analysis. And then that's more like the beginning. This is the fundamental baseline. [crosstalk 00:00:22:12].</p><p><strong>Erin Doyle:</strong>         Yes, absolutely, it's really easy. It's so low barrier to just adding those tools to your suite, and as you said there's really no reason not to do that part. Just like we lent our code, add that on. There was actually a study done not too long ago by the web accessibility in my group that looked at the top 1 million sites. And if people are curious, how do they know what are the top 1 million? You can look at the report and they tell you how they figured that out. But anyway, the top 1 million sites, and scan them for accessibility issues. So again, just a scan, not manual testing, just one of these easier scans that's only going to catch a small percentage of problems. And I don't know, it was like 97% or something like that. So almost all of them had findings. And this was just the easy stuff, the low hanging fruit that we could all be eliminating by running these tools. So if we all just did that, the web would be massively more accessible.</p><p><strong>Joel Hooks:</strong>         Yeah, it feels like we have to start collectively changing maybe our definition of done in terms of features and adding things to our applications. And I think like what you said, where it was baked in to the current application you're working on from the start is a really important observation. Because this stuff is really hard to attack on later, and it gets more expensive and more time consuming [crosstalk 00:23:46].</p><p><strong>Erin Doyle:</strong>         Yeah, absolutely. If you've got findings, and it's going to take maybe a refactor to make something more accessible, that's a lot harder than designing it from scratch to be that way for sure. Yeah.</p><p><strong>Joel Hooks:</strong>         So I have a technical question. What is an RIA attribute?</p><p><strong>Erin Doyle:</strong>         So it stands for accessible rich internet applications, and it's basically an attribute that you add to an HTML element that can layer in more information for assistive technologies to understand what purpose does that element serve? What's its role, what's it functioning as and what's its status. So this could be things like defining what kind of widget is it, if it's a more complex widget like a menu or a dialogue. So identifying that piece. Or is it maybe a landmark area, or is it a structure of the webpage? Is it a header, a footer.</p><p><strong>Erin Doyle:</strong>         Or providing status? So if it's something that can be checked, selected, opened, hidden, those kinds of things. Just defining more information about that element or that widget. So that provides much more context to the assistive technology tools, especially as we're building these more complex things that you don't just get out of it. A tag by itself. We give more information to the assistive technology, so they can explain that, or however that's being convened to whatever the device is that's being used for the user.</p><p><strong>Joel Hooks:</strong>         So I've seen a lot of people talk about Aria versus Semantic HTML, and the idea that semantic HTML is really what we want to be doing. And I was wondering, what's the difference there and what do they mean when they say use semantic HTML, and you solve a lot of your accessibility problems?</p><p><strong>Erin Doyle:</strong>         Yeah, that was really confusing to me at first. Because when you're reading articles and some of them are a lot older, the advice shifted over time. It seemed like for a while, a lot of their advice was saying use HTML5 tags and Aria attributes always. Even if they're redundant, use both. And then I started reading articles that said don't use both, don't ever use both. So it's confusing. But I think what happened is, initially browser support for both HTML5 and Aria tags was really sporadic and inconsistent. So one browser might support one but not the other, and then another vice versa. So that's why the advice originally was just use both, throw both on there everywhere, and hopefully it'll all get covered somehow.</p><p><strong>Erin Doyle:</strong>         But as time's gone on and browser support has gotten really good for both HTML5 and Aria attributes, now we get to choose what makes more sense. They're supported similarly, so I think now we want to be writing more descriptive semantic code. So I think that's why the advice now is, if you've got both and the options are redundant, favor the HTML5 tags because they're just more descriptive. That gives us cleaner code, instead of having a ton of divs that have various roles on them.</p><p><strong>Joel Hooks:</strong>         Mm-hmm (affirmative). I feel like the idea of going in there and just really structuring your markup in a way that makes sense is more maintainable and less prone to kind of human error. If you can get away with that, right? If you don't need to think about an ad, various new attributes to [crosstalk 00:27:52].</p><p><strong>Erin Doyle:</strong>         Yeah, it takes research. Again, I had to do some looking at, \"Okay, well what tags and attributes are redundant?\" And in some cases, maybe you do need to use both. And then in other situations you don't, so it takes research until you get the hang of that and learn it. So it's not bad or wrong to use both, or to you use an Aria attribute where you could have used an HTML tag. So I hope people don't get the misconception. I think maybe they do, that like, \"Oh, it's bad, I'm doing something that's wrong.\" I think it's preferred to use the HTML5 tag, where you know that they're both available and lean towards that one.</p><p><strong>Joel Hooks:</strong>         Yeah, and I feel like that's a place where our static analysis and these tools that we discuss can really come in and help you to understand, \"Oh, you're missing this or this should be this way. Or if your HTML is structured in this fashion, then you'd be able to get rid of this.\" That that seems like [crosstalk 00:28:53].</p><p><strong>Erin Doyle:</strong>         Absolutely. And the [crosstalk 00:28:56] plugin, I think more and more they're adding rules that will tell you that stuff. Where you could have used one versus the other, they can check for it and they can tell you. And certainly, I really encourage people to contribute to libraries like that. If you have come up with a case where you're like, \"Wow, this is something we could totally be checking for and then I don't have to remember everything in my head,\" please add an issue or contribute.</p><p><strong>Joel Hooks:</strong>         Yeah. So beyond accessibility, which I think is a hugely important issue and I think it's going to continue to be for years. What are you excited about in web development, and the full stack spectrum of web development? What's exciting for you now?</p><p><strong>Erin Doyle:</strong>         Yeah, that's a hard question to answer, because it's just all exciting right now. The rate at which new tools are coming out and new features of the language are coming out, or new new languages and frameworks, new libraries? it's really exciting when I think back to when I started doing development. And I don't know, '98, '99 and we were using notepad. And yeah, but I remember reading all about DHTML.</p><p><strong>Joel Hooks:</strong>         DHTML I think was popular at the time.</p><p><strong>Erin Doyle:</strong>         It was the new hotness, and we had to deal with Netscape and FrontPage and oh, it was so crappy. And the landscape now is just... The developing experience is just lovely. And...</p><p><strong>Joel Hooks:</strong>         Yeah, I see people that get sad or upset about it, and I agree with you actually, I think. I've been making software for a long time, and right now it's the best I've experienced so far. Yeah, for sure.</p><p><strong>Erin Doyle:</strong>         Yes, yeah. And I love JavaScript, I love where JavaScript's come over the years. When people complain about, \"Oh, there are so many libraries and frameworks, and how do we keep up with them all?\" I don't know. I think the power of JavaScript, and I think the beauty of what we've created out of it is really cool. But I'm really excited about where React continues to go. We've got hooks now, we've got suspense. We've got a lot of things helping us lazy load, got Bunzl splitting in Webpack. Those are a lot of areas that I'm trying to get more into right now. There's more security tools.</p><p><strong>Joel Hooks:</strong>         I'm personally excited about Ryan Florence's Reach UI too, I think he's doing an-</p><p><strong>Erin Doyle:</strong>         Yes, absolutely.</p><p><strong>Joel Hooks:</strong>         ... Amazing service to the broader community.</p><p><strong>Erin Doyle:</strong>         If we can put out a library-slash-framework that people can just use, and they don't have to become complete accessibility experts? They can just rely on it and it's baked in, that's going to be a huge win for everybody.</p><p><strong>Joel Hooks:</strong>         And just another part of of that particular resource that's interesting to me is if you go look at the source code. Because Ryan's developing it openly, and it's all in progress and you can go like analyze it and get the ideas of what he's doing to address these accessibility problems. So maybe you don't use React, but the solutions and what's going into it are going to carry over and really change everything [crosstalk 00:32:23].</p><p><strong>Erin Doyle:</strong>         Yeah, absolutely. That is a great point. There's definitely been times where I've needed to do a thing, and maybe I found a library that did it but it was more than I wanted to pull in. Or like you said, it's maybe a different framework than what I'm using. Yeah, look at the source code, learn how that was solved and and apply that back to what you need to do. That's a great way to learn.</p><p><strong>Joel Hooks:</strong>         So you may have noticed this, I noticed this on the internet that there's a lot of people that want to learn how to be web developers right now. And I was wondering, do you have advice? What do you tell people if they want to get into this field, and it's a career that they want to do? How do you recommend that they start?</p><p><strong>Erin Doyle:</strong>         Well again, it's such an exciting time to be in. Because like I briefly mentioned earlier, when I got started you had to have a degree if you were going to get a job, or if you were going to be paid close to what people doing the same thing you could do are doing. And I had to go through that. It was a while before I got to make what my peers were making, because I didn't have the degree. And now you don't have to have a degree, it's really cool. You can go out and either take one of various different mediums of courses that are now out there, including Egghead. But there's UME, plural site. There's now these hack reactors, schools. And yeah. [crosstalk 00:33:57] and then there's just an immense amount of articles and blogs and videos out there talking about how to do things. You don't have to get a degree, you don't have to buy a book. I remember when that's all you could do to learn something new is you have to buy the book, and hopefully you got the right version.</p><p><strong>Joel Hooks:</strong>         I feel like nobody reads books anymore. I still always recommend, \"Well, you should get this book.\" I recommend JavaScript for kids as a good place to start. And kids sounds like it's like infantilizing, but actually all it means is it doesn't take itself too seriously, and the examples are fun. But I've seen this downward spiral of people first seeking Internet versus seeking [crosstalk 00:00:34:36].</p><p><strong>Erin Doyle:</strong>         Yeah, I think it goes towards what are our learning styles? Some people, video is really what they need. And some people, that's maybe too slow and they want to jump right to code examples. For me, I need to see the code example, maybe even before I hear something or read something explained. So when we finally made the jump from books to Google, and I could like jump right to exactly the part that was helpful for me versus having to read paragraphs describing it, that worked better for me. But there's a lot of people that maybe they need to hear it. Maybe someone actually has to say it out loud, and then they need to read it and then they need to do it. It's all of our different learning styles. So it's great that there's options no matter what your learning style is now.</p><p><strong>Joel Hooks:</strong>         Yeah. And I generally am like, \"You should probably look all of it, right? Watch the videos, listen to podcasts. Read articles, dive into books as necessary.\" There's so much information in how do you do this? One, just consistently practice and keep at it, because the only way you fail is if you stop. Because there's so much. And this is probably true for most software careers anyway. There's so much information available on the internet, you can keep learning and keep doing and keep growing infinitely. And for free for the most part, you can get in so far. I operate a pay service, and as a personal thing, I don't really like watching videos on the internet to learn stuff. I just prefer reading. But there's so much out there and there's so much to get a taste of it. But then when you pay for resources, whether it's going to a boot camp or something, it's like this acceleration and the accountability.</p><p><strong>Erin Doyle:</strong>         Yeah. So go find what works best for you, and what you enjoy and get excited about. And for me, that's maybe doing some tutorials, or coming up with a project that I can actually do, and then I learn from the doing. And I get that thrill of making a thing work and trying to make it do. So I guess that's definitely my advice is, go find what medium works for you out of all of our lovely options. And then just like you said, keep doing it because I know I forget. If I don't do it, I'm going to forget.</p><p><strong>Joel Hooks:</strong>         Yeah, stick to it. Yeah, There's a lot of helpful people out there if you ask nicely. There's folks out there that help. [crosstalk 00:37:15].</p><p><strong>Erin Doyle:</strong>         I feel like that landscape's changed a lot too. It used to be all trolls. If you asked a question, the answer was always... Exactly.</p><p><strong>Joel Hooks:</strong>         Like [inaudible 00:37:23]?</p><p><strong>Erin Doyle:</strong>         And you don't see that anymore. It's really rare I feel like.</p><p><strong>Joel Hooks:</strong>         Now, and Twitter's is a neat space. I'm a a Twitter native. And I just think it's interesting as I've watched over the years that people will come together and help people, and get people boosts and amplify their voices and do that kind of stuff. Which is really quite nice in terms of of community. There's a lot of folks out there [crosstalk 00:37:44].</p><p><strong>Erin Doyle:</strong>         Yeah, I feel like the community definitely has grown. As open source grows and all these resources grow, it's totally about community. It's very cool.</p><p><strong>Joel Hooks:</strong>         Yeah. And accessibility on a career level in some ways I think. Well, Erin, I really appreciate it. Thank you so much for your work and spending some time with me today to talk about this stuff. Where can people find you on the Internet?</p><p><strong>Erin Doyle:</strong>         So I'm on Twitter, Sunshiny Doyle. And I'm on Github as Erin-Doyle. Those are probably the best places that people can look me up and check me out. I try to post my resources when I do these workshops so that people can actually work through them on their own. If they weren't able attend, they can still learn. And then certainly send me any DMs on Twitter if anybody has any questions. Yeah, thank you very much. This was fun.</p><p><strong>Joel Hooks:</strong>         That's awesome, thank you so much. Cheers.</p>",
    "slug": "test-driven-accessibility-with-erin-doyle",
    "description": "<p>At first, React looked like it might have been a fad, and JSX seemed weird. But, it didn't take long for people to see the power and beauty of it. React makes reuse easy, which makes accessibility a lot easier. </p><p>Every time you needed an input, you had to remember all of the accessibility attributes and write it all by hand. With React, you can make a reusable input with all of the accessibility built-in. </p><p>You must make your components accessible. There's a broader range of people who need accessible features than you might think. Most of us think of people with visual impairments, but they're also for people with cognitive, auditory, and motor skills issues. </p><p>We also don't think about the temporary issues that nearly everyone faces at some point in their lives, such as broken limbs, and medication side-effects. Accessibility features are even helpful under certain environmental conditions like exceptionally bright or noisy places. Even internationalization can be seen as an accessibility issue if your site isn't supporting all languages and localizing all dates. Accessibility is very multifaceted.</p><p>Try taking a test-driven approach when it comes to accessibility. Start with the low hanging fruit, static code analysis, and running a scan with a browser plugin. Then try to use your app with accessibility tools yourself, figure out how you can make it a better experience for your users. Finally, have real people with various disabilities test out your app and give you feedback.</p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/test-driven-accessibility-with-erin-doyle/transcript\">\"Test Driven Accessibility with Erin Doyle\" Transcript</a></p><h3>Resources</h3><ul><li><a href=\"https://www.w3.org/TR/html-aria/\">Aria in HTML</a></li><li><a href=\"https://addons.mozilla.org/en-US/firefox/addon/axe-devtools/\">Firefox: Axe Developer Tools</a></li><li><a href=\"https://chrome.google.com/webstore/detail/axe-web-accessibility-tes/lhdoppojpmngadmnindnejefpokejbdd\">Chrome: Axe Developer Tools</a></li><li><a href=\"https://chrome.google.com/webstore/detail/lighthouse/blipmdconlkpinefehnmjammfjpmpbjk\">Chrome: Lighthouse</a></li></ul><h3>Erin Doyle</h3><ul><li><a href=\"https://twitter.com/SunshinyDoyle\">Twitter</a></li><li><a href=\"https://github.com/erin-doyle\">Github</a></li></ul><h3>Joel Hooks</h3><ul><li><a href=\"https://twitter.com/jhooks\">Twitter</a></li><li><a href=\"https://joelhooks.com/\">Website</a></li></ul>",
    "duration": 2310,
    "episode_number": 62,
    "contributors": [
      "Joel Hooks"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/pfm8w",
    "path": "/podcasts/test-driven-accessibility-with-erin-doyle",
    "published_at": "December 16th, 2019",
    "url": "https://egghead.io/api/v1/podcasts/test-driven-accessibility-with-erin-doyle",
    "edit_podcast_url": "https://egghead.io/podcasts/test-driven-accessibility-with-erin-doyle/edit"
  },
  {
    "id": "podcasts-00000000000000000300",
    "title": "Personal Growth From Open-Source And Meetups With Monica Powell",
    "summary": "Monica Powell talks with Joel Hooks about the journey to her first development job, attending and organizing meetups, contributing to open-source, and time travel with git.",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/f471c68a-015a-4c53-8fb3-568518141c4b/edited-monica-powell-podcast_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/55d7f360-05c1-43af-9c2d-eb89e156734a/08ae39c5-5e95-4429-85e2-efb294d204a2/logo.jpg",
    "simplecast_uid": "f471c68a-015a-4c53-8fb3-568518141c4b",
    "transcript": "<p><strong>Joel Hooks:</strong>         Hi Monica.</p><p><strong>Monica Powell:</strong>      Hi Joel. How's it going?</p><p><strong>Joel Hooks:</strong>         It's going really well. Thank you so much for taking time out of your day to speak with me today. I'm really excited to talk to you. I am interested in your perspective both as a developer and I think recently as somebody that's organizing events and speaking at conferences. And I was really curious, how did you get into software? How did you decide to become a software developer and what was your path like on that journey?</p><p><strong>Monica Powell:</strong>      So I would say my path into software engineering was, I took the scenic route into software engineering. So when I was younger I was on Neopets and MySpace and was starting to learn CSS and stuff. A lot of things didn't really make sense to me then, but it was something that I was interested in. In high school I ended up doing a couple of years of graphic design, so I learned how to make art in Photoshop Illustrator and then I was working on putting that art online. But then when I got to college, I wasn't sure where the connection between web development and computer science was. So I didn't take my first computer science class until sophomore year of college. And then as I got more involved in taking a few computer science classes at my school, there was a student run web development agency. So as soon as that started I got involved, and I started to learn more about technology.</p><p><strong>Monica Powell:</strong>      After I graduated, I ended up working at a tech startup doing mostly marketing and then moving into email development at that company. So when I started someone else was focusing on email development, and I was working with them to figure out how to make the emails more accessible because we were sending a lot of emails that just had images with the text inside the image. So I started to learn more about email development and how you code an email is a bit different, than how we code now in the front-end. And then I decided to quit my job and do an internship to go full time into software engineering, because I was at a point where I wanted to do more technical work but I didn't have a lot of production experience writing code. And I also didn't felt like I knew too much to go the bootcamp route.</p><p><strong>Monica Powell:</strong>      So basically how I got into tech was learning over a long period of time, with various classes, and also on my own, and then getting an internship for experience, and then using that experience to get a full time job as a software engineer.</p><p><strong>Joel Hooks:</strong>         So you weren't kidding when you said that this was the scene of crime. You really have done quite an interesting round of work. I've got a lot of questions too actually. And I'm wondering, because you said you did some graphic design earlier. I was wondering how did that affect your decisions in the process as you grew into a developer over time?</p><p><strong>Monica Powell:</strong>      I think definitely it made me interested in the front-end side of web development. So really wanting to be able to critically if I had a design, get that out in front of people. So I really enjoyed in my classes when we had to make our own website, it gave me a chance to be creative. So I would say that's probably how it informed how I approach web development. Just in terms of focusing on the front-end to start. And then as I got more into it, learning about different parts of development.</p><p><strong>Joel Hooks:</strong>         I think it was really interesting also that you said when you were in college there was a student run agency, and I think that's the first time I've ever heard of something like that. But I also think that's a brilliant idea in terms of giving people real practical experience. And can you tell me a little bit more about that? What was that like and how did that run?</p><p><strong>Monica Powell:</strong>      Definitely. So I went to Barnard college, which we have at the Athena Center for Leadership. So this center they focus on research on how to support women leaders, et cetera. They work with both women within the community as well as women within the college. This was a student venture to start this agency and there was a lot of support from the Athena Center to get off the ground. So the name of the agency is Athena Digital Design Agency. And how it worked when I was there, was each semester we brought in an instructor to teach students web development. I was able to help with the execution of coordinating these things, as well as I was able to take the classes. And so the instructor is focused on HTML, CSS and JavaScript. And so when I was taking those classes, I was actually able to meet other women who were taking computer science classes.</p><p><strong>Monica Powell:</strong>      And I think that made it ... I was like, \"Okay I'm going to take a computer science class because I'm learning more about what it's like.\" So one part of the Athena Digital Design Agency was actually teaching the classes. So actually giving the students the skills. And then the other half of the agency was connecting the students with local businesses who needed web development assistance. So I know at my school there's a few other student run web development agencies, so there's Barnard Babysitting and Barnard Bartending. So there definitely is an appetite from people in the community to hire students for their different professional needs.</p><p><strong>Joel Hooks:</strong>         I mean it sounds like a great way to get experience. When I was learning how to be a developer I suppose, I had to go out and find freelancer work. I had to make those connections and take a bunch of steps forward, where this eliminates a lot of that and the community's aware of it. So you all get to participate and grow together.</p><p><strong>Monica Powell:</strong>      Definitely.</p><p><strong>Joel Hooks:</strong>         Yeah. I like that a lot. So you've mentioned, I've seen and read that meetups have been important to you and important to your growth as a technologist. And I'm wondering how meetups have fit into your overall journey and what you see in terms of them being beneficial to other people that might be interested?</p><p><strong>Monica Powell:</strong>      So I would say for me, when I was in college going to a meet up events, it gave me the opportunity to get off campus and see how people are using technology. On campus, a lot of the stuff outside of the agency was really focused on theory of computer science. So it was nice to be able to go to events that are focused on how are people using technology in industry. And a lot of those events were free or at low cost. So there was definitely some organizations that I started out as just an attendee. And then as I became more comfortable with my own skills with the organization, I was able to step up and be a teaching assistant, lead workshops, volunteer in general.</p><p><strong>Monica Powell:</strong>      And now I'm an organizer of a meetup. But I definitely think just being able to have this safe place to grow and learn about other technologies. I gravitate towards a lot of women in tech events, those are the types of events that I've gravitated towards. And I've always found that those events have been safe places for me to learn new technologies and meet other people.</p><p><strong>Joel Hooks:</strong>         Why is it important for people to have a safe place? And I think I feel like the answer people would assume it's obvious, but why is it important to have a safe place where you can go and feel comfortable and learn with a community in general?</p><p><strong>Monica Powell:</strong>      I think it's helpful just because it can be frustrating learning. And so I know for me, you don't know, if you're like, \"Okay, I don't understand this concept or I don't understand whatever.\" You just assume that everyone else knows it. And so I feel like there's some insecurity that comes with when you're learning something new. So it's nice to be in an environment where you're like, \"Okay, maybe I am the only one who doesn't know what it is. Maybe I'm not. But either way I feel like that's okay. This people are coming here to learn and et cetera. And that's welcomed.\" I've also been active in Twitter. There's the CodeNewbie Community. So they have-</p><p><strong>Joel Hooks:</strong>         That's great.</p><p><strong>Monica Powell:</strong>      Yes, they have weekly Twitter chats if you just follow the #codenewbie. And I've also found that it's a super... They say they're the most supportive environments for programmers. So I think it's just nice to have a nice safe place to go to when you're like, \"Okay, I'm frustrated, my code's not working. Is this ever going to make sense?\" And to be able to connect with people who can either relate or if they can't really necessarily in that moment, at least they can support you and make you feel a little bit better in that moment.</p><p><strong>Joel Hooks:</strong>         Yeah. I think the ability to ... and comfort to ask, which I'm using the air quotes, \"the dumb questions\" right? Where we do is this obvious to everybody in the room? And my experience is, it's not, but then there's always the risk, right? Like if you're in a group where you don't feel safe, you're going to keep that question to yourself. And then other people that would have benefited from that question too are not going to hear it as well because you're ... The nervousness or whatever of somebody's reaction that, that you might get.</p><p><strong>Monica Powell:</strong>      Definitely.</p><p><strong>Joel Hooks:</strong>         So tell me about React JS Ladies. This is your meetup that you organize and I'm wondering both what the event is about or what your meetup is about, but then also your experience in creating and organizing your own meetup.</p><p><strong>Monica Powell:</strong>      So React Ladies is a community for women in non-binary React developers or people who are interested in learning React et cetera. And so I started this about a year ago, so November of 2018, I started this community. So that was around the time when I was starting to get more comfortable with React. But I also, I wanted to meet up with other people who are learning React. Like I had said earlier, I've gone to a lot of women in tech events. So I've gone to women who code, BrightSky code, which is for a woman non-binary folks, RailsBridge, Iladies, et cetera. And so I really wanted to create a group for women and non-binary developers that was most tailored to the JavaScript community. Some of those other communities are specific to other languages or are very general where they discuss different things every month.</p><p><strong>Monica Powell:</strong>      So for my group, I try to host events that are centered around different topics within the React ecosystem. So that could include discussing a GraphQL, anything like React, React Native, TechTube and develop mail, ingest et cetera. So we've had various events where some are more into React and then others are more focused on more advanced topics. And I think our most popular format has been to do lightening talks with people who can hear it from four to five different speakers who talk about a wide variety of topics.</p><p><strong>Joel Hooks:</strong>         Yeah, those are nice for folks particularly I think to if you don't have a lot of speaking experience but then you also keep it short too. So it's a low commitment and opens up and makes the opportunity to speak too, I think more accessible to the people.</p><p><strong>Monica Powell:</strong>      Definitely.</p><p><strong>Joel Hooks:</strong>         So are we oversaturated with meetups at this point, or is there room for more folks to start their own communities in this space?</p><p><strong>Monica Powell:</strong>      I definitely think there is a lot of opportunity for people to start their own meetup groups depending on what their interests are. If you want to start a general tech meetup, then it's probably is already a general tech meetup in your community. But I do think that there's still a lot of opportunity for people to create their own communities that have whatever that energy is or environment, and that they're trying to curate, especially if it is like a more niche audience. I think there's a lot of opportunity. So yeah, I would definitely encourage if someone's seeing that there's something they're looking for in community, but they're not finding to consider curating their own, because it's not as ... I don't know, for me, I felt like before I started my meet up group, I never really thought about it.</p><p><strong>Monica Powell:</strong>      But then when I was like, \"Okay, I would love to see. I made up, let's focus on this and this.\" And then after seeing ... For me what I thought was something lacking, and then being able to use that as the opportunity to create something. But I think it would have been harder if I was like, \"Okay, I want to create a meetup for women in tech.\" Or something where it's like, \"Okay, well there's already a lot of meetups for women in tech, so what's going to be the differentiator? Does this thing need to exist? Or even if it doesn't need to exist, is this something that I'm going to find value in doing?\" And I think having something different that I'm bringing to it definitely helps. Even for example, for like CodeNewbie, it's very general in terms of, it can be for anyone who's learning how to code, it's more of experience.</p><p><strong>Monica Powell:</strong>      It doesn't matter what language we're using, but I know that whole thing is really driving in on being a very supportive community. And I feel that's something that a lot of other communities don't necessarily emphasize as much. So I think that's a huge differentiator that makes it so. It's like, \"Yes, we need this thing in the world because it's making the world a better place.\" So I think if someone has some type of group that they're trying to ... or community they're trying to foster that they think the world doesn't have that, I would definitely encourage them to consider investing in that.</p><p><strong>Joel Hooks:</strong>         I think CodeNewbie is probably one of my favorite examples of building community in a really healthy way. They've been doing such a fantastic job of fostering and growing and creating this online community. And then, there's the Codeland Conference where they actually bring it together in person. And just keep growing that, in that community in different ways. It's really pretty wonderful and inspiring I think in a lot of ways.</p><p><strong>Monica Powell:</strong>      Definitely is.</p><p><strong>Joel Hooks:</strong>         So you encourage people to contribute to Open-source. And we're in October right now as we speak. And there's Hacktoberfest going on. And why do you recommend that folks might consider contributing to Open-source?</p><p><strong>Monica Powell:</strong>      I think that people should consider contributing Open-source because it gives people more experience if that's something that they're looking for. I think it teaches you how to collaborate better with people. So there's a lot of asynchronous communication. Maybe communicating with people that you've never worked with before when you're contributing to a project for the first time or even a maintainer, handling submissions from people that you haven't met before or haven't worked with before. So I think it's definitely makes that whole idea of software more collaborative.</p><p><strong>Monica Powell:</strong>      And I think also contributing to Open-source makes ... It demystify software a bit. So I think, at least for me it's very easy to see like, \"Okay, this is Gatsby.\" And Gatsby is this established thing. And then being able to step aside and be like, \"Okay, well I think I could improve the Gatsby docs.\" I think that makes it seem more accessible to me as a developer. Or it's like, \"Okay, I can actually contribute something to this, as opposed to just consuming it.\" It makes it so that I feel more comfortable. If I have an idea of like, \"Okay, I could actually go to my own, Django's thing for example, or Gatsby thing because I've contributed to other people's Django or Gatsby thing. So I have a better understanding of how they work and maybe some things they don't like about other things.</p><p><strong>Monica Powell:</strong>      So I think contributing to Open-source just makes the world of software more open for people who maybe think like, \"Okay, I just need to use these other technologies and, it's I don't like them. Maybe I'll find something else.\" As opposed to being like, \"Okay, how can I iterate and make this thing better than it was when I first encountered it.\"</p><p><strong>Joel Hooks:</strong>         So beyond, say, core library, the code side of it, what other opportunities are there for people that might want to contribute?</p><p><strong>Monica Powell:</strong>      I mean for me, I think I've seen a lot of opportunities to contribute to documentation. So sometimes I'll read document and then I'll be a little bit confused about what's happening. What it's thing to do. Maybe I'll try a couple of things and then it works. So I've always taken that as opportunity to actually update the documentation depending on, as long as it's not too opinionated of the change. I'll usually update it, submit a PR and then get it updated. And so I've had good luck doing that and having the changes be accepted. So I would say maybe documentation is a good way, depending on the project. There's other ways to contribute. But for me, I feel like that's been the most straightforward way to contribute to a project without necessarily having to set up the project locally and really dive into the internals of how it's working outside of your application of it.</p><p><strong>Joel Hooks:</strong>         I've noticed that a lot of, especially I guess bigger projects have ... They're using tags and labels to say, \"Hey this is something, this is an issue that might be great if you are trying to start contributing.\" Which I think is a pretty good move in the right direction too.</p><p><strong>Monica Powell:</strong>      Yes. And I know there's certain websites you can go on, that will help make it easier to surface those that are good for first time contributors. So I definitely recommend people to, if they are interested in contributing to maybe look that way. For me, I found it a little bit overwhelming. Just because there's so many different potential things that I can contribute to. So I've tried to [inaudible 00:18:06] to projects that I'm already somewhat familiar with or using. Even if it's just like, \"I just discovered this thing and I'm trying to figure out how it works.\" So.</p><p><strong>Joel Hooks:</strong>         I think it's also because you have something like React for instance, where it's huge. It's a massive project. There's a lot going on. Even compiling React from sources is quite ... It's a challenge. It's a technical challenge in and of itself. But then there's these smaller projects, there's these independent individual developers that are just making tools, whether it's a custom React hook for instance. And those I think are opportunities to start contributing and gaining confidence as well versus thinking, \"I need to get a PR into React.\" Maybe, the scope of something smaller is a way to start as well.</p><p><strong>Monica Powell:</strong>      Yes.</p><p><strong>Joel Hooks:</strong>         So I think ... I don't know if this is a new trend or if it's been something that's been around for a long time, but I've noticed a lot of people trying to build developer portfolios. And I was wondering if you had any thoughts on what makes a good developer portfolio or what you would consider building for yourself as a developer portfolio?</p><p><strong>Monica Powell:</strong>      So I guess for what I would say for a good portfolio I'll say is, I think that less is more in terms of what's on the ... Presented. So making it seem like it's something that's curated. I think it's definitely a good idea for the website. I know it's something too ... Especially if you ... At least from my perspective as someone when I was newer to web development I just wanted to put every single thing that I've ever worked on, on my website and I think that it definitely is better to try to curate and more and really show your best foot on a website, because people are going to look at it and assume that, that's what you curated. So I definitely would recommend that people will try to take a step back, make sure that their content is curated.</p><p><strong>Monica Powell:</strong>      I think it's nice when personal or portfolio sites have personality. So I am drawn to websites that stand out. I have all these different running list of websites that inspire me or I wanted to draw some inspiration from. So I know like Sarah V. Lydic, She has a GraphQL Explorer for her website. So when you go to her website you can ... there's a schema and it's basically, you can explore and find out more information about her. And then there's also another website called aprilzero.com and the developer, he integrated all these different visualizations with his fitness tracker, his GPS, et cetera. So you can see everywhere he's been, his heart rate all this information, which is a lot of information. I wouldn't necessarily recommend that people go that route, but for me I just it's really visually compelling.</p><p><strong>Monica Powell:</strong>      And I memorize the URL, I saw this one, years and years ago. Every now and then I go back to it. So I think if someone is more leaning towards the creative side, I definitely think it's nice to see websites that stand out and are different than the normal website. But if someone is less creative, definitely at least curating the content, making it seem like a clean website, people will know how to navigate it, because I think there's not necessarily one format for a portfolio site. So just streamlining the navigation in such, as much as possible I think is important so that when someone comes to the first time, they can get a sense of what information they're going to be able to find and where without having to work too hard.</p><p><strong>Joel Hooks:</strong>         I think keeping it simple, right? If you do have strong design skills or that's an interest that you have, pursue it and show that personality. But otherwise it's clean and simple. When's the day, I would say. You don't have to have a really fancy whiz-bang site. You just want something that people can access, read, find the information and get a good overview of your skills.</p><p><strong>Monica Powell:</strong>      Definitely.</p><p><strong>Joel Hooks:</strong>         So I learned recently from you that Git actually allows us to time travel. I thought that was really interesting. And I think Git in general has so many layers. I've been using Git for pretty much as long as it's been around for a long time. It feels like about a decade. But I've been using this tool and I learned something new from you this week. Why is Git so challenging? If it is challenging, but I feel like it is. But, what makes Git challenging or difficult to approach and get into?</p><p><strong>Monica Powell:</strong>      I think for me when I was learning Git, I found it challenging because I didn't necessarily have the visual model of what was happening when I ran certain commands. And so I think that made it a lot more difficult. At the same time as when I was learning Git, I was also learning to commit online. So when I first started using Git, I really needed to use the GitHub, they have an application that you can download. That helps you visualize better what branch you're on, what files are there, et cetera. I know now there's more integration with visualizing the whole Git state of things, inside of editors for example, inside of JS code. You can have it integrate well with GitHub to see the state of the file. So I think for me that was the most challenging thing as I was learning Git.</p><p><strong>Monica Powell:</strong>      Just developing them into model of what's happening locally in my branch versus whatever other branch I'm working with. Or if I'm only making changes in my branch, what am I actually doing? So I know for example, for commands that I don't use as much, I don't have as strong with them as a model for what's actually happening. So I'll usually will then reference documentation in order to find that out. But I think once someone has a clear visualization, or at least for me I'm a visual learner. Once I have a clear visualization of what is actually happening, then it's easier for me to understand how to implement certain commands.</p><p><strong>Joel Hooks:</strong>         I feel like I have maybe like half a dozen Git commands that I actually know. And then everything else I just look up. I know that I can do this so I have to look it up. So it's how do I delete the last commit? I feel like that's when I've looked up a lot of time. You'll push the commit and be like, \"Oops!\" And then to me it's there's also the time aspect of it, which is interesting because you did this time travel idea in Git, but then there's this interesting idea of history and you can rewrite history and you can, in a shared environment, collaborate people's history and all that. Which to me has been a real ... Still is hard to get my head around the potential of what you can do with it. But why is Git essential as a developer? Is it essential as a developer? And if so why?</p><p><strong>Monica Powell:</strong>      I would say I think it is essential as a developer. Or at least some version of Version control. I think that it's your best friend. It's like a gift to your future self. So there's definitely certain things. Like If I leave out my gym clothes the night before I'm like, \"Okay,\" in the morning. \"that was for my future self.\" So there's definitely been times when I've been working on something and then things just don't go according to plan. So it is nice to easily be able to go back to a clean working state of code easily without it being a big thing. There's only but so many undos you can do, before you're just not in a good place and can't get back to a working state. So I think Version control is really good at being able to just incrementally store working changes and not have to worry about ... Then you can do whatever you want and if it works you can experiment. If it works.</p><p><strong>Monica Powell:</strong>      If it doesn't, then you can go back. So I think that is very helpful as a developer because I think for me there's a lot of exploration as I'm trying to solve a problem. And then also Git, does make collaborative easier, especially if you're using something like GitHub or GitLab. I think it just a lot of people expect people who are developing software to be familiar with Version control. And then if you're using library is React or something then it is ... And you want to look at different packages, et cetera. I think it is helpful, that it have familiarity with Git to be able to easily pull down a code or look into the source code is necessary.</p><p><strong>Joel Hooks:</strong>         I think it's interesting from a historical standpoint because you can go to any project on GitHub and dig through the history and see the evolution, and that's helped me from ... With my own code. But then it's also interesting too like, \"Hey, here is an interesting library I like, you can go in and see how and what and hopefully if there's good commit messages, why changes were made over time and see how software evolves. Just from a purely historical learning perspective.\" It's really interesting to me as well. It's a good tool. How was it speaking at React confs?</p><p><strong>Monica Powell:</strong>      I feel like it was excited speaking at React confs. So this was my first, sorry, this is my second React confs. So I attended last year for the first time, and that was around the time that I was starting my meetup group. So then attending this time and my meet up group is about a year old. So yeah, I would say my experience speaking at React confs was positive. I did a lightening talks. So each year they have a few slots for lightening talks. So this year this format was presenting 20 slides for 20 seconds each. And so I think for me it was the opportunity to present at React confs because I did do a shorter lightening talk. I was able to focus more on Git, where I was, I wouldn't have been able to give a full length talk, at React confs about Git. So for me that was a good opportunity.</p><p><strong>Monica Powell:</strong>      Yeah. And I had previously given a longer version of that talk at a meetup. So then presenting it at React confs gave me the opportunity to revise the content, streamline it and I had to cut out a lot of things. But it definitely made me think about what are the most important things that I want to get across to this audience.</p><p><strong>Joel Hooks:</strong>         So you have some experience in public speaking and I think it's something that a lot of people aspire to do but maybe are nervous about doing it, or just haven't done it. It's really one of those things that's hard to get motivated to do the first time. And I'm wondering what are your recommendations or what are your tips for getting started if you're interested in doing any public speaking?</p><p><strong>Monica Powell:</strong>      Yes, so I would definitely, I guess go back to different events. So I know I haven't been to Toastmasters, but I know a lot of people have recommended Toastmasters to practice public speaking. So they have them throughout the world, I'm assuming. And not just United States where you can gather with a small group of people who are also interested in practicing public speaking and practice with them. So just getting comfortable with the idea of speaking in front of other people. I've gone to Write/Speak/Code events, where for Write/Speak/Code they focus every event on either helping people do more technical writing, more public speaking or contribute to open source more. And all of their events are very actionable. So I definitely feel like going to some of their events that are focused on speaking is very helpful for people who are considering it because they definitely are tailoring to people who maybe have less speaking experience, but then also people with more speaking experience and will help if idea generation is a problem or learning how to create an abstract is a problem.</p><p><strong>Monica Powell:</strong>      There's like a Global Diversity CFP Day and so that is focused on helping marginalized folks submit more CFP. So every year they have an event where it's happening nationwide. Each location has a different variation of the event. But the whole point is to encourage more first-time speakers. And so I attended Global Diversity CFP there the first time earlier this year, and that gave me the opportunity to write an abstract and hear from people who had spoken at events. So I definitely feel like it's important to maybe go to different events and learn more about speaking. I know I attended a panel where people who had reviewed comments proposals, we're talking about what they're looking for and how to write a good proposal, which I think is helpful if you haven't written one before.</p><p><strong>Monica Powell:</strong>      Just to get as much information as you can, so that you can write the best proposal as possible. And then I think actually when you are speaking, just it's nice to remember that the audience wants you to do well.</p><p><strong>Joel Hooks:</strong>         They do.</p><p><strong>Monica Powell:</strong>      Yes. So they want you to do well, they want to learn something from your talk. But I think, just that everyone's super eager. So the content is helpful to keep in mind. Of course practicing the talk is good. And then learning, what's your slide says. I know some people who want to memorize every single word. Other people want to read darkly office slides. I know for me to be comfortable I have to be familiar with the content. I don't want to memorize it. And I also don't want to read directly off of the slides because I think then I feel I'm reading a book in front of a room full of people and then I forget how to read. So yeah, I was definitely will say, going to different community events. Just remembering people want you to do well and then finding out how you're actually comfortable or most comfortable when presenting in front of a room full of people.</p><p><strong>Joel Hooks:</strong>         I needed somebody to remind me to breathe, I think when I did my first one. So what's your preferred stack of technology tools right now? What are you using to build applications?</p><p><strong>Monica Powell:</strong>      So at work I use a lot of Reacts GraphQL, different serverless technologies. So writing Lambda functions, a lot of writing, configuration as code. So a lot of YAML, which I'm not the biggest fan of Yemo, but it seems to be really popular for writing configs. I think people use either YAML or JSON. YAML can seem friendlier, but it also has ... It's really easy to have indentation errors with YAML. And then outside of work I've been using a lot of Gatsby, which has been gotten me to explore GraphQL more, and go more into React. So I recently redid my personal website and so in that process I ended up building my own Gatsby site. So I based it off of the Gatsby ... They have Gatsby starter. So just the bare bones, it's the minimum viable product for a Gatsby site.</p><p><strong>Monica Powell:</strong>      So I was able to based off of that, I added additional styling, additional logic, and that required me to really dig into what's happening with Graffio. And then I really enjoy deploying things with Net Li-Fi. So Net Li-Fi is a hosting service and they integrate very well with GitHub. So I previously used GitHub pages, but I've now transitioned all my sites that are on GitHub pages to Netlify and based off of my site needs, I'm actually within their free tier. And the thing that about Net Li-Fi for example is, I started this project to collect positive affirmations called The Affirmation Generator. And so I have accepted a lot of contributions during Hacktoberfest and every single time someone opens a pull request, I nullify automatically for EHTR. It will generate a staging site. So the person who's making those changes can see like, \"Okay did it pass all the nullify checks.\" And also actually go to the staging site and see what there's just, changes look outside of their local environment and ... Because sometimes it can be different in the staging site versus in their local environment.</p><p><strong>Monica Powell:</strong>      And I think for me as a maintainer, it's definitely been helpful because if someone makes changes to the content or even some of the logic, I can read the code. But then I'm also able to see what the site would look on LSI without having to manually pull everything down locally and then start it up. So it's definitely been a time saver and I think improve the experience for people who are contributing. It makes it seem a bit real I think.</p><p><strong>Joel Hooks:</strong>         I think one of the cool things about that too is that every time you build one of those, it exists forever. That site, that snapshot of the site, that URL, whatever it generates with the degenerated ID. That exist and you can visit it later. So associated with every commit is a build of your site and it's just so easy. It's one of the simplest things in terms of deploying and I've done it. I've copied, I've used FTP to deploy codes. All the way through now where I have this magical wondrous tool that just works for me. And I know there's a lot going on and I say it's easy and in fact it's incredibly complex, but at the same time, if you've ever used Ant or Maven or had to go back and do the FTP stuff, this stuff is really quite a miracle on the whole files in delivering product.</p><p><strong>Monica Powell:</strong>      FTP, I still have one WordPress site and I always just log in manually to see what's happening. It's not very this 2019 as me, but-</p><p><strong>Joel Hooks:</strong>         Yeah. I have a 21 year old, the DreamHost account that still has some active sites that, so every now and then, I have to figure out how to go back in time and work on those things. But not for modern times Monica. Monica it was really great talking to you and I appreciate you taking the time out of your day to come chat with us. Thank you so much. I look forward to seeing what you do next. Thanks.</p><p><strong>Monica Powell:</strong>      Thank you for having me.</p>",
    "slug": "personal-growth-from-open-source-and-meetups-with-monica-powell",
    "description": "<p>Monica Powell didn't have the most straightforward path to her first job as a developer. She took a couple of years of graphic design in college, took a computer science class, joined a student-led web development agency, and then joined a tech startup where she did email marketing and development. At that point, Monica knew that she wanted to be a developer, but she knew too much to attend a boot camp and not enough to get a job. So, she took classes, landed an internship, and then eventually got hired as a web developer. </p><p>Meetups were an important part of Monica's development. When she was in college, she'd attend meet up events to get an opportunity to get off campus and see how people are using technology. She gravitates to women in tech events since she's always found those events to be safe places for her to learn new technologies and meet other people. As of November 2018, Monica is now organizing a meetup called \"React Ladies\" in NYC!</p><p>Contributing to open-source was also important for Monica. Open-source de-mystifies the software that you use. You can look through the source-code of any package that you're using in your project. There's also plenty of opportunities to contribute, and it doesn't have to be code, many projects need contributions to their documentation as well.</p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/personal-growth-from-open-source-and-meetups-with-monica-powell/transcript\">\"Personal Growth From Open-Source And Meetups With Monica Powell\" Transcript</a></p><h3>Resources</h3><ul><li><a href=\"http://aprilzero.com/\">aprilzero.com</a></li><li><a href=\"https://www.reactladies.com/\">React Ladies Meetup</a></li><li><a href=\"https://www.codenewbie.org/\">Code Newbie</a></li><li><a href=\"https://conf.reactjs.org/\">React Conf 2019</a></li><li><a href=\"https://www.toastmasters.org/\">Toastmasters</a></li><li><a href=\"https://www.writespeakcode.com/\">Write/Speak/Code</a></li><li><a href=\"https://www.globaldiversitycfpday.com/\">Global Diversity CFP Day</a></li></ul><h3>Monica Powell</h3><ul><li><a href=\"https://twitter.com/waterproofheart\">Twitter</a></li><li><a href=\"https://github.com/m0nica\">Github</a></li><li><a href=\"https://dev.to/m0nica\">Dev.to</a></li><li><a href=\"https://www.aboutmonica.com/\">Website</a></li><li><a href=\"https://medium.com/@monica_\">Medium</a></li><li><a href=\"https://www.linkedin.com/in/monicampowell/\">LinkedIn</a></li></ul><h3>Joel Hooks</h3><ul><li><a href=\"https://twitter.com/jhooks\">Twitter</a></li><li><a href=\"https://joelhooks.com/\">Website</a></li></ul>",
    "duration": 2233,
    "episode_number": 61,
    "contributors": [
      "Joel Hooks"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/s74yg",
    "path": "/podcasts/personal-growth-from-open-source-and-meetups-with-monica-powell",
    "published_at": "December 19th, 2019",
    "url": "https://egghead.io/api/v1/podcasts/personal-growth-from-open-source-and-meetups-with-monica-powell",
    "edit_podcast_url": "https://egghead.io/podcasts/personal-growth-from-open-source-and-meetups-with-monica-powell/edit"
  },
  {
    "id": "podcasts-00000000000000000304",
    "title": "Real Community Can't Be Faked With Rosie Sherry",
    "summary": "Rosie Sherry talks with Joel Hooks about creating a true community.",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/4ed62ef6-6577-4057-9abd-9782899e92c6/rosie-sherry-podcast_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/55d7f360-05c1-43af-9c2d-eb89e156734a/7038f274-175f-46b0-a218-0d4a031b3f1d/logo.jpg",
    "simplecast_uid": "4ed62ef6-6577-4057-9abd-9782899e92c6",
    "transcript": "<p><strong>Joel Hooks:</strong>         Hi, Rosie.</p><p><strong>Rosie Sherry:</strong>       Hey, Joel.</p><p><strong>Joel Hooks:</strong>         How are you doing?</p><p><strong>Rosie Sherry:</strong>       I'm good, how are you?</p><p><strong>Joel Hooks:</strong>         I can't complain. I'm super excited to talk to you. We have a lot in common, and I'm really excited to talk to you about your community work because I think it's incredibly interesting. But, I wanted to start on something else that we both have in common. One, having a lot of children and choosing to unschool them. And, I'm wondering, can you tell me what unschooling is and what it means to you when we talk about unschooling our kids?</p><p><strong>Rosie Sherry:</strong>       Yeah, I mean I guess for me it's like what does it mean to me rather than what it means to everyone else because-</p><p><strong>Joel Hooks:</strong>         Sure. There's like an official definition, right? But, what does it mean to you, I guess is what?</p><p><strong>Rosie Sherry:</strong>       Yeah, yeah. I mean, it's like over the years I've kind of, I think detached myself a bit from the official definition, and you get different types of unschoolers these days, and kind of sub-communities of them as well. So, you get like unschooling, and you get radical unschoolers and things like that.</p><p><strong>Rosie Sherry:</strong>       But, it's when we get into community and stuff it's like, oh, my God, it's a whole different world. So, just to, I guess keep a bit of sanity for myself, I just go with what works for me. And, I think what works for us as a family, and what we've kind of become comfortable with over time, is unschooling is just kind of living life and following the things that we want to follow and that we're interested in. And-</p><p><strong>Joel Hooks:</strong>         Yeah, we started... Because we're like 20 years into home education too, and we started out, and it was very curriculum heavy. Like we were running a school, right? Like what people would call homeschool. And, then over time it was like, \"Wow, this is really hard for us and the kids, like there's a lot of pressure in their relationships.\" So, we've migrated to what would be unschooling as well, but probably not, like if you looked on Google for unschooling, it's not going to line up with necessarily our house and how it works.</p><p><strong>Rosie Sherry:</strong>       Yeah, I mean exactly. It's like I think a lot of people think unschooling is child led. I kind of think of it as family led these days. It's not all about the child. It's about the parents as well. It's about the family as a whole. It's like we all have needs and we're not... I don't drop everything to cater for my kids and what they need. I made sure they looked after. I make sure that I kind of listen to what I think they need and what they're telling me. But, at the end of the day it's like I've got needs as well. And, yeah, previously I used to be torn between like my career or my kids, but now I'm just like, I have to make it work for both. Otherwise I kind of end up going insane. Because, I love my work. I love like the community building stuff that I do. And, I think if I was to give that up then I don't think that'd be a great thing for our family, financially and otherwise, but you know it's like-</p><p><strong>Joel Hooks:</strong>         Yeah, it's not really... It's like setting a bad example in a way too, right? Like they need... Not a bad example, but you're setting an example for your children, and you're showing them balance and how to approach life in a lot of respects, I think.</p><p><strong>Rosie Sherry:</strong>       Yeah. And, they take it in. You know? They definitely take it in, and they see the things I do, and they see that I'm like the only mom who brings her laptop around with her everywhere. You know, stuff like that. And, my eight year old listens to the Indie Hacker Podcast and stuff like that, when we're driving around in the car, stuff like that. So, it's like-</p><p><strong>Joel Hooks:</strong>         Yeah, one of my older ones will actually edit this podcast, so he works with us. So, he listens to them all, but because it's a job. So, they ended up in the family business as a result of the home education. It just kind of was a natural fit.</p><p><strong>Rosie Sherry:</strong>       Yeah. Yeah. I'm trying to do that, but I've not quite gotten there yet.</p><p><strong>Joel Hooks:</strong>         It takes a while. It's a really, it's a long game, and I don't know return on investment, if you start breaking it down. How did you originally make that decision? Because I think that's something people are curious about. And, I have my own ideas on why we did it, but I'm curious why you decided as a family with Graham, your husband, how did y'all decide to home educate?</p><p><strong>Rosie Sherry:</strong>       It's the school system kind of sucks is the general gist of it for me. It's like the more I looked into it, the more I couldn't justify sending my kids to school. We've got five kids, just for reference for everyone else, that currently age between two and 16. So, my two oldest boys are 14 and 16, and they went to school for like three or four years. And, before sending them to a typical public or government school here in the UK, it's like we tried a private school, a small kind of had like 50 kids in the whole of primary, up to the age of 11. And, we were trying to go for something alternative that wasn't like what the government had to offer. The class sizes were mixed and small, and it kind of was along what I believed would be a good solution instead of like homeschooling.</p><p><strong>Rosie Sherry:</strong>       But, to be honest, we had a really bad experience in our second year, and that was at that point I just said to myself, it was like, \"No one's going to give a damn about my kids more than we are as the parents.\"</p><p><strong>Joel Hooks:</strong>         Yeah, that's a fact.</p><p><strong>Rosie Sherry:</strong>       And, that's what stuck with me. And, I believe that to the core of my heart. It's like no school, no teacher, nor anyone out there will stick their head out for your kids. They won't understand that the system changes too much. Years change every year. They'll never get to know your kids like you get to know them as a parent.</p><p><strong>Joel Hooks:</strong>         Yeah. And, it's not to me, like there's really great teachers out there, but you're always like every year you're rolling a 20 sided die. I think it's just chance, right?</p><p><strong>Rosie Sherry:</strong>       Yeah. Yeah. It's not like disrespect to the teachers or anything. It's just the system. It just doesn't sit well with me. So, I've got no regrets. It doesn't mean that it's easy. And, like how we approach things have changed over time, and we've kind of gotten a bit stricter with our eight year old than we were with our teens. But, you know, it's still we make him do some math and writing every day at the moment, but we've only recently done that. So, he's like he's ready for it, and he's not complaining too much. But, it's not a lot kind of thing. And, I don't know how long we'll stick with it, to be honest, but we'll see how it goes.</p><p><strong>Joel Hooks:</strong>         We've always like, you have to read, and then there's some math involved. And, then beyond that, what are you into? And, it doesn't really matter what you're learning to us. It just matters that you're progressing in something. It can be literally anything. What are you interested in? Let's explore that. And, to me it's been great. It's really, really kind of nice and pleasant in practice.</p><p><strong>Rosie Sherry:</strong>       Yeah, exactly. I remember my eldest son, he's quite good but he did an online math thing, and he did like the equivalent of three years of maths in like three months. So, he just like whizzed through it. And, he did like two or three hours a day, just because he's like that's how his brain works.</p><p><strong>Joel Hooks:</strong>         Yeah, he was enjoying it.</p><p><strong>Rosie Sherry:</strong>       He dives deep in, and then he gets bored, and he's like, \"I'm not doing it anymore.\" But, you know, he did three years' worth of math in three months. So, it was like, why would I make him keep going when he does stuff like that? It's like, what's the point?</p><p><strong>Joel Hooks:</strong>         I was talking to Rob Walling who who founded Drip and other things, and has moved on from that, at MicroConf, which is the conference he puts on. And, there's this weird disproportionate number of home educators at MicroConf, which is like a bootstrap entrepreneur conference. And, his theory is that we tend to just think that we can do it better. And, I was like, \"Well, that's probably true on several levels. One, we think that. And, then maybe we actually are able to do that as well.\" And, that's always stuck with me.</p><p><strong>Joel Hooks:</strong>         One, about the ratio just because it's interesting if you go to those things, that there's just a huge number of home educators. But, then you know like that idea that we just kind of, \"Oh, well we can probably do this in the same way that we will start a business or whatever,\" to like scratch that particular professional itch we think we can also educate and do that. And, it turns out to be true.</p><p><strong>Rosie Sherry:</strong>       Yeah, yeah, definitely. I mean, I don't know about better, I think different. And, I definitely think like my experience of building up Ministry of Testing has influenced how I think about my kids, and what I want them to do, or what I want to make them do, I guess, and what's important in life as well.</p><p><strong>Joel Hooks:</strong>         So, you mentioned Ministry of Testing.</p><p><strong>Rosie Sherry:</strong>       Yeah.</p><p><strong>Joel Hooks:</strong>         What is that? Can you explain that to me? What is Ministry of Testing, and how did it come about?</p><p><strong>Rosie Sherry:</strong>       So, Ministry of Testing is a company I founded, officially like as just an online community in 2007, but then like as a business formally in 2011. It's a community for software testers or software testing, however you prefer to say it. And, we basically geek out on testing, and we do conferences. We do online kind of talks, and training, and online community.</p><p><strong>Joel Hooks:</strong>         What's the relationship between software development and software testing? Like how does that symbiotic relationship work?</p><p><strong>Rosie Sherry:</strong>       It's an interesting one. I think it's one that's changed for the better over over the years. It's like when I first started in testing, I used to be tester myself, which is how it kind of came about. Testing was very much separated from development and waterfall style, I guess. These days it's much more integrated ideally.</p><p><strong>Rosie Sherry:</strong>       And, there's I believe a lot more respect for testing, but there's still a long way to go from all angles. I think testers need to do better to improve testing, and likewise for not just developers but designers, product owners. I think there's still huge room for improvement. Just understand what testing is, and how like testing doesn't have to be negative, and how it can be hugely supportive to the whole creation of a product. And, I still feel a bit like we've made huge strides to make testing better, but so much work is yet to be done, I think.</p><p><strong>Joel Hooks:</strong>         Right. There's always like that healthy tension, sometimes healthy. There's always a tension between... It feels like, and maybe you're talking about this a little bit, like between, you have development, and then it goes through testing. And, they're finding bugs. And, if you don't have testing and you don't have software testers, professionals doing this, then you're putting that burden, who, on your users, right? Like that's ultimately who has to test it, or like that's, I think a benefit of having that thing. It's almost like a privilege to work on software that has professional testers.</p><p><strong>Rosie Sherry:</strong>       Yeah, I definitely think so. I think it's like people who... A lot of people don't get that benefit, especially in smaller teams. They just can't justify the cost, understandably. Me and my work in Indie Hackers, for example, most of the small bootstrap companies in there might never have a tester on board. And, they might never experience what it means to have that feedback loop.</p><p><strong>Rosie Sherry:</strong>       But, definitely if you can get good testers on board, it can make be hugely helpful. There's also the aspect of the whole, I think generally in the industry is that there's a kind of unfair focus on like automation for everyone that wants to automate stuff. But, actually there's a lot more to testing than just automating the testing.</p><p><strong>Joel Hooks:</strong>         I spent the last year removing robots on one of our systems. Because I had built it up over the course of our six years of egghead, and built all these cool automated robots, and then realized that's not the way necessarily all the time.</p><p><strong>Rosie Sherry:</strong>       Yeah. It's straight in. It's like so hard to... I still don't know what the right way is to challenge that. Partly I think testers need to kind of thrive more, and step up more, and be proud of the work they do, and be able to show the work they do. But, then it's like it's hard to show the work that you do as testers. It's like developers often-</p><p><strong>Joel Hooks:</strong>         Yeah, it's almost-</p><p><strong>Rosie Sherry:</strong>       Sorry, developers often show off like this bit of code. It's like, what do testers have to show. It's a lot harder.</p><p><strong>Joel Hooks:</strong>         It's like invisible labor, in some ways. Right?</p><p><strong>Rosie Sherry:</strong>       Yeah, yeah. So, how do we as a community express that better, to show the value? And, quite often, when it comes out, as you say, like one they use is finding bugs. And, then even then it's like the eyes go back towards the testers. They're like, why didn't you find this bug?\"</p><p><strong>Joel Hooks:</strong>         Yeah. So, either way, like if they don't find any bugs, it's like, \"Why do we have testers?\" If they do find bugs, it's like, \"Why didn't you test?\" So, either either way you kind of... And, Ministry of Testing is, it feels like part of the idea is to build this community and give more voice to these people doing this important work.</p><p><strong>Rosie Sherry:</strong>       Yeah, I think that's very much at the heart of it. And, it's like when I started like this online community, what I wanted to achieve was just moving towards better testing and trying to find ways to create better products. Obviously, it's like the world has changed a lot in that time, and I had no clue what I was doing. But, that's definitely what I had in mind.</p><p><strong>Joel Hooks:</strong>         We're all kind of just making it up as we go along. So, Ministry of Testing started out, and you started conferences, and you have a local conference there in your hometown. And, now it's grown to this point where there's nine global conferences that happen? Test bashes.</p><p><strong>Rosie Sherry:</strong>       Yeah, something like that. We kind of change a bit every year. I think next year it might be eight. I can't remember. Sorry. I don't get involved in the day-to-day these days.</p><p><strong>Joel Hooks:</strong>         What does it take to run conferences globally, like personally? And, I know you've kind of worked really hard to step out of the day-to-day running of that, but still what kind of effort is it to put on a conference in a totally different part of the country than you live in?</p><p><strong>Rosie Sherry:</strong>       It's hard. People they see like the first conferences we did, and for us it was like... Because we had like an online presence and online global community, and we did like Brighton in the UK for the first three, four years. And, people started saying, \"Oh, I want one in my hometown,\" or this country, this country. I was resisting it for a long time, and then I started saying yes. And, the first one we did outside of the UK was New York, which, you know, it was fine. We had like 160-170 people.</p><p><strong>Rosie Sherry:</strong>       But, the approach we took was, I knew that I didn't know like the local areas. So, it was like, if we were to like host a conference in the new locations, there's lots of logistical things that are really stressful. For me it's stressful. Maybe for another proper event organizer they're like that excites them. But, for me it's like a lot of unknowns about new event locations, new cities, new like where do you stay. How do you choose the right location? How do you know it's a good location? Things like that.</p><p><strong>Joel Hooks:</strong>         Every aspect of it is something that you have to, like it's a huge checklist that you have to tick all these boxes. And, you are in a different time zone, many, many hours ahead of this, this hemisphere. It seems like it'd be... We haven't, like we've resisted the urge at egghead to get into conference organizing, even though we've been been asked. I'm like, \"Ooh.\" I don't know. I personally couldn't do it. It would be overwhelming. I'm always impressed when somebody can pull it off.</p><p><strong>Rosie Sherry:</strong>       Yeah, I mean it's great. It's amazing to bring people together. But, the logistics of it is, it is hard. And, the way we decided to do it is to try to partner up with local testers, to help us, people who'd know the local area, and they would help us try to find the-</p><p><strong>Joel Hooks:</strong>         Boots on the ground.</p><p><strong>Rosie Sherry:</strong>       Yeah. And, that's kind of what we've done, and it's worked okay. It's like sometimes it's better than others. And, really, I think it'd be great to have proper event organizers who know about negotiating venues and things like that. But, we don't have that luxury. And-</p><p><strong>Joel Hooks:</strong>         It's kind of like when you go to hang drywall in your house, and you could do it yourself or you could hire somebody that does it all day, every day. And, both will work. But, you know, professionals are professionals for a reason, I guess.</p><p><strong>Rosie Sherry:</strong>       And, it's only now that we've just hired a proper event organizer. We haven't had one until now.</p><p><strong>Joel Hooks:</strong>         I don't know, after doing this for so many years, I have to imagine you become one. But, then you're like, \"Eh, maybe it's time to retire,\" at the same time.</p><p><strong>Rosie Sherry:</strong>       So, it's like-</p><p><strong>Joel Hooks:</strong>         Maybe not.</p><p><strong>Rosie Sherry:</strong>       Yeah, I mean I did it, and then I passed all my knowledge onto our current CEO. And, then he did it for a while. And, then we hired a community manager, and then she basically has done it for a while. But, now I'll say we need a proper events, full-time person to manage everything. So, hopefully we have someone new coming on board in January. So, yeah. But, it sounds silly that it's taken us that long, but it is how it is.</p><p><strong>Joel Hooks:</strong>         Well, I've only ran a business for six years. I fully understand. It's like stuff that looks obvious is so hard to actually get into production. The logistics of everything is complex. Life is complicated.</p><p><strong>Rosie Sherry:</strong>       And, actually one of the most annoying parts is like taxes for each different location that you do an event in.</p><p><strong>Joel Hooks:</strong>         Oh, I didn't even think of that.</p><p><strong>Rosie Sherry:</strong>       Yeah, so like the U.S. is quite straightforward, but anywhere in Europe, and we've done events in Australia and New Zealand, you have to register for tax in each of the locations. And, then every month, or every quarter, or whatever their rules are, you have to submit returns. So, it's like a few multiple events a year, then all of a sudden it was like there's this accounting burden that you have to kind of deal with. And, it's not fun. It's like these are-</p><p><strong>Joel Hooks:</strong>         No, no, that's like my least favorite aspect of running any sort of business is the compliance accounting. Ooh. So, I want to like switch it up. Because you talk about community, and building community, and Ministry of Testing ultimately isn't a conference, it's a community. What are the characteristics of a strong community?</p><p><strong>Rosie Sherry:</strong>       People who care. I think it's that, that's what it generally comes down to. It's like the people who lead it have to care. They have to show that they care. And, you know, they care about the industry as a whole, and they care about the people. And, they're essentially driven by creating something better, rather than the money that comes with it.</p><p><strong>Joel Hooks:</strong>         I think... I don't know if this is your observation, but I have observed this idea of in the last several years, the idea of growth hacking and treating community maybe as a marketing gimmick. And, I'm wondering what are your thoughts on that, and is that effective in terms of actually building community?</p><p><strong>Rosie Sherry:</strong>       Oh, yeah. Oh, yeah. I pretty much dislike the whole growth hacking approach. It kind of feels fake to an extent. And, it's like growth at, not at all costs, but it's like focusing on the wrong things.</p><p><strong>Rosie Sherry:</strong>       And, I came across something recently, and it was a tweet. I can't even remember who said it. But, it was like it really kind of resonated with me. Is that communities don't scale. It was like the work for communities doesn't scale. So, everything you have to do is hands-on. And, it's like you can't grow a community, not a real community where people feel like they belong. You can grow numbers. You can grow members, but I honestly believe that you just can't fake community. And, that's why like communities like Ministry of Testing work, is because I've never done any of that kind of daft like growth hacking at all costs.</p><p><strong>Rosie Sherry:</strong>       I've never sold out on the community. And, in our conferences, we don't have exhibition booths or sales stands, because we don't believe that adds value to the community. Which costs us a lot of money. People would say that, but does it really cost us money when we don't have to spend money on advertising, and when we don't have to spend our time and effort on salespeople and things like that? So, I would debate that without a problem.</p><p><strong>Rosie Sherry:</strong>       And, actually it's like comparing it to Indie Hackers is like it's very similar. It's like everything that Cortland has built up is the same. It's like doing things that don't scale. It's like hands-on stuff to bring value and make people feel welcome. And, I very much see Ministry of Testing very similar to Indie Hackers, just in a complete different sector.</p><p><strong>Rosie Sherry:</strong>       But, you know, they have meet ups. We have meet ups as well. The only thing they don't do is conferences. Yeah. I keep trying to convince Cortland, but not yet. But, yeah, I mean the vibe is very similar between the communities, which is to be honest, you know, one of the only reasons that I considered working for Indie Hackers. Because, if it was any other community, I would probably say no. But, I felt like that-</p><p><strong>Joel Hooks:</strong>         Yeah. I was actually wondering that. Because, it surprised me, honestly, when I saw you pop up as the Indie Hackers community manager. It surprised me on some levels, and then I understand it. I know Cortland. He's awesome, and what he has built is great. But, what drew you to Indie Hackers as a community?</p><p><strong>Rosie Sherry:</strong>       Precisely, just everything that Cortland has built up, in addition to the fact that I kept trying to hang out there, and I couldn't justify my time. So, I thought-</p><p><strong>Joel Hooks:</strong>         Oh, nice.</p><p><strong>Rosie Sherry:</strong>       Well, why don't I get paid to do it? And, to be honest, it's been ideal. It's like even though I've built up my business and I understand that indie hacking, or bootstrapping, whatever you want to call it, is like I felt like I was kind of losing touch a bit, because my mind was so focused on Ministry of Testing. And, I couldn't justify the time to go and learn what others were doing.</p><p><strong>Rosie Sherry:</strong>       So, yeah, I was trying to hang out at Indie Hackers, and I didn't develop that habit. But, I went there a few times, and I saw Cortland was looking for some social media help. And, I was like, \"I can do that.\" He was a bit confused at first when I said that, because he was like, \"What happened to the Ministry of Testing?\" And, I had done one of the early interviews with him. So, based on that we just had a conversation, and then he gave me a community manager job instead, which is cool.</p><p><strong>Joel Hooks:</strong>         Yeah, it makes sense. I imagine his confusion was similar to mine. But, then when you see it in action, it totally makes sense. And, can we rewind just a little bit and tell people what Indie Hackers is? Because I don't know that we've mentioned it too much.</p><p><strong>Rosie Sherry:</strong>       Yeah. Indie Hackers is a community for indie hackers, which are founders, bootstrappers mostly. But, mostly it's about people who are trying to build a business in their own way. But also, you know, Cortland is very open in the fact that he doesn't like to kind of, I guess discriminate against people who go for a funded route as well.</p><p><strong>Joel Hooks:</strong>         Sure.</p><p><strong>Rosie Sherry:</strong>       So, they're just like bunch of people trying to explore good ways of doing business. That's how I see it. And, just originally started with like text-based interviews where people had to be very open about their finances. And, these days that's still popular. And, the podcast that Cortland does is really popular. And, the community at the moment, is just really kind of like growing a lot. So, for me that's quite exciting. And, let's say my head's in there every day trying to try to help all these people, and try to figure out what their needs are and how we can help them.</p><p><strong>Rosie Sherry:</strong>       And, for me it's quite nice, because it's like, I compare it a lot to the Ministry of Testing. But, it's like one of the biggest differences is that Stripe bought Indie Hackers quite early on. So, Cortland doesn't, obviously he has to report back in certain ways to get like budget approvals and things like that. But, he doesn't have to focus on selling a product. So, it's like that kind of makes it quite unique. And, from my perspective I think that's quite, I guess honorable of Stripe to do that. And, it's from the insight that I get, it's not huge insights, but it's really nice to see how hands off Stripe are, and how much control Cortland still has at the moment to kind of do what he believes is right.</p><p><strong>Joel Hooks:</strong>         Stripe impresses me on so many levels. But, Indie Hackers is probably, that and Stripe Press are like two of my things that I look at Stripe and I'm like, \"You don't have to do this.\" There's no meeting where you're sitting down, \"What's the ROI on this?\" Because, there is none. And, there's no like ads. And, there's no like direct funnel to Stripe. And, Stripe is the obvious choice for a lot of people that participate in Indie Hackers, but it's not... Like you don't even notice it on the site. And, there's no big fanfare made that this is a Stripe joint at all. And, it just keeps getting to focus strictly on the community. And, not thinking about generating revenue is such a a great service to the broader community.</p><p><strong>Rosie Sherry:</strong>       Yeah. And, I think with a small team they achieve so much with what they have. And, sometimes I wish that someone would buy out Ministry of Testing, and do that. I'm like, there's so many testing companies out there that could do that. I was like, \"Why won't they do that? They would get so much value if they did that with Ministry of Testing.\"</p><p><strong>Joel Hooks:</strong>         Yeah. And, like you talk about the value and the upside for the company. It's something that, I don't think it's obvious necessarily, but the idea of a thriving community, it's such a good thing, because it has to be... There is no such thing as an engineered community. It has to kind of form around the needs of the community and the people organizing it. And, you know, you can't fake it. You can't. It has to be authentic, or it doesn't exist</p><p><strong>Rosie Sherry:</strong>       And, it's hard to... It's like the classic of it's like whenever a company gets bought out, the first thing you start to think of is that our company's going to go downhill. And, it's hard to have control over that, or know what's going to happen. But, I really wish more companies would do what Stripe have done. I think it's pretty, pretty amazing.</p><p><strong>Joel Hooks:</strong>         I think it's smart on their part. I think Stripe, it's a good investment for them, and probably doesn't affect their bottom line much at all. It's like a rounding error for them to help others think differently.</p><p><strong>Rosie Sherry:</strong>       Yeah, exactly.</p><p><strong>Joel Hooks:</strong>         And, it's really amazing. So, kudos to them for making that decision. So, I want to kind of close out, and talk about this idea of making friends and building relationships as a business strategy. My general contractor said to me the other day, he said it was sad but not being a total piece of shit is a competitive advantage in business today. And, I think that kind of relates to what we're talking about. I'm wondering, like how do we do that? How do we build relationships and friendships, and make that serve our professional needs, and help us grow ultimately as community members and advocates?</p><p><strong>Rosie Sherry:</strong>       Yeah. It's an interesting one. I think the people, not so much at the top, but maybe a bit at the top, a bit in the middle, I think they should be doing a lot more to reach out to the next generation of people. And, I wish more people would do that, and figure out ways to help each other out, and remember where they came from as well.</p><p><strong>Rosie Sherry:</strong>       I see a definite trend is like when people find that courage to come out and participate for X amount of time. They really do grow as a person. And, that's probably the biggest thing that I get out of building communities, is watching people grow. And, that's really what drives me. I think the hard part is trying to reach out to the lurkers, the people who prefer to be quiet but often need help.</p><p><strong>Rosie Sherry:</strong>       And, sometimes I spot profiles or people that I kind of identify with. For me it's like more kind of women and mothers, who I think are often like not represented fairly in the workforce, or in the business world. And, sometimes I'll reach out. And, they'll always appreciate it, and they'll always respond. And, they'll slowly come out and share their story. And, it always, not surprises me, but kind of in the most cheesy sense kind of touches my heart when they open up to you. So, it was like I wish more people would reach out to help others. And, and it's hard to say it when, I guess people are so busy all the time, especially like as they grow older. They have family, business, work, whatever, it all takes over. But, the real value for me is always helping people and finding ways to help people.</p><p><strong>Joel Hooks:</strong>         That's amazing, and there's a lot of opportunities. I think once you start opening your mind and your eyes to those folks, and what you can do, and how you can use your position and your advantages in life to help others, it's really out there, and there's really a lot of opportunity for people to do that. And, it's so rewarding, like to me, to be somebody that can help people. And, like you said, you called it cheesy. I don't think it is at all. I think you can, like when you lift people up, and you know, you get paid with really good feelings when you do that. Like it to me is part of the reward for that is feeling really good.</p><p><strong>Rosie Sherry:</strong>       Yeah. I think that's what people don't actually see, is when you think you have enough, you think that's okay. But, actually these people who need you, it's like you almost need them as much as they need you, but you have to start that conversation somehow. And, I think they're much more unlikely to start that conversation, because they don't have the confidence to do it. Whereas, it's like, if I have a bit of time, I will spend a few minutes just reaching out to people to see if I can help, or to see if I can compliment them, or just even putting out random compliments online. It's like it just surprises people, and it gives them that first little step to help them.</p><p><strong>Joel Hooks:</strong>         Yeah. That's such a great example. I really appreciate what you do, Rosie. I appreciate what you do with Indie Hackers and Ministry of Testing. It's something that I've admired for a while. Thank you so much for taking the time out of your evening to chat with me. I really appreciate it, and I'll talk to you soon.</p><p><strong>Rosie Sherry:</strong>       Thanks, Joel.</p>",
    "slug": "real-community-can-t-be-faked-with-rosie-sherry",
    "description": "<p>Rosie Sherry is both an unschooling parent and the founder of the Ministry Of Testing. There's a disproportionate number of bootstrappers who homeschool their kids, and maybe it's for the same reason why they built something themself instead of fitting into the mold, they think they can do it better. </p><p>Ministry of Testing is a company Rosie founded, officially as an online community in 2007, but then formally as a business in 2011. It's a community of software testers who geek out on testing, host conferences, have online talks, host trainings, and participate in an online community.</p><p>You can't fake a community like that. You can growth hack numbers, members, et cetera. But, you can't fake community. A strong community has to have people who care, that's what it generally comes down to. The people who lead it have to care, show that they care, and care about the industry as a whole.</p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/real-community-cant-be-faked-with-rosie-sherry/transcript\">\"Real Community Can't Be Faked With Rosie Sherry\" Transcript</a></p><h3>Resources</h3><ul><li><a href=\"https://www.ministryoftesting.com/\">Ministry Of Testing</a></li><li><a href=\"https://www.indiehackers.com/\">Indie Hackers</a></li></ul><h3>Rosie Sherry</h3><ul><li><a href=\"https://twitter.com/rosiesherry\">Twitter</a></li><li><a href=\"https://rosie.land/\">Website</a></li></ul><h3>Joel Hooks</h3><ul><li><a href=\"https://twitter.com/jhooks\">Twitter</a></li><li><a href=\"https://joelhooks.com/\">Website</a></li></ul>",
    "duration": 2034,
    "episode_number": 60,
    "contributors": [
      "Joel Hooks"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/6yfwe",
    "path": "/podcasts/real-community-can-t-be-faked-with-rosie-sherry",
    "published_at": "February 7th, 2020",
    "url": "https://egghead.io/api/v1/podcasts/real-community-can-t-be-faked-with-rosie-sherry",
    "edit_podcast_url": "https://egghead.io/podcasts/real-community-can-t-be-faked-with-rosie-sherry/edit"
  },
  {
    "id": "podcasts-00000000000000000303",
    "title": "Accessible Design Systems With Sarah Federman",
    "summary": "Sarah Federman talks with Joel Hooks about accessible design systems",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/f0cab9fe-944f-4cb7-9d82-8a2a38c0393a/sarah-federman-podcast_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/55d7f360-05c1-43af-9c2d-eb89e156734a/4a5faefd-da68-43de-b564-375513aa65d3/logo.jpg",
    "simplecast_uid": "f0cab9fe-944f-4cb7-9d82-8a2a38c0393a",
    "transcript": "<p><strong>Joel Hooks:</strong>         Hey Sarah.</p><p><strong>Sarah Federman:</strong>     Hello.</p><p><strong>Joel Hooks:</strong>         How are you doing this afternoon? It's not afternoon. That's part of what I want to talk about, actually. You are not in the U.S. You are in Australia.</p><p><strong>Sarah Federman:</strong>     It is morning. It is past the point at which I should have had my coffee, but yet I have not.</p><p><strong>Joel Hooks:</strong>         Oh, podcasting pre-coffee, that's a brave move. I don't know that I could do that. So I'm really excited to talk to you about design systems and design tokens and you know the work you're doing in that area.</p><p><strong>Joel Hooks:</strong>         But I wanted to actually stop first and talk to you about this idea, because you moved around the globe basically and you packed up and moved to Australia. I was wondering what that experience has been like for you so far.</p><p><strong>Sarah Federman:</strong>     It's been a bit of an adventure. It's hard to say that it's like anything pretty crazy just because Sydney is very much a first-world city and I have almost everything I need here except for Amazon Prime, which is truly heartbreaking. But yeah, it's great. The people are nice here. They're kind of like New Yorkers, if New Yorkers were very nice. They're always willing to help you out and not be rude about it. It's great.</p><p><strong>Joel Hooks:</strong>         So just logistically speaking, I would be terrified to make that move and how do you get your stuff? How long does it take to settle in and are you settled in?</p><p><strong>Sarah Federman:</strong>     Thankfully Atlassian was really supportive and they got me a shipping container and took care of a lot of things like visas and whatnot. But my shipping container did actually just get here and I just had the movers come and pick up the empty boxes yesterday. So I would not say that I am settled in, but I am on the path to being settled in, thankfully.</p><p><strong>Joel Hooks:</strong>         Kind of one step at a time. So you moved to Australia to work on design systems with Atlassian and they have, I think, one of the more interesting design systems that I've looked at personally. How did you get into working with design systems in the first place?</p><p><strong>Sarah Federman:</strong>     Ooh, I think it's one of those things that kind of just happened just because it really aligned well with my skillset. I went to school for what's called new media design at RIT and that was a mix of UI, UX, animation, and a little bit of coding. I decided that I really liked the coding stuff. So I decided to go full time front-end development, ended up at LinkedIn, found I didn't really like working on core products.</p><p><strong>Sarah Federman:</strong>     So I ended up getting pulled onto a project where we did a full rewrite of the SAS code base at LinkedIn, which was fun. We got to bimify it and do all sorts of things that made me happy. I found out that doing more of that is a lot of design systems and I like that. And it aligns with my hybrid designer developer skillset. So I ended up landing at Adobe where I worked on their design system for a few years and now I am here.</p><p><strong>Joel Hooks:</strong>         Wait, so you said bemify. What does that mean? What does it mean to bimify a code base?</p><p><strong>Sarah Federman:</strong>     So we had a lot, a lot, a lot of CSS at LinkedIn. I think it was almost at four megabytes at one point which is just bonkers.</p><p><strong>Joel Hooks:</strong>         That's a lot of text.</p><p><strong>Sarah Federman:</strong>     And a lot of that came from the fact that we were just overwriting our styles and we had just so much specificity classes. So all of our CSS was just trying to overwrite each other and BEM let us take a lot of the specificity out of it. So it was one level of specificity, therefore we wouldn't have to override things as much. And that was really good as a starting place just to get the size of our CSS down and start to systemize things. And then they've been working, after I left, on taking that and evolving it into what is now known as CSS blocks, which is really exciting.</p><p><strong>Joel Hooks:</strong>         Nice. I want to rewind a little bit and ask you to define a design system. I'm curious, I see the word around and I wonder. It kind of cropped up over the last few years and I think everybody's kind of seeking to have some sort of design system. I'm wondering what a design system is, like fundamentally, what a design system is.</p><p><strong>Sarah Federman:</strong>     Ooh, this is a little bit of a-</p><p><strong>Joel Hooks:</strong>         Is it a loaded question?</p><p><strong>Sarah Federman:</strong>     Yeah.</p><p><strong>Joel Hooks:</strong>         What is a design system to you is fine too. We don't have to define it for the ages.</p><p><strong>Sarah Federman:</strong>     Yeah, yeah. I wrote a long article a while back called Distilling How We Think About Design Systems and it's been several years, but in that article, I basically laid out the fact that some design system teams define a design system as all of the outputs, like our component library, our documentation, and the sketch tools and whatnot, plus the whole operation of it. So how people learn about the system, how you support them, how it's integrated into products, the workflows, the governance, et cetera. So some people think of that whole thing as the design system.</p><p><strong>Sarah Federman:</strong>     Personally, I tend to err on the side of there's a design system and that is our component library, our documentation, our tools, et cetera. And then we have operations of it. So like an agile team uses agile methodology, a design system is about making your teams work better and that's pretty much what I do day to day.</p><p><strong>Joel Hooks:</strong>         So kind of like it's standard operating procedures in some way, but there's the visual aspect of it and the documentation is a huge component, I would say.</p><p><strong>Sarah Federman:</strong>     Yeah, definitely. I would say that it's a bunch of outputs and if you're including the operations in the system, it's also the methodology.</p><p><strong>Joel Hooks:</strong>         Is having no design system at all, is that a design system? Is it just a bad one?</p><p><strong>Sarah Federman:</strong>     I'm not sure you can have no design system and also have a design system. That doesn't quite make sense to me.</p><p><strong>Joel Hooks:</strong>         Maybe, I mean, there's people that are like, Oh you don't use a framework or have feelings about using extensive frameworks. But then I always feel like you're building a framework if you're not using one. I wonder if you don't have a design system but you have some sort of design in your product or whatever it is, the work you're doing in terms of web development, like there is a system, there's always a system. It's just kind of good or bad in some way.</p><p><strong>Sarah Federman:</strong>     Yeah, that's definitely a good analogy, the way that if you're not using a framework, you're still building a framework. You're just not doing it properly or you're not documenting it or supporting it. That's really what you're referring to when you have a design and there is a system there. It may not be a complete system and it may not be documented and it may not be supported, but it's there.</p><p><strong>Sarah Federman:</strong>     I would say that once you get to the point where it's obvious that is there and it's becoming a pain point, that is the point at which you might want to formalize it and start thinking about how you want to support and grow and evolve it.</p><p><strong>Joel Hooks:</strong>         That kind of makes me think, where do people start? How do you know when to start and where to start and when in either a product or a software project's journey is it appropriate to start thinking about these things?</p><p><strong>Sarah Federman:</strong>     Ooh, I am not maybe the best person to ask because I've always been working at Scale because that's what's been most interesting to me. But I would say that at the point where you spend more time talking to the people, if you're all in the same room and you've got one product and you have an understanding of the system that you're using, regardless of whether it's formalized, you don't need one.</p><p><strong>Sarah Federman:</strong>     It might be interesting to think about it in terms of if you're a startup and the one thing that you really need above all is speed to determine your product market fit, a design system might hold you back or it might allow you to evolve very quickly and try new things, which could be really good for your use cases.</p><p><strong>Joel Hooks:</strong>         Atlassian's design system is Atlas, is that correct?</p><p><strong>Sarah Federman:</strong>     It's Atlaskit.</p><p><strong>Joel Hooks:</strong>         Atlaskit, okay.</p><p><strong>Sarah Federman:</strong>     Well, so this is one of the things that we haven't really gotten, we're still figuring out. We have the ADG, which is the Atlassian design guidelines and we have Atlas Kit, which is our react library. It includes more than what the design guidelines include at the moment.</p><p><strong>Joel Hooks:</strong>         Yeah. When you go to atlaskit.atlassian.com, it shows all of that with the components. Like you said, the components and the actual SDK side of it is really important with the design system. Atlaskit is one of the more complete ones. And then Adobe, just really Spectrum. So that's new too, the Spectrum design system from Adobe. Is that what you were working on when you're at Adobe?</p><p><strong>Sarah Federman:</strong>     Yeah. So Adobe is a little bit different in that they don't have, how do I say this? So their design system is built on the design org. So the implementations of it are not necessarily complete because they start on the design side. So what they did is they released the documentation, which doesn't include the actual libraries right now, which I'm hopeful that they will release soon.</p><p><strong>Joel Hooks:</strong>         Atlaskit is something we could pick up and use where Spectrum isn't quite there yet, in terms of the components. We can still use it and there's ideas here and they're sharing information.</p><p><strong>Sarah Federman:</strong>     Adobe is at a scale that not a lot of companies are at. So they have so many different frameworks across all their products and so many different platforms that it's really not possible for them to have one official framework. Whereas we can have our official react implementation, it's hard for them to point to one library and say this is our design system.</p><p><strong>Joel Hooks:</strong>         So I think something that's interesting to me is, and we talked about when should you start or accelerating your startup and that sort of thing, and I'm wondering why not just pick up something like Atlaskit or work around something that exists? Because I look at Atlaskit and what I see, I'm a small business owner, and this would cost millions and millions of dollars to produce. And here it is, I can just use it and kind of jump ahead. And I was wondering what the drawbacks are to that or what kind of advantages that you might see in just picking up something that exists off the shelf?</p><p><strong>Sarah Federman:</strong>     It's interesting because that's kind of what we used to do with Bootstrap and then we all ended up building our own bootstraps. And it's interesting to think about because we all like to kind of think that we're special and the problems we're solving are really just specific to our company. But the reality is the way that your system is built is not probably that special. It's the way that it's used that's special, like the operations of it, like we talked about before.</p><p><strong>Sarah Federman:</strong>     And theoretically it would be really nice if we were all able to just pick something up off the shelf and start building on it. But I think the reason that that hasn't happened yet is because of the reason why we did it in the first place because we wanted to embed all of these opinions and decisions and things into our systems. So we don't have, at the moment, a really good white label design system out there that doesn't have any sort of built-in design logic that you wouldn't have to override so many times that it just becomes hard to maintain.</p><p><strong>Sarah Federman:</strong>     So I'm hopeful that either us or somebody else, like I know Ryan Florence is working on his Reach UI project, they release something white label that's easy to build on top of because so much of the design systems that we have, like Atlaskit included, has a lot of opinions and stuff built into it, which is great for us and for our vendors. But I probably wouldn't say that it's something that anybody should pick up and use.</p><p><strong>Joel Hooks:</strong>         I look at it a lot of times as inspiration. Because I'm trying to think about what should our design system look like. We use Bootstrap. Was Bootstrap a design system? Is it? It still exists, it's not like it's gone anywhere.</p><p><strong>Sarah Federman:</strong>     It depends on if you include the operation side. I would say that it's a part of a design system, I guess.</p><p><strong>Joel Hooks:</strong>         And you know, we use Bootstrap and picking that up initially was great, but then you also get kind of locked into that, right? So when you adopt a design system or you adopt a framework on the JavaScript side of things, it's a lot of buy-in and can be difficult to untangle later.</p><p><strong>Sarah Federman:</strong>     Yeah. And I would love to see something like a very un-opinionated Bootstrap that takes a lot of that stuff out and is systemized, but that doesn't exist yet.</p><p><strong>Joel Hooks:</strong>         So one of the things I love, and you mentioned Ryan Florence's work with Reach, and what I love about Reach is that he attacked the hardest components that we have to build and then really focused on the truly important things that are difficult and often neglected like accessibility as the first priority of the system. And I was wondering, why is accessibility and that sort of thing important to a design system?</p><p><strong>Sarah Federman:</strong>     Because it's the right thing to do.</p><p><strong>Joel Hooks:</strong>         That's true.</p><p><strong>Sarah Federman:</strong>     Everybody should be able to access your products. And it's interesting to think about in terms of design system just because they happen to be a single point of failure. But even with that, they're not a single point of success.</p><p><strong>Sarah Federman:</strong>     So we can build buttons that are accessible everywhere and if they're not accessible everywhere, they're broken everywhere, which is bad. But even if you make a bunch of really accessible components, you can't just tell your users, \"Oh, our design system is accessible, you use it, and now your apps are accessible.\" You have to give them guidelines about how to use them.</p><p><strong>Sarah Federman:</strong>     And even within the React components, there are things that need to respond to other things. So Aria IDs that need to ... Like aria-hidden has to match the right ID. If it changes, expanded needs to change. So we can do things within our components to make them accessible. But nothing is fully accessible until it's really interacting with the rest of the things on the page in the way that the user expects.</p><p><strong>Sarah Federman:</strong>     There's other things to accessibility, like source order and color contrast and all these things that we can't control. So we can take it to a point, but there's still so much that we have to do to educate people on how to make their applications accessible. So I really hope that we're not over-relying on our systems.</p><p><strong>Joel Hooks:</strong>         Yeah. It's kind of like giving a really good checklist but then just only doing the things on the checklist and not thinking about the holistic problem that we're actually dealing with. And you know, Ryan and Atlaskit and these other tools are providing a baseline. But that doesn't mean we get to stop and we get to stop thinking about it. It's not done. It's just we have a foundation to work on top of. Is that fair?</p><p><strong>Sarah Federman:</strong>     Yeah, definitely. Yeah, and we did actually introduce a checklist at Adobe that I was really happy with as far as the design goes, like a checklist for developing components, which was nice. So we would never release anything that wasn't accessible.</p><p><strong>Sarah Federman:</strong>     And then I'm hoping that we can take that a little bit further on the user side and start to introduce guidelines on what kind of accessibility things need to be considered. I guess like an example might be if there's a form and then there's an error message, you'd probably need an aria-labeledby that has the ID that's connected to the other form elements. That's something that we can't really build in but needs to be provided by the user.</p><p><strong>Joel Hooks:</strong>         It's like testing and development standards at that point. These are things we need to test and these are things we need to make sure that are, in our definition of done, is a product development.</p><p><strong>Sarah Federman:</strong>     Yeah, and even just like in the way that we build our components, we need to be able to provide solutions for things like passing down ARIA properties into sub-components without spreading them across everything, which is actually a harder API problem than you'd think.</p><p><strong>Joel Hooks:</strong>         At what point should people start considering accessibility in their development process?</p><p><strong>Sarah Federman:</strong>     When they wake up in the morning and when they go to sleep at night. Literally at every step, I'm hoping that we can think about how we're making things accessible to our users.</p><p><strong>Sarah Federman:</strong>     I would say that before the development process, it should be in the company conversations when we're designing products. It should be in the design conversations. It should be in the PM's definitions of success, et cetera, et cetera, all the way down, all the way up.</p><p><strong>Joel Hooks:</strong>         I think in the U.S. there was a Supreme Court decision recently in this regard saying that blind folks do indeed have the right to access the Internet, which is a fact. And now there's this legal motivation that's going to kind of spread, I feel. Does that provide extra motivation? I don't think that should be our sole way of motivating people. But it's interesting to me that it's been legislated at this point. And I'm wondering what the fallout from that might be?</p><p><strong>Sarah Federman:</strong>     Yeah, I am not a lawyer and this is not legal advice.</p><p><strong>Joel Hooks:</strong>         Sure. Me neither.</p><p><strong>Sarah Federman:</strong>     What I heard from a conversation that I had with somebody recently was that this is always been the case. What happened in this particular case is, I think it was Domino's was being sued because their website wasn't accessible and they took it all the way up. They kept appealing it even though it's way cheaper to just fix your site. They wanted somebody to rule that it wasn't legally required to make your website accessible.</p><p><strong>Sarah Federman:</strong>     And part of this is just because the ADA, the compliance rules, don't specifically include web because they were written quite a long time ago. They were written vaguely in order to accommodate the evolution of technology and whatnot. And so since it's not distinctly written out, they wanted it to be ruled that it wasn't required.</p><p><strong>Sarah Federman:</strong>     What happened is they tried to bring it all the way up to the Supreme Court and the Supreme Court was like, \"No, we already know that this required. We're not going to hear your case.\" So the fact that it got thrown out is what people are really excited about because it's really just a validation of what we already knew, but on a really grand scale.</p><p><strong>Sarah Federman:</strong>     So I'm not sure that it really changes anything so much as brings it to a national stage, which was really good visibility. It makes people more aware of their responsibilities, whether or not it's enforced.</p><p><strong>Joel Hooks:</strong>         Yeah, I think that's it. That's definitely a different story. Thank you for the clarification because it's like something that I caught in a headline and that was interesting. But that's a good way to put it. And to me, so I was a forensic animator and I worked for law firms and often we would be against the large corporations. They had these infinite deep pockets and will say no, no, no and spend a hundred times, a thousand times, more money fighting something than it would cost just to fix it. And that's always amazing, just as an attitude, to me that you would do that. But I guess when you have lawyers on retainer, you have to pretend.</p><p><strong>Sarah Federman:</strong>     Yeah. I mean if there's a moral stance that you want to take, it's just they took the wrong moral stance. But yeah, we were all holding our breath just because we knew that this could overturn a lot of really good things that we've built for the accessibility community because running up the Supreme Court in the U.S. is not really stacked in a way that allows for progressive, accessible legislation.</p><p><strong>Joel Hooks:</strong>         What's a design token?</p><p><strong>Sarah Federman:</strong>     Oh, I would say that a designed token is just a variable that defines key design data. That could be a lot of things. And usually it's a design token when it's cross-platform. So the way that a lot of people use design tokens is to define things like global values of color and spacing and typography. And then they might export those to other platforms like CSS or JavaScript or Android and all of these different products can consume the single source of truth and get some consistency and the ability to change those things down the line.</p><p><strong>Joel Hooks:</strong>         So we have a package that we share across all of our projects that has the common colors that we use and our break points for responsive work. And so those would be tokens.</p><p><strong>Sarah Federman:</strong>     Mm-hmm (affirmative).</p><p><strong>Joel Hooks:</strong>         Okay. I want to close out just by asking you, when do design systems go off the rails? And what have you seen as like common pitfalls that people face? I know you work on these bigger systems at Scale, but what kind of advice would you give in terms of what to look out for and know that things are maybe going a little sideways?</p><p><strong>Sarah Federman:</strong>     Ooh, so many things. I think most of the time things go sideways, we see it in our tools, but it's actually a symptom of the way that we're interacting with the system and the way we're interacting with our community. So an example might be things have gotten really out of hand and hard to maintain and you're breaking people's products and people are mad at you because of it.</p><p><strong>Sarah Federman:</strong>     I would say that a lot of the times it's because we've made things too flexible without thinking about who we were building for. Because that's just really a symptom of the fact that we're not really communicating with our customers as much as we need to. So sometimes it's easier to build in every option than to talk to our users and find out what the actual use cases they need are and then plan for that and then decide whether that should be a new variant or it should be a new component and then get that in the system and evolve it. And it's hard. Like that's the job. It's really hard.</p><p><strong>Sarah Federman:</strong>     So if we're all trying to support somebody who really needs to get a deadline out, we might just build it in regardless of whether it's like the right thing for our system overall. And those kind of small decisions can add up and lead to a lot of different problems down the line. They're hard to test, hard to maintain, easy to break.</p><p><strong>Joel Hooks:</strong>         I feel like systems in general, like frameworks or design systems or whatever, they share that trait as projects grow and the exceptions kind of affect the rules, I guess.</p><p><strong>Sarah Federman:</strong>     Yeah. I think the hardest thing for me in design systems is just maintaining that balance between how flexible you want to be and how constrained do you want to be. It's all just connected to the way that people see you and your system. If you're too constrained, they're not going to like you because it's hard for them to do things they need to do to ship their products. If you're not constrained enough, you might break things without meaning to or you might defeat the point of your system, which is to make your designs more consistent and the products better to use.</p><p><strong>Joel Hooks:</strong>         Yeah, well said. Sarah, thank you so much for taking time out of your morning to chat with me. I really appreciate it. I learned a lot and I look forward to seeing what you do next.</p><p><strong>Sarah Federman:</strong>     Awesome. Thank you for having me.</p><p><strong>Joel Hooks:</strong>         Cheers.</p><p><strong>Sarah Federman:</strong>     Cheers.</p>",
    "slug": "accessible-design-systems-with-sarah-federman",
    "description": "<p>Design systems are your component library, documentation, tools, et cetera. And then there are the operations of it. So like an agile team uses agile methodology, a design system is about making your teams work better.</p><p>After Bootstrap, we all ended up building our own Bootstraps. We all like to think that we're special and the problems we're solving are specific to our company, but the reality is the way that your system is built is probably not that special. It's the way that your system is used that's special.</p><p>Everybody should be able to access your products, and you can't just make a bunch of accessible components, you have to give your users guidelines on how to use them. Sarah says that accessibility should be considered in every step of development. </p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/accessible-design-systems-with-sarah-federman/transcript\">\"Accessible Design Systems With Sarah Federman\" Transcript</a></p><h3>Resources</h3><ul><li><a href=\"https://publication.design.systems/distilling-how-we-think-about-design-systems-b26432eefef9\">Distilling How We Think About Design Systems</a></li></ul><h3>Sarah Federman</h3><ul><li><a href=\"https://twitter.com/Sarah_federman\">Twitter</a></li><li><a href=\"http://sarah.codes/\">Website</a></li></ul><h3>Joel Hooks</h3><ul><li><a href=\"https://twitter.com/jhooks\">Twitter</a></li><li><a href=\"https://joelhooks.com/\">Website</a></li></ul>",
    "duration": 1575,
    "episode_number": 59,
    "contributors": [
      "Joel Hooks"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/zhefc",
    "path": "/podcasts/accessible-design-systems-with-sarah-federman",
    "published_at": "January 24th, 2020",
    "url": "https://egghead.io/api/v1/podcasts/accessible-design-systems-with-sarah-federman",
    "edit_podcast_url": "https://egghead.io/podcasts/accessible-design-systems-with-sarah-federman/edit"
  },
  {
    "id": "podcasts-00000000000000000221",
    "title": "Making A Fulfilling Career Out Of Multiple Interests With Hiro Nishimura",
    "summary": "Hiro talks about rediscovering web development, how she went from working help-desk to becoming a freelance consultant, the unexpected challenges of freelance, and how jargon makes it difficult for people without a tech-background to learn and communicate.",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/e2172730-abc5-4d37-abc4-37a4dea35519/edited-hiro-nishimura-podcast_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/55d7f360-05c1-43af-9c2d-eb89e156734a/7fee7348-c82a-4e68-8e48-9e3ec86e53ca/art.jpg",
    "simplecast_uid": "e2172730-abc5-4d37-abc4-37a4dea35519",
    "transcript": "<p><strong>Joel:</strong>               Hi, Hiro.</p><p><strong>Hiro:</strong>               Hey.</p><p><strong>Joel:</strong>               Thanks for taking the time out of your day to come talk to me. I'm really excited. I'm excited to talk to you about breaking gates open. That's something that I know we're both passionate about. But first I just want to ask you another thing that we're both passionate about and that's cooking food. You are on the Internet and you share recipes and you show cooking. And I was wondering, do you have a best dish? Do you have a signature dish or something that you love to cook the most? Out of anything that you prepare?</p><p><strong>Hiro:</strong>               So something that I love to cook, because it's so simple and you can make so much at once because it's just a big batch meal, is Japanese curry. So I like to just add whatever I have in the fridge at the moment. But it's also a great way to clean up your fridge, right? You can use any vegetable, you can use any stock you have leftover. And it kind of feeds a dozen people, or you can use it as a meal prep. So yeah, that's something-</p><p><strong>Joel:</strong>               Is it one of those dishes that changes every time? Like you have a base, you come at it, and you know what you're going to cook. But then it really depends on what you have on hand at any given time.</p><p><strong>Hiro:</strong>               Yeah, I mean usually it's like start with potatoes, onions, carrots, and those are the staples. But everything else it's kind of whatever I happened to have in the fridge. And there might be broccoli in there one day, or some really weird vegetable. And they're like, \"What is this?\" And I'm like, \"Oh, don't worry about it. It's just stock of some vegetable that I was like, \"Oh, this looks like it can be eaten.\"\" So-</p><p><strong>Joel:</strong>               One of my favorite cookbooks right now, it's an incredibly upsetting book about sandwiches. And one of the things he does in this book is he puts broccoli, he likes to put broccoli, inside of like a breakfast sandwich. So it's like a bacon, broccoli, cheese sandwich. It's amazing. Roasted broccoli in a sandwich. Like, and I was ... that was my reaction to. I was like, \"Ooohh.\" In practice it's really, really delicious. So whenever we're roasting broccoli, we always make extra so we can throw it in there. And just that ... I love the idea of a core dish, but you can make it different every time. So you'll never get sick of Japanese curry, because every time you make it, there's going to be ... you're putting a little twist on it. The downside is when you land on a really good one and you're like, \"Oh, I wish I wish I had that-\"</p><p><strong>Hiro:</strong>               You don't know how that happened.</p><p><strong>Joel:</strong>               Yeah. It's like, \"All right.\" I'd like to know a little bit about your background. And I know we're both, we're in technology, we're around computers, we're a part of this flood of folks pushing information and data across the Internet. And how did you get here? What's your story, and how did you get to where you're at in terms of being a technologist?</p><p><strong>Hiro:</strong>               Yeah, so my background is in special education. So I have a bachelor's, a master's, in special education. And my kind of life goal was to become a teacher and teach kids. And when I started college, I decided that I wanted to become a special ed teacher. And obviously it's very different from what I do now. And I kind of had a career pivot before my career even really started, because I had brain surgery when I was in college. And it was kind of apparent after a while that the strenuous workloads of being a teacher might not be the best thing to do at the moment.</p><p><strong>Hiro:</strong>               So I moved to New York looking for something else to do. I wanted to work in a nonprofit and disability advocacy. But I quickly found out that, one, they're not hiring. Or two, they want you to work for very little monies. And it didn't really work out. So after half a year, I actually got a job as a help desk engineer. And they were fine with me having no background in tech. I was like, \"What the heck is an Outlook? I've never opened it before.\" And they're like, \"You're going to fix it. You're going to fix all those issues that people have with Outlook.\" And I'm like-</p><p><strong>Joel:</strong>               Yeah, it's fine. Follow the script.</p><p><strong>Hiro:</strong>               \"It's Outlook.\" Yeah. There was no script either, was just the problem. But I became very good at googling. So they hired me, and that was kind of when I started my career in tech because that was something that was not anything I ever thought I would do. Because tech was this big black hole of like, oh, scary techie thingies. I couldn't possibly be an engineer. I couldn't possibly be working in tech because that's not what I do. I'm a teacher. So from there I started working in tech, and my last job I had was as a sysadmin at a tech startup in New York. And I recently quit that job to focus full time on teaching technology. So I've kind of made a full circle after five years.</p><p><strong>Joel:</strong>               I asked you ... I kind of accused you beforehand of being a web developer. And you told me that you're not a web developer. But still I want to talk about that because I feel like maybe you are. And it isn't something you set out to be, but is web development part of what you do at this point?</p><p><strong>Hiro:</strong>               Yeah, a little bit. Web development for me is a tool to get what I want out into the world. And I started coding, and the Vanilla HTML, CSS, and all that fun stuff, back in middle school in the early 2000s, because I want to make Internet friends to talk about anime. As we want to do, as a middle schooler who don't have friends. So then that kind of escalated from making fan sites and blogs and coding up a storm learning everything from lissaexplainsitall.com, and just looking at how other people created websites. And back then it was very simple ... I mean it was very simple in terms of like, oh, something new came out, divs came out, tables came out. And then you just kind of start incorporating those things into your code. And when you see someone do something new that you and your friends haven't done yet, you just go and investigate the source and be like, \"Oh wow, this is cool.\"</p><p><strong>Hiro:</strong>               And then you kind of figure out how to make it happen in your own website. So I was coding from middle school through high school, and at that point, when I started college as a special ed major, I kind of gave all of it up because it was a hobby and something to do for fun. And I didn't realize at that point that web development was an actual job, like something you can get paid to do. Because I guess it's something that you would have known if, I guess, if you have people around you who did stuff like that for a living.</p><p><strong>Hiro:</strong>               But where no one around me had done that as a job, no one had parents who do that as a job, so I just figured it's just a hobby that I need to give up so I can focus on my college. And lo and behold, we're still using HTML. And I was actually really baffled when I learned two, three, years ago at my last company that the web still runs on HTML and CSS and JavaScript. And I had assumed that the world had moved on and-</p><p><strong>Joel:</strong>               No. We're a long ways away from moving on those three pillars. I think they're going to be here for a little while yet too.</p><p><strong>Hiro:</strong>               Yeah, I had no idea. I thought the world had moved on to something very different. So I couldn't possibly catch up, you know? And that was when I started kind of dabbling back into code and learning HTML 5.0 And CSS 3.0 and Bootstrap and stuff like that. And kind of spending a few months doing that really helped me be able to push things out when I want to without having to wait for someone else to create it for me. So web development, to me, is a tool. But yeah, I've never really thought of myself as a web developer. But maybe-</p><p><strong>Joel:</strong>               Yeah. Yeah. It's kind of like an identity for you, right?</p><p><strong>Hiro:</strong>               Yeah.</p><p><strong>Joel:</strong>               Like it's a-</p><p><strong>Hiro:</strong>               It's a skill that I am very happy to have. Basically.</p><p><strong>Joel:</strong>               I think it's funny, because you talk about in middle school and high school, you're doing anime, and you're doing it because you love it. And you're watching what other people do and what your friends make something cool and you want to do that. And I honestly feel, like for me, that's how it works now, right? I've been a professional, and I've been doing this for a decade or more now, and I feel like that the entire time, that's what it is. It's like paying attention, seeing what people you like and respect are doing, your friends are doing, and then trying it yourself and learning more. And whether they're our direct friends or not, it's just like people out there that are doing stuff and building stuff and open source and all this kind of teaching that everybody's doing all the time is really ... that's the joy of this kind of technology in general to me, is that thing, that thing that we're all doing together, and kind of growing and helping each other.</p><p><strong>Hiro:</strong>               Mm-hmm (affirmative). Yeah. And I also love that unlike a lot of other hobbies that might cost a lot of money if you wanted to do what Joe over there is doing, it's like we find something that's exciting, and you just open your code and be like, \"Oh, let's try it out.\" You know? And you can just do it right there. So I think that's really exciting.</p><p><strong>Joel:</strong>               I've seen it described as like an infinite game. There's finite and infinite games, where the finite game has an end and there's a winner, and then there's the infinite game where we're going to be playing this forever and we can do this for as long as [inaudible 00:09:46]. And we're going to be able to keep doing this and stacking on, there's no winner. We're all just playing a game, and we're competing against kind of the past and seeing what we can build, and the possibilities are endless. It's very exciting. I think it's a cool time to be a nerd. That's my philosophy. So you made a big transition. Because you were an employee, a W2 employee, you had a steady paycheck, and you decided to stop doing that. And you've gone kind of independent, and left that world, and become a freelancer, a consultant. How do you describe what it is, and that transition?</p><p><strong>Hiro:</strong>               Yeah. So in June I left my full time job as a sysadmin at the startup that I was working at. And it was kind of like, \"Do I do it or do I not do it?\" And the answer was I'm going to do it at some point. But I was realizing that at some point you just have to kind of make a decision to do it. The right time, quote unquote, is never going to just show up.</p><p><strong>Joel:</strong>               It's hard.</p><p><strong>Hiro:</strong>               And yeah, it's always like, \"Oh well, but you know, those stable paychecks, the benefits, the retirement.\" There's so many things that come with a W2 full time job with benefits that it's really hard to give up. So I had my birthday, my 30th birthday, in June. And I turned 30, and it's kind of like a big year. It's oh you going from your, quote unquote, young adult to the 30s, where you're supposed to be an actual adult.</p><p><strong>Joel:</strong>               Good luck.</p><p><strong>Hiro:</strong>               Thank you. Thank you. It's not working out, but whatever. So when I was thinking about the fact that now I'm 30 years old, and I have ten years until I'm 40 years old. And I was asking myself when I am turning 40 in ten years would I have been proud of myself for staying for an extra half a year at a job that I really don't enjoy and was turning really toxic for sake of ... I think it was something like $3,000 of a 401k match. Because it would've made me three years in, and it would have vested 100%. And I was like, \"Hmm, probably not.\"</p><p><strong>Hiro:</strong>               It's like, you can accomplish so much in half a year. But I was using that as an excuse and as a clutch, my 401k vesting, to push it off for half a year. And I was like, \"You know what? No, I'm just going to do it now.\" And I'd always kind of saved and invested for just the few years that I was working. I was only working in corporate for four and a half years, enough for me to be able to be comfortable with potentially not making any income for a while. So I made that leap, and it's kind of been fish out of water situation again. But I think because I don't even know how to pay taxes anymore. Apparently you have to pay it four times a year.</p><p><strong>Joel:</strong>               That's a real struggle. Like I know that. On the paperwork side of that, now you're responsible. You talk about all the other, like the benefits and all that, but also people are taking care of all the paperwork.</p><p><strong>Hiro:</strong>               Yeah. Yeah. And I was like, \"Oh, so everyone wants me to set up an LLC so they can throw me jobs and contract gigs. How do I set up an LLC?\" And you think it's like beep, boop, couple buttons, there you go. Pay a couple hundred dollars, it's done. It's not.</p><p><strong>Joel:</strong>               No.</p><p><strong>Hiro:</strong>               And there were so many things that I was like, \"Okay, this is the end product that I want, like an LLC or 401k or something.\" But then it's like, \"Okay, how do I get there?\" And it was kind of like starting career in tech all over again, because I just couldn't figure it out. And it's so hard to find resources that kind of teach you from zero to someone who has absolutely no idea what they're trying to do.</p><p><strong>Joel:</strong>               Yeah. So my favorite resource, I don't know if you've seen this, and just to throw this out there for anybody that's listening, Stripe. I love Stripe and I talk about it all the time. They changed my life and my business. But they have Stripe Atlas. And have you seen Stripe Atlas?</p><p><strong>Hiro:</strong>               Yeah, they don't do LLCs anymore though.</p><p><strong>Joel:</strong>               Did they quit?</p><p><strong>Joel:</strong>               Yeah. Even then though, their documentation ... in terms of ... their documentation is probably the most consolidated information on that whole process of getting started and handling all the ... just the stuff. Like how do you do ... if you want to consider like a freelancer, like a startup of one, right? How do you feel [inaudible 00:14:14] that. And that didn't exist when I started a company either, and [inaudible 00:00:14:19]. And I'm always ... and I and I will put that stuff off until they're knocking at my door to impound my TV or whatever. It's just hard. It's hard to even get the energy to do it. At the end of the day. You're doing all this other stuff and trying to figure out how to make a living. And then on top of that you have to be comply with regulations and all that stuff.</p><p><strong>Hiro:</strong>               Yeah, I ended up using a place called Northwest and they did file my LLC for me. But now I'm trying to look for an accountant. And I'm just like, \"Oh my God, this is like finding a doctor, that perfect fit doctor.\" It's so overwhelming and you have no idea how good of a doctor that person is until you go in.</p><p><strong>Joel:</strong>               No. And there's bad accountants too. It goes-</p><p><strong>Hiro:</strong>               Yeah, yeah. Exactly.</p><p><strong>Joel:</strong>               There's bad lawyers, there's bad accountants, and there's great ones too. And how do you find them?</p><p><strong>Hiro:</strong>               Yeah, how do you find them? Yeah, so that's been my couple of months of like uuhh. It's like every step is like trudging through mud.</p><p><strong>Joel:</strong>               So what kind of work are you doing now? What are you doing as a freelancer? What kind of gigs are you getting?</p><p><strong>Hiro:</strong>               Yeah, so my main gig, I guess, that I've been doing for a little over half a year now, is technical instructors. So I'm a LinkedIn Learning Instructor and I teach Introduction to AWS to non-engineers. And I have four courses out with them right now. So that was my big thing that allowed me to kind of take this step and quit my full time job. And I that's kind of like done-ish, or it's a video course. So you create it, you put it out into the world, and you kind of update it periodically. So as like an active consulting I do ... I write technical articles. I'm a technical writer, so I write blogs, I write articles, and I have my own stuff that I write, obviously for kicks, that I don't get paid because I don't pay myself.</p><p><strong>Hiro:</strong>               But I also get paid to write technical blog posts by other small business owners. So that's kind of been my main thing. And I'm looking to kind of expand to maybe giving seminars on the same kind of topics, maybe in person or webinars and stuff like that. Kind of just expand a little bit of my repertoire. And now that I'm getting a lot more comfortable kind of speaking and recording, I think that'll be a bigger part of my identity. But for now I'm writing mostly.</p><p><strong>Joel:</strong>               Yeah, it's weird when you start doing that. And you record these courses. And for me anyway, there was stage fright. And it's like you're putting yourself out there, and you're talking to a microphone in the comfort of a studio or your home, but there's that feeling, that feeling of butterflies, and just kind of stage right. That goes away with practice to some extent. But yeah, it's an interesting phenomenon. What do you wish that you had've known before you ... you've been doing this ... you're, what, pushing six months now, almost? Five months of being in this. What do you wish you had have known before you even started that you could have learned ... that you hadn't learned, and that you know now?</p><p><strong>Hiro:</strong>               Oh God, there's so much that I wish someone could have just been like, \"Hey, so here are these things that you should know.\" Which would probably be how to do accounting, how to find an accountant, which I haven't figured out yet. But for accounting and stuff, I use QuickBooks. But and how to set up an LLC. And kind of also how to network kind of. You have to set your rates, you have to go and talk to potential clients and what not, but I have no idea how to do that. And mostly I've been ... the stuff that I've created kind of has spin talking for themselves, and I get people reaching out to me based on the stuff that I have out. But I know I should be taking a more active role in finding potential partners to work with. But even now, I'm not really sure how that works.</p><p><strong>Joel:</strong>               Yeah. And there's so many different ways, right? Like there's so many different ways you can approach this, and there's a lot of different advice out there. And just like finding professional services, some of it's good, some of it's bad. It's really hard to just sift through it. You said something to me that I wanted to just kind of ... I'm going to read a quote, actually. \"It's my job to open the gates and let people in. Teaching is the absolute fundamentals and basics so people can speak the language that others are speaking, and have conversations.\" And you were talking about the idea of how do you even break in, and how do we open tech, in this kind of amazing world, I think, that we get to work in and live in. How do we open that to more people? And I was wondering, what does that mean and what are you trying to do in terms of teaching and giving people that basic vocabulary?</p><p><strong>Hiro:</strong>               Yeah. So this is something I'm really passionate about, because I was also a transplant into tech with zero background. So kind of like everything that I learned, I had to kind of learn from zero and googling and watching YouTube videos and things like that. And what I found a lot was a lot of documentations, a lot of resources, and a lot of even video courses, they kind of take for granted that you speak this certain technical jargon vocabulary. And they don't take the time to explain these fundamental phrases or words that kind of make it or break it. When you don't know those specific words, it's like you're missing huge chunks of vocabulary that's in the book. You can't understand what's going on, even if you understand every other word in there, because those are just so important.</p><p><strong>Hiro:</strong>               And one of the things that I experienced a lot, I don't know if it's gate keeping ... what is gate keeping? But when I would go into interviews, they would sometimes just throw acronyms and words and phrases at me, asking me to define it. And I'm like, \"Okay, I don't know what these words mean because I know how to do things, but I don't necessarily know what these words mean, or what the acronyms are.\" And I'm like, \"It's not really relevant to me being able to do these certain tasks that you would want me to do as a part of this job. But instead of focusing on what I can do or how quickly I learn, you're focusing on whether I know what an acronym stands for.\"</p><p><strong>Hiro:</strong>               And it's also very difficult to talk to other engineers. Or even if you're not a technical person, you're not in a technical role, like you're in marketing or something, and you want to talk about AWS because that's what your engineers are using to upload your website. And you're in marketing so you have to know how the websites are doing. If you don't know what an EC2 is, S3 is, AWS is, you can't even talk to them. But it's very hard to find resources that are written for people with no engineering background. And like AWS technical documentation is notorious for being ineligible.</p><p><strong>Joel:</strong>               Oh, I've spent time with it. I agree with that. And AWS and, I think, is a particular standout in that case. Because it's immensely powerful, but also immensely complex. And dense. And you hit it nearly ... it's like hitting a wall of confusion. And vocabulary ... we're literally learning new languages, right? Like if you talk about JavaScript and it's referred to as a language. Or HTML is a markup language, right? Like we're talking about languages.</p><p><strong>Joel:</strong>               And if you don't speak that language, it's like being dropped in a foreign country with no context and no ability to communicate with locals. And you just kind of have to stand there and wave your hands around or whatever and point at things and hope you get it right. And languages is the absolute critical step, right? The vocabulary is the first step. It has to be. And you don't ever see ... do you see ... I don't see glossaries. I never see glossaries do almost anything. Like we're just defining the primary terms. That's something that should maybe change, I think. In terms of education.</p><p><strong>Hiro:</strong>               Yeah, yeah. A word that we love in cloud computing is scaling. And what does scaling mean?</p><p><strong>Joel:</strong>               Yeah. It could mean all sorts of things.</p><p><strong>Hiro:</strong>               It means so many things. It's such a convenient word, because you can use it for anything. But people don't take the time to define it. So how is someone who doesn't have a technical background, who kind of understands the concept of scaling, how are they supposed to understand what you're talking about if said you're scaling this, this is scalable, scalable, blah, blah, blah. And what I try to do in my courses, and the writing that I do, is kind of deconstruct those jargons and define it and explain it, so that people can understand it. I don't want to take for granted the easy way out, because those easy way outs are what causes a lot of the gate keeping when you're just going in a loop trying to define something. And the definition of that word is that word. And you never find out what it exactly means.</p><p><strong>Joel:</strong>               And I think it's important ... because you said, \"What is gate keeping?\" And I don't think it's necessarily people ... and maybe there is some kind of like evil doers out there that are intentionally doing it, but these are things that we're just ... it's just like par for the course, right? We're not like, \"Oh no, you don't know those words.\" It's just we're speaking this way and then whether it's intentionally or unintentionally using acronyms, using initialisms, speaking in jargon, and it has that effect, right? It's not necessarily that we're intentionally doing this thing, it's that we're not intentionally doing the opposite, right? We're not intentionally opening the gates and making it more accessible to folks as they come in.</p><p><strong>Hiro:</strong>               Yeah. And it's intimidating. And it's not a surprise that people kind of get scared out of joining. When they open a website trying to learn about something and they don't recognize half the words on there.</p><p><strong>Joel:</strong>               Yeah. I've rarely read a book where I didn't understand it and blamed to the book. I blame myself. And whether it's the book ... it might be the book's fault, it might be my fault. It's the lack of context. There's all sorts of things going on. But I rarely am like, \"Oh, this book is why I couldn't learn this topic.\" It's always like, \"Oh, I'm just not smart enough to learn this.\" That's not really ... it's just more about context and vocabulary and understanding. Maybe you have to go back a layer. And that's what it sounds like you're trying to do. And your course is called AWS Newbies. And you said it's really built not for developers. How do you explain AWS, and maybe even the cloud, to people that aren't developers?</p><p><strong>Hiro:</strong>               Yeah, so the cloud, I literally explain it as, hey, it's the Internets.</p><p><strong>Joel:</strong>               It's true.</p><p><strong>Hiro:</strong>               It's everything. Everything's running on it. Twitter, Facebook, website that you go on and you spend ten hours of your day on, chances are it's on the cloud. It's not the scary behemoth of a thing that we can't understand, but cloud computing just means there are really big servers running in data centers. And you don't have to worry about them anymore. So I kind of just try to bring it back to what they might already know, but also link it in a way that's like, \"Oh hey, all these names make it sound like it's something really scary, but it's not.\"</p><p><strong>Joel:</strong>               I think they tried to make it sound fluffy to me, right? Like, oh it's the cloud, it's cool. Don't worry about it. It's up 99.6% of the time. Everything will be okay.</p><p><strong>Hiro:</strong>               Everything's fine. Until it's not. And Google Calendar goes down.</p><p><strong>Joel:</strong>               It's essentially somebody else's computer that you don't have to worry about.</p><p><strong>Hiro:</strong>               Exactly. Yeah.</p><p><strong>Joel:</strong>               Until you-</p><p><strong>Hiro:</strong>               Serverless.</p><p><strong>Joel:</strong>               ... do you have to worry about it. Yeah, exactly. There's no servers. There are a lot of servers.</p><p><strong>Hiro:</strong>               There's no servers, it's just a cloud.</p><p><strong>Joel:</strong>               So what do you do? How do you stay productive? And I share an ebb and flow. My productivity goes up and down. And sometimes I can be really productive, and sometimes I just can't, my body doesn't let me. And I'm wondering, how do you deal with that? And especially now that you kind of have to set your own schedule and motivate yourself, what's your go to in terms of getting things done, I suppose?</p><p><strong>Hiro:</strong>               Yeah. So that's actually a huge problem for me because I have a pretty severe executive functioning problem. Which executive functioning disorder came from my brain injury from my brain surgery back in the days. And so I kind of have to create a structure for myself. And once I'm off running, I can be neck deep and doing something for hours and hours and hours. But if I can't get that switch turned on, it just doesn't happen at all. So the on and off is just extreme for me. And I just try to kind of create a situation where the only thing I can focus on is that. I get very easily distracted. So I might throw my phone across the room. I might take my laptop to a cafe somewhere, just where I can't do anything except that certain topic.</p><p><strong>Hiro:</strong>               And it's kind of ironic, because before I quit my job, I was spending 40 plus hours a week doing that full time job. And then almost every evening and every weekend and every holiday, I was doing my side hustle jobs. It was just constantly going on and on and on and on and on and just never stopped. And when I don't stop, it's fine. I keep on going. But I also have stress induced rheumatoid arthritis. That's a very bad way for me to live. So now that I quit my job, you'd think, \"Oh, I have 50 plus hours a week that I've gotten back,\" but I am not any more productive than I was when I had a full time job.</p><p><strong>Joel:</strong>               Well, there is no free time, right?</p><p><strong>Hiro:</strong>               No there isn't. Somehow it's taken up by something. God knows what. So my mind is just kind of like set a to do list, break down tasks into small, manageable chunks. Because I get overwhelmed pretty quickly. And just kind of going one by one and checking them off.</p><p><strong>Joel:</strong>               Do you use any software or do you have a favorite to do list application?</p><p><strong>Hiro:</strong>               So I've gone through a lot-</p><p><strong>Joel:</strong>               Yeah. Me too.</p><p><strong>Hiro:</strong>               ... but now I kind of stick with my bullet journal. And because I like this physical sensation of checking something off.</p><p><strong>Joel:</strong>               No it's great. [crosstalk 00:29:07].</p><p><strong>Hiro:</strong>               That's very rewarding to me. And stickers. Anything that tricks me into doing stuff. Right?</p><p><strong>Joel:</strong>               Are you a crafty bullet journaler? Where you go all out, or are you kind of a ... I'm pretty stark in mine.</p><p><strong>Hiro:</strong>               No. I try, but then I can't keep it up. So I just go very simple now.</p><p><strong>Joel:</strong>               Oh yeah. It makes it ... well then it ends up like your bullet journal is now a job. Because you can get on-</p><p><strong>Hiro:</strong>               Yeah, it's a chore.</p><p><strong>Joel:</strong>               You can get on Pinterest. Right? And you can look at bullet journals and it's like wow, you people have a lot of time.</p><p><strong>Hiro:</strong>               I know.</p><p><strong>Joel:</strong>               And it's just amazing. And I can't even ever live up to that. Mine's just like I do like the basic, the way you originally explained bullet journaling towards the beginning.</p><p><strong>Hiro:</strong>               Yeah, yeah, yeah. I just to my daily to do, weekly, monthly. Just so that ... I'm very afraid of forgetting something, because I have a very bad memory, so I just have to ... if I write everything down, then it kind of tames my anxiety because I'm like, \"Okay. It's now out here. It's not in my brain anymore.\"</p><p><strong>Joel:</strong>               It's such a simple system. Because part of the whole cycle is the review process, where you'd go back and you'd look and, oh, I didn't do that. Is that still important? No. Cross it out. Oh yeah. Yeah, it is important. I'm going to move that to a future date or into my current list. It's a way to keep sane. There's so much stuff going on, and how do I manage any of it? And I think we lose, we've been talking like this a lot at work in Egghead, and like we lose so much information, right? We have conversations, we have meetings, we have things we want to do, things we want to accomplish, and it's like a sieve and it just like goes away. And trying to capture that and trying to build on top of what we've already done and stop losing so much information has been a real challenge. I think that's just getting worse because of the flow of information that we're kind of having to deal with.</p><p><strong>Hiro:</strong>               Yeah. And there's just so much. All day, every day.</p><p><strong>Joel:</strong>               Yeah. It's constant, which is amazing, but also frightening, and often anxiety-inducing, to be honest. So you're a reader. I love to read books to gain knowledge. And I've had so many books that have changed my life. And I was wondering what really stands out to you as essential reading for somebody that wants to kind of make it in this information age in the modern times of the Internet?</p><p><strong>Hiro:</strong>               So a book that really impacted me in the past maybe year or so, was the book Called How to be Everything. And so the title is How to be Everything. And the subtitle is A Guide for Those Who Still Don't Know What They Want to be When They Grow Up. So it's kind of saying how a lot of people ... when adults talk to kids, they ask them, \"What do you want to be when you grow up?\" And you're only supposed to have one answer, right? You're supposed to be this one thing. But that's because-</p><p><strong>Joel:</strong>               Web developer, right.</p><p><strong>Hiro:</strong>               Yeah, one thing.</p><p><strong>Joel:</strong>               Whatever you-</p><p><strong>Hiro:</strong>               Oh, I'm going to be a librarian. I'm going to be a firefighter. I'm going to be a scientist. But then there are people like me who have a lot of interests, a lot of things that we dabble in, and we start to think, well, maybe we're supposed to be focusing on one thing. Because you can't hone your craft, right, if you're so all over the place. And I am definitely one of those all over the place person. And I ended up being able to kind of consolidate a lot of it into what I do now, which wouldn't have been possible if I weren't all over the place in the first place.</p><p><strong>Hiro:</strong>               But this book kind of just tells you, \"Hey, that's okay. You don't have to have that one big thing in your life.\" And it kind of introduced you to multiple different ways of having a lot of interests. Some people have like one core interest, but then couple of smaller ones. Some people split their days evenly between four. They're all main passions. They have to have all of it in their lives. And then some people are like Phoenix's. They go super deep into something for a couple years, become like industry top, and then they're like, \"Okay, moving on. And just start somewhere else.</p><p><strong>Hiro:</strong>               So there's all these different ways of having a lot of interests. And I saw a lot of my past couple of decades in that. So it's kind of like revelation that, oh, hey, I'm not broken. I'm not mediocre in the ways of oh, I'll never make anything out of myself because I'm not interested in just one thing. So that kind of gave me, I guess, it's weird to say permission, but permission to kind of keep on doing what I'm doing. And half a year later here I am. Have created something that didn't exist before.</p><p><strong>Joel:</strong>               No, I love that. I love that entire philosophy. And I think there's merit in deep specialization, and we need that in the world. People that they go as deep as possible because there's so much that comes out of that. But then at the same time I think there's so much to just being out there and exploring interests and going deep and coming back up and going deep and learning across the board. I get bored, and that allows me ... because I approach it in a very similar way, where I can do different things on a daily basis. I can decide different things. And sometimes I feel really good about writing, or sometimes I feel really good about doing design. Or whatever it is, but we're able to move between those. And it's nice and I'm going to check that book out. I hadn't heard of it before, so thank you.</p><p><strong>Hiro:</strong>               Yeah, yeah, yeah. No, it's just kind of I brought my interest in teaching, I brought my interest in accommodations and modifications with kids with disabilities, which allows me kind of to come from a very creative way of explaining things. Because the whole five, six years I was in college, I was learning how to approach things in creative ways so that the student can learn. And that plus tech plus AWS just happened to kind of show up and somehow all those very different interests got looped together into teaching AWS to non-engineers.</p><p><strong>Joel:</strong>               Yeah. It's a powerful combo. I think ... I look at that experience that you have and I think it's a really good combo for ... and important. And something that I think you'll be able to succeed at going forward. I have no doubts. I want to thank you so much for taking the time out to speak with me today. It was really wonderful to get to know you a little better. Thanks.</p><p><strong>Hiro:</strong>               Thank you so much for inviting me.</p><p><strong>Joel:</strong>               Mm-hmm (affirmative).</p>",
    "slug": "making-a-fulfilling-career-out-of-multiple-interests-with-hiro-nishimura",
    "description": "<p>Hiro started coding HTML and CSS back in middle school so she could make internet friends and talk about anime. She never thought of coding as anything more than a hobby, and she stopped when she began college. She got her master's in special education, but due to a traumatic injury, she had to make a career pivot. </p><p>She got a job as a helpdesk engineer and eventually worked her to a sysadmin position at a startup. Hiro quit the comfortable sysadmin job. She asked herself if ten years from now, if she'd be proud that she stuck with the company for another six months. The answer was no. Hiro quit her job to focus full-time on teaching technology. </p><p>It was a huge leap, and yet again, she was in unfamiliar territory, but she's been able to find success. Hiro has released four intro-level AWS courses for non-engineers on LinkedIn, writes independent articles, and gets paid to write blog posts for small business owners. </p><p>You don't have to be a specialist to find success. Yes, the world needs people who can go all-in on something and produce fantastic work, but it also needs people who can bridge the gaps and solve problems with the breadth of their experiences. </p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/making-a-fulfilling-career-out-of-multiple-interests-with-hiro-nishimura/transcript\">\"Making A Fufilling Career Out Of Multiple Interests With Hiro Nishimura\" Transcript</a></p><h3>Resources</h3><p><a href=\"https://awsnewbies.com/\">AWS Newbies</a><br /><a href=\"https://stripe.com/atlas\">Stripe Atlas</a></p><h3>Hiro Nishimura</h3><p><a href=\"https://twitter.com/nishimurahiroko\">Twitter</a><br /><a href=\"https://blog.24villages.com/hireme/\">Website</a><br /><a href=\"https://www.linkedin.com/in/hirokonishimura/\">LinkedIn</a></p><h3>Joel Hooks</h3><p><a href=\"https://twitter.com/jhooks\">Twitter</a><br /><a href=\"https://joelhooks.com/\">Website</a></p>",
    "duration": 2139,
    "episode_number": 58,
    "contributors": [
      "Joel Hooks"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/jwher",
    "path": "/podcasts/making-a-fulfilling-career-out-of-multiple-interests-with-hiro-nishimura",
    "published_at": "November 1st, 2019",
    "url": "https://egghead.io/api/v1/podcasts/making-a-fulfilling-career-out-of-multiple-interests-with-hiro-nishimura",
    "edit_podcast_url": "https://egghead.io/podcasts/making-a-fulfilling-career-out-of-multiple-interests-with-hiro-nishimura/edit"
  },
  {
    "id": "podcasts-00000000000000000220",
    "title": "Get Comfortable Learning On Your Own With Khalal Walker",
    "summary": "Khalal talks about his experience writing the dad jokes SMS bot, how CS curriculums can kill the joy of coding, and the problems with bootcamp marketing. ",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/4822b9a5-8340-4eab-b161-f34528c83f8a/edited-khalal-walker-podcast_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/55d7f360-05c1-43af-9c2d-eb89e156734a/8333d728-dbac-4487-b912-80f9b8b3063e/khalalwalker.jpg",
    "simplecast_uid": "4822b9a5-8340-4eab-b161-f34528c83f8a",
    "transcript": "<p><strong>Joel Hooks:</strong>         Hi, Khalal.</p><p><strong>Khalal Walker:</strong>      Hey. How's it going?</p><p><strong>Joel Hooks:</strong>         Going great. How are you doing?</p><p><strong>Khalal Walker:</strong>      I'm doing pretty well. Can't complain too much.</p><p><strong>Joel Hooks:</strong>         So, I'm really interested in talking to you about learning to code and some of your opinions on bootcamps and how they're structured. But first, I want to ask you. What happens when I texted dad to (202) 410-4710?</p><p><strong>Khalal Walker:</strong>      Right, right. So, what will happen is you'll get added to my dad jokes subscription list. And what'll happen is you'll get a dad joke around 9:00 p.m., Pacific time. I mean it'll range from 9:00 all the way up to 9:06, should be. And sometimes, if it's slow, maybe 9:10. But you'll get a random dad joke every day until you opt out of that service.</p><p><strong>Joel Hooks:</strong>         So, how does that work? One, I want to know, how do you come up with that idea at all? Because it's fun. I love that. I just signed up and I'm looking forward to my first one. But how do you come up with that idea? And then, how do you go about building it?</p><p><strong>Khalal Walker:</strong>      Cool. So, first and foremost, I was really interested in this company called Twilio. They actually work two floors below the building that I work in now. I always see them and I met some cool people. They're like, \"Yeah, we build... We have a SMS-like API that's centered all around communication.\" So, I was looking through their API docs and I wanted to learn how to build something, how to receive and send text messages.</p><p><strong>Khalal Walker:</strong>      At that same time, I was also looking to learn how to code in Python. I'm pretty good in JavaScript, so I just wanted to see if I could just build something out in Python. So, I think... I don't remember exactly how I came up with the idea, but I did find the free dad jokes API. It's called icanhazdadjoke.com and when you go to icanhazdadjoke.com, it'll give you a random dad joke.</p><p><strong>Khalal Walker:</strong>      So, I was like, okay, we have free API. I was like, how can I get people to get these cool dad jokes? So, how it started was I didn't have a subscription list. The only thing that would happen is, you text dad to the phone number and the phone number would send you back a dad joke. I posted that on Reddit in the Python subreddit.</p><p><strong>Khalal Walker:</strong>      And I think I got maybe 2,000 upvotes.</p><p><strong>Joel Hooks:</strong>         Oh, nice.</p><p><strong>Khalal Walker:</strong>      And my Twilio bill went crazy. I went through $50 in the first day that it was up on Reddit. I was like, well, this isn't sustainable. So, I don't think I could burn through $50 a day, just so people can get dad jokes from this free API to their SMS. So, I was like, instead of that, I made it into like a subscription service.</p><p><strong>Khalal Walker:</strong>      So, I looked into MongoDB. I didn't know much about MongoDB. I'm semi-familiar with NoSQL databases. So, went about how to hook that up. So, instead of texting... When you text dad, you'll get a joke. You text dad and you'll be added to the subscription list. And then, in the event you text stop, you can always be removed, because people don't want to keep receiving messages for things that they've unsubscribed for.</p><p><strong>Joel Hooks:</strong>         Right, right.</p><p><strong>Khalal Walker:</strong>      So, yeah, that's how that came about. I think it was just more so just wanting to learn, one, how to do things I already knew how to do on JavaScript with Python 2, learning how to use the API. I wasn't really familiar with 3. I wasn't too familiar with... Oh, yeah, right. I wasn't too familiar with server-side programming.</p><p><strong>Khalal Walker:</strong>      I've done the majority of my work in Angular and React, and I just wanted to see how to set up a quick server with flask with two end points. And that's how you get it done. Yeah.</p><p><strong>Joel Hooks:</strong>         I've played with the Twilio API and, honestly, it's probably one of the best APIs out there. It's so friendly and their documentation is good. What was your experience like using Twilio?</p><p><strong>Khalal Walker:</strong>      Right. I mean, Twilio, they have a good amount of documents to get you started. And then, they also have a great documentation on if you want to just build a project. So, they have content creators, probably, in the DevRel realm pool make content on their website to like, \"Hey, if you want to build something like this, this is how you could do it,\" and it'll help you step by step. So, I think their documentation's great to have support and code snippets for many different languages.</p><p><strong>Khalal Walker:</strong>      So, if you're not JavaScript, if you're Python, if you're Ruby. I think they even have Java documentation. They have many different languages you can choose from that'll help you get up and running. And then, in the event that your language isn't there. If you're just familiar with programming, it's... Some things may be different, but you can Google and maneuver to make that code work for whatever language you're working at.</p><p><strong>Joel Hooks:</strong>         Yeah. And I feel like they really... They cover the most popular ones anyway, right? You're probably going to be covered. But even if you aren't, you can just use straight HTTP calls and use the API, and it should be clear.</p><p><strong>Khalal Walker:</strong>      Yeah.</p><p><strong>Joel Hooks:</strong>         And how was Python when you got into that? It was my first language, actually, after just hacking around and PHP and stuff. The first language I really learned was Python and I love it. And I'm wondering, how was it for you?</p><p><strong>Khalal Walker:</strong>      That's cool, yeah. Python is like... It's really cool. I like it. A lot of things are more... I don't want to say straightforward, but I'd say it's more... It's easier to read, just as far as just reading code. It's like a more human readable, legible, not sure which word, but-</p><p><strong>Joel Hooks:</strong>         Yeah, I agree with that.</p><p><strong>Khalal Walker:</strong>      Yeah, I think it's just easier to read. My first language was in school and it was Java. Yeah, it was Java in school. I didn't like coding in school, because all we did was algorithm and data structure stuff. And I didn't really get a chance to go outside of my curriculum, because I was on scholarship. So, my only goal was to keep my scholarship and to keep my GPA at a certain point. So, I'm like, if work is anything like this, doing stacks and trees and heaps and... I don't want anything to do with this. So, yeah.</p><p><strong>Joel Hooks:</strong>         I wonder sometimes, because this is a theory of mine. And school is fine and computer science is great. And people learn however they're going to do it, but I wonder how many people have been completely turned away from this, this kind of amazing career where you get to build cool things like dad jokes in text messages simply because the classes are built like that and structured around data structures, and algorithms, and Java, and all that kind of... Like, that section of this field.</p><p><strong>Khalal Walker:</strong>      Yeah, tons. I mean, I'm pretty sure it's a lot of people. And I think the... I will say I think the biggest thing for college is, I guess, you'll be pretty prepared to interview, if that makes sense.</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Khalal Walker:</strong>      You'll be pretty prepared to interview, because that element is still there and a lot of these technical interviews, they're... It's still there, but all of the people who I've talked to who started tech jobs are like, \"Yeah, we didn't learn anything about using stuff, just using APIs.\" And I felt the same way. I'm like, don't know how to build things with version control, in a collaborative effort. Just stuff like that, that people use every single day and that just doesn't get taught in a curriculum.</p><p><strong>Joel Hooks:</strong>         And I feel like the job interview process feels like it's almost a direct extension of that tradition, right? Like, the college tradition where you're learning this specific thing. So, that's what we're going to test you on, because we expect you to have learned that and we want to make sure you learned it well, or whatever.</p><p><strong>Khalal Walker:</strong>      Right.</p><p><strong>Joel Hooks:</strong>         So, yeah, with the-</p><p><strong>Khalal Walker:</strong>      I mean, majority of the time, these technical interviews, you'll do these find this node and this tree. And you'll never see anything like that again on the job. I think that maybe we should... Those interviews should be structured or how the job is going to be-</p><p><strong>Joel Hooks:</strong>         Like, real work, right?</p><p><strong>Khalal Walker:</strong>      Yeah, right. I'm not saying get rid of coding interviews all together, but just something that's transferrable. I'm not going to go... If I'm a NBA general manager, I'm not going to go and scout my point guards that are six flat to how good they can post up against centers. And then, grade you on that and like, \"Oh, yeah, you're not good in the post, so you can be a terrible point guard.\"</p><p><strong>Khalal Walker:</strong>      So, yeah, it's just change how the hell that's done.</p><p><strong>Joel Hooks:</strong>         Yeah. I think about that a lot, because at 10 years in, if you asked me to solve FizzBuzz, which is kind of a classic programming problem, right? It's supposed to weed you out, to eliminate people that can't code at all. I couldn't do it without... I would look it up. I could probably sit there and do it, but not in a time where you'd actually hire me.</p><p><strong>Joel Hooks:</strong>         And I'm a decade into being a professional developer, and I've built my own business around coding and teach it. I couldn't do it without time and the ability to do a little research. I suppose you could prepare for it but, still, it doesn't seem realistic to me along the way.</p><p><strong>Khalal Walker:</strong>      Right. The creator of Rails had a tweet a couple of years ago. He's like, \"I can't do a binary search tree. I created this framework, this Ruby on Rails. Everyone used it. It was hot. It was the hottest thing on the market at one point. And people are still using it today. And I can't pass a technical interview. Does that mean I'm inadequate? No, it just means we need better ways to assess how we go about finding valid programmers.</p><p><strong>Joel Hooks:</strong>         Yeah. So, you use a a site called LeetCode. I've seen you talk about that and could you explain what LeetCode is and how you use that?</p><p><strong>Khalal Walker:</strong>      Right. LeetCode is pretty much a website that has tons, probably hundreds, probably thousands, I'm not sure, of these programming questions that are more than likely going to pop up in technical interviews, especially if you're interviewing for the FANG companies or... And just a lot of companies still has this type of, I guess, the structure of the interview in that we talked about.</p><p><strong>Khalal Walker:</strong>      So, there's tons of questions on there that'll help you practice, that'll... You'll see some of the same patterns that'll come up in multiple questions, which will help you recognize them later on. That'll pretty much help you get better for the interviews.</p><p><strong>Joel Hooks:</strong>         So, FANG is Facebook, Apple, Amazon, Netflix and Google, right?</p><p><strong>Khalal Walker:</strong>      Right, right, right, right, right. Yeah.</p><p><strong>Joel Hooks:</strong>         Yeah. So, is that addressing what we're talking about, or is it good practice and something that you would enjoy, otherwise?</p><p><strong>Khalal Walker:</strong>      If I didn't have to do it, I wouldn't do it, if that makes sense. But, I mean, I, personally... As of right now, I don't see myself being a full-time entrepreneur and if I'm going to play this game, how it is right now, the game is the game. So, not happy with it, but-</p><p><strong>Joel Hooks:</strong>         Well, I mean, you can swim upstream or swim with the current, right? It's kind of a... You either get in there, or you fight and struggle, I would think.</p><p><strong>Khalal Walker:</strong>      Well, yeah, I mean, it's going to be a struggle. And I'm not saying you can't swim upstream. I just don't think, right now, is the fight that I'm-</p><p><strong>Joel Hooks:</strong>         No, I'd say it's a personal choice, right? It's not... you know? I don't think it's bad either way, right? You go with the current... You get the gig, get the experience and progress your career is ultimately the goal.</p><p><strong>Khalal Walker:</strong>      Right.</p><p><strong>Joel Hooks:</strong>         So, right now, what's your favorite stack to work with? What are you working with?</p><p><strong>Khalal Walker:</strong>      For me, I really like React. At my day-to-day professional job, I use Angular. But I really do like React. It took me a while when I was first learning how to use these frameworks, how to understand what props and state were. But the more I did it, the more it makes sense. And then, with the introduction of hooks, it kind of made everything... I'm not going to say easier or simpler, well, maybe simpler.</p><p><strong>Joel Hooks:</strong>         Clicked?</p><p><strong>Khalal Walker:</strong>      Yeah. It just clicked to me. When they talked about hooks, I was like, wow, okay, this makes sense, a lot. So, yeah.</p><p><strong>Joel Hooks:</strong>         So, using React and Angular, I think they do have similarities. And then, they have a lot of differences. And how do you compare them, when you compare the two in terms of how you'd use them or what kind of project you might pick one up over the other?</p><p><strong>Khalal Walker:</strong>      Right. I'd say the... I mean, some of the similarities are the way data gets passed down. I think, like in React, we'd use props. And then, in Angular, you'd use an input decorator to pass that down. And then, some of the differences will maybe be how the frameworks, the two frameworks or library separate their concerns. Like, how Angular, for the most part, you'll have a component which has a HTML file, a CSS file and a TypeScript file.</p><p><strong>Khalal Walker:</strong>      Or you can put your templating inside of your TypeScript file, but it's still separate. It's not like React, how you have everything together in one function. Or it doesn't have to be one function, but in one JavaScript file function, however you want to call it. Yeah. So, they kind of merge those concerns and that's what some people prefer.</p><p><strong>Khalal Walker:</strong>      Some people like to have their concerns separated.</p><p><strong>Joel Hooks:</strong>         What about TypeScript? I know Angular. If you're building Angular, you're probably using TypeScript, right?</p><p><strong>Khalal Walker:</strong>      Right, right, right. Yeah. I mean, TypeScript's pretty cool. I mean, for, if you've come... Like I said, my first language was Java. So, TypeScript made a lot of sense to me. Just looking at a function, knowing what type of arguments are going to be called or passed in, what type of variable is going to be returned, if it's returned at all, if it's void, if it's a Boolean, if it's a number, et cetera.</p><p><strong>Khalal Walker:</strong>      And then, being able to build interfaces for how data should look. So, if it doesn't match that, you get an error throw knowing that, Oh, this does it. This doesn't match-</p><p><strong>Joel Hooks:</strong>         I think that, for me, is like the killer feature actually, like interfaces. And there's a lot of... TypeScript is, there's a lot going on. But that's what I miss the most when I'm in just plain old JavaScript is this idea that we can create contracts and have interfaces.</p><p><strong>Khalal Walker:</strong>      Right, yeah.</p><p><strong>Joel Hooks:</strong>         So, I want to get into learning to code, because I feel like a lot of people want to do that. There's so many opportunities out there. There's businesses to... I run a business where we teach people how to code. So, like bootcamps are kind of almost controversial, it feels like. It feels like there's some good ones. It feels like there are some bad ones.</p><p><strong>Joel Hooks:</strong>         And I know you have opinions about bootcamps and I was wondering. Do you recommend them for people that are trying to break into this field?</p><p><strong>Khalal Walker:</strong>      Yeah, I'd say, I don't recommend new coders jumping straight to a bootcamp. Because, well, I'd say the reason is why, you should probably get pretty comfortable learning on your own. Because from what I hear from a lot of bootcamps is there's going to be a lot of learning on your own, anyway. So, you should probably get comfortable learning the basics on your own. And there's a lot of resources out there that can be used.</p><p><strong>Khalal Walker:</strong>      And so, I'd say, first, you just want to get the basic programming fundamentals. A lot of these bootcamps actually have you interviewed to get in, so they know that you're... At least, you have the basics in some boot camps. You submit an application and you write them a check, you're in. So, it's just that level of difference.</p><p><strong>Khalal Walker:</strong>      I just think you should, at least, take some time to learn on your own to make sure this is what you want to do or what you want to invest in.</p><p><strong>Joel Hooks:</strong>         Yeah, I agree. Because, I mean, there's one and make sure you... It's something that you really enjoy and you want to dedicate, because regardless of your bootcamp experience, you have to put in the work. And that's true. That's true for college. That's true for anything, right? If you are not doing... If you're not going a little bit extra and you're just sitting there in class absorbing what they tell you. Good luck, at the end of the day.</p><p><strong>Khalal Walker:</strong>      All right. Yeah, that's true.</p><p><strong>Joel Hooks:</strong>         With bootcamps, to me, one of the big things, I think, would be vetting them, right? Like, doing the research. And have you seen anybody that's had success on doing that or how would you go about figuring out what bootcamp might be right for you?</p><p><strong>Khalal Walker:</strong>      Vetting. Yeah, I'd say, for me, one would be to try to find people who went to the bootcamp. Don't look on these websites that... Course Report, I think, is one where almost every bootcamp is five stars. And you just know that's not true. And, I think, if you go out and use Speak... I mean, everything can't be five stars or nothing's five stars. So, I mean, I think you should go out and like... I went on LinkedIn.</p><p><strong>Khalal Walker:</strong>      I typed in software engineer and the name of the bootcamp and clicked people, and just scrolled. And I messaged people, every person that I saw. Some people got back to me. Some people didn't. Some people had good things today... to say, only good things to say. And then, some people gave it the real. So, I think just having direct contact with people who attended these bootcamps and that are willing to be honest with you to give you the good, the bad, the ugly.</p><p><strong>Khalal Walker:</strong>      I think that's going to be, ultimately, the best review you can get is from personal. It's directly from people who went there.</p><p><strong>Joel Hooks:</strong>         So, I think one thing to keep in mind is that there's a lot of venture capital. There's a lot of money, like billions of dollars in this industry, in the education side of this industry and the bootcamps. And so, they're funded and they get growth hacking, right? That's part of their business model.</p><p><strong>Khalal Walker:</strong>      Right.</p><p><strong>Joel Hooks:</strong>         And then, you get ISAs, right? Where they're telling you, \"Oh, you don't have to pay anything. It's basically free. We just take a... 20% of your salary for five years,\" which-</p><p><strong>Khalal Walker:</strong>      Yeah. It's like they're really... So, all these bootcamps, they're really, really, really good at marketing. I mean, as they should be. Bootcamps are this new... kind of new. Well, they're still new compared to college. This a new hip thing, not too many accreditations for them. So, we have to get people to trust us. So, you know what, hey, no money upfront sounds like a dream. But we take X, Y, Z of the money you get when you start making X dollars.</p><p><strong>Khalal Walker:</strong>      And, I think... How do I put it? One, there's a certain level of financial privilege to be had to be able to attend a bootcamp, Two, you're probably really, really better off than most people, if you can pay for the bootcamp upfront. Three, the majority of people who opt for the deferred payment typically aren't going to have 18 to 20 whatever thousand dollars up front to pay, which makes a lot of sense.</p><p><strong>Khalal Walker:</strong>      So, hey, nothing upfront. Now, when I get a job, it'll be all good. And I think it sounds good upfront, because you want to land that first role. But the amount of money they can take on the backend, it hurts. You're looking at a $17,000 bootcamp, but they say, \"Oh no, don't pay us now. If you wait until later, we'll just take 20% for two years. You get a job for $120,000.\" I'm sure they max out their capital.</p><p><strong>Khalal Walker:</strong>      Yeah, we can take up to 50. And now, you have an $18,000 bootcamp that just went up to 50,000 but just because you didn't pay any money upfront, you feel like it was a big win. So, I just think people should look at that from that standpoint, because that really hurts people who may not have as much money. And then, it's almost like going to school. And then, you graduating with a debt, but this debt is only after 13 to 16 weeks.</p><p><strong>Khalal Walker:</strong>      Your bootcamp's a lot shorter. So, now, you got $50,000 worth of debt in the 13-week period. And that's what people may get after a year or two of college, or three or four depending on where you go. '.</p><p><strong>Joel Hooks:</strong>         In some cases, it's almost like a payday loan.</p><p><strong>Khalal Walker:</strong>      Right. Exactly like a payday loan.</p><p><strong>Joel Hooks:</strong>         I think, it's like people don't understand either that they take this debt, right? The ISAs, they take this and that's like a financial instrument. And it gets sold almost immediately to a third party, and they can garnish your wages and just basically hunt you down for... until they get their money back. And it's not the bootcamp or the institution that does that. It's whomever they sell it to and that can be passed around.</p><p><strong>Joel Hooks:</strong>         It goes into whatever sort of fund that acquires those kind of things.</p><p><strong>Khalal Walker:</strong>      Yeah, yeah. That's how the banking and... That's how the banking industry is. Yeah.</p><p><strong>Joel Hooks:</strong>         Yeah. It's high finance, right?</p><p><strong>Khalal Walker:</strong>      Pretty much.</p><p><strong>Joel Hooks:</strong>         Yeah. So, that said, we got into it a little bit, but what are your favorite resources? How do you... If somebody wants to go out there and they either want to prep. They might be thinking about a bootcamp and they want to get ready, see if they really like this. How do you recommend that people do that work?</p><p><strong>Khalal Walker:</strong>      Cool. I'd say a platform that I swear by would be... It's this website called the Odin Project. Pretty much, it's an open-source curriculum that'll teach you how to code, but how to teach you how to get your development environment set up on your machine. So, you'll go through the struggles with configurations. You'll go through how to set up-</p><p><strong>Joel Hooks:</strong>         So hard.</p><p><strong>Khalal Walker:</strong>      Certain... Yeah, that's really tough. And when people learn how to code, they use a lot of platforms which, I guess, are good for beginners that only focus on the coding aspect. It's like, all right, now I actually want to build something. Oh, I didn't know I had to set up all of these things. Instead of coding in the browser, you're coding in your text editor of your choice on your machine. So, the Odin Project, it's a full stack web development.</p><p><strong>Khalal Walker:</strong>      It covers Ruby on Rails, HTML, CSS and then, JavaScript for the front-end. Then, they just recently added a node course. And then, they have some SQL stuff. And then, they also have some resume prep and interview prep. And I think this was... It was started by a person who either attended a boot amp or created a bootcamp. I'm not sure which one. I don't want to misspeak.</p><p><strong>Khalal Walker:</strong>      But, basically, all of this is free and it's just reading tons of documentation, because that's what you're going to be doing. There's an entire community behind it. They have their own... What's the platform called? Discord chat to where you can reach out and ask questions in certain channels to talk to people. And it's a really big community.</p><p><strong>Joel Hooks:</strong>         Yeah, that's awesome. And I really think that, because I've watched people. I really like to like find people that have never really coded before and watch them try to get into it. And it's something as simple as loading your HTML file with JavaScript once you've got it in there. And how does that even work? And getting it in the browser and there's this whole fundamentals that you forget, right?</p><p><strong>Joel Hooks:</strong>         After a while, I feel like you forget the struggle that goes into that and the terminal and all the other stuff that goes along with it.</p><p><strong>Khalal Walker:</strong>      Yeah, definitely.</p><p><strong>Joel Hooks:</strong>         Yeah. So, I think a lot of this like breaks down into habits and being able to work. And it feels like, I call it... It's like a... I had to hustle, right? I work two jobs and I learned how to code at night. And I'm wondering, what sort of habits have you developed or you think are important if you want to break into this field, and do it and kind of in a sustainable way?</p><p><strong>Khalal Walker:</strong>      I think you have to just... I'd say, one, you just can't... You literally just can't give up or quit. And that sounds like the most cliche thing ever. But it's literally so important, because you're going to hit walls. You're going to struggle. I think, the biggest thing with being a developer is just banging your head against your keyboard for eight hours of the day. And the last hour, you just see the light and you just keep finding different ways until something works.</p><p><strong>Khalal Walker:</strong>      So, I take that with learning how to code. In the beginning, you're going to mess up on syntax. You're going to forget a semi-colon. You're going to miss a quote. And some of these things may really, really bother you. But if you keep at it, these things will become second nature. And then, you'll have new struggles.</p><p><strong>Khalal Walker:</strong>      Because when you have new successes, you move on to new problems. And so, as long as you know that in this industry, it's always... Things are going to get easier, but you're always going to be learning something new. You're always going to be learning. You're always going to be growing and you just have to have the willingness to take on that challenge every single day.</p><p><strong>Khalal Walker:</strong>      And I think that's probably the biggest thing.</p><p><strong>Joel Hooks:</strong>         I think, yeah, it's like a fundamental stubbornness. That's the mindset. And if you have to be just tenacious, because almost all of these problems can be solved. And it's so frustrating though. But when you solve it, I don't know that there's a better endorphin rush than when you figure it out and get to tell the computer what's up.</p><p><strong>Khalal Walker:</strong>      Yeah. That's like one of the biggest. The days I don't, I'm not productive. I feel down. I'm like, oh my goodness, am I even a developer? Then, the days I'm killing it, I'm like, man, come here. Like, who? I can code anything.</p><p><strong>Joel Hooks:</strong>         Yeah. I've stood up out of my chair and just told the computer exactly who the boss was, until the next day when the computer showed me.</p><p><strong>Khalal Walker:</strong>      Exactly. Yeah.</p><p><strong>Joel Hooks:</strong>         I don't know if you have any sort of fundamental books that you've read or source material and not necessarily related to computers, but have you... Is there anything essential that you think people have to read and know, in terms of getting a really good career in software?</p><p><strong>Khalal Walker:</strong>      Does it have to be a programming book?</p><p><strong>Joel Hooks:</strong>         No. It'd be great if it wasn't, to me.</p><p><strong>Khalal Walker:</strong>      Well, the book I probably would... What changed my attitude or mind on everything on life would be the Subtle Art of Not Giving a F. And that book really taught me... The title just sounds like, oh, you should just walk around and not care about the world. It more so talks about where you should place your cares and your values, and how that'll make you a better person. Let's say, someone places their cares, or values, on how many likes they get on a photo.</p><p><strong>Khalal Walker:</strong>      Now, when you post a photo, you literally can't control who's going to like it or not. You can control how much you promote it. You can control how many people see it, but you can't control how many people like it, right? So, the book tells you just to place your values on things that you can control, on things that... Yeah, that you have control over.</p><p><strong>Khalal Walker:</strong>      Because if you place your happiness and your values on things that are in someone else's hands, then someone else will always have control over you. And I think with that, even in programming, I'm still learning this now. When you go out and you start interviewing, you're going to meet these, I don't know, gatekeeper-type people who are going to make you feel less than a programmer. Less than this, less than that.</p><p><strong>Khalal Walker:</strong>      But I just know that things I can control is to make sure that I'm a better programmer today than I was yesterday and just to be able to see the progress, that I'm better than yesterday or I'm better than a week ago. I'm better than a month ago. And I think it's really hard to see, because we always take time to compare all of these other notable developers and we want to be that. But they weren't always that, right?</p><p><strong>Khalal Walker:</strong>      And you can't get there until you get better tomorrow than you were today.</p><p><strong>Joel Hooks:</strong>         And it's like you said. You have control over not quitting and doing the work, and studying, and learning, and growing as a person. That's something that you control and you can make the decision tomorrow to do that. You can't make the decision tomorrow to have a job at Google. That's not in your control, but you can work, right?</p><p><strong>Joel Hooks:</strong>         You can do LeetCode, or you can do whatever it takes and do the work towards that goal. And that's something that you can control. One of my favorite-</p><p><strong>Khalal Walker:</strong>      That's true.</p><p><strong>Joel Hooks:</strong>         One of my favorite books... I love that book, by the way. The Subtle Art of Not Giving a Fuck is excellent. And it's funny how many books after that book have the word fuck in the title.</p><p><strong>Khalal Walker:</strong>      Yeah, because people were all afraid. They're like, you can't do-</p><p><strong>Joel Hooks:</strong>         Oh, wow, that's good marketing.</p><p><strong>Khalal Walker:</strong>      They'll never put you in the front, in the front of Barnes & Noble as soon as you walk in, big orange book, hi.</p><p><strong>Joel Hooks:</strong>         And the audio book is amazing, because he has a New York accent and there's a lot of cursing in the book. So, it just really... It really pops. But it's essentially a stoic philosophy book. And my favorite book in that... My favorite intro text in that area is A Guide to the Good Life. Which, really, it's like the same fundamental thing, right? It's focused on what you have control over.</p><p><strong>Joel Hooks:</strong>         Don't covet other people's... You can have people, and you can admire people and strive to be a better person and be more like people that you admire. But, really, you can only control what you can control. So, you have to work on that. And that's it. That method is great. And I think, that epiphany, if you can have that. It's hard. It's a daily work thing. You always got to work on it.</p><p><strong>Khalal Walker:</strong>      Yes.</p><p><strong>Joel Hooks:</strong>         Work on that.</p><p><strong>Khalal Walker:</strong>      Control the controllables. If you can control something, do it. If you can't, you shouldn't be worried about it. You literally can't do nothing about it. And spending time worrying about something that you have no control over will only make your mental state worse.</p><p><strong>Joel Hooks:</strong>         Yeah. Yeah, I agree with that. Khalal, thank you so much for hanging out with me and chatting today. I really appreciate it.</p><p><strong>Khalal Walker:</strong>      No problem, man. No problem, man. I appreciate you.</p><p><strong>Joel Hooks:</strong>         Cheers.</p>",
    "slug": "get-comfortable-learning-on-your-own-with-khalal-walker",
    "description": "<p>Khalal's first language was Java, he learned his it in school. He didn't like coding in school because all they did was learn algorithms and data structures. How many people have completely turned away from this amazing career where you get to build cool things like dad jokes in text messages simply because classes get structured around data structures, algorithms, and Java?</p><p>New coders should take a step back before jumping straight to a Bootcamp. Take time to learn on your own to make sure this is what you want to do or what you want to invest in. You'll still be doing a lot of self-lead learning anyway when attending a Bootcamp.</p><p>Try to find people who went to the Bootcamp. Don't look on websites like Course Report where almost every Bootcamp is five stars. Get on LinkedIn and find developers who graduated the Bootcamp and talk to them, you'll get honest insights.</p><p>ISAs are the only option for most people to attend Bootcamps. You have to be coming from a place of privilege to pay the 18-20 thousand dollars upfront. So instead they'll take 20% of your income for two years. You get a job for $100,000, and now, you have an $18,000 Bootcamp that just went up to $50,000. You got $50,000 worth of debt in 13 weeks. That's what people may get after a year or two of college, or three or four depending on where you go.</p><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/get-comfortable-learning-on-your-own-with-khalal-walker/transcript\">\"Get Comfortable Learning On Your Own With Khalal Walker\" Transcript</a></p><h3>Quotes</h3><p><strong>Joel:</strong></p><blockquote><p>\"what sort of habits have you developed or you think are important if you want to break into this field, and do it and kind of in a sustainable way?\"</p></blockquote><p><strong>Khalal:</strong></p><blockquote><p>\"You literally just can't give up or quit. And that sounds like the most cliche thing ever. But it's literally so important, because you're going to hit walls. You're going to struggle. I think, the biggest thing with being a developer is just banging your head against your keyboard for eight hours of the day. And the last hour, you just see the light and you just keep finding different ways until something works.\"</p></blockquote><p><strong>Khalal:</strong></p><blockquote><p>\"So, I take that with learning how to code. In the beginning, you're going to mess up on syntax. You're going to forget a semi-colon. You're going to miss a quote. And some of these things may really, really bother you. But if you keep at it, these things will become second nature. And then, you'll have new struggles. Because when you have new successes, you move on to new problems.\"</p></blockquote><p><strong>Khalal:</strong></p><blockquote><p>\"And so, as long as you know that in this industry, it's always... Things are going to get easier, but you're always going to be learning something new. You're always going to be learning. You're always going to be growing and you just have to have the willingness to take on that challenge every single day.\"</p></blockquote><h3>Khalal Walker</h3><ul><li><a href=\"https://twitter.com/khalalw\">Twitter</a></li><li><a href=\"https://www.khalal.dev/\">Website</a></li><li><a href=\"https://github.com/khalalw\">Github</a></li></ul><h3>Joel Hooks</h3><ul><li><a href=\"https://twitter.com/jhooks\">Twitter</a></li><li><a href=\"https://joelhooks.com/\">Website</a></li></ul>",
    "duration": 1756,
    "episode_number": 57,
    "contributors": [
      "Joel Hooks"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/sr75m",
    "path": "/podcasts/get-comfortable-learning-on-your-own-with-khalal-walker",
    "published_at": "October 11th, 2019",
    "url": "https://egghead.io/api/v1/podcasts/get-comfortable-learning-on-your-own-with-khalal-walker",
    "edit_podcast_url": "https://egghead.io/podcasts/get-comfortable-learning-on-your-own-with-khalal-walker/edit"
  },
  {
    "id": "podcasts-00000000000000000219",
    "title": "Out With The 10x Developer And In With The 10x Mentor With Tracy Lee",
    "summary": "Tracy Lee talks about the value of learning to code as an entrepreneur, mentorship, code bootcamps, and how to break into the industry. ",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/349c529e-d0ba-4b1c-a38d-59a58057bd24/podcast_joel_with_tracy_lee_v1_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/55d7f360-05c1-43af-9c2d-eb89e156734a/475e294e-56b6-4bc8-b720-3a06bada66fd/logo.jpg",
    "simplecast_uid": "349c529e-d0ba-4b1c-a38d-59a58057bd24",
    "transcript": "<p><strong>Joel Hooks:</strong>         Hi Tracy.</p><p><strong>Tracy Lee:</strong>          Hi.</p><p><strong>Joel Hooks:</strong>         Thanks for chatting with me today. I'm really super excited. You do a lot of things that are very interesting to me and I've been kind of watching your path over the years, and I want to get into that, and I want to talk about This Dot Labs, and I'm intrigued about your hiring and apprenticeship programs, but I wanted to start with the important thing. I want to talk about barbecue, and specifically I was wondering, what's your favorite way to barbecue meats?</p><p><strong>Tracy Lee:</strong>          We use a Yoder Smoker, called the YS360. My husband is in tech as well, so he has rigged it up with all the things.</p><p><strong>Joel Hooks:</strong>         Is it Arduino-powered?</p><p><strong>Tracy Lee:</strong>          Well, it's not Arduino-powered, no. It's electric and it's a pellet smoker.</p><p><strong>Joel Hooks:</strong>         Oh, okay.</p><p><strong>Tracy Lee:</strong>          Yeah, but the reason why we wanted it was because usually when you sit there and you cook a piece of meat, you have to keep checking it over and over and over again. So, if you're going to cook a brisket or pork butt, your day is completely shot, because you have to monitor the temp the entire time. You have to stake the fire and all these other things. But with the Yoder Smoker and a lot of these other things, first off, the pellets, they feed themselves, so you don't have to touch it at all. And then, the other thing is we bought this really cool thing, it's called a fire board. I don't know if you have that as well, but it monitors so we can leave the house, go shopping, do whatever we want, we're not attached to the barbecue.</p><p><strong>Joel Hooks:</strong>         So, it's like the old Ronco Rotisserie Grill. You just set it and forget it.</p><p><strong>Tracy Lee:</strong>          Set it and forget it. Yep.</p><p><strong>Joel Hooks:</strong>         Nice.</p><p><strong>Tracy Lee:</strong>          I love brisket the most, brisket and pork would be my two favorites.</p><p><strong>Joel Hooks:</strong>         So, with your brisket, do y'all go with the Texas Crutch? Are you familiar with the Texas Crutch?</p><p><strong>Tracy Lee:</strong>          I had to look up the Texas Crutch the first time you mentioned it, and we haven't done the Texas Crutch yet. So, the Texas crutch is when you wrap it in foil to make it cook faster?</p><p><strong>Joel Hooks:</strong>         It's like it gets to a certain temperature, and what they call the stall, where it just doesn't seem like it's climbing, so it's either paper or foil, but you wrap it to give it like a cooking boost, while still maintaining your bark, because if you lose your bark you might as well just go to Arby's.</p><p><strong>Tracy Lee:</strong>          Yeah, that's actually kind of interesting, because my husband was cooking a pork butt the other day, and usually when he cooks a pork butt there's a little bit too much bark on it, like it's a little bit too hard. So-</p><p><strong>Joel Hooks:</strong>         It's like overwhelming.</p><p><strong>Tracy Lee:</strong>          Yes, but we ended up wrapping it, and it kind of toned it down a little bit and made the bark more enjoyable.</p><p><strong>Joel Hooks:</strong>         Oh, okay. I think I saw pictures of that, and that looks to me like kind of the same principle as what they call the Texas Crutch with a brisket, just kind of applied to a pork butt. Looked delicious, by the way.</p><p><strong>Tracy Lee:</strong>          [inaudible 00:02:41].</p><p><strong>Joel Hooks:</strong>         You post those, your delightful barbecue meat pictures are amazing, and apparently there's a whole community around dead meats.</p><p><strong>Tracy Lee:</strong>          Yeah. So, here's one question for you. When you do brisket, do you cut off the fat?</p><p><strong>Joel Hooks:</strong>         I trim it. Not all of it, because you need a little of it. I've actually had a problem if I don't trim it enough to where it's a fire hazard, like a really direct grease fire hazard, which is quite the ordeal to have when you're just trying to have a nice barbecue. So, I do trim it a bit, but I don't trim it too much, because you want to have a little bit. People get so technical with it, do you cook it fat side down or fat side up? It's almost like frameworks, right? People feel very strongly about how barbecue should be done.</p><p><strong>Tracy Lee:</strong>          I get so mad if he even suggests to trim it, because I need all that fat. I don't care, [crosstalk 00:03:28]-</p><p><strong>Joel Hooks:</strong>         It's delicious.</p><p><strong>Tracy Lee:</strong>          Yeah, but a lot of people are like, \"Oh, but if you don't trim the fat, then the fat gets the flavor and the meat doesn't get flavor.\" I'm like, \"Okay, forget it. I need that fat.\"</p><p><strong>Joel Hooks:</strong>         Yeah. Well, I mean it's the good part. It's like, I've been to Franklin in Austin, which is incredible. The brisket is not overrated. It's worth the wait at least once in your life, but they'll be like, \"Do you want lean end or fat end?\" It's like, \"Uh, yeah, fat end, please.\"</p><p><strong>Tracy Lee:</strong>          Obviously the fat end. Yeah. I'll have to [inaudible 00:00:03:52].</p><p><strong>Joel Hooks:</strong>         Yeah. I've heard you referred to as a serial entrepreneur. Is that something that you identify with, do you identify yourself as a serial entrepreneur to begin with?</p><p><strong>Tracy Lee:</strong>          Yes. I'm always starting something. So, I don't know if you're familiar with like astrology signs, but I'm an Aries, and my Uber driver one day told me that what it meant to be an Aries means I'm a fire sign, but I'm a fire starter. So, that really fits with kind of everything I do, like every time I see something I'm like, \"Ooh, maybe we should start something.\" So, I've started quite a few businesses since I was 18, and some of them work, some of them don't. Most of them don't work, but I'm happy that This Dot Labs and my last company, Dish Crawl, worked out.</p><p><strong>Joel Hooks:</strong>         What has worked? You mentioned Dish Crawl. Can you tell me about what that was? Give me kind of the elevator summary of that adventure?</p><p><strong>Tracy Lee:</strong>          We were a tech startup, but we were more tech-enabled. We'd take people on food adventures. And so, we grew from 15 people to 250 people in one year.</p><p><strong>Joel Hooks:</strong>         Wow.</p><p><strong>Tracy Lee:</strong>          I was insane. Yeah, across the U.S. and Canada. So, that meant we were in 250 different cities. That was nice. And then, I sold that a few years ago, and then just really started focusing on This Dot, which has been my baby for the past few years.</p><p><strong>Joel Hooks:</strong>         Were you a developer when you started Dish Crawl?</p><p><strong>Tracy Lee:</strong>          I was not, actually. I mean, my parents are developers.</p><p><strong>Joel Hooks:</strong>         Okay.</p><p><strong>Tracy Lee:</strong>          Yeah, I guess they are developers. Engineers, developers, whatever, you know. I wanted to go into business ever since I was younger, and when I started Dish Crawl... It's so hard, because even now I talk to people who are doing startup, or even people in large organizations, like, \"Is this the right tech choice?\" And they a lot of times ask me like, \"Well, you know, I heard about this thing with React Native, and this is why I think that this is good,\" or \"This is why I think Angular is good.\" I remember asking myself the same questions, like, \"Do I go with PHP or do I go with Python?\"</p><p><strong>Joel Hooks:</strong>         Yeah, with Egghead, we were like, \"Is it Rails or is it Django?\" Neither of which really matters that... Like, six years in it does matter, but at the same time, do something.</p><p><strong>Tracy Lee:</strong>          Exactly. Yeah, and I remember it was so painful, like, I had two PHP developers as co-founders and things were just not moving. I'm like, \"Man, this takes so long.\" I met guy on Reddit, I used to be super big into Reddit, and he was just like, \"Eh, this isn't really what you want to build.\" And then he built me a website using Python, and just like, we threw away like a year of code, and then the business just kind of took off.</p><p><strong>Joel Hooks:</strong>         Yeah. So, it's funny, because I'm like, \"Oh, it doesn't matter, just do something,\" but at the same time, it really does matter. Your tech choices make a difference. I don't know, it's always this weight of, how much will this matter and what is the tech choice?</p><p><strong>Tracy Lee:</strong>          I feel like if you're not technical, it's almost like you're scared to make the decision. I've been there, because I used to not be technical, and it's like, \"Oh my god, we're doing Python. What does that mean? Okay, it seems like a good choice,\" but you have no idea. I find all these people I talk to these days going down these paths and I'm like, \"Ooh, should you really do that or should you not?\"</p><p><strong>Joel Hooks:</strong>         Well, I imagine, like when you're sitting there and you don't have the technical background or vocabulary, people are literally speaking a foreign language.</p><p><strong>Tracy Lee:</strong>          Oh, it's so hard. It's so hard to make decisions based on things you don't understand.</p><p><strong>Joel Hooks:</strong>         Yeah, and you have trusted advisors, but at the same time, it's like your livelihood is hinged on these decisions.</p><p><strong>Tracy Lee:</strong>          I got into development because I had sold the company, and I was kind of in a transition period. I had to obviously start at the new company that bought us, and I was like, \"Okay, you know what? For the first time in many years I can actually shut everything down, like I can literally actually ignore everything for three weeks.\" I took an HTML, CSS, JavaScript class online, eight hours a day, and I highly recommend any business person to do that. Even two weeks.</p><p><strong>Tracy Lee:</strong>          I remember me and my co-founder, he used to come to me and be like, \"I could do it the right way, or I could do it where we're going to have to clean up some technical debt.\" What does me, as a business person who doesn't understand what actually technical debt means, do? I choose the one-day thing versus the three-day thing, and like, two weeks of just learning what code means.</p><p><strong>Tracy Lee:</strong>          Also, the other thing is, it really made me stop and think about meetings differently. Like, even as this business person, now I group together all my meetings, because I used to be like, \"Oh, co-founder, you're not in a meeting. Oh, he's probably bored. Oh, he's not involved.\" Like, my god, I was just killing his productivity the entire time.</p><p><strong>Joel Hooks:</strong>         By having sporadic meetings throughout the day versus grouping them so that you have a head space to work.</p><p><strong>Tracy Lee:</strong>          Exactly. Yeah.</p><p><strong>Joel Hooks:</strong>         Yeah. I think that's really interesting. I don't think I've ever heard anybody articulate that. We have these coding bootcamps. We have folks that have business. If you are in that industry and you can afford to do it, taking a sabbatical and applying that to a coding bootcamp could be a very powerful lever for your entire rest of your business career.</p><p><strong>Tracy Lee:</strong>          It's a night and day, really. I mean, I think even as business people, you think like, \"Oh, I have an eight hour day, and I can just schedule meetings.\" Now, even if I'm not doing development, I'm like, \"My god, you can't get anything done if you don't have chunks of time.\" You don't have to be a developer to kind of maximize that, but I think until you're a developer, or at least until you're in places where you have to actually focus to do your job, you don't realize the actual value of it.</p><p><strong>Joel Hooks:</strong>         Yeah. I think business flow state is really weird and more difficult, where getting into a flow state as a developer makes more sense. It's almost hypnotic, like you start solving a problem and you look up and it's two in the morning, and you're like, \"Wow.\" I've done it with business. It just isn't, I don't think it's as natural of a occurrence.</p><p><strong>Joel Hooks:</strong>         So, you did Dish Crawl, you exited that, you sold it, took some time for yourself. I remember, because I would see, you started popping up at literally like all the JavaScript conferences and the Angular conferences with Power Rangers costumes and taking fun pictures. Your selfie game is inspirational and very on-point. I love that approach. I can tell you're having fun, and I think that's amazing.</p><p><strong>Joel Hooks:</strong>         And then, that led into what you're doing now, which is This Dot Labs and This Dot Media. How do you describe that to people? How do you describe what you're currently doing to people?</p><p><strong>Tracy Lee:</strong>          This Dot Labs, specifically, is a consultancy where we really try to help enterprise companies and startups get to the next level of whatever they're doing. So, we started off as a bunch of experts in the industry. I'm on the [inaudible 00:10:27] core team, I'm a GDE, a Microsoft MVP, and all those other things, and so are some of my co-founders, and we just love the idea of helping people. So, sure, fine, we do consulting, but consulting itself isn't really that interesting to us. What's really interesting to us is this idea where we can kind of take a holistic approach to mentoring people, mentoring developers, helping make a difference within their organizations, helping transform how they think about what a developer should be, right?</p><p><strong>Tracy Lee:</strong>          Like a few weeks ago on Twitter, the 10x developer drama that was happening, oh my gosh, such a hot mess. But it's this idea where within your engineering organization, you shouldn't be a 10x developer. You should be really promoting the idea of a 10x mentor. So, helping everybody within an organization, within a development organization, should be helping facilitate each other to be successful. I love that, because technical problems are fun to solve and everything, but helping people succeed in a bigger way is way more interesting in my opinion.</p><p><strong>Joel Hooks:</strong>         Yeah, I mean, like lifting people up and helping everybody achieve. To me, the 10x developers, the person that can do that and spread what they know, not necessarily that they can write 10 times as much code or produce 10 times as many features, but they can help others, and when you spread that mentorship across them, that's when you get the true lift, and it lasts for a long, long time. It's like a longterm investment, nobody's getting burnt out, and more people are succeeding.</p><p><strong>Tracy Lee:</strong>          Yeah, for sure. Absolutely.</p><p><strong>Joel Hooks:</strong>         So, you've scaled this business too, right? Dish Crawl blew up and you scaled that to to 250 cities, and you've grown from a small company of experts to now you've scaled this business too. I think that sort of thing is hard. Hiring and being an employer has been super challenging to me. So, I was curious, what do you wish you could tell yourself before you started this, all of this, what would you go back and what would be the advice you would give in terms of scaling a business and adding employees and people to your business to collaborate with?</p><p><strong>Tracy Lee:</strong>          Oh, lord. I mean, we just hired like seven people in the past month. So, if anything, life is a little bit insane right now.</p><p><strong>Joel Hooks:</strong>         Yeah, I imagine.</p><p><strong>Tracy Lee:</strong>          I always go back... Will Bunker, who founded match.com, he was one of my first investors for Dish Crawl, and sometimes his voice is still in my head saying things. For example, he always made this comment about making the donuts. You're successful if you're making the donuts and you just got to keep making the donuts. Meaning...</p><p><strong>Joel Hooks:</strong>         You show up.</p><p><strong>Tracy Lee:</strong>          Well, yeah, it's like entrepreneurs, for example, they want to start something, and then they get bored and they want to start something else. But when you become a successful business, you are doing the same thing over and over and over again, and a lot of times, that to an entrepreneur is boring. But unless you keep doing the same thing, the thing over and over and over again, and getting really good at it, then you're never going to actually grow. So, that was really interesting to me, and I still think about that to this day.</p><p><strong>Tracy Lee:</strong>          I think culture is so important. I remember my first company, and one of the reasons why I started my first company was because I was in corporate and there were these really catty girls who would be like, \"Oh my god, it's five and she's not in the office.\" I could see the look on their face, and I'm like, \"my god, do you guys not have anything else better to do in your life?\"</p><p><strong>Joel Hooks:</strong>         Yeah, get a hobby.</p><p><strong>Tracy Lee:</strong>          Yeah, exactly. This is one of the motivations for wanting to start my own business, and we grew so fast. We're like, \"Okay, we need to actually hire like five people in the next whatever,\" like in the next week, basically, we needed to hire five people. Granted, we're doing that right now, but it's so different. What ended up happening was I wasn't actually involved in some of the key hires that we were doing. So, I ended up going into the office and creating this... I created the culture that I didn't want, this culture where there were these three girls and they had this attitude, like, \"Oh, you can't sit with us.\" It's like, \"Oh my god, what the heck just happened?\" I'm going into my own company feeling like there's these catty girls now, again.</p><p><strong>Joel Hooks:</strong>         Like a high school lunch room, basically, right?</p><p><strong>Tracy Lee:</strong>          Yes. It was so terrible. So, that's one of the most important things for me. Even now, we're growing to 60 now, and I'm still involved in the hiring. I still want to make sure that the people are the right fit, because I never want that to happen again. So, what we've been able to create with the culture at This Dot is just, everybody wants to grow from each other. Everybody is a teacher. Everybody wants to mentor. Everybody believes in helping each other grow as individuals.</p><p><strong>Joel Hooks:</strong>         Yeah. Everybody's got a hand out to lift people up versus trying to push them down.</p><p><strong>Tracy Lee:</strong>          Yeah. One negative person is so hard. Also, everybody always says this, but fire fast, if it's not all working out, and I've learned that mistake over and over and over and over again.</p><p><strong>Tracy Lee:</strong>          I feel like with This Dot we've made some good decisions, so I don't have as much of this, but being a little bit younger, I mean, I did Dish Crawl for eight years. I still remember, there was these two best friends, and I was like, \"Oh my gosh, if I fire one of them, then the other one, who's really good, will leave. But then, when I ended up firing one of them, the other one who was her best friend was like, \"Thank god. Thank you so much. Now I can actually work.\" She was being such a disease to her friend at work. Those are my top things. I mean, I have so many more.</p><p><strong>Joel Hooks:</strong>         Oh, yeah, and the familiarity probably just added to that. Yeah, I was looking through this and I'm trying to come up with things to talk about, and I was like, \"Wow, we could go on for hours and hours,\" because there's so much to this.</p><p><strong>Joel Hooks:</strong>         So, learning to be a web developer, it's really hot right now, and for understandable reasons. We get to work remote, we get to work at a computer, we're not outside sweating. It's a desirable field. The pay is really good. So, a lot of people are trying to figure that out and get into this market, and we always hear that there's a shortage, but at the same time, people are only hiring senior folks, is the feeling. I'm wondering, what sort of path have you seen people have success with, trying to get into this market, as web developers?</p><p><strong>Tracy Lee:</strong>          I would say just getting on Twitter and following the people in the industry has been where I see the most success, probably because I'm on Twitter.</p><p><strong>Joel Hooks:</strong>         Is that because we're on Twitter? Because I agree with the general sentiment, but is that because that's where we're at, or is that where it's at?</p><p><strong>Tracy Lee:</strong>          I think that that's where it's at, because you think about it, what other path do you have? Like, okay, you're a person looking for a job. What do you do? How do you get into companies? How do you get to know people at companies? It's almost impossible to do so without just getting on Twitter. Okay, you get on Twitter, now all of a sudden you know you want to work at Webflow. Okay, follow all the Webflow people. Start talking to them, figure out what they're excited about, get them to mentor you through the process, get them to know you. And then all of a sudden you're working at Webflow. I've seen that happen time and time again.</p><p><strong>Joel Hooks:</strong>         There's nuance, though, right? You can't get on Twitter and just start pinging people and adding people. How does an individual that is just learning contribute value and contribute to the conversation?</p><p><strong>Tracy Lee:</strong>          You know, it's funny because I feel like all junior developers, anytime I need a junior developer... I mean, actually, it doesn't even have to be a junior developer. Everybody is always like, \"Oh, I'm not working on anything that interesting. I don't know. I don't have anything to say,\" but you'd be surprised. One of my friends, she's working on Angular and .NET. Man, I know you're working on some really hard problems, and there's not a lot of people talking about best practices when doing Angular and .NET integration or whatever.</p><p><strong>Joel Hooks:</strong>         Or even good practices, not even necessarily best, good practices.</p><p><strong>Tracy Lee:</strong>          Exactly, like do's and don'ts. I was laughing and I was like, \"How about you just write a blog post called Don'ts?\" [crosstalk 00:18:08] Because she's struggling a lot with some things within her organization. I'll tell you how I got started. One of my co-founders [inaudible 00:18:17], I had been coding for maybe three months, and he said, \"Hey, why don't you come share your experiences on this Ember meetup online?\" I said, \"Okay.\" And then, I just shared what I knew. That gave me confidence, and I was like, \"Oh, I could do this. Okay, people find this interesting.\" And then, for a good year, I just learned new technologies and shared what I learned.</p><p><strong>Joel Hooks:</strong>         When I started, it was very similar. I was learning and struggling, and I wanted to do this career, but I couldn't just switch because I couldn't take the pay hit, I have kids and stuff. What I did was I would solve something, like find a problem, do my research, solve it for myself, then just write about it. Write the problem, write the solution, write the problem, write the solution, over and over again, and that was writing for me. I would post them on Twitter or whatever, when that came around, but that process, and then open source. I got into open source and started just writing documentation, because I wasn't able to follow and contribute, but I was able to contribute at a different level.</p><p><strong>Tracy Lee:</strong>          Yeah. Documentation. I mean, literally any person you talk to who does open source, or any person you talk to who has been successful in the industry, their first answer will always be documentation. I think when junior developers hear that, they're like, \"Yeah, whatever,\" but, I mean, if every single person you talk to is saying start with the docs, it's probably a good path.</p><p><strong>Joel Hooks:</strong>         It carries, too, it's like as senior developers or people with experience, you still should be participating in that at some level. Whether it's writing documentation to make onboarding easier when you're trying to scale, or recording screencasts, or... It takes a bunch of different forms, but this ability to communicate gets back to the idea of a Tenex mentor to me. It's this idea that throughout your entire career, you're acquiring knowledge, sharing knowledge, and using that to help boost other people and provide value to the broader community.</p><p><strong>Tracy Lee:</strong>          Yeah. Ben Lesh and I, I started this series called Yolo Brolo. So, yolo, and then bro, and then I don't know why lo, but anyways-</p><p><strong>Joel Hooks:</strong>         You crack me up by the way.</p><p><strong>Tracy Lee:</strong>          [crosstalk 00:20:19] The tagline on YouTube is Screencast of Experts Teaching Beginners. These May or May Not Be Useful. Because I swear some of them are totally not useful. Some of them are extremely useful, and we have thousands of people watching silly things about Ben teaching RxJS, and it's like small, teensy little things that he teaches me, let's say, in a screencast, that you don't realize that a lot of people just don't know. So, the more you think you don't know, the more you're just holding back on us. You need to teach everybody else.</p><p><strong>Joel Hooks:</strong>         My joke, lately, that I've been using, is that statistically speaking, nobody on the planet earth even knows HTML, much less, you start talking about our RxJS or these more complicated topics, but literally, you have something to share. We all have something to share. We all have our individual voice, or our take on it, or the path that we took to learn something. It's interesting, and the more we share... I don't know about you, but this broadcast culture that we've kind of stumbled into over the last three years, with Twitch, and YouTube, and this live recording of what I'm kind of referring to as slow content versus more edited content, there's nuggets in this, and it's really, really interesting to watch this evolve, to me.</p><p><strong>Tracy Lee:</strong>          The slow content movement, like the slow food movement, but slow content.</p><p><strong>Joel Hooks:</strong>         Yeah, well, people want to kick back, like in Egghead, if there's a criticism of our approach, it's that they're these really tightly edited, concise, kind of punch you in the face videos, and that's fine, it's a good format, but people also just want to, like after work, or while they're learning, or at lunch, just chill and watch people have conversations, and joke, and laugh, and be whimsical, and I love the way you and Ben... Y'all's chemistry is amazing, and just the way that that comes across is really inspiring and interesting, and I think useful to the broad population, too.</p><p><strong>Joel Hooks:</strong>         You keep a list on Twitter, and I know it goes beyond the Twitter list, and it's the Fempire list. This is a list of women in software development that completely changed my Twitter feed and kind of how I look at the industry in a profound way. I literally went through and ran a script, and I followed everybody, and then I've kind of pared it back, because you got to prune Twitter to make it useful. But I followed everybody. It was like 900 people at the time, and just blew my list completely out of the water, and then unfollowed a whole swath of people at the same time that I'd previously been following, and changed my perspective of the industry. I'm wondering, where does that start, where does that come from, and why do you have a Twitter list called Fempire, and what does that mean?</p><p><strong>Tracy Lee:</strong>          It started mainly because I just wanted to keep track of all the woman I've met, so it wasn't even anybody important, or exciting, or whatever. It's just random women that I've met throughout my journeys. I love that everybody just started following people in the Fempire list, because who are they? It's not like they're important for any specific reason, potentially. Right. It was so fun when I started that list because people would just be like, \"Oh my gosh, I just got a thousand followers. What's going on?\" And then they'd be like, \"Oh, we followed you through Tracy's list.\" I was like, \"Wow, this is so cool to see.\" So, that's really where it started, just because I just wanted to create a list of interesting women, and then it just got bigger and bigger and bigger. So, I keep adding to it. I mean, I obviously can't add everyone to it, just because that would be like a full-time job.</p><p><strong>Tracy Lee:</strong>          But I also have a GitHub. It's github.com/fempire, and there's a speakers list of women, where people can just submit PRs for interesting women in their communities.</p><p><strong>Joel Hooks:</strong>         Oh, nice, crowdsourcing.</p><p><strong>Tracy Lee:</strong>          Yeah, and that's just a really good way, if you want to find a speaker in India or whatever, you can find like all the woman in tech who are interested. Also organizers, finding all the woman organizers of different tech communities.</p><p><strong>Tracy Lee:</strong>          I really love empowering woman. If I had to think about my journey, so, when I was 21 or so I was in this abusive relationship, and then what I wanted to do was I did jewelry. So, when you get into relationships like that, it's all about that person disempowering you, so you feel like you can't do anything, you're stuck. So, for me, it was really important to be able to get a job, and get back on track, and have my own life again and not be dependent on somebody.</p><p><strong>Joel Hooks:</strong>         Yeah, that's important.</p><p><strong>Tracy Lee:</strong>          Yeah. And so, I've always felt very strongly about that. I had a jewelry business, and I was like, \"Okay, do I go to like women's shelters and teach them how to make jewelry as a way of empowering them on how, basically, their hands can be the way they get out of this relationship, their hands can be their way to empower them to make money, et cetera.\" So, with Dish Crawl, who likes food and events? Women, mostly. So, it was a very large, 95% women on our team. So, that was interesting.</p><p><strong>Tracy Lee:</strong>          And then, going into tech, and going really deep into JavaScript, it's weird that it's kind of happened again. I'm in a place again where I'm like, \"Wow, there are so many amazing woman in tech. How do we empower them? How do we help junior developers get jobs?\" We started an apprentice program at This Dot, but it's really just part of me being excited about I think just women in general, and trying to help lift each other up. We shouldn't be tearing each other down.</p><p><strong>Joel Hooks:</strong>         There's the idea of taking up space, and putting it out there, and being present, and I really like that. I appreciate it, and I appreciate you taking the time to educate people like myself and help us push forward too, because I think what you're doing is really inspirational. I look to that, and I look, to it for guidance, and it changes my perspective and I think other people's perspective too.</p><p><strong>Tracy Lee:</strong>          That's great.</p><p><strong>Joel Hooks:</strong>         So, I think that's super valuable across the board. So, thank you for your work. [crosstalk 00:25:59] Really appreciate it.</p><p><strong>Joel Hooks:</strong>         I'm curious, because you mentioned your apprenticeship program for women trying to get into this, and how does that work? What does that look like, and how do you operate an apprenticeship program?</p><p><strong>Tracy Lee:</strong>          When I started the apprentice program, here's what was happening. This is why it started. I constantly got people asking me how they hire more women in tech, and then I get all these junior developers who are women, who have just gotten out of bootcamps, looking for jobs. And so, there's this disconnect between, you mentioned it, everybody wanting to hire a senior developer. And so, I was thinking, okay, there's all these jobs and then there's junior developers, so there's this weird disconnect. And so, what if we created a program that helped solve all these problems? So, the apprentice program was really created as a way to take all the excuses out of the business, for their reason of not hiring woman developers.</p><p><strong>Tracy Lee:</strong>          What we do is we actually pair a junior developer and a senior developer together on projects, so you combine them as a pair, and it's this idea where you can work with a junior female developer and her mentor for the course of three months to a year, on contract, and then you can hire them directly once they're ready. So, they're trained on your tech stack, they're not taking away from your senior developers because they have a PM/senior developer making sure that they're contributing and they're bringing value immediately. Hopefully, that helps the integration part, the onboarding part, which is typically the most difficult with junior developers, so they can be productive, and once they're productive on your tech stack, then you can just hire them directly.</p><p><strong>Joel Hooks:</strong>         Yeah, because the problem is two-fold. The employer wants productive employees, but people that want jobs, we all, I think for the most part, want to be on a job, be productive, and see success. We don't want to be just floundering and confused the entire time. So, it solves it on both ends of the spectrum. How do I go from not having production experience to being experienced and comfortable to where I can make a contribution as well?</p><p><strong>Tracy Lee:</strong>          It is so hard, I have to tell you. It makes me so sad to see, first off, bootcamps. I mean-</p><p><strong>Joel Hooks:</strong>         The drama?</p><p><strong>Tracy Lee:</strong>          Not all bootcamps are created equal. It's like, \"Okay, I went to bootcamp,\" but there is a huge difference based on the bootcamp you go to. Now, I can't tell you which bootcamps to go to, and I won't mention any, but I can definitely say some graduates of different bootcamps, we've tried to get them through the apprentice program, but it's so hard, because some bootcamps just don't even teach the fundamentals.</p><p><strong>Joel Hooks:</strong>         I've seen a lot of bootcamp call-outs on Twitter lately. I'm not trying to pan anybody specifically, but it's like, do your research and find people that have gone to the bootcamp, and ask them directly what their experience was. Specifically, I've heard this advice for women and other marginalized groups, that you need to find people like you and talk to them about their experiences, because that is also a factor in a lot of these circumstances.</p><p><strong>Tracy Lee:</strong>          Well, I'll tell you about my bootcamp experience.</p><p><strong>Joel Hooks:</strong>         I'd love to hear it.</p><p><strong>Tracy Lee:</strong>          So, I took a JavaScript class after I was surrounded by tons of JavaScript experts. So, my teacher, he was like, \"Oh, okay, I'm going to teach you CSS, but I don't really like CSS.\" This was four or five years ago, and I was like, \"Oh, yeah, what do you think of ESX?\" And he's like, \"What is that?\" And I'm thinking, \"Dude, if I know more than you, no, this is not a thing.\" So, they actually refunded me.</p><p><strong>Joel Hooks:</strong>         That's a pretty good case for it, too. It's like, if you go into... And, you know, not all created equal. I think that's fundamentally the point here, and do your research.</p><p><strong>Tracy Lee:</strong>          For sure. Definitely.</p><p><strong>Joel Hooks:</strong>         So, to wrap this out, I was wondering, do you have any favorite book or other resource that was pivotal for you in your journey as both an entrepreneur or a developer? Something that changed the way you think?</p><p><strong>Tracy Lee:</strong>          Oh, that is such a hard question.</p><p><strong>Joel Hooks:</strong>         Yeah, and it's a prize one.</p><p><strong>Tracy Lee:</strong>          I know, I can't remember the name. It's by this Andreessen Horowitz guy, but that was probably my favorite book, Ben Horowitz, The Hard Things about Hard Things.</p><p><strong>Joel Hooks:</strong>         Oh yeah, that's a good one.</p><p><strong>Tracy Lee:</strong>          Yeah. I read so many of these different books and most of them I don't finish because I just get bored of them, but The Hard Things about Hard Things I felt like was really practical and a really easy read.</p><p><strong>Joel Hooks:</strong>         Yeah, and he talks about, you know, okay, well you got to let an employee go now, here's how I did it, and that kind of thing, but in his own stories. I really enjoyed that one quite a bit. For me lately, I just finished Thinking in Systems and it was a full mindset shift for me.</p><p><strong>Tracy Lee:</strong>          Really? Okay, I'll have to look that one up, too.</p><p><strong>Joel Hooks:</strong>         It's a good one. It's titled as a primer, but it's the most profound and also depressing book I think I've ever read, in a lot of ways.</p><p><strong>Tracy Lee:</strong>          Okay, do I want to read it now?</p><p><strong>Joel Hooks:</strong>         You do. I think everybody should. I think it should be taught in like eighth grade. I think they should use it as a textbook. We really have some things to think about as a species.</p><p><strong>Joel Hooks:</strong>         Tracy, thank you so much for hanging out with me this afternoon. I really appreciate it. I'm looking forward to seeing what you do next, and talk to you soon.</p><p><strong>Tracy Lee:</strong>          Yeah, thank you.</p>",
    "slug": "out-with-the-10x-developer-and-in-with-the-10x-mentor-with-tracy-lee",
    "description": "<p>Making technical decisions for your business when you don't have experience as a developer is difficult. It's scary to make decisions that you don't know the consequences of.</p><p>Tracy got into development when at one point she had the freetime to take an HTML, CSS, JavaScript course online. Becoming a developer taught Tracy the importance of grouping her meetings so she could have uninterrupted blocks of time to get work done. Before, she didn't realize the impact that breaking people's flow had.</p><p>A lot of people are trying to become developers. One of the more common routes now is attending a bootcamp. But be careful, not all bootcamps are equal. Graduates from some bootcamps struggle a lot harder in the hiring process than others. Make sure that you do your research and talk to people who graduated from the program.</p><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/out-with-the-10x-developer-and-in-with-the-10x-mentor-with-tracy-lee/transcript\">\"Out With The 10x Developer And In With The 10x Mentor With Tracy Lee\" Transcript</a></p><h3>Quotes</h3><blockquote><p>\"I feel like if you're not technical, it's almost like you're scared to make the decision\"</p></blockquote><blockquote><p>\". . . I group together all my meetings, because I used to be like, 'Oh, co-founder, you're not in a meeting. Oh, he's probably bored. Oh, he's not involved.' Like, my god, I was just killing his productivity the entire time.\"</p></blockquote><blockquote><p>\"You should be really promoting the idea of a 10x mentor. So, helping everybody within an organization, within a development organization, should be helping facilitate each other to be successful.\"</p></blockquote><blockquote><p>\"But unless you keep doing the same thing, the thing over and over and over again, and getting really good at it, then you're never going to actually grow\"</p></blockquote><blockquote><p>\". . . do your research and find people that have gone to the bootcamp, and ask them directly what their experience was\"</p></blockquote><h3>Resources</h3><ul><li><a href=\"https://www.amazon.com/Thinking-Systems-Donella-H-Meadows-ebook/dp/B005VSRFEA\">Thinking in Systems: A Primer</a></li><li><a href=\"https://www.amazon.com/Hard-Thing-About-Things-Building-ebook/dp/B00DQ845EA\">The Hard Thing About Hard Things: Building a Business When There Are No Easy Answers</a></li></ul><h3>Tracy Lee</h3><ul><li><a href=\"https://twitter.com/ladyleet?lang=en\">Twitter</a></li><li><a href=\"https://github.com/ladyleet\">Github</a></li><li><a href=\"https://www.thisdot.co/labs\">Website</a></li></ul><h3>Joel Hooks</h3><ul><li><a href=\"https://twitter.com/jhooks\">Twitter</a></li><li><a href=\"https://joelhooks.com/\">Website</a></li></ul>",
    "duration": 1859,
    "episode_number": 56,
    "contributors": [
      "Joel Hooks"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/1vj57",
    "path": "/podcasts/out-with-the-10x-developer-and-in-with-the-10x-mentor-with-tracy-lee",
    "published_at": "September 17th, 2019",
    "url": "https://egghead.io/api/v1/podcasts/out-with-the-10x-developer-and-in-with-the-10x-mentor-with-tracy-lee",
    "edit_podcast_url": "https://egghead.io/podcasts/out-with-the-10x-developer-and-in-with-the-10x-mentor-with-tracy-lee/edit"
  },
  {
    "id": "podcasts-00000000000000000218",
    "title": "Build Performant And Reliable Applications With Molly Struve",
    "summary": "Molly Struve shares her approach to ensuring that projects are performant, reliable, and well-documented.",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/b1cd975b-af21-4562-b381-d6654596484b/podcast_joel_with_molly_strove_v1_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/55d7f360-05c1-43af-9c2d-eb89e156734a/427becc3-2296-4995-854f-4c22229bead8/logo.jpg",
    "simplecast_uid": "b1cd975b-af21-4562-b381-d6654596484b",
    "transcript": "**Joel Hooks:**         Hi Molly.\n\n**Molly Struve:**       How's it going, Joel?\n\n**Joel Hooks:**         It's going great. How are you doing today?\n\n**Molly Struve:**       I'm doing good.\n\n**Joel Hooks:**         So, I'm really excited to talk to you because lately it seems like, over the last year or so, I keep hearing this term, site reliability engineer, or SRE, and a you are a lead SRE, and I wanted to find out more about that, but I kind of wanted to break the ice and ask you about your relationship with horses and what you do outside of that, because I don't know a lot of people that interact with those fine beasts, and I was wondering how you got into that and what that's all about.\n\n**Molly Struve:**       Yeah, that's actually quite a common reaction I get when I say, \"`Oh, by the way, in my free time I ride horses.\" [inaudible 00:00:44], \"Oh, wow. How'd you get into that?\" Honestly, I've been riding since I was five years old. My aunt got me a riding lesson and the rest was history. I kind of fell in love and I've been doing it ever since. So, it's something that gives me a nice break away from the computers, and it's outside, and the fact that you get to work with a live animal is also super rewarding. So, it's something I've enjoyed my whole life, and lucky for me, it's kind of a lifetime sport. You can do it well into your 60s, 70s, I've seen 80-year-olds ride. So, it's something that I can do for the rest of my life, which is nice.\n\n**Joel Hooks:**         And you have your own horse, or horses.\n\n**Molly Struve:**       Yes, horses. So, I'm very lucky, my in-laws are also into horses, and so, I ride a lot of theirs and yeah, it works out great.\n\n**Joel Hooks:**         I understand, like if you spend a lot of time with them, I mean, there's a relationship, right? They're intelligent animals, and they know you, and respond to you, and that sort of thing. Is that true?\n\n**Molly Struve:**       Exactly. When you're out there, it's not like a bike, where you buy a bike off the shelf and it's going to respond to what you say. When you go out and look for a horse, it's kind of similar to looking for a house. You got to look for one that meets your needs, that is going to get along with you. It's a team sport out there, it's you and the horse, and if you can't communicate, you could have the best horse and the best rider, and if they can't get on the same page, it's going to be a disaster. So, it's definitely kind of fun to experience horses and their different quirks, and figuring it all out.\n\n**Joel Hooks:**         Yeah, I mean, it's like any sort of of animal companion is kind of that way, right? If you don't match, then you kind of have to just live with each other, and it's no good [crosstalk 00:02:25].\n\n**Molly Struve:**       Exactly.\n\n**Joel Hooks:**         They don't like it either, if they don't like their human, I imagine.\n\n**Molly Struve:**       Yeah.\n\n**Joel Hooks:**         So, what is a site reliability engineer? What's an SRE?\n\n**Molly Struve:**       To me, a site reliability engineer is a software engineer, but with their focus on performance and reliability. It's also usually a software engineer that has some other little area of expertise, so you could think of maybe a software engineer who's really good with MySQL, and really good with databases. Maybe they're really good with Linux. So, kind of the way I like to describe it and also how our operations describe it is a developer plus. So, it's a dev, but they've got a little bit of something extra in there that just helps them kind of step back and look at the whole system and ensure that it's performing and reliable.\n\n**Joel Hooks:**         Does it have anything to do with, like, we have DevOps, right? Is being an SRE, is it somehow related to to DevOps, or would that be like the plus that maybe you have as an SRE?\n\n**Molly Struve:**       So, I would view that, my opinion personally is that that would be the plus. I view site reliability engineers as basically, like I said, software engineers, but their focus is different than delivering features. DevOps to me always was less coding and more on the operations focus, so that's kind of how I see the difference between SRE and DevOps. Now, there are some people that just, they lump them all together and they assume that it's the same thing. My view is that the SREs are much more software-focused to solve problems, where DevOps is kind of more operations-focused.\n\n**Joel Hooks:**         So, I know you went to school and you studied aerospace engineering, so I know you didn't necessarily look at web development as your path, and I assume you obviously didn't look at being an SRE as your path, but how did you go from getting into web development to becoming a site reliability engineer?\n\n**Molly Struve:**       So, like you said, I started in web development and started as a software engineer, and basically what happened is I joined Kenna four years ago, and when I joined them, one of our lead engineers, who was in charge of Elasticsearch, left. So, I saw that as an opportunity to kind of grab a little piece of real estate there and take ownership over something. So, I grabbed onto Elasticsearch, I learned everything I could about it, and over the two years, I became the residential Elasticsearch expert. Because Elasticsearch is such a cornerstone of our platform, I naturally found myself doing a lot of those tasks to improve performance, to improve reliability, to ensure that we could scale.\n\n**Molly Struve:**       So, as our team grew and we started realizing that we were going to have to break up our one single dev team into multiple, our VP came to me and said, \"Hey, you kind of are already doing this. What do you think about forming a site reliability team and working on that?\" And of course, since it's something I enjoy, I enjoy those performance improvements and finding those ways to make things scale, I naturally said yes, and since that, for the past almost two years now, I've been a site reliability engineer.\n\n**Joel Hooks:**         So, there wasn't a team already, and it was kind of built around the... I mean, I feel like people recognize the need for these sorts of things as you grow to a certain scale, like a five man shop probably isn't going to have an SRE team. So, it grows out of time and necessity, I would assume.\n\n**Molly Struve:**       Definitely. So, it's definitely something that grows, for us it grew out of need, and that's kind of one other thing I like to touch on is sometimes people view SRE as something that only giant orgs have. So, because Google was kind of the one that coined the term, some people think, \"Oh my god, you got to be a big Google company before you have an SRE team.\" But I don't think that's the case. Kenna, when we broke off, our SRE team probably had 60 people, and 20 or so of them were engineers. So, we weren't that large. Ever since we've kind of broken off, my view has been you're never too small to have an SRE. It doesn't need to be a full team. It doesn't even need to be one person's sole job, but there should always be someone on a team that is focusing on those SRE things, those things like performance, those things like reliability. It's never too early to start thinking like an SRE when you're building an application or building a company.\n\n**Joel Hooks:**         I kind of see the SRE, when I use my mind's eye, as almost like a firefighter, but it also feels like that's probably, while part of the job, not necessarily the full job. What else, besides the firefighting, the having the pager go off, which I want to get into a little bit too, what does the SRE do outside of that to maybe prevent fires, I suppose?\n\n**Molly Struve:**       One of the big things is you're the one that has the performance and reliability kind of on your mind all the time. So, one of the things our site reliability team does is, a lot of times when PRs from the main dev teams who are working on the features go out, we'll review them, and we are not necessarily looking for, okay, how correct is the feature or does it work properly, but we're in there and we're looking at the database requests. Are these going to be performant? Are we looping through all these records in MySQL when we don't have to? So, one of the things we do is we're looking at code and making sure all the code going out is going to be performant and going to be able to scale.\n\n**Molly Struve:**       In addition to that, other things that we work on are things like monitoring any tools, creating tools, or doing things that are going to help us scale in the future. So, we're really thinking ahead and trying to get ahead of those firefighting things when they occur. So, ideally, we would design everything and be a step ahead and we'd never have to firefight. That's not really the case all the time, but if we can prevent that as much as possible, then we're doing our job.\n\n**Joel Hooks:**         So, last week Egghead actually, we had our sign-in form just attacked, like there were like some sort of botnet or something just attacking our form. Is that the kind of thing that a site reliability engineer would focus on, too? Is the idea of external forces coming in and taking you out of the norm, like taking you out of your normal day to day?\n\n**Molly Struve:**       Yeah, so that is something our SRE team does, but also the devs need to be aware of that as well. But we actually, it's funny you say that sign-up form, because we actually had a tester come in and see what would happen if they signed up a thousand clients, and it backed up our email. And so, that was something where we had to jump in and be like, okay, how do we flush this email queue and get everything back to normal, and then how do we handle the situation where, okay, if someone comes in and maliciously tries to sign up a thousand users or whatever, how do we handle that? So, that's definitely something that is on our radar, but also is not exclusively SRE. The devs also are kind of thinking about that as well.\n\n**Joel Hooks:**         When trying to make lemonade out of the lemons, I said, \"Well, we got testing for free, and pen testing is expensive.\" They were signing up 6,000 emails an hour.\n\n**Molly Struve:**       Ooh.\n\n**Joel Hooks:**         Yeah, it was interesting. It was fun for me. I guess we're a very small team, so I kind of end up being our site reliability engineer sometimes. It's like a puzzle, but then it pops up and you're also like, \"Well, is this going to just ruin the entire business?\" I'm a big fan of this entire concept of being a reliability engineer, I think it's great. What's the path, is it just, you said pick a specialty, and I'm kind of wondering, if somebody's in a position and they don't have an SRE team, how do you pitch that or what's kind of the dev boots on the ground sales pitch to form an SRE team in an organization?\n\n**Molly Struve:**       Yeah, it's definitely, it's one of the hardest things to pitch because usually the upper execs, they see features and they see features translate into dollars. But what SRE translates to is it translates to reliability in the platform. It translates to, as a lot of people say, the nines. You can have all the great features in the world, but if they're only working 50% of the time, none of your clients are going to be happy.\n\n**Molly Struve:**       So, luckily for us, kind of early on we had scaling issues, so when the idea came up to have an SRE team to get ahead of further scaling issues, it was easier to sell, mainly because we had had the scaling issues in the past. Ideally, you want to get ahead of the scaling issues and kind of get the SRE mindset going even before, but it's the fact that you have to basically push that performance and reliability, especially in this day and age.\n\n**Molly Struve:**       The expectations for websites are so high these days that if you're not performant and reliable, people write you off. It's like when you go into Instagram or something, if it kind of starts freezing on you, if you have to wait two or three seconds to click around, I mean, you're going to probably shut the app and assume that it's buggy, or come back at a later time. So, these days you definitely have to make sure the performance is there if you want to keep those users.\n\n**Joel Hooks:**         Yeah, I often think of Google.com, the primary search product of Google, and how just lightning fast it is all the time, every day, and it's giving you results that are contextual, it gives you all sorts of different components, and everyday it's just lightning fast, and if it wasn't, their core product would be fundamentally broken.\n\n**Molly Struve:**       Yeah. And you can even think about it, if you get on a slow connection and you Google something, because the connection is slow, it takes a few seconds, and it's amazing how adapted we are to the speed of the internet these days, because when things slow down, you're like, \"Oh my god, oh my god, I can't deal with this. I have to wait so long.\" It's so noticeable just because we're so used to it being so fast.\n\n**Joel Hooks:**         So, one of my favorite quotes recently, I was reading the wonderful book from Will Larson-called An Elegant Puzzle, and he says systems generally won't scale past one order of magnitude of growth. I've heard from you on another podcast, that was kind of the case with the system that you work on, that you were growing, and your growth has been such that the system has basically had to churn out. I'm wondering, is that your experience, and how do you deal with that from a reliability standpoint?\n\n**Molly Struve:**       I would say definitely in the beginning, our system was one of those systems that there was no way we could scale by orders of magnitude. We have come a long way, even in the past two, three years, that because we focus so much on the reliability of the system and the performance, I have salespeople come up to me and they've got these big clients, and they go, \"Molly, what do you think, how big can we go? How much data can you handle?\" Right now, honestly, my answer is, \"I don't know, keep shoving it in there.\" We've multiplied and we've increased our data by four times since we did a bunch of our ES performance improvements, and it hasn't slowed down yet, it keeps chugging.\n\n**Molly Struve:**       So, we're going to hit the next bottleneck at some point, and we do hit little bottlenecks along the way, and as we do, we figure them out. But I think if you have, like I said, that SRE mindset from the beginning, and you take care to build your code in a way that will scale, you can achieve and make an application that is going to be scalable or easier to scale in the future.\n\n**Joel Hooks:**         So, I've played with Elasticsearch a little bit, and we even used it in a production for a while and ended up just kind of punting. Now we use Algolia because we didn't have anybody that was dedicated to to running Elasticsearch. I was wondering, what is Elasticsearch and what is it used for beyond the obvious, being in its name, search. What is that tool, what's its primary function?\n\n**Molly Struve:**       Elasticsearch, as you said, its primary goal is for searching, but not just searching in the sense that you think, \"Okay, I'm going to enter a word and it's going to tech search.\" It is able to do so much more, to build the sidebars that you see where you can select like, I want all tags with this, I want everything that's after this date, et cetera. So, those are formed using what Elasticsearch calls aggregations. And so, Elasticsearch has the ability to really just take your data, and you can slice and dice and run all sorts of different metrics on it, just through Elasticsearch, and it is incredibly fast.\n\n**Molly Struve:**       That's kind of one thing that has set Kenna apart from a lot of our competitors, is we give our clients the ability to really just break down their data in so many unique ways, and quickly. I guess other competitors, from what I've heard from our CTO who started the company, when someone runs a search on their platforms, it can take hours or days for that search to run, and what Elasticsearch does is it gives you the ability to run that search in a second or less, and at scale.\n\n**Molly Struve:**       So, it's definitely something that it is unique, it is extremely powerful, but as we found out kind of the hard way, it's one of those where it's easy to get started. You can throw a bunch of data in there, it stands up and it's fast, but to get it at scale, that is harder, and that's why I've written a blog post and I've done talks on scaling Elasticsearch, because that's literally what we did. We threw everything in Elasticsearch and it was fast when we had 500,000 documents. No problem. But when we have 4 billion, we had to be much more careful and much more cognizant of how we were using it. So, it's one of those, it's easy to learn, but it's hard to master.\n\n**Joel Hooks:**         Yeah, I mean, I got in there and over the weekend I was like, \"Oh, look at this. I know Elasticsearch,\" and then over time it was like trying to maintain it, and something would break, or getting good results, or the whole thing. It's just impressive to me how it's used, because it's a wonderful tool and they made it really approachable for the first mile, but becoming a true expert in making it reliable and useful for specific use cases or specific business needs and outcomes, that's a totally different story.\n\n**Molly Struve:**       100%, 100%. There's only so much you can just attribute to the black box. Sometimes you actually got to go in there and figure out what's going on.\n\n**Joel Hooks:**         I think maybe if you pay attention, that's true for a lot of these tools that we use, across the board, and actually is kind of the story of this field.\n\n**Joel Hooks:**         So, part of being an SRE, I think, that I would associate it with, anyway, is the the idea of being on-call of PagerDuty or even a physical phone attached to your job. I think that's associated in a lot of ways in a negative context and can be really grueling. Is that true? Is that part of being an SRE, is the on-call aspect?\n\n**Molly Struve:**       In my perspective, on-call is an aspect of every software engineer. And so, the way we do it as Kenna is it's not just SREs on-call, all the devs are on-call, as well as operations. So, it can be grueling, but the way we've set it up at Kenna is the SREs kind of own their alerts and their things that are going to alarm, and then the dev teams, on the flip-side, own other alerts that are kind of based around the code base and things that they've built. What ends up happening is that you end up with four or five people actually on-call at once. So, we have an on-call person for basically every team. What that does, is one, it gives you a lot of on-call reps.\n\n**Molly Struve:**       So, I think one of the things that can be grueling about on-call sometimes is if you don't go on-call a lot, you don't get a lot of practice. And so, you're not really comfortable when those alarms go off. So, one thing that breaking it up into smaller teams and smaller rotations does is it allows people to be on-call more often, which gives them more reps, and so they're more comfortable with it. And the second thing is because we have multiple people on-call all the time, no one ever feels like they're alone. There's no time where the alarms are going off and you have nobody that you can reach out to. I think that's gone a long way into making it a lot less grueling and a lot less tedious, because when those alarms go off and everything's kind of going wrong, the last thing you want to do is feel like you're in there alone.\n\n**Joel Hooks:**         Yeah, it's like stage fright and anxiety all kind of bundled up.\n\n**Molly Struve:**       Exactly. It's hard to get on stage by yourself, but if you spring three of your best friends up there with you, suddenly it's a lot more relaxing. And so, those are two things that we have done to really kind of make on-call suck less. And I've actually, I wrote a blog post on it because I think it's one of those things that a lot of devs find very stressful, and before we overhauled our on-call system, our devs hated it, and now they've completely bought into it, and they feel a sense of ownership over what they're supporting, and that goes a long way into making, like I said, on-call suck less, because it shouldn't be something that is a horrible experience. Sure, it might be hard at times, but you shouldn't dread it all the time.\n\n**Joel Hooks:**         Like any system, right? We can design our on-call system to be efficient and something that is useful and that nobody really dreads and it's just part of your job...\n\n**Molly Struve:**       Exactly.\n\n**Joel Hooks:**         ... or you can have something where it's essentially torturing and burning out a limited subset of your coworkers or employees.\n\n**Molly Struve:**       Yeah.\n\n**Joel Hooks:**         Yeah. So, if I want to build reliable and resilient systems, where do I start? If I'm sitting down to to build an app, what are the primary things that I need to take into consideration when I'm thinking about that?\n\n**Molly Struve:**       One of the first things, I think, when you're building an application, is first and foremost, as you're building it, you one, you want to kind of keep things as simple as possible. Never get overly complicated, because complicated code is where you'll usually run into issues in terms of scaling, and then in terms of when you bring other people on.\n\n**Molly Struve:**       In addition to that, as you're building an application, it can be very easy to kind of get into the weeds. You think, \"Oh, okay, I got my application, I want to build feature A.\" So, you build feature A. Then feature B comes in. You're like, \"Okay, I'm going to build feature B.\" So, you build feature B. Feature C comes in, you build that. A lot of times, if you're just focused on just the feature you're building, you'll lose the context of the overall application.\n\n**Molly Struve:**       And so, one of the easiest things you can do when you start building an application, is constantly taking a step back and looking at how all the pieces fit together, and thinking of that application as a whole. What that's going to allow you to do, it's going to allow you to think about things like scale, think about things like performance. It can be very easy to kind of get into the rabbit hole of thinking, \"Okay, I got feature A that I want to turn out, and as long as feature A is good and it works, then boom, we're good to go.\" But at the same time, you need to be stepping back and be like, \"Okay, we've got feature A, B, and C here. How do these all fit together? If they're all going at once, how does my database react to that? Can they all run together happily, or is there going to be some fighting over resources?\" So, keeping that big picture in mind is kind of one of the best things you can do as you are building an application.\n\n**Joel Hooks:**         So, how does documentation come into this? I assume that part of the idea would be also to knowledge share, right? Like knowledge transfer. Is documentation internally an important part of this?\n\n**Molly Struve:**       Oh my god. Documentation is huge, and it's one of those things where when you're small, especially at small companies, you just don't think about it. You've got five of you standing around and your computers, everyone kind of knows what's going on, and so, you don't think of docs. We didn't start thinking about it at Kenna until we probably had 10 plus engineers, and we started bringing on engineers quickly, and at that point we realized that there was a lot of knowledge that was up in our heads that we then had to get to all these new hires, and having to tell new hires over and over again the same information is not ideal when you're trying to grow a team quickly. So, that point is, that's when we realized, \"Okay, we got to start writing this down.\"\n\n**Molly Struve:**       So, what documentation does is one, it allows you to bring on people faster, and two, it avoids that issue of tribal knowledge, of having one person just have all of the knowledge in their head and it not written down. That's never good. You never know when someone's going to leave, you never know what's going to happen. And so, having that information written down is huge. And kind of one of the ways... I saw a talk at Ruby Conf last year, and this kind of helped kickstart us in terms of really getting our documentation up to date. One of the things the girl suggested was to put expiration dates on your documents.\n\n**Molly Struve:**       So, in all of our documentation, every document has an expiration on it and it's usually about three months out from when the document was written. Then it's the job of the developer, the next person that goes, if they look at that document and the expiration date has expired, it's their job to make sure everything on it is up to date and still relevant, and if it is, then they push the expiration date out again three months. And so, that really allows everybody to kind of participate in keeping docs up to date, and that, for us, has been huge in helping us one, keep the docs up to date, because we're growing and changing so quickly, and everyone's bought in to making sure we have sufficient docs.\n\n**Joel Hooks:**         I think for most people, the idea of documentation isn't a sexy or fun work that comes with being a developer, right? We all love puzzles, for the most part, developers I talk to like the puzzle aspect, and docs aren't really a puzzle, but they're so critical. I know we're a tiny team, and we have this handful of documentation, and when you go and somebody's no longer with the company or something, and then you go back and it's actually documented, it's like the most warming feeling, and the exact opposite is true when you go to something, you don't understand it, and there's no documentation, you just don't know what's going on. Everything is intentional in a system, every line of code was added intentionally by a human, and why?\n\n**Molly Struve:**       Exactly.\n\n**Joel Hooks:**         I know you have built some and work on internal tools, and there was something that really struck my interest that I've heard you speak about, and it's Mr. Radar. Can you tell me what Mr. Radar is and what that does for your company?\n\n**Molly Struve:**       So, Mr. Radar was built out of the need to monitor our data. We have your standard test suite, we have standard continuous integration set up, so every time code changes are made, we run the specs, we make sure everything passes, and then deploy the code. Well, as we were getting more and more data and more and more clients, we started realizing that our code working was only half the picture. The other half was the data, and making sure the data was correct. And so, early on we actually had some issues with the data being correct, and that is how Mr. Radar was born.\n\n**Molly Struve:**       What Mr. Radar does is it's basically a set of what we call antennas, and they run via a cron job in the background, and it basically goes into our databases and it checks on a bunch of different things to ensure that the data is correct, and anytime it finds data inconsistencies, it alerts us to those so that we can go and investigate them and figure out what caused them.\n\n**Joel Hooks:**         The impetus for building a custom tool, is it because there's nothing exists, or just the specific needs of your application and your users, or what motivates the building of a custom tool beyond just, like you said, you need to test for the data and whether it's accurate?\n\n**Molly Struve:**       What motivated it for us is that it was a pretty simple problem to solve. It really just involved, \"Okay, let's make a couple MySQL queries here. If we get numbers back we don't expect, well, trigger an alert.\" So, it wasn't something involved that we really needed a lot of something fancy for, it was simple enough that we wanted to create it ourselves, and then we would have full control over it, and we could kind of tweak it and do with it what we pleased. And so, I think that's what drove us to create it ourselves rather than going outside and looking for another solution. At the same time, we were also really small at that point, so you kind of want to do things as cheaply as possible, and like I said, because it was a simple tool, it was like, we'll just build it ourselves.\n\n**Joel Hooks:**         I try to be cognizant of the idea of not invented here. There are good ideas externally and we don't have to invent everything ourselves, but sometimes it just makes so much sense to build your own tools, and then, specifically, for the control, I'm a little bit of a control freak.\n\n**Molly Struve:**       Yeah.\n\n**Joel Hooks:**         Sometimes I just want to have full control of my platform or the tooling therein.\n\n**Molly Struve:**       Yeah.\n\n**Joel Hooks:**         When is the right time to break things out of a system? As it grows, like your system's growing, you are building a large application, and you start breaking pieces off, whether it's a tool like Mr. Robot, or extracting something into an external service. How do you go about that thought process and deciding when to do that sort of activity?\n\n**Molly Struve:**       So, that, I think, happens... It's different for everyone. At Kenna, we have done it four times. The first time we did we had code written that needed to get rewritten, and it had a very specific functionality that was very isolated in our application. And so, that's when we decided, \"Okay, we need to rewrite this code and it's already super isolated. Why not break it out?\" So, I think that's one kind of indication that you might have a service on your hands, is if you already have something that's naturally isolated in your code base, it's not reaching out and touching a bunch of things, that's kind of a good indication, like, \"Okay, maybe we could separate this.\"\n\n**Molly Struve:**       And then beyond that, a lot of it has been driven by performance and usability by the devs. So, usually when we hit a performance bottleneck somewhere, we'll kind of look at it... For example, say our main application, the deploys are taking too long because we have to deploy to 20 sidekick servers that are running. Okay. Well, what do those sidekick servers do? They're processing background data. Huh. Is that something we could separate so that our main application can deploy faster, and then we can do all of our data processing separately? When you get to bottlenecks like that, I think those can have a lot of impact on driving when you break things out.\n\n**Molly Struve:**       I'm definitely a big proponent of not over-complicating things and not just looking at a system and being like, \"Okay, how many pieces can we break that into?\" Because I think that leads to unnecessary complexity. I like when it happens more organically, and it feels more natural in that sense.\n\n**Joel Hooks:**         It adds complications to monitoring and being able to observe your overall system, like if you get into too tiny of pieces. It's like the right level of abstraction for the needs of the system, I would think.\n\n**Joel Hooks:**         So, to kind of switch topics here and close this out, what are your current favorite communities related to software development, on the internet?\n\n**Molly Struve:**       Oh, great question. So, my favorite is dev.to, and I recently started blogging on that back in December, and it's been fabulous. I've really enjoyed... Basically, the community in general is very approachable and just wonderful to work with. I've written some posts on there that were kind of hard to write and were very personal to me, and the response has been amazing. In addition to that, I also enjoy Twitter, which I think is kind of a surprise to a lot of people, because a lot of people think, \"Oh my god, there's so much crap on Twitter.\"\n\n**Joel Hooks:**         It's true.\n\n**Molly Struve:**       But I think if you are really cognizant of who you're following and who you're not, it can actually be a really great experience. Don't follow people who are negative, don't follow people if they're like raging politicians or something. I think if you just really focus, and you follow those that embrace your kind of ideals, and tweet about things you're interested in, which in my case it's software. My Twitter is purely software-driven. You look on my Instagram, you're going to see all ponies and dogs. You look at my Twitter, it's going to be all software. So, I think it's kind of what you make it, and if you're really cognizant about who you're following, you can actually kind of have a great experience on Twitter, in my opinion.\n\n**Joel Hooks:**         I love Twitter, too, and I also love dev.to, but Twitter to me, and this is how I explain it to people who maybe have a better time on Twitter, it's like a bonsai tree, and it's your space. People talk about, well you don't want to live necessarily in a bubble, and I think that's true to an extent, but also, your own personal happiness is important, too. So, the extent that the bubble helps you and you get what you need and want out of it, that's it. You don't have to follow celebrities or politicians, or you can use it to follow your community, which is how I've always used it and enjoy it as well.\n\n**Molly Struve:**       Yeah, definitely.\n\n**Joel Hooks:**         Well Molly, I really appreciate it. Thank you for taking the time to talk with me today. It was truly a pleasure, and look forward to seeing what you're up to next.\n\n**Molly Struve:**       Yes, thanks for having me.\n\n**Joel Hooks:**         Cheers.",
    "slug": "build-performant-and-reliable-applications-with-molly-struve",
    "description": "To executives, new features mean more money, but even if you had terrific features, they wouldn't be worth a thing if they only worked half the time. Reliability isn't something you want to put off until later after the project has grown, it will save you a lot of time and money if you factor it in from day one. Everyone has adapted to a speedy internet these days. Users leave if the site is taking more than even a few seconds to load. \n\nIt's easy to get overly focused on features while losing the context of the overall application. The first and foremost solid you can do future you is to keep things as simple as possible. Never get overly complicated, that's where you run into scaling troubles. Complexity also causes significant headaches when bringing other people on. \n\nIn addition to keeping complexity low, make sure documentation gets written and that it's kept up to date. A solution that Molly's company has put in place to keep the docs fresh is to give every document an expiration date three months out from when it gets written. When someone references the docs, they check if it's past the expiration date, if it is they go through and make sure that the information is still current, and afterward extending the expiration date another three months.  \n\n---\n\n### Transcript\n[\"Build Performant And Reliable Applications With Molly Struve\" Transcript](https://egghead.simplecast.com/episodes/build-performant-and-reliable-applications-with-molly-struve/transcript)\n\n### Quotes\n> \"To me, a site reliability engineer is a software engineer, but with their focus on performance and reliability.\"\n\n> \"So, it's a dev, but they've got a little bit of something extra in there that just helps them kind of step back and look at the whole system and ensure that it's performing and reliable.\"\n\n> \"There's only so much you can just attribute to the black box. Sometimes you actually got to go in there and figure out what's going on.\"\n\n> \"You can have all the great features in the world, but if they're only working 50% of the time, none of your clients are going to be happy.\"\n\n> \"A lot of times, if you're just focused on just the feature you're building, you'll lose the context of the overall application.\"\n\n\n### Resources\n- [Making On-Call Not Suck](https://dev.to/molly_struve/making-on-call-not-suck-490)\n- [What It Means To Be A Site Reliability Engineer](https://dev.to/molly_struve/what-it-means-to-be-a-site-reliability-engineer-32ki)\n- [Scaling Elasticsearch Part 1: How to Speed Up Indexing](https://dev.to/molly_struve/scaling-elasticsearch-part-1-how-to-speed-up-indexing-2pel)\n- [Scaling Elasticsearch Part 2: How to Speed Up Search](https://dev.to/molly_struve/scaling-elasticsearch-part-2-how-to-speed-up-search-53of)\n\n\n### Molly Struve\n- [Twitter](https://twitter.com/molly_struve)\n- [Github](https://github.com/mstruve)\n- [Dev.to](https://dev.to/molly_struve)\n- [LinkedIn](https://www.linkedin.com/in/mollystruve/)\n- [Website](https://www.mollystruve.com/)\n\n### Joel Hooks\n- [Twitter](https://twitter.com/jhooks)\n- [Website](https://joelhooks.com/)",
    "duration": 1890,
    "episode_number": 55,
    "contributors": [
      "Joel Hooks"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/1yjpw",
    "path": "/podcasts/build-performant-and-reliable-applications-with-molly-struve",
    "published_at": "September 6th, 2019",
    "url": "https://egghead.io/api/v1/podcasts/build-performant-and-reliable-applications-with-molly-struve",
    "edit_podcast_url": "https://egghead.io/podcasts/build-performant-and-reliable-applications-with-molly-struve/edit"
  },
  {
    "id": "podcasts-00000000000000000217",
    "title": "Learn To Debug Properly And Ask Better Questions With Justin Samuels",
    "summary": "Justin Samuels talks switching majors, debugging, asking questions, and representing Atlanta.",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/2f755328-50ea-46fe-845d-5bb7185ea768/podcast_joel_with_justin_samuels_edited_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/55d7f360-05c1-43af-9c2d-eb89e156734a/026c1dfa-50d9-41dc-8d54-c33481d3c0d2/logo.jpg",
    "simplecast_uid": "2f755328-50ea-46fe-845d-5bb7185ea768",
    "transcript": "**Joel Hooks:**         Hey Justin.\n\n**Justin Samuels:**     What's going on? What's going on? What's up?\n\n**Joel Hooks:**         How you doing today?\n\n**Justin Samuels:**     Good, man. Just can't complain, just making it. Another day, another dollar.\n\n**Joel Hooks:**         So I'm really excited, you're organizing a conference and I want to get into what you're doing in Atlanta, and what's going on with your conference, but I kind of wanted to take it back a second and just ask you, how did you get into web development? How did you become a web developer and what was your path?\n\n**Justin Samuels:**     I went the more traditional route, kind of. I went the college route where I started school at the University of New Haven in Connecticut. I started school as a chemistry major actually.\n\n**Joel Hooks:**         Oh, okay.\n\n**Justin Samuels:**     Yeah. So I was like completely off of the whole IT route. Just for some context, I did grow up in the MySpace days, so I used to be one of them kids who used to charge people to make themes and everything like that. I was just writing CSS and editing at the time, but I didn't really know that though. So a couple years later ... Not a couple years, but a whole decade after that, that's when I began school, and I was a chemistry major like I said. And I was like, \"Okay, this is cool and all, but I really can't picture myself doing this for the rest of my life.\"\n\n**Joel Hooks:**         Being a chemist, right?\n\n**Justin Samuels:**     Yeah. Because it got pretty boring. I was getting A's in the classes, but I was like, \"This is boring as hell to me.\"\n\n**Joel Hooks:**         Mm-hmm (affirmative).\n\n**Justin Samuels:**     So I ended up switching to business, and then I ended up switching schools to Mississippi State University. So after I switched there, I was in School of Business, and I remember I was like, \"Okay, this is cool but I don't really like this.\" Then I switched over to a major in culinary, and I was doing culinary, and I was like, \"This is cool as well, and-\"\n\n**Joel Hooks:**         You were really trying to find yourself, weren't you?\n\n**Justin Samuels:**     Yeah, man. So to make a long story short, I switched an additional three more times. And I recall the day, it was me and a friend named Chris Butler. And both of us were walking past this poster, and he was a computer engineer major at the time there. And the poster was like, \"Do you like to do CSS, and do you like to do HTML and everything?\" And I was like, \"Yeah, that sounds dope as hell.\" And I went and talked to my academic advisor and said, \"I want to switch to that.\" And it was business information systems. So I ended up switching into that, and I ended up getting a minor in computer science too.\n\n**Joel Hooks:**         Oh, okay. So what's business information systems? Is that like web development for business, or like enterprise web development? What is a business information system?\n\n**Justin Samuels:**     So I call it the art of business and computer science blended. So you're going to learn business-y stuff, like how to do like accounting, how to do payroll, how to do thread analysis. But at the same time, you're going to learn how to do like computer science-y things. You're going to learn how to program. You're going to learn how to be an analyst, things like that.\n\n**Justin Samuels:**     So you learn the middle ground, that way no one could really get over on you on either side of the coin. But the only issue is that while the business side, you learn a crap ton, the IT side of it or the program side you don't learn as thorough. So that's why I did the whole a minor in CS, so I could go back and forth with other engineers too.\n\n**Joel Hooks:**         Yeah. And then I know you worked a little bit on a master's degree, and you kind of switched to something described as instructional technology. So that's almost another flip of what you're pursuing and learning too. Is that true?\n\n**Justin Samuels:**     Yeah. So what happened with that was, I actually got employed by the school my first day after graduation.\n\n**Joel Hooks:**         Oh, nice.\n\n**Justin Samuels:**     Yeah. So they hired me one day after graduation as a full time web dev. I highly recommend to anybody listening, do not go to work ASAP after you graduate, because I about burned out.\n\n**Joel Hooks:**         Take a little time?\n\n**Justin Samuels:**     Yeah. I was burned out. I kid you not. I had graduated on a Friday. I began working that Monday, and honestly it's because I had bills to pay.\n\n**Joel Hooks:**         Yeah.\n\n**Justin Samuels:**     So once you graduate, you can't work for the school in the same capacity as prior, because I was a student worker in the IT department. So I started working there, and they were like, \"Hey, we like everybody who works for us to be highly educated, so why don't you get your master's degree?\" I was like, \"Nah, I'm done with school.\" And then they were like, \"Well it's free of charge.\" And I was like, \"Yeah-\"\n\n**Joel Hooks:**         \"Oh, okay.\"\n\n**Justin Samuels:**     Yeah. \"But I got to take a test, and I got a place in,\" and then they were like, \"No, you really don't got to. There's a couple fields that you could just choose to get into.\" So I was like, \"Okay, I got the business side down, I got the computer science side down, I need to get the IT side down now. I mean, not the IT, but the teaching IT side down.\"\n\n**Joel Hooks:**         Yeah, instructional technology, right?\n\n**Justin Samuels:**     Yeah. So I was like, \"Cool.\" I could kind of teach people now how to do things and how to use tech basically, which I enjoy doing to this day because I still mentor people in. Even when I was in school, I was a party association for computer machinery, and I was the head tutor for a good year and a half, I want to say.\n\n**Joel Hooks:**         It's a good combo though. Computers, business, and teaching people, and passing on information. I think it's a trifecta, right? It's a killer combo.\n\n**Justin Samuels:**     Yeah.\n\n**Joel Hooks:**         Yeah.\n\n**Justin Samuels:**     That was my goal, and I didn't complete it, because I ended up quitting that job and working for a private company now.\n\n**Joel Hooks:**         You're a web developer, and I suspect you have opinions, and I'm wondering, what are you using in terms of your stack now? What's your preferred set of tools?\n\n**Justin Samuels:**     Cool. Yeah, so at my job right now I do, React is on the front end of anything that we do. Back end wise, we use a C Sharp. So I do a lot of C Sharp, when I have to, but mostly my team keeps me on the front end of things. Other than that, I'm pretty open to everything else, man. I mean, I don't have no strong opinions on this language is better than this, or this or that. I will give a full transparency though that I am not a big fan of Angular, because I came from Angular One. So I began my journey, truly, when I was about to graduate, and I started in Angular. And I had terrible time in it. And yeah, that's how I discovered React. So I've been in React since 2014 about.\n\n**Joel Hooks:**         Yeah. So you were working in Angular, and then you see React, and it spoke to you. It felt better to you, I guess?\n\n**Justin Samuels:**     Yeah, I mean Angular, I feel like you had to learn so much of their own way of thinking, and I don't call it agnostic at all. I feel like you had to do it their way or the highway. Now I've heard that isn't true anymore, but I just haven't gone back to check it out. But I loved React, because I already knew JavaScript. So I was like, \"Hey, here's some tools that you could just wrap around your JavaScript and you could make things better.\" And they say, \"Oh, this makes complete sense.\"\n\n**Joel Hooks:**         Yeah. I've heard the argument Angular is more of a framework, where React is a toolkit, which I think the lines are so blurred. On Egghead, we actually call React a framework because ... Whatever. But at the same time, React gives you immense freedom with way less constraints. I think that's one of the big appeals.\n\n**Justin Samuels:**     Yeah. I mean that's very true. And for me, so going back to my friend, Chris Butler, he ran into an issue when he worked at Peavey. So if anybody don't know, Peavey is that guitar company that makes the amplifiers and all that other cool jazz.\n\n**Joel Hooks:**         Oh, okay. I seen them.\n\n**Justin Samuels:**     Yeah. And he actually engineered their app where it can talk across the wire, to where he could control a amplifier across the room or so. He was doing it all in Angular, and Angular has this feedback loop, and he couldn't get past the feedback loop. I think it's really called the digest loop. But when it came to React, React updates so quickly that he didn't run into that problem. And he was like, \"Yeah, the way they make these things called life cycle methods, it allows for things just to get done, and you don't got to worry about two way data bindings, or figure out which way the data's coming or which way the data's going. It just all in one uni direction pretty much.\n\n**Joel Hooks:**         Yeah. They gave us the idea of the virtual dom and dipping a virtual dom versus the idea of data binding, which was heavy in Angular One. And I think it feels like most frameworks are kind of doing the virtual dom, even if they present as binding, because View in particular, which is kind of the spiritual successor to Angular One. It's like Angular One, the good parts. It has a virtual [inaudible 00:09:19], but it still gives you that kind of feeling of binding.\n\n**Justin Samuels:**     Right. He explained it to me, and I was like, \"I kind of get what you're saying, but I don't really get it.\" And this is in 2014, January. So I come on React in its infancy days, and he was like, \"Think of a functional [inaudible 00:09:39] machine from micro processors class that we had.\" And I was like, \"Oh this makes complete sense.\" And that's when the light bulb gone off and I was like, \"Okay, I enjoy this now.\" So yeah.\n\n**Joel Hooks:**         Yeah. That's pretty cool when you can let ... Well, one to have a friend that that has been with you and can present that metaphor to you like that. That's pretty awesome. You go by @Thugdebugger on Twitter, and I've noticed a pattern and debugging is something that you are personally passionate about. Is that a fact?\n\n**Justin Samuels:**     Yeah, man.\n\n**Joel Hooks:**         So debugging's something that you enjoy personally, that's your skill set. You identify as a debugger.\n\n**Justin Samuels:**     Yeah.\n\n**Joel Hooks:**         So I only use Console Log to debug, and I was wondering how can I improve? I've been doing this a long time, I've had success as a developer, and I literally use Console Log every time. What am I missing out on? What should I do? How can I improve and grow as a developer? I'm old dude set in my ways, but I want to change and get better. What should I be doing? How can I improve that?\n\n**Justin Samuels:**     So the reason why I'm such a big advocate Authority debugger over the Console is because I feel like by time the Console prints, out you probably missed some critical data, or you probably missed some transition that you wouldn't have caught. I feel like when you use the debugger, that invokes a curiosity. It allows you to go into places that you wouldn't have even thought about. It also gives you a sneak peek of what's going on underneath the hood. I guarantee you if you ask people, \"Have you ever opened up React and actually checked out how it does its thing? Have you actually stepped through a life cycle method trying to figure out what's going on? And 80% or even 90% of people are going to be like, \"No, I really haven't ever thought about that.\"\n\n**Justin Samuels:**     But when you're using the debugger, you get the opportunity. And people are going to argue like, \"Well you could just go into the node module and check it out if you actually care that much,\" but where do you even know where to begin? When you use the debugger and you put these breakpoints in, it's going to guide you down a path, and you could start to really speak the framework ordeal language of what's going on. Like, \"Oh, here's why this is not working. Here's how the engine [inaudible 00:12:00] it to actually work. Here is what I'm trying to do,\" versus getting mad with your Console Log, and you're only seeing a tiny bit of data.\n\n**Joel Hooks:**         Yeah. I also use the debugger statement. So I will drop into the debugger, but then I'm doing it kind of ... I'm not using breakpoints and that kind of thing. And I know, I've seen modern development tools and they're amazing, and I wonder often if it's like you start at a certain point in kind of technology history, right? And you know, console log is what was there, but now we have this robust tool, but I don't touch those tools. And I'm wondering what's the kind of entry level when you get into that? Which browser do you think is the strongest right now in terms of debugging and tooling in that regard?\n\n**Justin Samuels:**     When people ask me how to use it, I always say start in a visual studio if you can, but typically, a visual studio code has a pretty good debugging setup.\n\n**Joel Hooks:**         Okay.\n\n**Justin Samuels:**     Where you can easily drop in break points on that particular line that you're trying to target. And then when the code executes, you could actually go in to that code in a environment that you feel comfortable with at that time. Versus trying to figure out how to do it in Chrome. I've seen people get confused when I try to explain to them in Chrome. You take the exact same experience and you put it in visual studio code people are like, \"This is much easier. I actually grasp this on what's going on.\"\n\n**Joel Hooks:**         Yeah, that's pretty cool. And honestly, I've never done that. So I've done it in Chrome, I've done it in Firefox and Safari, those tools. But I've never even dropped into a debugging session and VS code.\n\n**Justin Samuels:**     Yeah. And then the cool thing about VS code is they have that live share option now. So I could make a breakpoint on my end and not say, \"Damn it. I don't know what's going on. I need some help.\" And then I can say, \"Hey, Joel, can you chime in?\" And then you could actually watch that happen live.\n\n**Joel Hooks:**         Yeah. Get a live mutual debugging session going.\n\n**Justin Samuels:**     Right. And now you're like, \"Okay, we could actually inspect and actually see what's going on more thoroughly,\" versus with the console, you're going to catch some data, but you won't catch every single detail. And sometimes that's what it takes. Today, I was doing C Sharp. I haven't done C Sharp in God knows how long. So my team were like, \"Hey, we need you to do this.\" I'm like, \"Okay cool, I'll do it.\" And I began on the web app, where I just inspected a couple of elements, and I was like, \"Okay, here's what's happening from a JavaScript point of view. I need to figure out, after JavaScript passes it off, what happens on the C Sharp side.\" And I just honestly started dropping breakpoints, and walking down the code, line after line pretty much.\n\n**Joel Hooks:**         Yeah. And then you figure it out, and you get there quicker than you would. Obviously, I think quicker than you would if you were just trying to piece meal put log statements around and figure out what's going on. At that point, you're in the code, and you're able to to get a better vantage of the whole process.\n\n**Justin Samuels:**     Right. And it goes back to ... I have two senior engineers at my job that used to be on my team, and I used to not be a really big advocate for the debugger. But then they were like, \"Think about your feedback loop. Think about how much time you are taking to actually write the console log, get back on the page, execute that again.\" I'm like, \"Okay, yeah. That's very true.\" Versus going to the code, dropping the breakpoint, and then you hit the same breakpoint again, and again, and again. And the cool thing is that if you can catch the error, you could start tweaking it at that time, and then do it again and again.\n\n**Joel Hooks:**         Yeah, I feel like ... Because I used to do Action Script Three, and it was mostly really IDE based, I feel more than JavaScript is. Because the browser wasn't the issue. And I feel like I used debugging tools more then, but JavaScript, when I hopped into this world, was kind of ... Because of the disconnect between my editor and the browser, there's always been some friction there. But I feel like I'm missing out and I need to step that up and check out these VS code tools.\n\n**Justin Samuels:**     Man, that's crazy. You said Action Script? I haven't heard that name in a long time.\n\n**Joel Hooks:**         Yeah, rest in peace.\n\n**Justin Samuels:**     I mean, that's crazy. The other day I was at this meetup, the React ATL meetup, and I was talking to some people, and this guy said, \"Yeah, I'm a Flash dev.\" And I was like, \"What? You're a who dev?\"\n\n**Joel Hooks:**         Yeah, still?\n\n**Justin Samuels:**     Right. And when he had said it, I was like, \"Oh you mean past tense?\" And he was like, \"No, currently.\" And I was like, \"How? Where? Who?\" But then when you dig pretty deep, you could tell that Flash has such a crippling effect on the industry, because it's such a dependency. That there's a whole lot of companies who just couldn't get it completely out of their code base. So now, those are the people making $300,000 every single year.\n\n**Joel Hooks:**         Maybe I should have stuck with it. No, I'm pretty happy. I'm about to be honest.\n\n**Justin Samuels:**     Yeah. I'm pretty happy too. Because even in college, they taught us COBOL. So I do know COBOL too. And they're-\n\n**Joel Hooks:**         It's like they're trying to make people not like computers is the goal, sometimes I feel like. Who's going to ... COBOL is just like a history class I suppose, but it's still ...\n\n**Justin Samuels:**     Most people don't know this. Our school was one of the only couple schools left teaching COBOL, which they don't at this time. The program at MSU taught it because we have two big fields that use COBOL. Banking, and then the other ones is Dillard's, like the clothing manufacturer.\n\n**Joel Hooks:**         Yeah. Dillard's makes all their employees take COBOL training, all their developers. They still have to use it. So yeah, there's industry. There's people out there using it. But I just can't even imagine.\n\n**Justin Samuels:**     Yeah. I mean that was a way of giving us job security, quote unquote was like, \"Hey, if you can't find a job elsewhere, you can always get one with COBOL.\"\n\n**Joel Hooks:**         So what are you learning now? What's got you excited in terms of web development and new things that are happening?\n\n**Justin Samuels:**     I've been playing with this idea where it's called Dynamic Reducer Allocation.\n\n**Joel Hooks:**         Mm-hmm (affirmative).\n\n**Justin Samuels:**     So what I'm talking about is if you have two components on the screen, and you want to render a brand new component, which is the same incarnation of component A and B, how do you get component C to inherit the same exact actions as component A and B, but dynamically update the store inside of every ducts without causing conflicts for component A and component B?\n\n**Joel Hooks:**         It would almost be like syncing offline state to database state, it sounds like. It kind of reminds me of that in a way.\n\n**Justin Samuels:**     Yeah, because if you want the same actions ... Well if you fire the same action on component C, technically component A and component B, would be like, \"Oh, well I could talk about that action, or I could respond to that action.\" But if you do it on component C, you're like, \"No, it's only for component C, not for component A and B.\"\n\n**Justin Samuels:**     So I've been running into this problem at my job now and I'm like, \"Okay, how can I get past this?\" So I think I found a way, but that's really been the only thing that's keeping me up at night, on the tech side. On the other side of life, I've been reading some books on habits, and how to break habits, and how to improve your memory. And it's pretty cool, so.\n\n**Joel Hooks:**         Yeah, my favorite habit book in the last year or so, I love Power of Habit. It's kind of been out for a while, but there's Atomic Habits by James Clear. It just blew my mind when I listened to it on an audio book, and he narrates it and really good in general. But it's kind of like the successor to Power of Habit, which is kind of the classic habit book. I love reading about that kind of stuff too. Your brain's a muscle, right? How do we exercise it, and grow it, make it stronger?\n\n**Justin Samuels:**     That's exactly right.\n\n**Joel Hooks:**         So what's something you personally think you need to get better at as a web developer? In terms of broader skills, and how you approach your work.\n\n**Justin Samuels:**     Honestly, not being scared to say I don't know what you're talking about.\n\n**Joel Hooks:**         Yeah. That's hard.\n\n**Justin Samuels:**     Yeah. And I'm not scared per se, but I'm scared of not knowing what I don't know.\n\n**Joel Hooks:**         Being surprised, right? Something jumping out at you?\n\n**Justin Samuels:**     Yeah, because it's like ... So you'll always have three lanes, I call it. You either know what you do know, or you know what you don't know, or you don't know what you don't know. And I'm like, \"Okay, I could get past the first two.\" But the last category of you don't really know what you don't know is scary all the time.\n\n**Joel Hooks:**         Yeah. It's chaos, right?\n\n**Justin Samuels:**     Yeah. And I'm running into that problem now at my job, where I'm doing C Sharp, where I don't know what I don't know sometimes. And I'm like, \"Okay, how do I ask a question on what I don't know?\" It goes back to using the debugger again. I just drop breakpoints everywhere, and then I try to formulate what's going on. But for the most part it's hard, man, trying to figure it all out.\n\n**Joel Hooks:**         I think one of the things that's difficult, too, is also knowing when you should stop and just ask, right? When you should stop and tap somebody on the shoulder and ask. I like to figure things out on my own, but at the same time, when do you just stop doing that, and approach somebody that probably has the answer?\n\n**Justin Samuels:**     Yeah. Because at my job, I don't want to feel like a burden, per se. I have a good team. The team I work on ... So I'm the scrum master of the team, and we're a complete agile engineering force, where we do two week sprints right now. And I don't want to feel like I'm slowing down the team, so sometimes I get scared to ask, because I don't want to impede anybody else progress. But at the same time I'm like, \"Okay, if I do ask, what do I need to ask?\" And that's the hardest thing.\n\n**Joel Hooks:**         Asking a good question. Right?\n\n**Justin Samuels:**     Right. Because there is no such thing as a dumb question, but there are such a thing as questions that haven't been thoroughly vetted.\n\n**Joel Hooks:**         Yeah. My favorite resource, Stack Overflow, has an entire Wiki section devoted to asking good questions, and it's one of my favorite resources and I send it to people, just like, \"Hey just check this out, okay?\" Because there's two different ways. There's lots of ways to ask questions, and there's definitely good ways and there's bad ways, and it provides a framework for asking good questions. And it's funny, because in the process of asking a good question, and preparing to ask a good question, you can often answer your own question.\n\n**Justin Samuels:**     That's the funny thing, is that I feel like Stack Overflow gets a bad rap because of how you have to ask the question. A lot of people don't know, because they can see the polished side of me now, but I was one question out from being banned off of there. Because I would always ask questions, questions that obviously had answered. And back to my old friend, Chris Butler, he was like, \"Hey, you have to learn how to ask a question.\" And I was like, \"Well, I'm asking a question, people just don't want to answer it.\" He's like, \"No, no, no. You have to learn how to formulate a question that engineers are going to be able to be like, 'Oh, here's your problem.'\"\n\n**Justin Samuels:**     And I would tell people the exact same thing, like, \"Hey, have you checked the board on how to ask a question?\" And the usual response is, \"No, I don't get how come I have to.\" I'm like, \"Well, if you check the board first, then you would figure out how to ask a question so that you'll get the answer that you seek.\"\n\n**Joel Hooks:**         Yeah. And to me, it's the more I get comfortable with sales, and marketing, and that kind of thing, I think it's almost like a sales and marketing process. And it feels disconnected, but at the same time that's what you're ... You're trying to sell somebody on giving you some of their time to answer your question and-\n\n**Justin Samuels:**     That's very true.\n\n**Joel Hooks:**         ... And you're going to want to come back and be able to have the capital with them to ask again. Right? You want to be somebody that they're enthusiastic about helping, so you have to do your part to get to that point.\n\n**Justin Samuels:**     Right. Right.\n\n**Joel Hooks:**         So Atlanta ... I don't think people necessarily think of Atlanta and think of a tech hub, but it is in fact a metropolis, and there's a lot of tech going on, and you are bringing a conference to Atlanta next summer. And can you tell us about what you're doing, and what your conference is?\n\n**Justin Samuels:**     Man. So this is the part I get happy about, because-\n\n**Joel Hooks:**         Nice.\n\n**Justin Samuels:**     ... People are always like, \"Why ATL? You could've did it in Cali, you could of did it in Texas. Why ATL? I mean, even do it up North,\" and I'm like, \"If you come visit ATL, and you just hang out downtown for a couple of days, you could see the culture changing.\" You could see how enriched the culture already is, but you could see it moving in a more progressive manner to where I feel like Atlanta is the next ... I don't want to say Silicon Valley, but the next major tech hub.\n\n**Justin Samuels:**     But the cool thing is, I feel like it's going to be a NYC situation, where all the crossroads, or all the people of the of world are going to gather here. So I'm trying to get ahead of the curve, and I can already see it coming.\n\n**Joel Hooks:**         The conference is Render Atlanta, right?\n\n**Justin Samuels:**     Uh-huh (affirmative).\n\n**Joel Hooks:**         And what are the goals of your conference?\n\n**Justin Samuels:**     So the goals, honestly man, it's kind of personal, but at the same time it's about representing for ATL.\n\n**Joel Hooks:**         Mm-hmm (affirmative).\n\n**Justin Samuels:**     So I got tired of traveling, and going places to just go see a decent talk, or just to go hang out with other React engineers, because I do know that they're here, but we're so scattered. And people would always say stuff to me and like, \"Hey what's going on in ATL? Why isn't there anything going on there? I don't think ATL has all that great of engineers.\"\n\n**Justin Samuels:**     People will say stuff like this to me. And I will be like, \"No, you all just have never came. You're just judging a book by past history of it's in the South, so what can they have?\"\n\n**Justin Samuels:**     So I was like \"Okay, I'm going to go on this mission to bring awareness to what's going on in ATL,\" because like I said, we have great engineers, they're just in so many different neighborhoods of ATL. Because you got a lot of neighborhoods. You got Midtown, you got Buckhead, Five Points, I mean you have all over ATL.\n\n**Joel Hooks:**         Yeah, it's spread out.\n\n**Justin Samuels:**     Yeah, but I'm trying to bring everybody together. At the same time I was like, \"Well this is what I consider the cultural melting pot of the South,\" and there never has been a major React focus conference here. Of course, we got Connect Tech but that's like a conglomerate of 20 other things going on.\n\n**Joel Hooks:**         Yeah.\n\n**Justin Samuels:**     I was like, \"I want something that's going to bring awareness to ATL, that's going to show off the culture, that's also going to advocate for people that are under-represented in technology, because ATL has a huge population of minorities.\" So then, okay, I definitely want to include that too, but I want the best speakers possible. And just to give a shout out to my boy, Ken Wheeler, he was the one that honestly pushed me. Because he was like, \"Hey, why don't you do something in ATL? I mean I get that you know people, so you should probably leverage that.\" And I was like, \"That sounds expensive as hell, you know.\"\n\n**Joel Hooks:**         And like a lot of work too. Expensive and a lot of work.\n\n**Justin Samuels:**     Right. But I'm not afraid of the work part, because I used to do a video game tournaments.\n\n**Joel Hooks:**         Oh okay, cool. You've done this before.\n\n**Justin Samuels:**     Yeah. So I have a event planning background, and I did do Smash tournaments and [inaudible 00:28:49] tournament, so I get the whole planning side of it.\n\n**Joel Hooks:**         Yeah. The logistics, you got that covered.\n\n**Justin Samuels:**     Right. But the whole .... It's much easier to keep Smash players fed, because you give them cookies and pizza.\n\n**Joel Hooks:**         Doritos.\n\n**Justin Samuels:**     Right, it's much easier. Engineers are like doctors, they want a world class service.\n\n**Joel Hooks:**         They want cuisine.\n\n**Justin Samuels:**     ... And even if they don't want that, I don't want them to feel like they're coming to some conference that, \"Okay, they skipped on everything else, but we got good talks.\"\n\n**Joel Hooks:**         Yeah. You want to put on a good show, right? You want the whole thing to be an experience for people, and really showcase what Atlanta has to offer, and what's going on in the ATL.\n\n**Justin Samuels:**     Exactly. Because ATL man, give them an additional five more years, and it's going to be crazy. It's going to be a boom. I mean, they were in the top of five for the new Amazon office. So I mean, they have the potential. We have a tiny bit more work to do, but I think ATL is on the right path. And I'm even a member at this private club called The Gathering Spot, where it's a place for like-minded entrepreneurs to come gather.\n\n**Justin Samuels:**     And every time I go in there, I'm always running into somebody of prominence that I can talk to, and I'm like, \"Hey, here's what I'm trying to do, can you help me?\" And it's always a yes, because I want to help ATL be this beaming icon of progress.\n\n**Justin Samuels:**     That was the goal, man, was to have a world class conference with the best speakers, which if you ask me, I could tell you now, because by the time this comes out, we'll have dropped it, and with the best atmosphere possible, and go above and beyond so that people could know what they should expect from every other conference.\n\n**Justin Samuels:**     And at the same time hammer home, \"Hey, this is ATL. We are a progressive city filled with some of the best engineers that you know, a majority are from under represented groups. Come here, help us, hire us, and we could do great things.\"\n\n**Joel Hooks:**         Yeah, that's awesome Justin. And I think the work you're doing with Render ATL, and I'm just looking forward to this conference quite a bit and seeing what you get up to even after that. And I really appreciate you taking the time out of your day to come chat with me. It's been great. Thank you very much.\n\n**Justin Samuels:**     No problem bro, no problem.",
    "slug": "learn-to-debug-properly-and-ask-better-questions-with-justin-samuels",
    "description": "How many of us still almost exclusively use `console.log()` when trying to debug something? It's okay, plenty of us do it that way, but you could be saving yourself a lot of pain and suffering by using the debugger and stepping through the execution. \n\nThere are several advantages to using a debugger, you get a tighter feedback loop, a lot more information, and it allows you to go into places you wouldn't have even thought about. \n\nNow debugging can take you far, but there are times when we need another human to help us. Asking questions is anxiety-inducing, \"what if this is something I should already know?\" \"am I being annoying?\" \"am I interrupting them from doing something important?\" \n\nThe key is to remember that there is no such thing as a dumb question, but there are questions that haven't been thoroughly vetted. Stack overflow has an [excellent wiki](https://stackoverflow.com/help/how-to-ask) on asking good questions. Learn how to form good questions, and everything will end up being okay!\n\nJustin is doing good work in bringing awareness to Atlanta's rich culture and advocating for people who are under-represented in technology. Be sure to check out the [Render(ATL)](https://www.renderatl.com/) conference upcoming in May 2020.\n\n---\n### Transcript\n[\"Learn To Debug Properly And Ask Better Questions With Justin Samuels\" Transcript](https://egghead.simplecast.com/episodes/learn-to-debug-properly-and-ask-better-questions-with-justin-samuels/transcript)\n\n### Quotes\n> \"It's a good combo though. Computers, business, and teaching people, and passing on information. I think it's a trifecta, right? It's a killer combo.\"\n\n> \"But I loved React, because I already knew JavaScript. So it was like, 'Hey, here's some tools that you could just wrap around your JavaScript and you could make things better.'\"\n\n> \"I feel like when you use the debugger, that invokes a curiosity. It allows you to go into places that you wouldn't have even thought about. It also gives you a sneak peek of what's going on underneath the hood.\"\n\n> \"So you'll always have three lanes, I call it. You either know what you do know, or you know what you don't know, or you don't know what you don't know. And I'm like, 'Okay, I could get past the first two.' But the last category of you don't really know what you don't know is scary all the time.\"\n\n> \"You have to learn how to formulate a question that engineers are going to be able to be like, 'Oh, here's your problem.'\"\n\n### Resources\n- [The Power of Habit](https://www.amazon.com/Power-Habit-What-Life-Business/dp/081298160X)\n- [Atomic Habits](https://jamesclear.com/atomic-habits)\n- [Render(ATL)](https://t.co/KJGSTBeqVM?amp=1)\n- [Stack Overflow: How do I ask a good question?](https://stackoverflow.com/help/how-to-ask)\n\n### Justin Samuels\n- [Twitter](https://twitter.com/ThugDebugger)\n- [Dev.to](https://dev.to/thugdebugger)\n- [LinkedIn](https://www.linkedin.com/in/justinsamuels/)\n- [Stack Overflow](https://stackoverflow.com/users/4110635/justin-e-samuels)\n\n### Joel Hooks\n- [Twitter](https://twitter.com/jhooks)\n- [Website](https://joelhooks.com/)",
    "duration": 1882,
    "episode_number": 54,
    "contributors": [
      "Joel Hooks"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/1qv89",
    "path": "/podcasts/learn-to-debug-properly-and-ask-better-questions-with-justin-samuels",
    "published_at": "August 30th, 2019",
    "url": "https://egghead.io/api/v1/podcasts/learn-to-debug-properly-and-ask-better-questions-with-justin-samuels",
    "edit_podcast_url": "https://egghead.io/podcasts/learn-to-debug-properly-and-ask-better-questions-with-justin-samuels/edit"
  },
  {
    "id": "podcasts-00000000000000000216",
    "title": "The Elegant System of Management with Will Larson",
    "summary": "Will Larson talks about the moral dilemmas and decisions that managers have to make.",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/ebcc2179-9607-42de-8f51-e931b5d761ef/podcast_joel_with_will_larson_v1_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/55d7f360-05c1-43af-9c2d-eb89e156734a/d8c94dbb-f198-4b9e-ad06-15cc6b036c98/logo.jpg",
    "simplecast_uid": "ebcc2179-9607-42de-8f51-e931b5d761ef",
    "transcript": "<p><strong>Joel Hooks:</strong>         Hey Will.</p><p><strong>Will Larson:</strong>        Hey Joel, how are you?</p><p><strong>Joel Hooks:</strong>         I'm doing very well. Thank you, yourself?</p><p><strong>Will Larson:</strong>        I'm doing very well. Excited to get to have a conversation with the individual who gave me my first $500 I made working in technology.</p><p><strong>Joel Hooks:</strong>         Isn't that weird? I remember it because I was just starting too and you helped me with this Django project. That was my first application I ever wrote and I distinctly remember you asking me for $15 an hour and I insisted on paying you more.</p><p><strong>Will Larson:</strong>        I think I deliver some sort of MooTools contents which is the first time I've thought about MooTools and probably like 10 plus years and I don't think it worked very well. I think I delivered that full $15 of value, I don't know if I got up to 50 but I certainly learned a lot along the way.</p><p><strong>Joel Hooks:</strong>         I mean, effectively assigned you with rebuilding the Django admin panel as a UI front end. It was really weird, here's the funny thing that that software actually still lives. Let's sleep with that every night, the fact that that software still lives. It's good to finally talk to you, we worked together a long time ago, over a decade ago. We were both starting out and then we've both had our careers and come to where we are now. What I'm really excited to talk to you today is about your book An Elegant Puzzle, which I've read and quite enjoyed. Which is about systems of engineering management. Can you tell me what systems of engineering management means?</p><p><strong>Will Larson:</strong>        I can certainly try. First, getting to the title on the book took a lot of bad ideas. I think the first 10 to 15 were pretty bad and actually we didn't get to the title until I wrote the introduction to the book and it included the term an elegant puzzle and someone was like, \"Your title is terrible, why don't you use this?\" I was like, \"Yeah, that's definitely better than what I have right now. Then we use that.\" That was where the title came from. Fortunately, part of writing a book is people who are smarter than you give you feedback. That definitely helped a lot in that case.</p><p><strong>Will Larson:</strong>        In terms of the idea about the subtitle Systems of Engineering Management, I've really found that a lot of management decisions in engineering in particular don't think about the longterm consequences and the longterm components that are interacting. Something that really changed my life for the better is when I read Donella Meadows, Thinking in Systems: A Primer. It gave me this vocabulary in the set of tools to think about longterm consequences and the stuff that I already had these intuitions about as able to actually talk about and codify in a really powerful way. That's where a lot of my approach has come from and that's where the title came from as well.</p><p><strong>Joel Hooks:</strong>         Going with that, what is a system?</p><p><strong>Will Larson:</strong>        That's a good question. I think there's probably like 15 different definitions that we could go with, but maybe the two I would go with that I think are useful. First an academic answer, which is I think systems are basically a reservoir of state and flows in and out of those reservoirs to other reservoirs. A good example on the technology side might be you have a bunch of servers and then they're getting requests and they come in at a certain rate and they get processed and completed at a certain rate. If they come in too much faster than they go out, then you are run out of capacity to service them, that could be like one simple system.</p><p><strong>Will Larson:</strong>        On the people side though, one way to think about it could be your hiring funnel is a system. Your onboarding funnel is a system, your conversion funnel. If you think about users purchasing coming to your site, considering purchasing and actually purchasing. These are all funnels where they have people in different states that are transitioning across them in certain ways. The powerful thing is when you start looking at across the system, it forces you to try to think about not just I want to double sales and have that target. It forces you to try to make a change upstream in the system and understand how that would get you to double its sales. That's a really powerful forcing function to actually understand the depth, the size of work you want versus just focusing on the outcome that you'd be really excited about.</p><p><strong>Joel Hooks:</strong>         I think it's interesting because you talk about hiring as a system and onboarding as a system and sales as a system. In fact, they're all factors in a larger system, right? If we make any changes to these, it affects the others.</p><p><strong>Will Larson:</strong>        Every system it turns out is just like a box in a larger system. I think one of the... to your point, one of the interesting problems is how do you model something useful when the reality is just extraordinarily complicated. To your point, our ability to hire in part depends on our availability to actually get people to buy our product because we have more money. We have a brand that people are excited about people are passionate about the products and so it does all connect. I think, if you look at the full complexity it gets pretty overwhelming. Trying to figure out how to simplify into something that is both useful but also possible to reason about I think is one the specialist skills of systems thinking that you have to develop over repeated failure over the years.</p><p><strong>Joel Hooks:</strong>         Systems thinking to me has been, I don't know, it's one of those things like when you get a little bit of it and you start to buy into this concept of systems thinking, you start to see it everywhere, right? Like everything we do, everything on this planet or even our universe, right? To expand it to the very far out there. It's part of the system and there're actors and things change and we can model and we can try to make predictions. Then, just kind of chaos every day, individual actors making decisions that there's no predicting that. It's really interesting, then at the same time to me it's practically the only way I want to think anymore.</p><p><strong>Will Larson:</strong>        I think prediction is hard, when I think about prediction I think about what is the Isaac Asimov Foundation Series where they develop a mathematical foundation for prediction about the future. I don't think systems thinking helps us predict super well, but I do you think it helps us make choices. For me, the place where I first learned about systems thinking very on time ago was really from Rachel Carson and Silent Spring, which is a look at how pollution in ecosystems surprisingly small amounts can poison the entire ecosystem as like larger fish eat smaller fish, et cetera. I think that that was a thing that was before she did all that research was very hard to understand. It seemed impossible to predict, but then after doing that it became like very easy to reason about. I do think there're cases where these tools make it possible to understand and understanding can lead to some predictive properties anywhere.</p><p><strong>Joel Hooks:</strong>         I wanted to rewind a little bit because we jumped right into your book. I want to talk about that more a bit, I'm curious because this book is about management and you are, and one could assume that he knows something about management. You have experience in this area. I was wondering, I know you started out as a front end developer and I'm wondering what's the path that you took to go from being an individual contributor into managing software and engineers?</p><p><strong>Will Larson:</strong>        To your point, my first full time technical work as an engineer was being a front end developer at Yahoo. Worked on this, actually a product, I have a lot of love for it still, but I was Yahoo builder on search service Yahoo BOSS. It was a pretty cool way to expose Yahoo search index indexes to anyone who wanted to build on top of that, we had an API you could use, et cetera. I did that for about a year and then as I got into my second year there're folks started asking you to work on lots of other pieces of the system. I ended up working in a bit of everything on my second year on that project. Then, Yahoo going through a weird set of times, a bunch of layoffs, trying to understand its place in the industry.</p><p><strong>Will Larson:</strong>        I went to Digg and I think the day before I started at Digg or the Friday before I started on a Monday, the CEO left very suddenly and my friend called me was like, \"It's okay. It's going to be fine.\" The classic Silicon Valley like myth, which the worst thing that can possibly happen is your equity be worth like hundreds of thousands of dollars. That's just the downside risk. It could be way bigger than that and you're not very smart, you're younger, and you're like, \"This seems like a great opportunity.\" You jump in any way. It ended up really, I think maybe three to four months later, I was managing a team, not through any intention to be managing a team, but just because there were a bunch of folks leaving the company.</p><p><strong>Will Larson:</strong>        Some of the advice I give folks, which I think no one has ever appreciated this advice but I keep trying anyway, is that I really think that companies that are struggling, there's a lot of opportunity. Sometimes it's not easy opportunity, and it's not structured super well, or it's not like packaged up, or you just get to have an easy entry into management. It takes a lot of privilege to have the opportunity to fail as badly as I think did in my first management role there. A year into my Digg experience, I was managing the entire engineering team, which was also much smaller than it was when I started, but still I was the only engineering manager at the company and that was how I started. It was hugely informative. It was really the foundation of a lot of what I've learned and my approach which was there's not someone teaching you, there's not an easy path. You just have to go learn by trying, thinking, going back to the principles and trying to figure out how to make it all come together.</p><p><strong>Joel Hooks:</strong>         You have an appendix in your book that talks about all of the books that you've read. I assume that probably started when you realized that managing humans was going to be on your list of activities.</p><p><strong>Will Larson:</strong>        Yeah, I had no idea I was going to become a manager when I joined Digg. Interestingly, I joined Digg so that was my third year in the industry and I wasn't even a senior engineer. I was hired as just like a mid level engineer. I've actually never had the title of senior engineer, I made this unintentional lateral transition at that point and I didn't have the idea I was going to be one and I had no intention to be one. Once you are, I think something that I feel really strongly as this obligation to the team and you are really impacting folks lives in a tremendous way. To me that's a pretty heavy responsibility and I wanted to try to educate myself. Although, it took, it really feels only after six years of management, I started to have the basics down. I think the first five or six years were fairly rocky for everyone involved and I appreciate the folks that have taught me so much, particularly the folks that taught me while letting me try to manage them along the way.</p><p><strong>Joel Hooks:</strong>         Yeah, being patient with you. They're being managed, but they're being patient with you as a manager and helping you to succeed like a mutual respect and an ebb and flow last name.</p><p><strong>Will Larson:</strong>        I think one of the really interesting things is that when we go into school, there's this sense that authorities are these all knowing perfect figures that are responsible for everything. I think in a school that's sort of true, that's a very controlled environment, but in work your managers are often less experienced than you. They're often, dealing with some really complicated stuff in their personal lives. They're often, dealing with all these circumstances, like maybe their peers are struggling or maybe their manager is having a rough time for various reasons. It's easy to put all of this responsibility onto them, but I think looking at them as people who are going through their own life and at their own speed with their own circumstances has been for me really important. Early on I had this impossibly high bar for the managers that I worked with. I think that that was pretty bad for both of us until I started to understand they were people too.</p><p><strong>Joel Hooks:</strong>         You mentioned senior engineers and the title of senior engineer. I think about that that term a lot, because mainly I think about the inverse of that where people are described as junior engineers and sometimes it feels maybe a little condescending, but what is in your mind, how do you define a senior engineer?</p><p><strong>Will Larson:</strong>        First in terms of junior, I've been trying to move to early career as a replacement and that that feels a little bit better. Not perfect, but I think more accurate.</p><p><strong>Joel Hooks:</strong>         Language is hard.</p><p><strong>Will Larson:</strong>        It's a hard but also mobile or it keeps moving and as you learn the right ways there that are wrong again and you have to continue to stay humble enough to keep changing how you speak even though it's not the way you grew up or the way you relearn five years ago or even the way you relearned last year. It's constantly moving target, which is hard but I think important to come to terms with. I think what does a senior engineer and what does a staff engineer and what does a principal engineer and what is a distinguished engineer? These are really, really challenging questions, right?</p><p><strong>Will Larson:</strong>        For me what a senior engineer is wanting a career level. This might be for most companies the majority of folks will advance to this level but might not advance beyond it. Something that you could develop mastery at for decades in your career is one aspect of senior. I think some companies use it in the sense and some companies don't, but to me a senior engineer ought to be able to take an arbitrarily confusing and poorly framed problem, frame it into something that's solvable and useful and lead the execution against it of, like a modest size team, maybe a team of like eight.</p><p><strong>Will Larson:</strong>        To me, if you can do all of those things, then I think you're absolutely a senior engineer. Then how many different types of problems should a senior engineer be able to solve to fit that criteria? I don't actually have a great rule of thumb for that. I think we want our senior engineers, certainly at Stripe that'd be quite broad, but still we have folks who are extraordinarily strong front end engineers and we wouldn't ask them to work on a distributed infrastructure problem, but they're still easily senior engineers in terms of their technical depth, their experience and their ability to take these poorly framed problems and turns them into something useful.</p><p><strong>Joel Hooks:</strong>         I think another aspect to me of a senior engineer, and it can relate directly to experience sure, but then there's also this idea that it's somebody that... it's a leadership role and you're able to mentor, and you're able to teach and help other people. It seems like that, that's probably an important part of at least some job descriptions that include senior in the title.</p><p><strong>Will Larson:</strong>        Mentorship, teaching, being a multiplier, making the team better with you than without. There was obviously the Twitter out outrage about this 10x engineer.</p><p><strong>Joel Hooks:</strong>         Again, it's a recycled outrage, but yeah recently.</p><p><strong>Will Larson:</strong>        You got to keep up, it's like fashion every seven years it's going to be back for you.</p><p><strong>Joel Hooks:</strong>         Yeah, exactly. The bell bottoms of Twitter outrage.</p><p><strong>Will Larson:</strong>        Yeah, that's the bell bottoms of Twitter outrage. Love it. I think there is that engineer is a real person. That engineer who comes in sucks up the oxygen or folks around them become less effective, but they become extremely effective. We've probably all worked with someone, not even just engineers like you see this person in any career. I think there is that person who is effective in part by making others less effective. I think we have to be careful of that person and not think of them as pure individual, \"excellence\" in that way as senior. Instead, to your point, making the overall some of the system, the team larger.</p><p><strong>Joel Hooks:</strong>         I think there's a section title on your book that is kill the hero programmer, which is not literal. I think that speaks to this point, I was wondering what do you mean when you say, we need to kill the hero programmer?</p><p><strong>Will Larson:</strong>        This is the oldest piece in my book, I first wrote that 10 years ago. I think if I was writing that today, I probably would not have used the term kill. I think I tried to find a less stark way to frame the point. The idea is that I think you find these really well meaning folks who have been captured by their company or their organization or their process in a way where they have to keep working harder and harder to sustain basic function and they don't have enough time to think and to solve the fundamental issue which is causing them to have to work harder and harder. Which is creating them as a single point of execution, a single point of failure. They get put in this really terrible spot where their lives are basically consumed by their work. They also get this outpouring of credit and love from the company or at least often the leadership which views them as this essential individual.</p><p><strong>Will Larson:</strong>        I've been in a lot of situations and I think, I've personally been in that situation myself as the hero. Where you feel like you're carrying it or your assistant office or you're maybe atlas is a better phrase, the world on your shoulders and you think you're doing a great thing and then you're actually breaking the system around you. The idea behind the article is how do we help folks who are doing this amazing work who are trying so hard to help the company or the team or the environment, but are actually undermining the system and themselves realize that and how do we avoid putting them in that situation and keeping them there.</p><p><strong>Joel Hooks:</strong>         It relates to the idea of the 10x engineer and that we've taken this hero and we put them on a pedestal, but then we were actually requiring them to carry this weight. When in fact and even if they are contributing at that level, it's not healthy and it's definitely not healthy over longterm and it might not even be where they want to be in terms of their career, just the lifestyle that comes along with it.</p><p><strong>Will Larson:</strong>        I look at the differences in the 10x engineer and the hero is that the 10x engineer, I think, sometimes they have with this identity as the person who is going to do it all or I think the hero tends to be more of an accident where they pulled into the role. I think you're right that the overlap here is pretty strong.</p><p><strong>Joel Hooks:</strong>         Yeah. Well, the hero is somebody that is maybe identified as a 10x engineer and given the responsibility as such, but didn't really ask for it.</p><p><strong>Will Larson:</strong>        The hero and the 10x engineer as well are this precursor to burnout culture, which is the obvious consequence. I think one of the downsides of folks changing jobs every couple of years is that you can often hide the signs of burnout for two years and then folks don't understand the consequences longterm when people disappear or they go, they're just switching jobs. In reality what you've done is like basically crushed this person's spirit for the moment and they're off like recuperating somewhere in private.</p><p><strong>Joel Hooks:</strong>         Yeah. Squeeze the joy out of the whole thing. Because it's great, and this job can be amazing and solving puzzles constantly is a really wonderful privilege that we get to experience. Then you can take that too far and burnout is real.</p><p><strong>Will Larson:</strong>        To your point, I think what you just described there about the job being amazing is one of the interesting challenges here where you know by and large folks working in software and particularly folks working in Silicon Valley and software or at a successful company like yours are truly some of the most privileged people in America, one of the most privileged countries in the world. Yet they still do have real challenges here created by burnout and figuring out how to have that conversation in a way where we can acknowledge that while also acknowledging the privilege that we're standing upon is I think always a difficult line to it to navigate.</p><p><strong>Joel Hooks:</strong>         I think this really leads to a question I had about the description that you put forth of management as an ethical and or moral profession. I was wondering if you could expand on that and maybe tell me why you consider management to be an ethical moral profession.</p><p><strong>Will Larson:</strong>        To me, what it means for a profession to be ethical is that your decisions matter and they matter in a very real way. For example, when you decide who to promote, I think there's a couple of different ways you could think about that. One way which is very pragmatic is that you promote people based on who you think will leave if they don't get promoted. That is optimizing for retention is I guess one way you might describe that, but then the consequences that you have, the folks who are doing the work you want, the folks who are not demanding are effectively getting punished by not getting promoted. You get into the spot where the people who are doing what you ask them to do are disproportionately disadvantaged. You've created a system where the suckers lose and the suckers here are people like me or people like you or people who have this strong sense of duty to their work.</p><p><strong>Will Larson:</strong>        When I think of management as an ethical profession, I think about it in terms of how do we take accountability for the systems and the behaviors that we put out into the world and make sure that we're creating the justice and the outcomes of our work and not just results. I think results come in line with justice in a lot of companies but I think there're ways to get results without justice in ways to get justice without results. The difficult part of management is finding the way to get both. That to me is where the elegant puzzle component of management really comes into play is trying to find a way to get both justice and results on your teams and in your company.</p><p><strong>Joel Hooks:</strong>         As a manager or even as an independent contributor like incentives play a part in all of this, right? We have incentives to keep people in particular positions or retention. There're incentives to take somebody that cares and leverage that caring to expand their position to meet our business goals and that sort of thing. I'm wondering, how do we manage that? How do we manage incentives and put in the right incentives as managers or people that are contributing to a project?</p><p><strong>Will Larson:</strong>        Part of incentives is that there is real scarcity and so you can't just pay everyone as much as they want without a certain consequence here. Budget, usually you don't have enough roles for everyone that wants to have large roles. This is most true for management roles where there are certain properties that are a card to take. For example, I want to get experience managing managers, there's only so many manager roles that manage managers. I'm working talking about impact in different ways to create this ongoing larger and larger role as larger and larger impact. At certain points there're just constraints that are actually limited. How do you assign those? Is to me, like a big part of that.</p><p><strong>Will Larson:</strong>        I think part of this is you have to let people know honestly and openly about the opportunities that there are and the opportunities have to be aligned with what the company needs. Sometimes I think that means folks won't be able to stay with you at your company and that's okay. Where this gets tricky though is the financial incentives. I think a lot of companies with these stock options and the short exercise periods, you can get into like pretty perverse scenarios where folks can't get the opportunity they want, but they're still doing work of value to the company and they personally feel like they can't leave because the financial loss often just perceived financial loss is too high.</p><p><strong>Will Larson:</strong>        I think that's in particular where a lot of companies, I think optimize their financial compensation around not losing folks, like how do we retain folks? They don't necessarily optimize it for folks being impactful and engaged. I think Netflix is a good example of the ladder where they have not gone towards the option model but instead focus on short term cash comp and rewarding folks while they're there, but also in a way where it's cheap for folks to leave if it's not working out for them.</p><p><strong>Joel Hooks:</strong>         Yeah, that cut ties quick. It goes either way like you can leave, we'll cut you, but we'll also, while you're here you're going to get paid and treated very well.</p><p><strong>Will Larson:</strong>        Well, although something really interesting about the Netflix model that I didn't really understand is part of the reason it works and part of the reason that their engineers are very productive is they really don't spend much time on mentorship, on training by virtue of only hiring later career folks into the company. There are certain elements of that I think work because of the can tradeoffs they've made, but they're pretty extreme tradeoffs I think not most folks are interested in making.</p><p><strong>Joel Hooks:</strong>         Something you discussed and this is related to company culture speaking of that is the idea of opportunity and membership. This is I think the idea of building an inclusive organization where everybody gets opportunity and membership. I'm wondering what are your favorite ways to build a more inclusive workplace with both opportunity to membership for people that work there.</p><p><strong>Will Larson:</strong>        When you start thinking about inclusion and diversity, I think we're a lot of folks start is this idea of how do we hire more folks from underrepresented minorities and more women into the company. Then you often get stuck on this, \"Ah, if we could just increase top of funnel.\" I think there's a lot of ways to increase top of funnel home. Cold sourcing is the most effective one that I've personally found, but events, lots of ways to do it. I think this is taking the easy way out because you're looking at these short term measureables and you do need to do that. This is critical work, but it's only one piece of it and ultimately the success in terms of thinking about an inclusive organization is that folks from any background can come and can be continued to get promoted and rewarded for the work and to feel like they belong to the environment at the same time.</p><p><strong>Will Larson:</strong>        I started thinking about inclusion in terms of, as you described, access to opportunity and then access to membership. For access to opportunity this has been the one that I spent the most time on over the last two years. I've learned I think a fair amount about one anti-pattern you'll see at some companies is that every time there's a critical initiative, like the same two or three people get pulled into it. It's always Sara. It's always like Jeremy or something. It's always the same person getting pulled in. People were like, \"I want to do that, but I can't get access to it.\" Then this is the hero pattern exposing as an inequality across the company for other folks, because most people aren't the hero. How do you create the possibility for other folks to participate but in a way that's also safe where you don't have, you do have to get the work done. It's not okay for just anyone who wants to do it to get these critical projects. You need someone who have confidence can do it.</p><p><strong>Will Larson:</strong>        We've worked on building this selection process where we send out publicly letting people apply, we give them time to apply so they can talk with their manager, talk to their peers and that's outside of the company to get a sense about whether it's the right time for them. We explain the level of commitment and then we ask them to privately apply to see me or whoever's running the process. Then we have a selection criteria to pick the folks, and we give feedback to each person who applies and can double check, double confirm with the person who we choose that they're willing to take on the project, say like an architecture group or something. Leading architecture group something like that.</p><p><strong>Will Larson:</strong>        This has been really powerful because all of a sudden people are aware of these projects. I think they're aware of the downsides of the projects where I think when you only see the glamor, you don't see the risk, the level of effort, the amount of time on the tight timelines or whatnot. Also, it allows us to instrument and measure the cardinality of folks getting these projects and actually understand is this a problem or not? When we started one of our senior engineer leadership groups, one of their goals, one of the metrics they measure themselves against was increasing the number of distinct people leading important projects. That goal and measuring it was only possible because of this selection process we put together.</p><p><strong>Will Larson:</strong>        I think that's been really powerful, it didn't work super well initially we've had to iterate on it a couple of times. For example, I thought people would just apply what I've learned you really have to go out and privately nudge everyone who wants to apply. If you don't personally invite someone to apply they probably won't. It has been different people have different risk tolerances and you have to be thoughtful about that and make sure you encourage folks who might have a higher risk for a certain type of project to take it on.</p><p><strong>Joel Hooks:</strong>         I would assume if you don't do the nudging then you get the usual suspects so to speak.</p><p><strong>Will Larson:</strong>        It is not that effective if you don't do the nudging and it's also time consuming. If you don't do it, if you don't do the nudging it's both slower and it doesn't actually work. It's pretty easy to decide it's a terrible process at all.</p><p><strong>Joel Hooks:</strong>         It's just broken.</p><p><strong>Will Larson:</strong>        Yeah, throw it away.</p><p><strong>Joel Hooks:</strong>         Hiring us is hard in general, I see the technical interview that comes up so much in terms of people just hating it. I think mostly they're railing on the idea of the whiteboard interview or are these high pressure quiz like game show style interview processes, which still exist and are hopefully moving away from that. Is it similar to what you're talking about in terms of opportunity is it like internally for projects, but then externally when we're hiring. Because hiring is hard on both sides, it's hard for candidates, it's hard for firms and organizations to do it. How are you working on making that process better?</p><p><strong>Will Larson:</strong>        I agree with you, I think hiring is hard on all dimensions. I was talking to someone recently, they were, how do I find the company I want to join? Part of the conversation we had that I thought was quite interesting is that if you look at how often women are underrepresented minority is that company they're applying to versus how white men often that company is. On one hand you see a huge amount of back channel exploration trying to understand and then the other you often see effectively know research and attempting to understand. I think it's interesting how the security and privilege of one of those situations makes it possible to not that the company that you're applying too much because you're confident that'll probably work out and if it doesn't you can just switch to another. On seeing how different those approaches are has been really informative to me as well as I've gotten further in time management career and understanding how hiring impacts different communities so, so, so differently.</p><p><strong>Will Larson:</strong>        In terms of how we work on hiring, to me the most important thing for any endeavor is having feedback loops to make sure you're getting better. For example, very early on like five, six years ago, our interviews didn't have rubrics. As we debriefed on trying to understand whether the interviews had gone well or not getting aligned was extremely hard. From that process we realized we need rubrics for every single interview, they should be numerical. They should have four or five points with clear criteria that are objective, and we can use those to start having a shared vocabulary about the performance when choose interviews. Then we iterated on each of the rubrics over time to narrow in and to get more and more consistent.</p><p><strong>Will Larson:</strong>        Then another one is you can still have people who are inconsistent across interviewers. Then, we rolled out this candidate review system where we have folks who review all the feedback, and look for inconsistencies. Then we can go coach folks who are out of alignment with a rubric. We can also see places where the rubrics just aren't working well for us. Layering in these feedback mechanisms where you have a learning process that can keep getting better has been the most important system in terms of the access to opportunity component of it. I think rubrics are quite important, I think having mechanisms where we can see what the rubrics are not getting applied consistently is quite important. Then also just whenever folks decline, we try to do a decline, a post decline call with them and learn what they decided turned them to pick a different company to go with. Although, that's obviously the power dynamics in that situation or are pretty weird where folks often just don't give you the full perspective on why they might not choose to work at a given company.</p><p><strong>Joel Hooks:</strong>         Can you give me an example of a rubric? For myself, I'm just curious what would be a simple rubric that you would use in this process?</p><p><strong>Will Larson:</strong>        We redid our manager of manager interview loop maybe six or seven, maybe nine months ago. Who knows, time flies I'm not good with dates. We were thinking about do we think about in particular folks who have dealt with rapidly growing organizations. A rubric here might be a one hand have never dealt with a team that shrunk or grew, have only dealt with small static size teams and that might be like a one. Then a four might be, has dealt with a team that has grown rapidly at least 50% year over year and they can speak to the metrics showing how they did that in a healthy, sustainable way without burning out the team and that could be the top of the line. They'd have gradients in between with specific accomplishments that they've made or approaches that they demonstrated. For example, anyone with money can grow a team really quickly.</p><p><strong>Will Larson:</strong>        That's not like a four, it's just like hired a great abandon with no foresight is not the goal but instead of being able to talk to the counter pressures were they part of our rubrics. In fact, like an example of not hiring us fast as someone wanted them to and instead being able to explain how they paced the hiring in a thoughtful, effective way.</p><p><strong>Joel Hooks:</strong>         I mean the mass hiring can be, that just gives me that runs cold shivers down my spine actually, just even thinking about it. I need low scale, like small teams that's where I'm best at. I've never had to experience the hyper growth of a successful startup or I guess a potentially successful startup in some cases.</p><p><strong>Will Larson:</strong>        Well, I mean it seems like you're doing something right. It seems, I guess maybe you don't think of yourself as a startup which I think is a particular term that means a lot of things for a lot of people, but clearly you've been able to scale the business really well over time without hiring a ton of folks to do it, which to me seems like even more effective.</p><p><strong>Joel Hooks:</strong>         We're totally not growth oriented we're oblique in a lot of our approaches, just by nature kind of a slow simmer is how we're approaching and it's been interesting. Like you said when you were thrown into management, I had the same experience, right? Like I don't know how to run a business or manage humans and had to learn on the job and it's ups and downs, but overall it's working out pretty well. I want to know about instrumentation of a hiring funnel because this is something that I hadn't, this is the first time I'd heard of this idea. I've heard of instrumentation and software where we're sending data so we can analyze performance. I assume it's similar, but how do you instrument your hiring funnel so that you get valuable metrics back that you can actually use to improve that process?</p><p><strong>Will Larson:</strong>        There's a category of software called Application Tracking Systems like ATS and Greenhouse is one, Lever is another. Those are the two really big ones and I think one of the upsides of these is they support the high end of easy automation. The other upside, which I think is even larger is they actually set up workloads you can instrument and what's happening along the way. How many people are sourced, how many people are referrals, how many people pass the phone screen, fill the phone screen and you have the whole conversion funnel all the way through. Then I think that that gets you 80% of the way there. I think these ATS is trying to keep the data in, which can be a little bit tricky to actually get like good data out of it. You can definitely things like GDPR for example have complicated some of the things you're able to do with your data.</p><p><strong>Will Larson:</strong>        In general, that's 80 or 90% but it's not the entirety of it and that's where you need a system on the other side. Maybe it's your learning management system or your LMS or maybe it's your workday setup or maybe it's a spreadsheet, maybe it's anything but some system where you don't just end the metrics at higher. I think it's really important to first there's like, looking at candidate success, I find this like a little bit hard to get enough data from those companies. They can actually say like, \"This person is a strong performer and there's enough of them.\" You can reach significance to say that this interview loop is or is not effective or something. You can eventually do that at a certain scale, but most companies aren't aren't that size. You can instead start instrumenting like how long did it take them to get to their third pull requests with more than 15 lines of code change or something like some sort of metric around being spun up.</p><p><strong>Will Larson:</strong>        I think that's really powerful because it helps you understand your hiring rate in large part depends on your ability to ramp people up effectively. If you're able to ramp people up quickly, then those people can quickly start training other people and if not, you can't. I really think the hiring funnel that every company should at minimum track through being ramped up to be effective.</p><p><strong>Joel Hooks:</strong>         As a systems and data modeling nerd Stripe must be just an amazing like test bed for all of this information and data and process and just learning and growing in that way, I would think.</p><p><strong>Will Larson:</strong>        Yeah. Any fast growing company, but particularly it's a lot easier when you're fast growing on the way up. I think when I joined Digg was fast growing on the way down and that was less instructive in this regard. Although, also interesting to see how systems like fail to scale down, but really any fast growing company I think is the best place in the world to learn quickly about systems and how they work in reality and not just in principle.</p><p><strong>Joel Hooks:</strong>         My outside offers duration is that it wouldn't be just like any, and that Stripe is special in several different ways. I'm looking at your book, and I'm looking at what this company is doing and I'm so totally like floored because this doesn't make sense, right? Like the Stripe press doesn't, I think it's like an oblique strategy, right? It doesn't really make a lot of sense but it's amazing. Your book is amazing and Tyler Cohen's book is amazing. I just look at this company from the outside and I've read the hiring is done in their cohorts and they start every couple of weeks and they're significant, right? Like non-trivial amounts of people being hired to like feed this global engine of this company that changed my life for one, but I don't know. It's interesting, my Stripe fanboy spiel a little bit.</p><p><strong>Will Larson:</strong>        There's probably 50 people joining every two weeks or something that might even be low. It's humbling to see just how many folks are joining us at this point. It's really shocking considering where we were when I joined not that long ago.</p><p><strong>Joel Hooks:</strong>         Yeah, it's cool. I'm curious about this idea of building a community of learning both inside of the workplace and outside of the workplace, and what that means and how we as participants can help facilitate that sort of thing.</p><p><strong>Will Larson:</strong>        First thinking about the inside versus outside of workplace trade off. I think one of the interesting things about becoming more senior in a large company is that you're not really allowed to express the negative feelings you have. You really have to find a way to contain those. It's not very inspiring for you to be complaining in front of your team a lot. You have to find the most positive version of the truth that is still the truth and really try to stick to that.</p><p><strong>Will Larson:</strong>        I think that to me why as you get more senior having folks outside of the company is so incredibly helpful. Where you are able to be, \"Hey, we're doing this. This doesn't seem right, what do you think?\" People are like, \"No, that's how it works everywhere. You'll just got to get over it.\" Or like, \"No, that that one actually is pretty weird. That you should probably push back on more than you are.\" Just this grounding sounding board where you can go and get feedback from folks that you're not getting the day to day feedback from. Just like a different era with different perspective for you. I found that incredibly helpful. This is something for myself I've worked pretty hard to cultivate or the last couple of years I realized at one point I didn't have much of a support network in this regard of peers who are just doing similar work.</p><p><strong>Will Larson:</strong>        I've been reaching out, pretty intentionally to one or two a quarter over the last couple of years just trying to find and develop these relationships so that I have them when I need advice, need perspective. If there is one thing, if there was only one piece of advice I can give myself like 10 years ago would have been to start doing this then not trying to pick it up now. It is easier when you've been in the industry longer you know more folks to introduce you to people. I really think if you get good at cold email of asking one really short crisp question, that's a good question you can meet anyone. It's a superpower to write an email that people actually respond to, but it's one you can learn pretty easily if you put a lot of effort into it.</p><p><strong>Will Larson:</strong>        That's the external component, internally I think so many companies are so focused on getting done what they today, this week, this quarter that they don't invest into this community and this idea of longterm learning. To me that's what really makes a company longterm sustainable for you, is that you are doing and learning new things every 18, every 24 month. Where you don't have to switch companies or even necessarily switch roles because what you're able to learn continues to grow with you and around you. To me these manager meetings where we meet every two weeks to discuss an interesting topic, and we can have off sites. We're picking up... we have a couple of reading a book reading groups already and we're picking up another one.</p><p><strong>Will Larson:</strong>        There's all these different ways like paper reading groups where you talk about interesting architecture papers or really anything and it doesn't have to be technical. It can be management oriented. It can be about the industry that your company's in. Just getting folks to break out of the day to day mastery of what they're good at and get back into this learning mindset of engaging with something they aren't super familiar with.</p><p><strong>Joel Hooks:</strong>         Yeah, I agree with that completely. It's important and I think just important as a human to keep learning and growing and pushing the boundaries as well.</p><p><strong>Will Larson:</strong>        Something I've been thinking about a lot for the last year is that I think in Silicon Valley in particular, but in tech in general, part of, we talked about senior engineers before, part of the getting the senior title, often four or five years into your career. I think a lot of folks think they're done after four years, but really it's just the beginning. There's so much more to learn about so many things that I think are really gratifying to keep spending time engaging with and not calcifying at that point.</p><p><strong>Joel Hooks:</strong>         Yeah, and it's amazing. I think, I'm always amazed by the level of information and just cool stuff there is to learn and discover.</p><p><strong>Will Larson:</strong>        It's endless.</p><p><strong>Joel Hooks:</strong>         Yeah. Well, I really appreciate you taking the time out of your day to chat with me. It was great, thank you very much.</p><p><strong>Will Larson:</strong>        Likewise, it's a real pleasure. I hope to do it again sometime soon.</p><p><strong>Joel Hooks:</strong>         Cheers.</p>",
    "slug": "the-elegant-system-of-management-with-will-larson",
    "description": "<p>Everything is a system, and every system is a box in another larger system. It's up to managers to think in systems to make choices and understand their consequences. The manager has an obligation to their team. The decisions of managers make a tremendous impact on folk's lives.</p><p>But managers are only human.</p><p>\"When we go into school there's kind of this sense that authorities are these all-knowing kind of perfect figures that are responsible for everything.\" The reality is that managers are humans that are dealing with their circumstances. It's easy to put all of the responsibility on them, but they need to be seen as people.</p><p>People fail. Managers aren't the only people burdened with responsibility. There's the \"10x Engineer\" or \"The Hero Programmer,\" that end up with severe burnout.</p><p>Managing is an ethical and moral profession. Managers have to make ethical decisions in regards to deciding who gets promoted, fired, given a raise. How do we get justice and results? That's what makes management an elegant puzzle.</p><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/the-elegant-system-of-management-with-will-larson/transcript\">\"The Elegant System of Management - with Will Larson\" Transcript</a></p><h3>Episode Quotes</h3><blockquote><p>\"At companies that are struggling there is a lot of opportunity. And sometimes it's not easy opportunity, and it's not structured super well it's not packaged up, or you just get to have an easy entry into management.\"</p></blockquote><blockquote><p>\"There's not someone teaching you there's not an easy path. You just have to go learn by trying, thinking, um going back to the principles and trying to figure out how to make it all come together.\"</p></blockquote><blockquote><p>\"When we go into school there's kind of this sense that authorities are these all-knowing kind of perfect figures that are responsible for everything.\"</p></blockquote><blockquote><p>\"Really any fast-growing company is the best place in the world to learn quickly about systems and how they work in reality.\"</p></blockquote><blockquote><p>\"if you get good at the cold email of asking one short, crisp question that's a good question you can meet anyone.\"</p></blockquote><h3>Resources</h3><ul><li><a href=\"https://www.amazon.com/Elegant-Puzzle-Systems-Engineering-Management/dp/1732265186\">An Elegant Puzzle: Systems of Engineering Management</a></li><li><a href=\"https://www.amazon.com/Thinking-Systems-Donella-H-Meadows/dp/1603580557\">Thinking in Systems: A Primer</a></li><li><a href=\"http://www.greenhouse.io/\">Greenhouse.io</a></li></ul><h3>Will Larson</h3><ul><li><a href=\"https://twitter.com/Lethain?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor\">Twitter</a></li><li><a href=\"https://lethain.com\">Website</a></li></ul><h3>Joel Hooks</h3><ul><li><a href=\"https://twitter.com/jhooks\">Twitter</a></li><li><a href=\"https://joelhooks.com/\">Website</a></li></ul>",
    "duration": 2620,
    "episode_number": 53,
    "contributors": [
      "Joel Hooks"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/1zcax",
    "path": "/podcasts/the-elegant-system-of-management-with-will-larson",
    "published_at": "August 26th, 2019",
    "url": "https://egghead.io/api/v1/podcasts/the-elegant-system-of-management-with-will-larson",
    "edit_podcast_url": "https://egghead.io/podcasts/the-elegant-system-of-management-with-will-larson/edit"
  },
  {
    "id": "podcasts-00000000000000000215",
    "title": "Putting Emphasis on User Outcomes with Marisa Morby",
    "summary": "Marisa Morby talks about what she does as a product manager.",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/56f27b51-ea14-49ee-8e67-c958f46d5160/egghead_podcast_joel_with_marisa_morby_v1_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/55d7f360-05c1-43af-9c2d-eb89e156734a/bb260af7-8f8f-40a6-b575-25dc4c50a384/logo.jpg",
    "simplecast_uid": "56f27b51-ea14-49ee-8e67-c958f46d5160",
    "transcript": "<p><strong>Joel Hooks:</strong>         Hi Marisa.</p><p><strong>Marisa Morby:</strong>       Hey Joel.</p><p><strong>Joel Hooks:</strong>         How are you doing today?</p><p><strong>Marisa Morby:</strong>       I'm pretty good. Enjoying the sunshine. How are you?</p><p><strong>Joel Hooks:</strong>         I'm doing well. I'm really excited to talk to you because I want to talk about project and product management and some ideas about process and building software from that angle, but first, I wanted to ask you a question about trees and community and what we can learn from trees and how they interact with one another.</p><p><strong>Marisa Morby:</strong>       I can talk for many, many minutes about that.</p><p><strong>Joel Hooks:</strong>         Nice.</p><p><strong>Marisa Morby:</strong>       I'll keep it short. Trees in the community are fantastic and wonderful, and I love them. I recently participated in an event where we went and counted the trees in local parks and also made sure that their health was good by measuring their height and stuff like that. From a livability standpoint, they've done studies that show when people have green spaces and trees and are able to get outside, the city is happier. The people are happier. They walk more and they're just overall healthier, but the other thing about trees is that they also perform and can create a neural network with each other.</p><p><strong>Marisa Morby:</strong>       They talk to each other just like we talk to each other. I just think they're absolutely fascinating. They have so many similarities to how our own society has built up and we don't even realize it, because we can't hear them talking. We don't know how that all works exactly, but the way that they help one another is really similar to the ways that human societies help one another. Just having them around and being able to have them in your community just to help make your air cleaner, your wildlife healthier, and you healthier is fantastic. If I could, I just go plant a tree every day like rogue gardening.</p><p><strong>Joel Hooks:</strong>         I actually heard recently there's climate change is probably one of the biggest issues that humanity's ever faced. I read that one of the biggest like single impacts we can have on a global scale is planting a trillion trees.</p><p><strong>Marisa Morby:</strong>       Yup. Yeah. I read that article too, and I think we need to do it and creating natural forests with the trees that are supposed to be there also helps make that area stronger. It makes the soil stronger, the air stronger. I wish we could do that. I would love to be able to do that, plant a trillion trees.</p><p><strong>Joel Hooks:</strong>         It seems achievable. Generally speaking in terms of what we can do, planting trees doesn't seem some sort of unrealistic or something that people would even complain about. This is something we can do, and we can do for the earth and it just makes sense because who doesn't like trees? Whoever that is, I don't want to be friends with them to begin with.</p><p><strong>Marisa Morby:</strong>       I would agree with that. I would agree with that.</p><p><strong>Joel Hooks:</strong>         Oh, I hate trees. That's really just not a position.</p><p><strong>Marisa Morby:</strong>       It's like, \"I hate trees.\" Well, you're a bad person. Clearly, the conversation is over now. We don't need to speak any further.</p><p><strong>Joel Hooks:</strong>         Slowly back out of the room. I want to talk to you about developing products. You are a product manager for GatsbyJS, which is a project I'm super excited about. We're big on it at Egghead in general. We're rewriting our entire application in Gatsby, which is a neat challenge and I'm interested in it. You've been a consultant in the past, so that switch from being a consultant and providing services to working on a product. I was wondering how was that different? What's the difference between focusing on a product versus being a consultant?</p><p><strong>Marisa Morby:</strong>       The main difference is how you're able to have an impact, I think. Just from a higher level, as a consultant, you get to have the ability to go in and say, \"Okay, for my previous experience, this is what I've seen work, and you get to help implement something that will hopefully make the business run a bit smoother and be able to make everybody's life a little bit easier.\" That is always helpful and feels great. I think the difference is when you're doing that in a company and not as a service, you have such a granular ability to see what's happening on a level that it's hard to do from a consulting standpoint because there's just never enough time.</p><p><strong>Joel Hooks:</strong>         You're swooping in.</p><p><strong>Marisa Morby:</strong>       You're swooping in. You're looking at it from a high level, and you're assessing the problems and saying, \"Okay, here's what I see and here are the fixes that I think we can implement,\" but honestly, once you're in it and you're doing it yourself, you come in and you make changes and you make updates and you try to make it better, but then at some point, it becomes so granular that you also become part of the process. You're not looking at it from far away anymore. You're making these granular decisions that it makes it hard to step back and look at the big picture sometimes.</p><p><strong>Joel Hooks:</strong>         Like when they say you're too close to the problem, I guess in a good way, in a bad way, I think it's sometimes, right? At Egghead, I have my depth of knowledge because I've been working on this single product for six years. It's a lot different than when I'd have a six-month engagement and I'd drop in and try to help a company either fix a problem or increase velocity or whatever.</p><p><strong>Marisa Morby:</strong>       You can't see the forest for the trees as they'd say, but I think that that is one of the biggest things. It's a challenge trying to step back once you're in it and you know that it's playing in your mind constantly, all of the things that you have to do, the different intricacies of the product. Sometimes, it makes it more challenging to think through stuff just because it's all there and you know too much.</p><p><strong>Joel Hooks:</strong>         Well, it's hard like scoping. The scope of the problem is the approach is infinite, sometimes it feels like. It is finite, but that's just the feeling that you get. We have the idea. There's product management. You're a product manager, and then there's project management. What's the difference between product and project management?</p><p><strong>Marisa Morby:</strong>       That is a really good one. I get that a lot. I think that they overlap. Everything blurs together because the whole goal is to be able to move work forward. I would say the distinct difference is that a product manager is responsible for understanding what needs to be done and why it needs to be done, and communicating that expectation and vision to stakeholders and to the rest of the team so that they understand what they need to do and why. I think from a project management standpoint, it's that person's job to help make sure that it stays on the rails, so making sure that the work is actually moving forward and that follow follow-ups are happening and that it's coming together as a cohesive thing.</p><p><strong>Marisa Morby:</strong>       Not necessarily, it's not the what we're doing or why we're doing it, but it's the when and the status of it. At Gatsby, I do product management but there's also elements of project management as well. I just had a call today about some project management stuff because you have to have it to be able to drive stuff forward. It's such an integral part of a business.</p><p><strong>Joel Hooks:</strong>         You overlap to the extent that sometimes you're going to have to wear both of those hats, I would feel.</p><p><strong>Marisa Morby:</strong>       Definitely.</p><p><strong>Joel Hooks:</strong>         As a product manager, I know user outcomes. We want to understand the problems of our users, and we want to provide solutions for them. What does that mean when we say we're focusing on outcomes for users?</p><p><strong>Marisa Morby:</strong>       When we say we're focusing on outcomes for users, we want to think about the ultimate thing that they're going to do. We want to think about instead of the actions of how they're doing it, we want to understand the ultimate outcome. I talked about this a little bit in relation to bike pathways. A lot of times when we think about connecting a system, we think only about, \"Oh well, all these systems are connected, and because of that, it's good.\" We have these bike pathways in Portland, where I am, and they always tell like, \"Oh, well we have all of these bike pathways and however many miles, like 100 miles of bike pathways in Portland.\"</p><p><strong>Marisa Morby:</strong>       It sounds very impressive, but they're talking about a metric which we tend to think about. When we're speaking about customers and products, we think about metrics like, \"What are they doing in the product? What are they clicking and things like that?\" We don't think about the outcome. Well, what are they ultimately trying to do? What actions are they trying to complete? In the scenario or the example of the bike paths, we think about, \"Okay, well all of these roads are connected and that's great because there's 100 miles of bike pathways.\"</p><p><strong>Marisa Morby:</strong>       What we don't think about is where do they go? Where are people trying to go? How are they using it and what outcome are they trying to accomplish? A lot of times, people are trying to say go to work and there may be 100 miles of bike path, but if those bike paths don't connect, they exist but they're not helpful. When we don't think about the outcome and if we don't hone in on that and really understand what people are trying to do and trying to achieve, we can focus in on the wrong thing.</p><p><strong>Marisa Morby:</strong>       It's easy to then admit or come in and think, \"Ah, I'm victorious. I've done this amazing thing,\" without actually making sure that the outcome, the thing that people need to do can be accomplished in a way that is helpful and an elegant solution.</p><p><strong>Joel Hooks:</strong>         How do you figure out what the outcomes are? Is it something we can just intuit by observation, or what do we do to figure that problem out and figure out where the users want to go on their paths?</p><p><strong>Marisa Morby:</strong>       I do it a lot with the user research. That's something that we love to do at GatsbyJS is research to understand where people are going. There's also some design heuristics that you can use. Now that software is such a normal and integral part of our life, we have patterns and habits that we tend to exhibit when we're using software as well. There are certain outcomes that we can... I wouldn't say intuit, but we have so much past data from people using software and how they use it that we're able to set up heuristics as well.</p><p><strong>Marisa Morby:</strong>       We know that people are going to navigate to a certain part of the page in order to close out a tab, or we know that they're going to look in a certain area of the screen in order to find the menu. Maybe they need to do that in order to achieve their outcome, and so we're able to actually put that in place, but ultimately for me, I like to have a deep understanding of the problem in order to figure out what the outcome is.</p><p><strong>Marisa Morby:</strong>       That means talking to people that even if they're not using our product yet or they haven't heard about it, understanding their problems and the root of some of the pains that they're having helps us know what outcomes we should put out there for them by understanding the pain that they're having right now.</p><p><strong>Joel Hooks:</strong>         When should we start talking to folks?</p><p><strong>Marisa Morby:</strong>       All the time, as soon as you can. I think people assume research is this very regimented formal process. What we don't understand is that we do research all the time. Every single time we talk to someone, we're conducting some type of research because we're trying to learn about another person or help them. Either way, we are getting more information and understanding more and more about that person's motivations and pains and needs. I don't think that there is a time that you can say, \"Oh yes, now we will bring in the research crew, and they will come in and they will ask all of the good questions.\"</p><p><strong>Marisa Morby:</strong>       We should start that from the very beginning and just bake it in with our conversations and realize that even if we don't feel like we're doing research, because we're just having a conversation, we are constantly learning and taking this in. We're starting with research from the very beginning.</p><p><strong>Joel Hooks:</strong>         When you hear the word research, like the brain, my brain will go instantly to lab coats and white papers and peer review and scientific journals. I don't feel like that's the kind of research we're talking about at all. I mean, that's research but it doesn't have to be so formal and academic.</p><p><strong>Marisa Morby:</strong>       To me, research is just learning. It's learning more about people and learning more about their motivations. When I say research, I honestly envision a conversation. Just a conversation that you'd have even if it's informal with a friend or if it's in a business case with someone that maybe is thinking about using your product or has heard about your product and has asked you a question, all of that is research. It just doesn't really feel like it because it feels like a very normal part of human life.</p><p><strong>Joel Hooks:</strong>         It's like asking versus assuming too, because we assume so much. I assume every single day. That's part of it. You were talking about heuristics, so these things that we just air quotes, no, but we're also making assumptions then versus user testing and user interviews and these sorts of things.</p><p><strong>Marisa Morby:</strong>       Being able to listen and also ask dumb questions that seem.... because it's really easy to make assumptions, especially about when we're talking to people in software particularly, because we're both pretty close to software and so we make assumptions that, \"Oh well, I do it this way so maybe they do it this way too,\" and so being willing to ask the questions that seem silly and sit there and listen to the reasoning behind it without having that preconceived notion or coming in with an assumption, I think, is one of the most important things we can do.</p><p><strong>Marisa Morby:</strong>       It feels funny to ask a question that you feel like you know the answer to, but when you stop and listen and let people talk, you learn so much about how they're thinking and how they're solving their own problems in ways that you may not have thought of.</p><p><strong>Joel Hooks:</strong>         Erika Hall's Just Enough Research is one of my favorite books. It's so thin, and I feel like everybody that is involved with software or anything honestly, it's just a really good book about the human side and having the conversation, the asking versus assuming. I really love that book a lot. Should software developers be involved in the research process? Is that something that we should be doing? I feel like developers do research all the time. We're always solving our technical problems.</p><p><strong>Joel Hooks:</strong>         When we're in there Googling and stack overflowing and all that fun stuff, that is active research. It's not user research. I'm wondering how do developers get into that, and should they be involved in the research process?</p><p><strong>Marisa Morby:</strong>       I personally think they should be involved. We at Gatsby, we involve engineers on the process as well. I think that as long as you are creating a safe space and have a moderator for the participants to be able to have a little bit more structured conversation, if you have more than one person in the room, it's a fantastic idea to have engineers in there. When we've had people do usability or use interviews at Gatsby and we've had some of our engineers come in and listen in by random interview like this just the other day.</p><p><strong>Marisa Morby:</strong>       You, as an engineer, there are questions that engineers can ask that maybe I wouldn't know. They hear something that maybe I wouldn't pick up on. It's that idea of two heads are better than one. They understand the intricacies of some of those problems better than anyone because they're working on it all the time, and so having them in there to listen and offer their knowledge and their experience and then ask those really pointed questions has been invaluable. I think involving engineers in that is fantastic to do from the beginning.</p><p><strong>Marisa Morby:</strong>       Then once you get into usability, it's great to have engineers be able to see how people go through a product that they've helped create too, because it helps build empathy and understanding. Also, we all know hat frustration of when you can't find something or you're like rage clicking on something that won't work, and experiencing that as an engineer when you see someone doing that in the product you've helped create, it just creates more of a human feel to it.</p><p><strong>Joel Hooks:</strong>         It also creates a lot of,\"Oh shit,\" type moments where you're like, \"Wait, oh no.\"</p><p><strong>Marisa Morby:</strong>       I always watch people. Sometimes, you can see videos like usability videos too. You watch them going around the screen with their mouse and you're like, \"No, no, what are you doing? The button is right there.\"</p><p><strong>Joel Hooks:</strong>         No. No. No.</p><p><strong>Marisa Morby:</strong>       What are you doing?</p><p><strong>Joel Hooks:</strong>         Click it. Click it.</p><p><strong>Marisa Morby:</strong>       Just do it. Just click it.</p><p><strong>Joel Hooks:</strong>         I've been in an organization and we're user testing and user research and literally only one, and I wish we did it more. I wish we could say we've done more than zero but we don't do it enough. We don't do enough research, I don't feel. I've only been at one organization where it was agile and we rolled in user testing. At the end of every sprint, we do our whole retrospective. Then we'd watch a curated selection of the user testing from the previous sprint. It was amazing. The entire team would watch these things and we weren't participating live-</p><p><strong>Marisa Morby:</strong>       I love that.</p><p><strong>Joel Hooks:</strong>         ... but we would the curated videos. It was amazing actually as a team watching people use these features that they just created a few weeks ago and and seeing what people were dealing with in terms of using what we had created.</p><p><strong>Marisa Morby:</strong>       I love the idea of doing it after a sprint, so it's still fresh in your mind, but you're far enough away from it that you can look at it with not fresh eyes, but your brain has had time to relax a little bit. You're not thinking about the problem that you've worked on that day. I love that idea. I think that's fantastic. I love looking at the user like the videos too, and just watching what people are doing is fascinating.</p><p><strong>Joel Hooks:</strong>         You can learn so much. I think it should be an essential part of any long-term project for sure. You're a product manager. How do you figure out what to work on? How do we know what we want to work on next? I assume that that comes partly from research, but then we're building backlogs and that sort of thing.</p><p><strong>Marisa Morby:</strong>       I mean, as a product manager, you want to always have a really strong backlog that you're maintaining and pushing forward and prioritizing, but in terms of coming up with what we're going to work on next, it's a really interesting balance of some research. I spend a lot of time talking with people that aren't customers yet, but meet some standards of where we know we're going and maybe use Gatsby, maybe don't, but we know they're in the market that we're looking in. I spend time talking to them.</p><p><strong>Marisa Morby:</strong>       It's partially that. That's more of a conversation where I learn about what they're doing day to day, not even necessarily how they're using Gatsby, but just what does their day look like and what's frustrating to them. It's this discovery and just talking to people. Then there's also the industry, so looking at industry trends and seeing where we're going, trying at least as much as you can to look on the horizon a little bit and be forward thinking. You marry that with the discovery research, with the pain points. I know someone's having...</p><p><strong>Marisa Morby:</strong>       We've heard that multiple people are having these problems, and we can see that the industry is on a trajectory. Then how do we fill the gap? That becomes either the feature or the product that we want to create is that filling in of the gap. From there, you have to break it down into manageable pieces, which takes a whole team in order to do because it's hard to just have this. You may have a vision, but then you have to break the vision down.</p><p><strong>Marisa Morby:</strong>       I think combining those two things like where the industry and the market and then the actual people that are going to possibly use the product and understanding where their pain lies. We add those two things together, and from there, come up with that ultimate vision. Then scope back and work backward to create doable chunks of work.</p><p><strong>Joel Hooks:</strong>         How do you know when a backlog is a strong backlog? I've seen horrendous ones like JIRA that has hundreds of tickets and would take me 15 years if it was all stretched out to something where people are having to ask and beg for work. How do you balance the size of the backlog like, \"Oh, we're never going to do this so might as well go away and make sure that it's there and it's useful to people?\"</p><p><strong>Marisa Morby:</strong>       I mean, as boring as it sounds, we make sure that we have frequent calls to manage the backlog. Right now, I manage it actively once a week and then we get on a call about every other week with the larger team to talk through each issue. It takes time and attention, but that's the only real way, especially with a remote team and a cross functional team where you're in all different areas. The only way to really know what is currently active and what isn't and how long it's been is to talk to people and make sure that you all have that shared context.</p><p><strong>Marisa Morby:</strong>       Then can we tend to be pretty good about saying like, \"Okay, well this issue was created say a month ago, and we've changed direction in that month,\" which happens a lot being a startup, and so we try not to be too worried about it and we just get rid of the issue. If it seems that we're not going in that direction, we can always recreate it, but it's better to make sure that you know your backlog, at least for us right now, to make sure we know it's current and active. That to us is a healthy backlog. It should be actively maintained. That's how we know that the work we want to do is relevant and also that it's being moved through.</p><p><strong>Joel Hooks:</strong>         On the public Gatsby repo, I've actually seen there's a robot that'll just kill them after 30 days.</p><p><strong>Marisa Morby:</strong>       The stale bot, Gatsbot, I love that guy. He's great.</p><p><strong>Joel Hooks:</strong>         If you say no, it's like, \"This is gone.\"</p><p><strong>Marisa Morby:</strong>       We're actually going to start using that, I think, for both product and design because it's pretty easy I think to just pull over that implementation. When I've gone in because the learning... I think all of that's public like the learning roadmap is public too, and it has the little gatsbot that comes in and tells us, \"Oh, is this sale?\" That is super helpful with that large of a community, because you otherwise would have no idea. I think that begs a different question too is like, \"How do you do it when it's internal product versus something external that people see?\" We do have to manage those differently based on the amount of people in the open source backlog too.</p><p><strong>Joel Hooks:</strong>         If anybody can file an issue, the end result is utter chaos.</p><p><strong>Marisa Morby:</strong>       There are good issues too. That's the thing. You don't want to get rid of them. You just want to make sure that they're prioritized correctly. For that, we typically try to leave when the stale bot comes. He's like, \"Hey, this is stale.\" Since we manage that blog every couple of weeks, we are trying to be really ruthless in prioritizing and then seeing how we can maximize our efforts to get as much done as possible. The issues are so good, and there's just so many of them.</p><p><strong>Joel Hooks:</strong>         I mean, there's only so much anybody can do in a given amount of time and even good issues can get stale over time and no longer be relevant, so it's really a give and take. You mentioned remote teams, and Gatsby is a fully remote team, is that correct?</p><p><strong>Marisa Morby:</strong>       Yeah.</p><p><strong>Joel Hooks:</strong>         Have you been working on remote teams for a while now, or is this a new experience for you?</p><p><strong>Marisa Morby:</strong>       I've worked on remote teams for the last couple of years. It's been off and on. When I first started doing consulting, I was remote and that was when I was in other countries. That was very remote. Then at the last company I was at, the last half of it was remote, but the first half was colocated. I have experience working with both. The way Gatsby works right now is we've got a small team in Berkeley, but everybody else is distributed in that small team in Berkeley. They work remotely most of the time. They just do have an office space that they can go into.</p><p><strong>Marisa Morby:</strong>       I have so many thoughts on remote work cause it's such an interesting... It's just a fascinating thing that we can do now and a way of working that is fairly new with the technology that we have now. We say in our job descriptions, and I think that this is very fair. We list it as one of the best things about Gatsby and one of the worst things, and they're both true.</p><p><strong>Joel Hooks:</strong>         That makes sense.</p><p><strong>Marisa Morby:</strong>       It's fantastic because you get the flexibility. You get the ability to set your own schedule. If you're like me, I am one of those people that I love talking with people and being able to have conversations. If I'm in an open office, I'm the person with the sign on my back that says, \"Don't talk to me because I'll keep talking to you for two hours.\" Being remote is really helpful for that because I can put my headphones in and stop my notifications, and lo and behold, I am this hugely productive person. In that sense, the flexibility and the ability to set a very real physical boundaries is great.</p><p><strong>Marisa Morby:</strong>       I guess one other thing that I think is really good is it makes our conversations really intentional, which is nice because I can't speak to all of your experiences, but I know that I have had the experience where sometimes because you're all in a room together, you just have a meeting, but it's not really a meeting, and like, \"Why are we all talking about this? Can anybody really make a decision?\" That doesn't happen because it can't, because we're not all sitting there.</p><p><strong>Marisa Morby:</strong>       Those types of that intentional communication is good too, but I think when we're talking about what's difficult, it's like all teams are built on trust. All human interaction is built on trust. It's really hard to build trust and understanding when you don't see people in person that often. I'm starting to think the way our brains are wired, we have to have a certain amount of input in order to make determinations about people, and because when we have these reptilian brains, we just, and maybe this is just me, but if I can't see someone's face, I don't know exactly what they're thinking.</p><p><strong>Marisa Morby:</strong>       I can't really be sure that they're hearing what I'm trying to say.</p><p><strong>Joel Hooks:</strong>         The nodding language and expression, the micro expression [inaudible 00:27:30].</p><p><strong>Marisa Morby:</strong>       It's harder to have the conversation, and I think it's harder to build trust. I'd say every single thing boils down to how well you're able to build that trust on a remote team, and then extrapolate that out to say how well you're able to communicate. I love being able to work remotely, but you have to work harder to build trust. Every time you get the chance, whenever you're talking to someone, we try to turn the video on. I always build in what I call... I don't know. Can I swear on here?</p><p><strong>Marisa Morby:</strong>       It's just like bullshit time, where I know I'm going to lose 10 minutes of a meeting talking about non-work things, but you need it in order to be human.</p><p><strong>Joel Hooks:</strong>         Well, I mean you still get... This is the internet, right? I feel like I'm internet native. It hasn't been around for my entire life, so I'm not like my kids have had the internet for their entire lives. At the same time, you hear the expression like IRL in real life. People still use that as if this isn't real life. It is. It all is, folks, because we're in real life. Marisa and I are in real life talking right now, but at the same time, there's that separation. When we hang out in person, it's different than if we chat over Zoom.</p><p><strong>Marisa Morby:</strong>       It is. I'm like more formal over this than I am in person. I don't know how to not be that way because there's this boundary, right? I know you, and I know what you look like. I know your body language and expressions from hanging out with you, but having the boundary, I then become a little different.</p><p><strong>Joel Hooks:</strong>         I think it's really cool because we had Skype before but it was not good. It was okay.</p><p><strong>Marisa Morby:</strong>       No good. No [inaudible 00:29:13]. No.</p><p><strong>Joel Hooks:</strong>         It was better than nothing, I guess. It was pretty decent for voice chat but the video wasn't there, but Zoom to me over the last couple of years has totally changed my disposition on video chatting. I worked remotely for like a decade now, and I couldn't go any other way to be honest, but Zoom has really opened it up and allowed a different level of conversation that I think is interesting.</p><p><strong>Marisa Morby:</strong>       I love that it allows group conversation too, because that was the other thing like with Skype, well, the video was terrible, but we would have some group chats there but you can never really see people. You could never really get a group conversation going. I feel like with Zoom, we did a breakout room the other day in Zoom for a meeting which was so cool. We had 10 people and then we broke out into little groups and did a breakout room session. That was fantastic. That's not something we were able to do even five years ago.</p><p><strong>Joel Hooks:</strong>         We're doing remote workshops with it also, where we get 30 or 40 people and then we'll have group work sessions with the breakout rooms and not to turn this into a Zoom ad. I don't know what else people would use, but it's awesome and really has pushed the envelope. I also personally think that one of the absolute essentials is to get together in person. We have to do that. Even if every company is scattered across the globe, everybody has to come together at some point and meet in person.</p><p><strong>Marisa Morby:</strong>       Yes, 100% We do that too, and I 100% agree. I do think there has to be a lot of downtime, which feels like... I don't want to use the word wasted, but it feels like, \"Oh, we're here for work. Shouldn't we work?\" You have to be able to just bond over a shared experience, which I mean that's why people love to eat together. It's like a shared experience where you bond. Having that and seeing people and learning about them in a very organic way is absolutely a must, or else all of the team dynamic breaks down. It just doesn't work.</p><p><strong>Joel Hooks:</strong>         We don't do any work when we do our gatherings for Egghead. It's basically a group vacation, which it's work-related. It's not your family or local friends, but we get together and just try to hang out and have a good time. I don't think that's possible for every organization. It just works for us, but just the physical act of getting together and doing non-work stuff is critical. I don't know. We went for a long time just because we couldn't afford it as a company, and as we grew a little bit, the team grew, we were able to do it.</p><p><strong>Joel Hooks:</strong>         We still got by, but the ability to all get together has changed everything, and it increases the kind of the bonds and the familiarity and the ability to communicate with each other.</p><p><strong>Marisa Morby:</strong>       it does, and it makes it every interaction thereafter more easy, because you start to understand who that person is. You understand their communication style, what motivates them. There's all these things that you can get from just a short in-person interaction that I think take longer to get when it's remote.</p><p><strong>Joel Hooks:</strong>         I think it actually adds to the ability to... You're talking about expression and body language and that face-to-face stuff. I think you read it better, and you interpret it through a different lens once you've had physical communication versus virtual.</p><p><strong>Marisa Morby:</strong>       I know exactly what you mean because it's like you have to understand that someone maybe just has an expressive face. They're not mad. They're just thinking. That's their thinking face. You don't really get to know that until you see them in person and can other data points that you can put that together, and be like, \"Oh, they're not mad. They're just thinking.\"</p><p><strong>Joel Hooks:</strong>         I'm going to close it out with just a simple question about what are you excited about right now? What are you interested in? Whether it's technology or whether it's not, what are you into?</p><p><strong>Marisa Morby:</strong>       The thing I am into right now, well, there's two things. Can I have two things?</p><p><strong>Joel Hooks:</strong>         Of course.</p><p><strong>Marisa Morby:</strong>       I have two things. Neither of them are technology related. The first is city mobility.</p><p><strong>Joel Hooks:</strong>         What does that mean?</p><p><strong>Marisa Morby:</strong>       City mobility is how we move around cities and how we get from point A to point B. Are we driving, walking, biking, taking a bus, taking a train, flying? How are we moving around? How do we as humans move around? That is one of the most fascinating things that I have ever been able to study. I read a lot about it. I am not in any way professionally trained, but it's just amazing because it's one of those things that we do every day. It's just an integral part of our life that we don't even realize. It's like food.</p><p><strong>Marisa Morby:</strong>       We have to move from one point to another. Humans just in our bodies, we're just nomadic. We walk around. We move. We have to go places and being able to understand how we do that and how we have the opportunity, particularly in cities, to create transportation and options that allow people to get around in ways that are sustainable is fascinating to me, because it's... You talked about climate change earlier, and transportation makes up a huge part of our carbon footprint, and so being able to rethink how we get around is fascinating to me.</p><p><strong>Marisa Morby:</strong>       Plus, there's all these positive livability things and health things with being able to bike more and walk more and being able to be out in your community when you travel like taking a bus or taking a train rather than being stuck in your car.</p><p><strong>Joel Hooks:</strong>         So we should build more highways?</p><p><strong>Marisa Morby:</strong>       No, I can't believe you would say that to me.</p><p><strong>Joel Hooks:</strong>         Sorry, I couldn't help it.</p><p><strong>Marisa Morby:</strong>       You're going to get me started on induced demand and everything. No more highways. I would love it if they took the highway out here. I really would. Vancouver BC is the only city in North America that doesn't have a highway that runs through its downtown.</p><p><strong>Joel Hooks:</strong>         That's true.</p><p><strong>Marisa Morby:</strong>       I feel like Portland should just copy that.</p><p><strong>Joel Hooks:</strong>         I feel like that ship has sailed. I mean, I agree with it. It's a madhouse of everybody driving around and then the unintended consequences oof building more and better highways and the whole-</p><p><strong>Marisa Morby:</strong>       We don't even like it. We just want to go see our friends. We just want to get to where we're going.</p><p><strong>Joel Hooks:</strong>         Honestly, yeah. We want to get there quickly and comfortably. What's the second thing?</p><p><strong>Marisa Morby:</strong>       Oh, the second thing, also not technology-related, is ceramics. I've been doing ceramics now for about a year almost. Since I work on the computer all day, I thought I need something that I can physically do with my hands and actually create things that are very physical. I've been doing that for the past year or so. I'm still working on your succulent pot. I did paint it up for you-</p><p><strong>Joel Hooks:</strong>         Nice.</p><p><strong>Marisa Morby:</strong>       ... which it'll eventually be done. It took me a while to paint. Anyway, that has been one of the things that has been really gratifying because you get to see this slow progress that you make, being able to only make something that's really teeny tiny and then now making bowls and stuff like that. It's a great experience and my mind shuts off when I do it. It's fantastic.</p><p><strong>Joel Hooks:</strong>         It's like a fast track to slow state in some way.</p><p><strong>Marisa Morby:</strong>       It is. It's instant.</p><p><strong>Joel Hooks:</strong>         It's all technology to me. We're making these useful things and we do that with software, and I can't recommend the getting back in crafting, building something. I dabble in a little woodworking every now and then, and it's just so gratifying when you make something. I have a little table that I built. I stack stuff on it, whatever, but I look at it and it makes me smile. I'm just like, \"Oh look, there's my little table that I built.\"</p><p><strong>Marisa Morby:</strong>       I use one of my bowls that I made a couple months ago. It's this perfect size for berries, just for a snack. I love using it, and I'm like, \"Oh man, I made that. It's so cute.\"</p><p><strong>Joel Hooks:</strong>         It probably makes your smile along with your delicious berries.</p><p><strong>Marisa Morby:</strong>       Exactly. Exactly. It's a double dose of happiness.</p><p><strong>Joel Hooks:</strong>         Well, Marisa, thank you so much for taking the time out of your afternoon to speak with me. I really enjoyed it, and I'll talk to you soon.</p><p><strong>Marisa Morby:</strong>       Talk to you soon. Thank you so much.</p><p><strong>Joel Hooks:</strong>         Cheers.</p>",
    "slug": "putting-emphasis-on-user-outcomes-with-marisa-morby",
    "description": "<p>Marisa Morby is a professional product manager. A common question she gets is \"what's the difference between a product manager and a project manager?\" There's a lot of overlap, but the difference is a product manager has to understand what needs to get done and why and be able to communicate that, and the project manager makes sure that everything stays on the rails and results in a cohesive product.</p><p>Many teams put significant of focus on user outcomes. A user outcome is the ultimate goal of the user. It's what they need to happen. If we don't know what the user needs to happen, we'll end up focusing on the wrong thing.</p><p>To figure out what a user wants user research needs to get conducted. No, you don't have to break out the lab coat. Research doesn't have to be so rigid. Just have conversations with your users and try to gain an understanding of their wants, needs, and frustrations. Make sure that you don't make assumptions about your user's needs. Ask questions that might seem painfully obvious to you</p><p>Marisa also talks about working with all-remote team. We live in an amazing day and age that allows us to do our work wherever we want, but there are challenges we have to overcome for everyone to still be productive. We have lizard brains that make it challenging to build trust with people whose faces we never see. Regular video meetings that give some space for non-work conversations are essential in building that trust with people. Meeting people in person also has a substantial positive impact on communication; it gives you a lot of context with people's mannerisms!</p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/putting-emphasis-on-user-outcomes-with-marisa-morby/transcript\">\"Putting Emphasis on User Outcomes with Marisa Morby\" Transcript</a></p><h3>Resources</h3><ul><li><a href=\"https://abookapart.com/products/just-enough-research\">Just Enough Research</a></li></ul><h3>Marisa Morby</h3><ul><li><a href=\"https://twitter.com/marisamorby?lang=en\">Twitter</a></li><li><a href=\"https://marisamorby.com/\">Website</a></li></ul><h3>Joel Hooks</h3><ul><li><a href=\"https://twitter.com/jhooks\">Twitter</a></li><li><a href=\"https://joelhooks.com/\">Website</a></li></ul>",
    "duration": 2251,
    "episode_number": 52,
    "contributors": [
      "Joel Hooks"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/17tca",
    "path": "/podcasts/putting-emphasis-on-user-outcomes-with-marisa-morby",
    "published_at": "August 16th, 2019",
    "url": "https://egghead.io/api/v1/podcasts/putting-emphasis-on-user-outcomes-with-marisa-morby",
    "edit_podcast_url": "https://egghead.io/podcasts/putting-emphasis-on-user-outcomes-with-marisa-morby/edit"
  },
  {
    "id": "podcasts-00000000000000000214",
    "title": "Escaping the Software Trough of Despair With Laurie Barth",
    "summary": "Laurie Barth talks about how to retain what you learn and provides solutions to the broken interview process. ",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/36aec46f-5d88-4d79-ae41-40187c8c9598/egghead_io_podcast_joel_with_laurie_barth_v1_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/55d7f360-05c1-43af-9c2d-eb89e156734a/b1c8dae5-6367-4ed2-a58f-58abb0f227c3/logo.jpg",
    "simplecast_uid": "36aec46f-5d88-4d79-ae41-40187c8c9598",
    "transcript": "<p><strong>Joel Hooks:</strong>         Hi Laurie.</p><p><strong>Laurie Barth:</strong>       Hi.</p><p><strong>Joel Hooks:</strong>         I am super stoked to talk to you today, mainly about the tech interview pipeline and the issues that we see with that. But I wanted to kick it off, and I know that you are a board game aficionado. I am as well. And I was wondering, what do you have on deck? What are you playing right now? What are the board games that we should check out?</p><p><strong>Laurie Barth:</strong>       I have a new obsession with the game Azul, I don't know if you've seen-</p><p><strong>Joel Hooks:</strong>         Oh, it's great.</p><p><strong>Laurie Barth:</strong>       Right? It's so much fun. It's aesthetically pleasing, which I always love. But I love making friends play for the first time on the side of the board that isn't predetermined and watching them get through two rounds and think they're doing really well, and then panic that they didn't plan out their pattern well, and they're locked and they can't do anything.</p><p><strong>Joel Hooks:</strong>         I like that one. And a lot of my focus in general lately, because I have all these really complicated board games that take two hours to explain and set up, and what I really love, like I've been trying to ... And Azul fits in this, it's the 8+ games, right? That are really deep and have a lot of strategy but don't take an hour to ... or aren't intimidating to get started with.</p><p><strong>Laurie Barth:</strong>       Exactly. I always love games like that. Splendor for example, my husband and I learned it as a two-player game, and it was fun the first time we played it. But we're like, \"Oh, that's all there is to it?\" And the second time we played it, we realized that it gets more and more analytical and subversive. And I love that because at first glance it's super simple and easy, and then you realize that you can start purposefully preventing the other player from doing well, and it gets really tactical.</p><p><strong>Joel Hooks:</strong>         That's nice. I've also really loved Moniker lately. I don't know if ... Have you seen this game?</p><p><strong>Laurie Barth:</strong>       Ooh, no, I haven't seen that one.</p><p><strong>Joel Hooks:</strong>         It's like ... there's Cards Against Humanity, right?</p><p><strong>Laurie Barth:</strong>       Right.</p><p><strong>Joel Hooks:</strong>         Which I played, and it was all chuckles, and you could see grandma say just absolutely naughty things. And then after a few times, it's like, \"Wow, grandma's saying naughty things, and I don't like it.\" It's like Facebook during political season, and I don't want it anymore.</p><p><strong>Joel Hooks:</strong>         So Moniker kind of takes that place. It's like this party game and you can play with up to 40 people, and it's actually kind of a creative commons license. It doesn't have a copyright or whatever. You can make your own version of this game. But it starts, and you go around, and it's kind of this combination of charades and guess the entity, and just really is one of my favorite fun party games.</p><p><strong>Laurie Barth:</strong>       Yeah. I was just gifted, I don't know if you've played Code Names, but I was gifted the Harry Potter version of Code Names, which I haven't tried yet. So that's definitely on deck.</p><p><strong>Joel Hooks:</strong>         Yeah. Moniker is in the same category as Code Names in terms of like a fun party game that gets people enthusiastic. It's super simple though. That's what I love, too. I just love something you can hop into and everybody kind of inherently understands and you can just have fun.</p><p><strong>Laurie Barth:</strong>       I'm going to have to check this out.</p><p><strong>Joel Hooks:</strong>         But then I'll also play a 12 hour Twilight Imperium session.</p><p><strong>Laurie Barth:</strong>       Oh, do you have Twilight Struggle?</p><p><strong>Joel Hooks:</strong>         Yes, I have it and haven't played it. I've been scared of it to be honest.</p><p><strong>Laurie Barth:</strong>       It's a little intimidating, I'm not going to lie. We've gotten through it I think two or three times and every time I have to refresh the rules for like five hours.</p><p><strong>Joel Hooks:</strong>         Yeah. It's thick. Is it GMT games that makes it? They make all the simulation games, like you get their train simulators where you have like a functioning stock market and it's like wow.</p><p><strong>Laurie Barth:</strong>       We get smarter when we play these things. Learn a little bit of history.</p><p><strong>Joel Hooks:</strong>         So they have a mini game that's called Twilight Squabble. It's hilarious. It's a tiny box. It's a four by three box and it takes 20 minutes to play it. It's like the essence of, of Twilight Struggle, but in this tiny little little box. If you like Twilight Struggle, you might like it.</p><p><strong>Laurie Barth:</strong>       Definitely going to have to look all of these things that my husband is going to thank you so much for all the money I'm about to spend.</p><p><strong>Joel Hooks:</strong>         Yeah, I have to stop watching board game YouTube sometimes.</p><p><strong>Laurie Barth:</strong>       Oh, boardgamegeek.com is dangerous for me. I subscribe to their newsletter and I just should not.</p><p><strong>Joel Hooks:</strong>         It's like, yep, need that, need that.</p><p><strong>Laurie Barth:</strong>       Exactly. It's like, Oh there's a Kickstarter. I mean it's not like I can wait. If I don't give them money then the game won't exist. I won't get to play it.</p><p><strong>Joel Hooks:</strong>         Bonuses, miniature stuff. Great.</p><p><strong>Joel Hooks:</strong>         So this is a, I mean this is a podcast about software development.</p><p><strong>Laurie Barth:</strong>       Same thing, right?</p><p><strong>Joel Hooks:</strong>         Board games are awesome and I think there's a lot of crossover there, to be honest. But I was curious, how did you become a software developer? What was your path to this field of work?</p><p><strong>Laurie Barth:</strong>       So it's a little bit weird. Starting from a really, really young age, I was going to be an attorney because both of my parents are lawyers and my dad tried really hard to convince me not to do that. Going into college I was like okay, I'm going to study government so I'll do great in law school, but I'm going to also major in mathematics because I just loved math. I always loved math. And the kind of merging of those two things is political polling because I particularly like statistics. I happened to go to a college, Franklin and Marshall college in Lancaster, Pennsylvania, where they have a political poll that runs off of campus. And I interned there for three years and I had a boss, shout out to Angela, who was amazing. She said the only way I'm going to let you be a summer intern instead of just a school year intern is if you promise me that you'll take a computer science 101 course while you're interning, like in the evenings.</p><p><strong>Laurie Barth:</strong>       I kind of pushed back and I was like, I'm not that geeky, I'm not that hardcore.\" And she's like, \"No, no. I've had to teach myself all this stuff. If you ever want to work in this field, it's going to serve you really well and this is the advice I wish I'd gotten.\" Of course she was right and I loved it and I ended up minoring in it and eventually getting my masters and the rest is kind of history.</p><p><strong>Joel Hooks:</strong>         Yeah. And then here we are, right?</p><p><strong>Laurie Barth:</strong>       Right, exactly. Yeah. No time has passed since she gave me that advice and today at all.</p><p><strong>Joel Hooks:</strong>         Now you're a consultant essentially, right? You work for a consultancy and you help organizations build software and that sort of thing. Looking at your past and the present and your observations about this field, what are some qualities of a really good software consultant?</p><p><strong>Laurie Barth:</strong>       I think there's a lot of things. Software consultants have to be comfortable wearing a lot of hats and being unopinionated, which sounds weird because obviously you're supposed to give your perspective and your ideas, but you can't sit there and say, this is the technology I like and this is the technology I'm going to use. You have to ask the right questions and make sure that you're picking tools and solutions that work for the constraints and the realities of your clients. That's kind of the opposite of how a lot of product builders work in terms of, \"Hey, I love working with React or I love working with Python and I'm going to go out and look for a job where I can do that.\" I don't have that luxury and that's both a blessing and a curse. I learn whatever it is that I need to learn to best solve the problems of the clients that I work with.</p><p><strong>Joel Hooks:</strong>         Does that keep you in, I don't know, almost like a mild state of panic in terms of new clients or new projects? Do you go in and ... how do you deal with that? This feeling that I don't really 100% know this but I can learn it.</p><p><strong>Laurie Barth:</strong>       Yeah. I was talking to my boss about this probably about a year ago and I said, \"I'm doing too much constant learning where I feel like I'm constantly in free fall, and I'm constantly like on unfamiliar terrain and I don't really know which direction to go.\" One of the things he mentioned and I think has really served true is, if you're going to be in a field where you're constantly learning, which all of software development is to a certain extent, you need to make sure that you have a pretty good balance between learning and then using what you've learned. If you don't get to use it for any length of time beyond solving like a quick immediate problem, you just get frustrated because you're constantly going through these iterations of feeling stupid, right? It's okay to feel dumb maybe 50% of the time, but feeling dumb 100% of the time gets frustrating and a little bit panic inducing.</p><p><strong>Laurie Barth:</strong>       So you're absolutely right. It is hard. And I've tried to find a balance and 10 Mile, my company, has been really great in helping me find that balance. And then the other thing is, you get really good at failing quickly with documentation. I've learned a lot about what good docs look like, at least for my type of learning. And so when I need to solve a problem, when I need to learn a new technology, I'm pretty fast at doing a quick scan. Figuring out if investing time in this particular resource is helpful. And if it isn't, I go onto the next one because I don't have the time to waste and it's not going to help me solve the problem.</p><p><strong>Joel Hooks:</strong>         So what are you looking for in good docs? What are the signals that speak to you when you were doing this research?</p><p><strong>Laurie Barth:</strong>       It does a bit depend on what I'm working on. So if it's a technology that I already know, I tend to look for a straight up API writeup saying, these are the parameters and these are the functions available to you, and here's an example or two of how they work. I'm big on examples. If it's something I don't know at all, I much prefer kind of a scaffolding or a skeleton of what a project should look like or a function should look like or an example. And then I'll take that, deal with all the dev ops environments, set up nonsense on my computer, but I know that the code itself is working and if I can get it running then I know I can iterate that code to the point I need it to be in. So I'm not struggling on two fronts at once as it were.</p><p><strong>Joel Hooks:</strong>         You mentioned set up and dev ops nonsense and I agree, I think people are like, \"Oh it's so confusing. I had a hard time learning React.\" And then they'll write a whole article about it, and really what they've written about is their struggles with Webpack and Flow and learning Redux and all this stuff that goes around a project. The initial setup is where a lot of the struggle is. Once it's set up, many people can can attack the problem easier. What do you do to deal with that initial setup nonsense? How do you approach that?</p><p><strong>Laurie Barth:</strong>       It's actually funny, Ashley McNamara had a tweet a while back where she was talking about how so many tutorials that we see are kind of missing this step zero of the things you don't know if you're not familiar with that piece of technology. I think for front end, the rise of CLIs has been really helpful. For other pieces of code I'll look for get hub repositories for sure. Anytime I can find a code pen or JS fiddle or something similar, that's really wonderful because it's removing all of that other nonsense and when you remove all that noise, I'm like, Oh, if this is working here, I'm just missing X, Y, Z. But I think a lot of it comes with experience and saying, okay, I've seen that error, I know that's an NPM error or I know that's a versioning issue or a permissions issue. I wish there was a better answer for that other than once you see it a couple of times it kind of sticks in your brain and you remember it for next time.</p><p><strong>Joel Hooks:</strong>         For me too, it's a lot, how do you read blogs and how do you parse that? It's so much noise and then you're trying to find the actual problem. For me, from years of teaching in a workshop setting and actually being a consultant too, the ability to spot simple typos or just little patterns, like a visual scan that gives you pattern recognition, I guess is the word.</p><p><strong>Laurie Barth:</strong>       It's funny that you say that because I'm pretty sure anyone who follows me on Twitter will see that every Friday I'm posting some really stupid typo. That's my signal that I need to go home.</p><p><strong>Joel Hooks:</strong>         It's time for the weekend.</p><p><strong>Laurie Barth:</strong>       Right.</p><p><strong>Joel Hooks:</strong>         On one hand it's disheartening, right? You spend hours and you discover that it was like a misplaced character, and at the same time there's this sense of exhilaration that comes from solving that problem. To me, and you mentioned kind of the trough of despair or kind of this feeling of ignorance that we get in software. Then you go and I feel really dumb, and then you feel like you know a super genius and then really dumb and a super genius and it's a sign wave.</p><p><strong>Laurie Barth:</strong>       It's funny that's, it's kind of the definition of being a software developer, right? It's constant despair and then you get like five seconds of elation and then you're back in despair for the next problem.</p><p><strong>Joel Hooks:</strong>         Yeah, I love it. And you know, it's like you get the flow state and the puzzling aspect of the whole operation is really fun. If that's your definition of fun, I suppose.</p><p><strong>Laurie Barth:</strong>       Right. I always tell people I was a bit ... this is a bad thing to be, but I was kind of Hermione Granger in school. That was my personality type in schoolwork, in classes and stuff. And I think that's why I make a good software developer because I cared about grades and I cared about those wins that told me I was doing a good job, and I've just taken that mentality and moved it to Jira tickets and so we're good.</p><p><strong>Joel Hooks:</strong>         I know this is important in your work and you've talked about this before and I'm really curious. At some point in your career you are probably going to end up being a teacher and a mentor and I'm wondering why that's important. Why is it important to have more teachers and more mentors helping folks?</p><p><strong>Laurie Barth:</strong>       Obviously we know we have a shortage of people in this industry in general and as we progress, every field and every area is going to require some kind of technical literacy and knowledge. We're constantly looking for mid level people and senior level people and those don't just appear. We grow them. And so as much as everyone in the industry can kind of use the struggles they've been through and their learning and their experience wanting to throw a computer out the window because of some stupid bug, and make that available for other people to leverage and kind of like climb on top of their shoulders. I think we've made it so that we can focus more on what matters and the more gray area conversations that we have around what we're building and why we're building it and how it's having an impact instead of, okay, I just spent five hours getting Webpack to build. I don't have any energy to have these harder, more important conversations.</p><p><strong>Joel Hooks:</strong>         What you're describing to me it sounds a lot ... I'm a front end person. That's like my general job description. We talk about UX a lot and understanding our users and the problems we're trying to solve. Is that kind of a part of that? Are we, as a group of folks with more experience, imparting that kind of knowledge and passing that along? Is that part of being a good mentor?</p><p><strong>Laurie Barth:</strong>       Yeah, I think it's everything. I think it's teaching people, especially people new to the industry, that asking the right questions isn't just about asking Google the right questions. It's about asking the right questions in general at kind of a meta level and within the problem domain that you're working. It's continuing to refocus ourselves, again, on the stuff that that matters. Yes, sometimes that means the performance of splice versus the spread operator, but if we have that written up somewhere and someone's kind of made that knowledge available and not something that you need to test for yourself, then that's half the time that you could have spent on that issue and you can focus on something that maybe has a bit more impact.</p><p><strong>Joel Hooks:</strong>         So when do you know that it's a good time to actually ask for help? We do a lot of research, we spend a lot of our time Googling and reading stack overflow and banging our head against a problem. At some point it becomes more efficient just to either fire up Zoom or message somebody or walk over to their desk if that's your situation and ask for help. How do you know when that's the time?</p><p><strong>Laurie Barth:</strong>       I will admit to being a terrible use case for this. The first software engineering job that I had, I had a wonderful technical lead who let me ask a truly staggering number of questions. I mean the stupidest stuff, and I hate to use the word stupid, but things that I easily could have googled. Instead I went and asked him, and he would answer them. The rule that kind of worked for us was, I never asked the same question twice and so he was always willing to answer. But I think one of the things we take for granted is that when you enter this field, you don't have that Google Fu as it were. You don't necessarily know the keywords you should be putting in.</p><p><strong>Joel Hooks:</strong>         The vocabulary.</p><p><strong>Laurie Barth:</strong>       Or how to find the right answers. And so I think if you try one or two searches or if you really feel like you don't even know where to start, feel free to reach out to someone to ask a question. I don't think there's anything wrong with asking questions. I think the problem comes when you don't take that data point and store it away for later. That's why I talk about developer journals a lot. Basically the idea that you have a document somewhere, whether it's online or directly static on your laptop, that keeps track of all the resources you've looked at and all the problems you've solved so that you aren't having to solve the same thing twice.</p><p><strong>Joel Hooks:</strong>         I encourage people to start blogs if they're able to and have the time and inclination. To me, in my career when I first started, I was 35 years old. I couldn't just jump into this job and make a very entry level salary because I had bills to pay. So I used My Space on the internet. It's still joelhooks.com, as basically my developer journal. I'd solve a problem, get a problem, be confused, do the research, ask somebody, and then take that information and basically write a journal entry to myself about what the problem was and how I solved it. That's the situation where you end up googling and in the future you land on your own solution, which is like an amazing feeling. It's like, wow, look at me doing my, my past self doing my ... shoot yourself a solid. That's amazing. Is that similar? Is that kind of the similar approach to what a developer journal would be?</p><p><strong>Laurie Barth:</strong>       It absolutely is. I think that's why a lot of people actually recommend that people who are beginning write blogs and I think that's a great recommendation. But I also think not everyone is comfortable with that. Not everyone wants to put themselves out there in a public way. There's a lot of different ways to get that same benefit. It can be taking notes for yourself, it can be taking notes for a small group of people, maybe if you have some kind of study group that you're sharing things with. Or it can be publishing it for the world to see. Then you'll end up like I did this morning where someone said, \"Hey Laurie, your example is broken. Go fix it.\"</p><p><strong>Joel Hooks:</strong>         Now you get to support your blog posts. I recommend turning comments off. I don't have comments on my blog because I have never had a fruitful conversation in that way. And a lot of this really gets down to, and I think another aspect of this is is technical writing, which I think is a hugely important skill to have as a software developer on a team, especially as we get more into remote work and this sort of thing. We have to write, and this communication is important. What are your thoughts on learning and becoming a good technical writer?</p><p><strong>Laurie Barth:</strong>       When people ask me kind of what my most critical skill that I think has kind of made the difference in my career is, it's always writing. I went to a liberal arts school and I majored in government so I had to do a lot of it. I think technical writing, there's a couple things that come to mind. There are different voices that you can use and there are different audiences that those apply to. For a while, a lot of the technical writing that existed was kind of this white paper style. A lot of keywords, very formal, almost read like a lab report for the hard sciences. And I think we've moved away from that, made more conversational style technical writing that helps people who need something a bit more accessible, and explaining things in layman's terms, using examples that aren't all kind of like geek chic as it were.</p><p><strong>Laurie Barth:</strong>       I love Ali Spittel, obviously does some really funny stuff with music lyrics from the '90s and modern, which I love. I think having things that are accessible and people can relate to or kind of pique their interest is important. I think it's also important to think about how much you are including in what you're writing. Things that are bite size are a lot more accessible. And so I try as best as I can to break things down into the lowest common denominator that I can. I was recently diving into ES 2019, for example. Every single feature that I came across that I wanted to write about was its own post. I'd give probably two to three examples of it and more explanations behind it. The idea is that someone can jump in on their lunch break and see something that's short and not super intimidating and a quick thing for them to learn and look at.</p><p><strong>Joel Hooks:</strong>         On Egghead if you go and you look at the videos, and we have courses and all that fun stuff because people love things that are packaged and they can watch. You can also take any individual lesson out of that. We really strive to cover a single concept. I want you to get this, take it away, spent five minutes watching this instead of something buried in the middle of an hour and a half. Which would be the difference between the long form articles too. To me written words are much more accessible than than video in that regard.</p><p><strong>Laurie Barth:</strong>       Yeah. I was joking with someone on Twitter the other day about going to YouTube to find a solution to a problem and being like, just get to the point already. I actually ... the ES 2019 stuff, at least a couple of those are currently Egghead videos of mine.</p><p><strong>Joel Hooks:</strong>         Nice. Let's get into what's wrong with the way that software developers are interviewed and hired in this kind of modern age of web development?</p><p><strong>Laurie Barth:</strong>       Let the ranting begin.</p><p><strong>Joel Hooks:</strong>         That's what I'm here for.</p><p><strong>Laurie Barth:</strong>       I'm really passionate about this topic. I don't really know when I became passionate about this topic, but I think a lot of it has to do with feeling like I've passed the gates of jobs where I kind of got lucky, and then really exceeded expectations when I was in the role, and looking back and feeling like there was a really significant disconnect between the skills that I had that my managers were really excited about and thought brought value to the team, and the skills that I had been tested on in the interviews. I think this is pretty common, especially with the kind of stereotypical major company, whiteboard interviews, crack the coding interview, all of that stuff.</p><p><strong>Joel Hooks:</strong>         I have that book. It's super thick. I was reading it and I got it because I was curious. Here's full disclosure. I've had a very light experience in terms of interviewing. Both times I've had, and I've only had two in my life, had a technical interview. They simply wanted to talk about articles on my blog. And I look at this, that's great for me, but when you're looking at this technical interview, I would never pass. I don't even know how to approach that. I'm 10 years into this career and I would never pass without just simply like cramming and prepping it for a specific job interview. I don't even know at the end of the day, does that really signify how this person will perform, or can they do this job that we have at hand? What can we do to be better? How do we improve that, and is that even a necessary part of the standard of hiring folks?</p><p><strong>Laurie Barth:</strong>       I saw someone write the other day that even if you study and you do cover to cover cracking the coding interview, there's still a fair amount of luck involved in what white boarding question they put in front of you and how to the forefront of your mind it is, and whether it's something that you really, really studied. Okay, the solution is optimized for a hash table which you know really well versus a link list which you're a little more uncomfortable with. All that kind of nonsense. We like to think it's objective and it's not. In my experiences, I don't think people need to code in interviews, which is kind of this crazy outlandish statement. There's a couple of reasons for this but the one that sticks out to me is the idea that coding in an interview is allowing you to ask the best questions and get the best people and see whether or not they can code when you put them in your company.</p><p><strong>Laurie Barth:</strong>       The two experiences aren't similar. Coding in front of people with a specific amount of time in a blank IDE, or not an IDE as it were, and kind of going through this whole process, is not at all related to jumping into an existing code base, pattern matching, figuring out problems, fixing bugs, making new features. There's this big difference between a blinking cursor and what most of us experience, which is integrating or working with existing things. There's not a great way to test for that unless you make a mini little bug for people to solve, which, if you want to do that, okay.</p><p><strong>Laurie Barth:</strong>       What I like to do and what we at 10 Mile have done a fair amount of, is we look at an at a resume and find something that piques our interest and ask them about it and say, \"What did you build? What did you like about it? What was your experience?\" We're not looking for what they don't know. We're looking for them to show us what they do know. Instead of these repetitive questions that we think size up everyone exactly the same way, which they don't, we are catering to the experiences that our applicants have had and seeing how they might be able to teach us something new.</p><p><strong>Joel Hooks:</strong>         It's funny when you say that because now I look back to these job interviews that I've had that I described and I'm like, those were good job interviews. We did. I didn't have ... Give me a blinking cursor or a whiteboard and what you're going to receive in return is crippling performance anxiety for me. That's not who I am and that's not what this job is. For most circumstances it's not a live performance gig. I have a really hard time with that sort of scenario. One of my ideas is that, what if we paid people? What if we paid people for their time and gave them assignments and that sort of thing? I don't know how that scales, but to me that seemed like a better approach.</p><p><strong>Laurie Barth:</strong>       Yeah. Some people are doing that. I think it almost can't be a one size fits all, which I know is a struggle for people because they're thinking hiring, it has to be the same. It has to be objective. But if we kind of threw that away and said, okay, it's never going to be objective because it's people interviewing other people and we have no idea how their day is going thus far and what their mindset is. They may be in a position to do their best, they may not. If we throw that away, I think we get to a point where we say, how best can the candidate show us their skills and their knowledge and what they know, and kind of branch off from there?</p><p><strong>Laurie Barth:</strong>       If that's, I would like to do a take home assignment where you pay me and I show you how I code, great. If the answer is I am a great communicator and I want to sit there and I want to explain to you what I've worked on in the past, awesome. If the answer is I would rather just sit there and have you watch me solve a problem or a bug, awesome.</p><p><strong>Joel Hooks:</strong>         Yeah, like a pair programming kind of thing, right?</p><p><strong>Laurie Barth:</strong>       Yeah. I think all of those can be viable, and the problem that we run into is this idea that one size fits all. We've done a lot of this because we're so afraid of this false positive where we get someone into our company and they're a total washout, right? And they're like, well, if they hack my coding interview, I'm going to add seven gates to this interview process to make sure we get the best person. And that doesn't do that at all. It just creates a whole bunch of other things that you're screening for that you don't actually care about and it makes your candidates miserable and it makes them hate you.</p><p><strong>Joel Hooks:</strong>         You end up with a checklist and a linear flow where really, it's more like a graph versus linear boxes that we tick and we go through these boxes and we'll get a good candidate. And that's because of our individuality as humans. It just doesn't work. It's like I talked about pair programming and often see that as, well you should pair program with your candidates. Unless you know that's what the job is, because there are shops where pair programming is integrated, unless that's what the job is, or even some candidates when they first meet you and you know each other for five minutes, they don't want to sit down shoulder to shoulder. They might freeze. So that doesn't work for everybody. So it's like finding what does work. It's a challenge. It's a really hard problem actually.</p><p><strong>Laurie Barth:</strong>       It's a really hard problem and I appreciate that people are starting to talk about it and starting to share ideas and solutions. And I think when people do that, we have a lot of knee jerk reactions of like, \"No, that won't work because of X edge case.\" And what we have to acknowledge is that all of these are going to have edge cases and so we need ... the adaptability really ends up being the most important thing. Do what will best allow the candidate to shine and show off what they know. And I know in larger companies that kind of freaks everybody out. They're like, it has to be the same. I don't know how to fix that problem, the HR problem and the legal problem and all of that. But I'm hoping we'll get there because we need to.</p><p><strong>Joel Hooks:</strong>         I think there's risks and rewards for hiring less experienced people. You mentioned that folks are always looking for mid to very experienced developers. They want what we call senior developers on staff. But then there's the opposite side of this where what if we take folks that don't have the same experience and develop them and develop their skills and their talents and their professional capacity over time? I was wondering, have you seen that successfully? What do you think about that idea?</p><p><strong>Laurie Barth:</strong>       I've been that kind of newbie engineer who was brought into a company and had the opportunity to learn and really thrive and I'm so grateful for that experience. There are pros and cons and really all of the negatives are when you haven't set up your company to provide those mentors and those teachers. That isn't the same thing as saying we have senior engineers on staff. I think it's kind of a two ply problem as it were, but we've turned a lot of people into senior engineers based on their expert use of a tool instead of their ability to elevate the people around them. I don't really have a strong opinion about the titling there, but there is a difference between someone who has that senior engineer experience and someone who is a senior engineer because they are a mentor and because they are a teacher. If you bring on newer coders who have this amazing drive and ambition and ability to grow so, so fast without resources for them to turn to, then you're doing them a disservice.</p><p><strong>Laurie Barth:</strong>       Even beyond that, I think you want to make sure that you have work for them to do that is at an appropriate level with the support that they need, with the resources that they need, and make sure that you're giving the person who's going to be that resource enough time away from their other tasking because it's not just a wash. That takes time, that takes energy, and you will see the rewards of that. I have no doubt. But you have to kind of set up your structure in such a way that allows for it.</p><p><strong>Joel Hooks:</strong>         Maybe my favorite ways that I've seen this structured is the apprenticeship model where where you come in and there's folks that are apprentices and then folks that are set up as the mentors. It's just like in your job description that people are going to come in and you're going to help them a lot of the time. I've seen people grow and thrive under that environment.</p><p><strong>Laurie Barth:</strong>       Yeah, I really like it. I think the problem that we see is, too often, and welcome to capitalism, the idea that you're hiring someone who would be a junior, which is not a term I love. And you say in your job description, hey, we just want someone who's excited, someone who's willing to learn, someone who has some foundation. You end up going with the person who has the most experience and will allow you to pay them the least. And so that's how this kind of rat race starts of, I need to know every framework under the sun and I need to have done all of these personal projects in order to even get my foot in the door because there's someone else who will. And I wish I had a solution to that because I think it kind of benefits those who have the free time and privilege and opportunity to spend all of that energy leveling up. And then we get a bunch of people who look the same and act the same and think the same.</p><p><strong>Joel Hooks:</strong>         You mentioned, I want to get the person with the most experience at the least price. I think a lot of folks are, are timid about this idea of developing less experienced folks because they're worried, we're just going to train them and then they're going to leave, they're gonna find another job. And so we wasted all this time and effort. There's an opposition there, right? If you're trying to save money and you're trying to hire the least expensive, a viable solution versus guiding somebody through and then elevating their pay along the way and developing a culture in your company that facilitates that and facilitates growth both in skills and compensation. That's the balance that has to be ... if you want to keep them, if that's the organization you're trying to run and people are going to leave. But how do we do that? How do we keep them in our company and in our organization over time?</p><p><strong>Laurie Barth:</strong>       It's so true. There is that fear and it's a valid fear in some cases. Yeah, some people are going to leave. It's not going to be the right fit for them after a couple of years. They're a different person than they were when they started. And I think good managers and good companies recognize that that experience and being okay with that and championing that comes back around and ends up being beneficial in the long run.</p><p><strong>Laurie Barth:</strong>       But the other thing I'd say is there's a lot of loyalty that comes from taking a chance on someone and if you treat them well throughout, as you said, and give them the raises and give them additional opportunities, there's not going to be much reason for them to want to run somewhere else. I've been saying this a lot lately, but there's two reasons that people leave jobs.</p><p><strong>Laurie Barth:</strong>       One of them is because they're leaving a job, they're being pushed out of an environment because they're not happy there. And then the other one is they're not really leaving a job. They're jumping to a new one. There's a pull and an attractiveness of another opportunity that is just different or better in some ways. If you've kept a good relationship with that person, maybe someday they'll come back. They're certainly going to recommend that as a great place for their friends to go.</p><p><strong>Laurie Barth:</strong>       This idea that when you leave a job, it's because the job has done something wrong as is so backwards and antiquated, especially in our industry where people move around a lot. Some of that's money-based. And I know that we're not great about giving raises a lot of the times in certain environments, but it's also because there's so many cool things to try. But your reputation as an employer matters. People talk a lot. Treating people well, especially as they start their career, that's a measurable brownie points.</p><p><strong>Joel Hooks:</strong>         They can potentially be a champion forever. And if they see something that's bright and talented and would fit well in your organization, they'd be like, Oh, you should go work here because they're awesome. Versus, ooh, which can happen. That's the real risk, over time. It's like, Oh, you don't want to work there. That's not a good place.</p><p><strong>Laurie Barth:</strong>       Right. The first impression being the hiring is something everyone forgets. And the last impression being that exit interview and how you reacted when they gave their notice is something people also always forget. Those are the two impactful moments that stay in people's minds over time.</p><p><strong>Joel Hooks:</strong>         Yeah, no doubt. Well, Laurie, it was really great chatting with you this afternoon. I appreciate you taking the time out and I enjoyed it very much.</p><p><strong>Laurie Barth:</strong>       Yeah, thanks so much. This was fun.</p><p><strong>Joel Hooks:</strong>         Cheers.</p>",
    "slug": "escaping-the-software-trough-of-despair-with-laurie-barth",
    "description": "<p>When you are a consultant, you can't just learn a framework and then choose a place to work that uses it. Your clients will have their own needs and constraints that you're going to have to adapt to serve your client well.</p><p>The constant learning can feel like a freefall. Constantly feeling dumb is panic-inducing. There's this trough of despair in software, where you swing between feeling like a genius and then going right back to despair.</p><p>We can't just learn, but we have to learn well. It's critical to retain what you learned. Keep a developer journal, start a blog for yourself, discuss what you learned in a study group, etc. The less you have to relearn things, the less time you'll be spending in the trough of despair.</p><p>The dreaded technical interview tends to have the problem of not testing you on anything that you should be learning. You have to spend your time cramming and hoping that the interviewer gives you problems that are still fresh in your mind. A one size fits all solution doesn't work and doesn't end up being objective. Candidates should get the opportunity to show off their skill and what they already know instead of figuring out what they don't know.</p><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/escaping-the-software-trough-of-despair-with-laurie-barth/transcript\">\"Escaping the Software Trough of Despair - With Laurie Barth\" Transcript</a></p><h3>Laurie Barth</h3><ul><li><a href=\"https://twitter.com/laurieontech?lang=en\">Twitter</a></li><li><a href=\"https://laurieontech.com\">Website</a></li></ul><h3>Joel Hooks</h3><ul><li><a href=\"https://twitter.com/jhooks\">Twitter</a></li><li><a href=\"https://joelhooks.com/\">Website</a></li></ul>",
    "duration": 2183,
    "episode_number": 51,
    "contributors": [
      "Joel Hooks"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/29y0p",
    "path": "/podcasts/escaping-the-software-trough-of-despair-with-laurie-barth",
    "published_at": "August 14th, 2019",
    "url": "https://egghead.io/api/v1/podcasts/escaping-the-software-trough-of-despair-with-laurie-barth",
    "edit_podcast_url": "https://egghead.io/podcasts/escaping-the-software-trough-of-despair-with-laurie-barth/edit"
  },
  {
    "id": "podcasts-00000000000000000213",
    "title": "Embrace Challenges With A Growth Mindset With Veni Kunche",
    "summary": "Veni Kunche discusses computer science degrees, growth mindsets, and diversity. ",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/a5c37519-9a29-464b-8008-b9aae32c0cd4/podcast_joel_with_veni_kunche_v1_mp3_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/55d7f360-05c1-43af-9c2d-eb89e156734a/6c4aef3a-3aa6-4634-8e0a-1daed53c19e8/veni_kunche.jpg",
    "simplecast_uid": "a5c37519-9a29-464b-8008-b9aae32c0cd4",
    "transcript": "**Joel Hooks:**               Hi, Veni.\n\n**Veni Kunche:**               Hi, Joel. How are you?\n\n**Joel Hooks:**               I'm doing great. How are you doing?\n\n**Veni Kunche:**               Good. Thank you.\n\n**Joel Hooks:**               I have several things I'm excited to talk to you about. One, you started a business in the last year, and I really want to get into that and what it's about. But, first, I wanted to kind of talk about technology and being a software developer, and, specifically, you've got a master's and a bachelor's degree in computer science.\n\n**Joel Hooks:**               You have that education, and I was wondering, how does that education prepare you for your career in software development development?\n\n**Veni Kunche:**               I studied computer science in 1991 to 2003. So, at that time, it didn't quite prepare me for a career in software development.\n\n**Joel Hooks:**               There wasn't really an Internet, even. I mean, so it's all changed radically since then, I would think.\n\n**Veni Kunche:**               Yeah. Yes. Yes, it did. Yeah. So I studied computer science, and it was a great experience, but it was a little bit tough for someone like me, who was new to coding. It seemed like a lot of my classmates, everybody already knew how to code, and I kind of felt a little bit behind.\n\n**Veni Kunche:**               But, even though it was difficult, I got through it, and, as I was approaching graduation, I learned that the real world software development wasn't exactly what I learned in computer science, in my classes.\n\n**Joel Hooks:**               They hold that back until you're actually about to graduate, and they're like, \"Actually, the real world might be different than what we've been doing.\"\n\n**Veni Kunche:**               Yes, yes. So towards my junior year is kind of when I realized that, so I started volunteering for side projects and nonprofits to gain some real world experience, and, also, that's when I realized that there's also an IT-focused business degree. I was like, \"Oh, shoot, that's probably what I should've studied.\"\n\n**Joel Hooks:**               Right.\n\n**Veni Kunche:**               But I then took some classes there, too, that really helped. But, yeah, in computer science, often there's a lot of misconceptions about what it is. It doesn't quite prepare you for software development. It's more like a lot of theory.\n\n**Joel Hooks:**               So how would you describe computer science, then? Because I agree. I think there's a lot of misconceptions about what computer science is vs. the engineering side, perhaps, if you wanted to compare the two. But what is computer science?\n\n**Veni Kunche:**               Computer science, I feel like it's the study of what is a computer. Things we learned was like how do you build a compiler from scratch or a parser from scratch or a database from scratch, which is all useful to learn, like what computers do. But in the real world, we're using computers to build software. So it's not there in computer science, when you're studying it.\n\n**Joel Hooks:**               Yeah. Have you built a compiler since ... After you graduated, have you ever sat down to build a compiler?\n\n**Veni Kunche:**               No.\n\n**Joel Hooks:**               I think it's interesting, though, because there's a lot of current technology, like in the web development space, like Babel and other things like that, where people are really getting down there to the compiler level, and that knowledge is useful.\n\n**Joel Hooks:**               I know a bunch of people that don't have that formal education background are now kind of not necessarily scrambling, but trying to learn that theory and understand, \"How do I build a compiler, parse an AST, or do that sort of thing?\", which is interesting, as well. So it can and is useful, for sure.\n\n**Veni Kunche:**               Yes, yes.\n\n**Joel Hooks:**               But my personal practice, I'm mostly what I call a glue coder. I take all the really smart ideas that other people do and then just assemble them into something that works for users.\n\n**Veni Kunche:**               Yeah. I'm the same way.\n\n**Joel Hooks:**               I think there's a convergence, whether you go to school, whether you don't. If you want to be employed, there's only so many research spots available in the world, so the rest of us are just kind of building things ...\n\n**Veni Kunche:**               Yeah.\n\n**Joel Hooks:**               ... to facilitate commerce and whatnot.\n\n**Veni Kunche:**               Yep.\n\n**Joel Hooks:**               You said it was a little rocky, because you came into it not understanding how to code, and I had the same experience. I think it's hard. I was wondering, when you first encountered it, how did you overcome the process of just the general weirdness of being introduced to computer code?\n\n**Veni Kunche:**               For me, it was, I think, one of the hard things, going through college, was that it sort of becomes a competition, and I felt like, \"Oh my gosh, I'm behind. I need to catch up.\" But I think, after a while, I decided to let go of that mentality and just focus on, \"Doesn't matter what grades are. I'm just going to learn to learn and understand.\"\n\n**Veni Kunche:**               I think that really helped a lot. It kind of became like a puzzle I was trying to solve - or like things I wanted to build, once I started focusing on that, it became a little easier for me.\n\n**Joel Hooks:**               I'm reading a great book right now called Mindset that talks specifically about that. It's the growth vs. fixed, where if it's a game or if it's a contest, then you're competing against other people, and that's a fixed mindset.\n\n**Joel Hooks:**               But if you consider this just a challenge for yourself and something that you want to learn, that's a growth mindset, and it's statistically, scientifically proven that that mindset leads to more success, especially in hard situations like that, like in an academic environment. People that see it as a contest, \"Nope. I'm going to lose,\" and then they just quit ...\n\n**Veni Kunche:**               Yep.\n\n**Joel Hooks:**               ... vs. the other way, which I think that's probably true professionally, too, honestly. That's just a way to look at life.\n\n**Veni Kunche:**               Yeah, yeah. I definitely agree. Yeah, I didn't think about it that way, but that really changed how I view things now. It's definitely not a competition. It's just my personal goals and meeting the requirements of the users. Once you prioritize that, it kind of becomes easier.\n\n**Joel Hooks:**               Yeah, and I love the puzzle aspect. I think that's probably my single favorite thing about this career, is that if you treat it as such, it's a constant, interesting puzzle that you get to solve on a daily basis. That part of it is super fulfilling for me, anyway.\n\n**Veni Kunche:**               Yeah, same for me, too. Every new framework, everything is kind of like, \"Oh, how do figure this out? How do I make this work?\"\n\n**Joel Hooks:**               Yeah, I've seen a lot ... People talk about fatigue, but, at the same time, it's really actually kind of fun.\n\n**Veni Kunche:**               Yeah, yeah. It is fun.\n\n**Joel Hooks:**               So what are your favorite software tools? What are you using now? What's your favorite stack?\n\n**Veni Kunche:**               Right now, I'm a big fan of Netlify. I recently used it to launch a number of projects, and it's been great. It lets you do web posting, but also lets you build and deploy your projects pretty fast and also lets you set up your HTTPS automatically. Everything just works.\n\n**Joel Hooks:**               Yeah, it's great. I love it.\n\n**Veni Kunche:**               Yeah, and I'm in the process of moving a lot of my projects onto it. So it's one of my favorites right now. Also, Gatsby has been awesome. It's a static site generator, and I don't even know React, but I was able to build a pretty good website just readily.\n\n**Joel Hooks:**               So there's a Create React app, which is the kind of official tool for scaffolding up your React app, and Gatsby has replaced that for me in general. The approach, the static rendering and the GraphQLs is really, really neat.\n\n**Joel Hooks:**               You've been doing this for a while. You said you graduated in 2003. What's changed? What's the big differences or the big shifts in kind of how we approach these problems? What changed over that time, since you've been doing this?\n\n**Veni Kunche:**               When I was starting out, there was never a focus on user experience. That's a big thing that has changed, which I'm very glad for. I think we never thought about, \"How does the user use this? How do we make their life better?\" It was always \"build something and teach them how to use it.\"\n\n**Veni Kunche:**               That was kind of the mentality for most of my workplaces, and I'm really glad that kind of mentality is changing and we're working more on user experience and how to make it better for the user. So that's been a big change, from what I've seen.\n\n**Joel Hooks:**               In terms of the puzzle aspect of this job, what's your favorite sort of software challenge? What gets you excited when you get to sit down and solve a problem?\n\n**Veni Kunche:**               For me, it's ... I think the newness really excites me. I know I can't always work on new things. That's why I have a lot of side projects. I think there are so many different frameworks. There are so many different tools. But everyone has their reasons for starting, getting everything suitable for certain things.\n\n**Veni Kunche:**               So it's kind of very interesting how this creator has figured out that this is a good way to go about it for this problem and so on, and for me to learn it and figure out which framework is best for this project vs. another one. So I think just learning the new thing and trying to apply it for the right problem, I think that that excites me a lot.\n\n**Joel Hooks:**               Yeah, it's interesting, too, when you combine the picking tools with the idea of user experience. I think that ... because that's part of it, at the end of the day. UX isn't just the visual design, obviously, but it's also the tools that we use and our ability to address concerns and create features, too.\n\n**Veni Kunche:**               Yes.\n\n**Joel Hooks:**               What are you working on right now?\n\n**Veni Kunche:**               Currently, I'm working on Diversify Tech. It is a project that kind of came out of my own need. It's where I'm sharing resources, like jobs, events, and opportunities for underrepresented people in tech, because, a lot of times, there are opportunities out there, but they're shared in closed networks, and sometimes, when you're new to tech or when you're one of the few people in tech, you're just not aware.\n\n**Veni Kunche:**               So one of the goals with Diversify Tech is to kind of bring awareness to opportunities for underrepresented people.\n\n**Joel Hooks:**               With Diversify Tech, how are you bringing awareness? What are the tools that you're using? I don't necessarily mean software tools, either. Sorry. I mean, what's your approach, in terms of bringing awareness?\n\n**Veni Kunche:**               Yeah. So I've sort of been unconsciously building a community. At previous Diversify Tech, I started a newsletter called Code with Veni, which was to help women get into tech, and I've sort of been building a community. With that community, I kind of figured out some of the things that people need.\n\n**Veni Kunche:**               So using that community to start out with, I'm expanding that community more and connecting with other networks, other communities, and kind of bringing awareness in that way.\n\n**Joel Hooks:**               There's also ... There's kind of a job placement or kind of matchmaking service for employers and potential candidates, too.\n\n**Veni Kunche:**               Yes, yes. One of the things I've noticed is that a lot of companies are working on diversity and inclusion in their workplaces, but some of the newer companies, they're not quite sure how to get started, or they're not aware that a job description can make a difference in who applies to your job, or if you target only computer science universities that you might not be aware of other candidates that would be interested. So things like that, I'm trying to help out employers to ...\n\n**Joel Hooks:**               So it's almost like a consulting aspect to the business.\n\n**Veni Kunche:**               Yes.\n\n**Joel Hooks:**               Yeah, that's interesting. I'm a big believer that most people want to do the right thing, and when you hear, \"Oh, we need an inclusive and diverse company,\" I think most people would want that, at the end of the day. But how do they get there and do it in a way that makes sense and actually works and fits the bill? That's probably a hard question for people to solve.\n\n**Veni Kunche:**               Yes, yes.\n\n**Joel Hooks:**               So you launched Diversify Tech in 30 days. I watched a Twitter thread that you created. You're going through, and you actually built the business from the software and the ability to be a business in a 30-day challenge. I was wondering what that process was like for you, what you learned from that experience.\n\n**Veni Kunche:**               Initially, the idea for Diversify Tech, I came up with it last year sometime and actually was like ... Over a weekend, I built something very minimal, and I put it out there to see if people were interested. I got a lot of positive reception from it, and it was great.\n\n**Veni Kunche:**               But I have a job. I have a baby. With that, I just did not have the time to work on it more, and then I'm part of a community called Women Make. In October, I think they wanted to do this 30-day challenge, where each of us, our own personal project or work project or business, take that project and launch it in 30 days.\n\n**Veni Kunche:**               It was an amazing experience, because I think it really made me focus, figure out a plan for it, what am I going to include, and how am I going to do this. It was great to also have the support of the community, because all of us were working on a variety of different things. One of my friends was writing a book. Another person was working on their blog.\n\n**Veni Kunche:**               It was all way different, but we all had this main goal to put something out there, and we also asked each other for feedback and incorporated it. It was just awesome to have that support. Actually, at the end of it, we also, all of us launched on Product Hunt, and if it wasn't for the community, I probably would not have thought about doing that.\n\n**Veni Kunche:**               So, because I launched, I actually got number two most promoted product of the day, and I also got a Golden Kitty Award.\n\n**Joel Hooks:**               Oh, nice. That's awesome.\n\n**Veni Kunche:**               Yeah, and, honestly, I wouldn't have thought about it if it wasn't for this community, that I should do this.\n\n**Joel Hooks:**               So, after that's done, is that ... I mean, launching is so difficult, I think. Ideas are easy, they say, but the actual execution is the challenge. Since then, since you did that challenge, have you been keeping it up, and is it something that you continue to work on?\n\n**Veni Kunche:**               Yes, definitely. I've been trying to grow the community more, and, also, finally, I've been trying to start a business for a very long time. But this is my first business where I have actual customers and that's finally generating revenue. So it's been great that way. So I'm trying to connect with more employers to help them with their diversity initiatives and trying to get more people hired.\n\n**Veni Kunche:**               I mean, diversity can be approached in so many different ways. Right now, I'm trying to figure out what the best way is. I'm trying different ways, and we'll see how it goes. But, so far, it's going well.\n\n**Joel Hooks:**               What does it mean to ... When somebody says that people need to do the work for diversity, what does that mean?\n\n**Veni Kunche:**               First, kind of realizing that we all have biases and, after acknowledging that, kind of trying to figure out that maybe we can do something about it, and you know something? It doesn't have to be this major thing, but taking small steps.\n\n**Veni Kunche:**               For example, somebody I follow on Twitter, Tatiana Mac, she said that, \"Okay, here are some simple ways that you an include gender pronouns\" - for example, included in your Slack profile or your email signature and things like that. It's way simple. I just took ten minutes to make all of those changes.\n\n**Veni Kunche:**               So I think first is being aware that we have a problem and then working towards some of the inequalities that exist in tech.\n\n**Joel Hooks:**               Yeah, and it's kind of ... I feel like representation and just visibility has been a big and important factor. I mean, does that make a difference, if we see more people doing this thing, and young people see it and get the aspiration? I feel like that's kind of part of the overall puzzle.\n\n**Veni Kunche:**               Yes, yes, definitely, and one of the things I'm ... I have a newsletter called Code with Veni, and that's kind of the main theme behind it, is to show women that there are people like them out there so that it encourages them to think that they can do it, too - and they can. Even for me, it has helped a lot to see other women that are speaking or things like that. It really helps me, also, too.\n\n**Joel Hooks:**               Sure, because you're organizing it, but I imagine you're learning and growing through the entire process and meeting people and benefit from the community as well, right?\n\n**Veni Kunche:**               Yes, yes. Definitely. For example, I've been invited to podcasts before, but I've never said yes ...\n\n**Joel Hooks:**               Oh, wow. Thank you.\n\n**Veni Kunche:**               ... because I was like, \"People like me don't do these kind of things.\" For speaking, for the longest time, I never did anything, because I just never saw people like me do it. I was like ... It really helped, for example, Lindsey and Ali, who have been on your podcast, who are like, \"Oh, we've been on Joel's podcast, and it was an amazing experience.\" I was like, \"Oh, people like me can do this.\"\n\n**Joel Hooks:**               Oh, that's great to hear.\n\n**Veni Kunche:**               Yeah, yeah. So, definitely, representation matters, like seeing people like me kind of doing more than the stereotypes, it really helps a lot.\n\n**Joel Hooks:**               Yeah. I agree with that, and doing the work, for me, has been really considering that. I graduated high school in the early '90s, and it just wasn't even a topic. I love that, kind of almost as a society, we're kind of growing past that, and we have a long ways to go, but it's good to me.\n\n**Joel Hooks:**               I think everybody deserves the opportunity to enjoy these lucrative careers and remote work and kind of having it be puzzles every day to solve. I think it's rewarding and want everybody to experience it that wants to.\n\n**Veni Kunche:**               Yes, definitely.\n\n**Joel Hooks:**               So I'm really curious about just building the business, and you mentioned, when you were graduating, you found out there was an IT for business degree that you could've taken. But you didn't, right? You don't have a business degree, and you ...\n\n**Veni Kunche:**               No.\n\n**Joel Hooks:**               ... have had a goal to start a business. What's that been like? As opposed to being a software engineer, what's the business side of it like, and how have you approached that, or how do you think about that? Maybe what did you learn in the process?\n\n**Veni Kunche:**               So, yeah, I do not have a business background, and it's been an experience to kind of learn a lot of things on my own. Marketing has been a big weakness for me, so ...\n\n**Joel Hooks:**               Yeah, I feel that one.\n\n**Veni Kunche:**               I know. I actually discovered the MegaMaker community through a book called Marketing for Developers.\n\n**Joel Hooks:**               So that's Justin Jackson's ...\n\n**Veni Kunche:**               Yeah.\n\n**Joel Hooks:**               That's his community, right?\n\n**Veni Kunche:**               Yes, yes, and it's ... Things like that, I found different communities to kind of help me with my business. I am also part of a group called Dreamers and Doers, which is for women entrepreneurs, and we do a lot of exchange of information, like I give tech help and they teach me how to do social media marketing, things like that.\n\n**Joel Hooks:**               Yeah.\n\n**Veni Kunche:**               So it's been a process. It's not something I learned overnight. It's been the past three years, I've been picking up things here and there, like marketing or copywriting, which I'm still trying to figure out.\n\n**Joel Hooks:**               That feels like a lifelong pursuit. One thing I'm always amazed at, I think there's a lot of crossover, in terms of the puzzle aspects of business and software ...\n\n**Veni Kunche:**               Yep.\n\n**Joel Hooks:**               ... because it's fun and interesting. You have to figure it out, and there's so many facets to it.\n\n**Veni Kunche:**               Yes. Yeah, I think sometimes it helps to kind of look at the data behind it for me, because, for social media strategy, what's working, what's not working, kind of to see the data behind it, it's like a puzzle that I'm trying to figure out - What is working? What's not? Yeah.\n\n**Joel Hooks:**               So my personal favorite ... I don't know if you're familiar with Copyhackers and their materials, but Joanna Wiebe puts out amazing work, and it's one of my favorite places for learning the hard tech, writing persuasive copy, which is interesting, because once you do this, once you spend several years trying to get better in this space, it affects everything.\n\n**Joel Hooks:**               It kind of affects your communication overall, and I feel like I'm always pitching. For better or worse, whenever I'm writing, like I'll be writing a text message, and I'm like, \"I'm pitching again.\" It just kind of seeps into your soul, and I think it's like writing software. It kind of does the same thing.\n\n**Veni Kunche:**               Yeah, yeah. That's [inaudible 00:18:38].\n\n**Joel Hooks:**               So you've been writing a newsletter, Code with Veni, and I was wondering, why did you choose that format over kind of maybe a more traditional blog format?\n\n**Veni Kunche:**               Code with Veni started ... Actually, before Code with Veni, I used to do online answers for people, kind of like one-on-one mentoring for people who needed it, and I started seeing that people had the same questions again and again. It was either about salary negotiation or \"What is the first thing that I do if I want to get into tech?\" or \"Which programming language should I start with?\"\n\n**Veni Kunche:**               It was a lot of common questions, so I was like, \"One-on-one answers is not sustainable and scalable, so let me see if I can reach out to more people and share this knowledge with more folks.\"\n\n**Veni Kunche:**               So that's why I started the newsletter, and then, also, I realized that, again, because of lack of diversity in tech, I noticed that a lot of bloggers who are women are not highlighted as much. So I started focusing on that, too. There are a lot of women bloggers, but you just don't see them a lot, so I started focusing on them and amplifying their work.\n\n**Veni Kunche:**               So it's kind of like ... I think I'm trying to do both share information, but also amplify other people who are already doing the work. So that's why I chose the newsletter format instead of just blogging.\n\n**Joel Hooks:**               For me, it's almost more personal, like the style of writing, and it doesn't necessarily have to be. I just kind of feel like I fall into a different mode when I'm writing ...\n\n**Veni Kunche:**               Yeah.\n\n**Joel Hooks:**               ... an email vs. writing a blog post. I agree. I wish I did both more. I feel like I always need to be blogging or writing or doing something, like that constant drive to just do something.\n\n**Veni Kunche:**               Yeah. I mean, that's another reason. Blogging is a lot more time-consuming, too.\n\n**Joel Hooks:**               Yeah. It's more formal, I think. It's out there, right? It exists in the world, so you have to polish it more and that sort of thing.\n\n**Veni Kunche:**               Yeah.\n\n**Joel Hooks:**               So community seems to be a recurring theme in the discussion and what you're doing. It's like this idea of building communities, and you mentioned a couple business-related MegaMakers and Dreamers and Doers. I was wondering what other communities you generally recommend to people that are aspiring software developers or software developers?\n\n**Veni Kunche:**               I mean, dev.to is one of my favorite software development communities right now.\n\n**Joel Hooks:**               Yeah, they're great.\n\n**Veni Kunche:**               It's a very supportive community. People are receptive. People are more collaborative, and they give you constructive feedback instead of just critique, things like that. So dev.to is one of my favorites, and I think I mentioned Women Make is another great community for women who are making products. It's a very \"go, go, go\" kind of community, which really helps to help with your motivation.\n\n**Veni Kunche:**               I also love Indie Hackers, which seems to be a lot of software developers plus solopreneurs kind of group.\n\n**Joel Hooks:**               I noticed Rosie Sherry being kind of their community liaison over there, and it was a great community before, but now they have a person that's actively in there, tunneling I think is the word, which is a weird word. I had to look it up, but it's the idea of getting in there and getting the community to do things and stuff.\n\n**Joel Hooks:**               I love what they're doing at Indie Hackers. It's such a neat thing, because Stripe bought them, but then they fund them, and they don't really expect anything. There's no commercial goal, or they're not trying to profit or squeeze ROI out of it. It's like they're just very well-funded and now can grow this community organically, and I think that's awesome.\n\n**Veni Kunche:**               Yeah, yeah. I love that community. I especially love the stories that founders share, because I think, a lot of times, we don't get the full story, but with Indie Hackers, I like that they share what kind of marketing did they do to get this to work. Things like that are very useful when you're working on similar products.\n\n**Joel Hooks:**               Yeah, it's kind of in the trenches, and I love the crossover. It feels to me like ... I don't know. I don't want to say hacker news, because people have a really negative opinion on that, but maybe how it was back when it first started, but without the goal of ...\n\n**Joel Hooks:**               I don't know, because it's about Indie Hackers, right? It's about bootstrapping businesses. It's not about venture capital, which is different and unusual, I think, in the space of building business, and my preferred. That's what I love. I love that world. It generally fosters better communities.\n\n**Joel Hooks:**               I think dev.to is one of the best, my current favorite in terms of software development. I absolutely love what Ben and them have been doing with that, and I think it can be a little overwhelming, too. So how do you recommend people get started on dev.to?\n\n**Veni Kunche:**               dev.to, I think you can either be just a reader, if you want, and just learn from others. I see some folks kind of asking questions or kind of bringing up topics that they want to talk about. So that seems like an easy way to get started, and I see a lot of people getting started with blogging because of dev.to.\n\n**Veni Kunche:**               They try out a topic. It may not be a huge blog post. They start off with a small topic, and, as they get feedback, they write more and more. So I've been noticing that a lot, too, I think because the community's supportive. It makes it easier. You don't have to be afraid that people are going to critique you.\n\n**Joel Hooks:**               Yeah, because they just don't really tolerate any sort of ... You can't attack people.\n\n**Veni Kunche:**               Yes.\n\n**Joel Hooks:**               You can't be super negative. If you're not going to do that, then you just don't belong here.\n\n**Veni Kunche:**               No.\n\n**Joel Hooks:**               You can go to Reddit or wherever, where that sort of thing is allowed.\n\n**Veni Kunche:**               Yeah, they moderate really well, so that helps a lot.\n\n**Joel Hooks:**               I generally recommend that folks start their own space, but, at the same time, if somebody hasn't blogged at all, if you haven't written anything and published it in the public, I think it's just such an amazing spot. I know several people that have used that as their first spot to go blog and actually do the thing, which is amazing. There needs to be more space like that, where people can feel safe to express themselves.\n\n**Joel Hooks:**               Speaking of ... What do you think, in terms of individuals? Each of us is an individual, and how do we contribute or help create better online communities?\n\n**Veni Kunche:**               I think it helps to be a good listener, too, instead of ... Participating in a community is listening to our fellow developers or so on, see how we can help them. It seems like a weird thing to suggest, but being nice and respectful of people and their opinions, accepting that we're not always right about everything, but we should think about others' opinions and see how we can learn from them. I think that kind of attitude helps.\n\n**Veni Kunche:**               I think being open to people who are different, who have different opinions. I think having that kind of attitude helps a lot. In all of the communities that I've mentioned so far, like MegaMakers and Women Make and dev.to, I think the common theme they have is they're all really supportive. A lot of the times, in these communities, I may not be the ... I may be the minority in the group, but I still very accepted.\n\n**Joel Hooks:**               Yeah, so ... Well, I would say that, I mean, the word might be inclusive, right?\n\n**Veni Kunche:**               Yes.\n\n**Joel Hooks:**               We're listening, and I think it's actually ... It's a learned skill. We may be born with it early, though I have a young child, about the same age as yours, and they're little tyrants, a lot of the time. So I feel like that sort of thing is learned over time, like accepting others, and it's something you can work on. It's an actual skill that you can build.\n\n**Joel Hooks:**               Well, Veni, I really appreciate you taking the time out of your day to talk to me. I'm glad you've done your first podcast. I hope you consider doing more, because you're awesome, and I think you have a lot to share. Thank you so much for hanging out.\n\n**Veni Kunche:**               Yeah. Thank you so much for having me. It's been a great experience. Thank you.\n\n**Joel Hooks:**               Good to hear. Bye-bye.\n\n**Veni Kunche:**               Bye.",
    "slug": "embrace-challenges-with-a-growth-mindset-with-veni-kunche",
    "description": "<p>There are a few options for those trying to start a career in web development, teach yourself, join a bootcamp, or go to college. Veni chose the college route, she got a master's degree in computer science, which is awesome, but it didn't fully prepare her for web development. Computer science is primarily theory and it doesn't really prepare you for the engineering side of the job. There are only so many research positions where you'll get to applying your degree directly, the vast majority of us are facilitating commerce.</p><p>When Veni was earning her degree the competition between her peers was fierce, but in order to grow she had to let go of that competition mentality. It becomes a puzzle for you to solve instead a competition between others. Having this kind of growth mindset is key to unlocking your learning potential.</p><p>You hear about JavaScript fatigue everywhere and all the time. It's exhausting to try to keep up with the Joneses. Let go of the competition and do this for yourself. Each new technology is an interesting puzzle for you to solve.</p><p>Veni is currently working towards increasing the diversity in the tech industry. She's building a community, figuring out what people need, and building awareness of opportunities. A lot of companies are trying to improve their diversity, but a lot of them aren't aware of how to do it in the best away.</p><p>To work for diversity we need to realize that we all have biases, and figure out how to do something about them. We also need to understand that visibility and representation has a considerable impact. When you're a white male you get role models everywhere you look, people to look up to and help you realize that you too can get where they are. Underrepresented people don't have role models everywhere you look in every field you could possibly want to be in.</p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/embrace-challenges-with-a-growth-mindset-with-veni-kunche/transcript\">\"Embrace Challenges With A Growth Mindset - With Veni Kunche\" Transcript</a></p><h3>Resources</h3><ul><li><a href=\"https://www.diversifytech.co/\">Diversify Tech</a></li></ul><h3>Veni Kunche</h3><ul><li><a href=\"https://twitter.com/venikunche?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor\">Twitter</a></li><li><a href=\"http://www.codewithveni.com/\">codewithveni.com</a></li><li><a href=\"https://dev.to/venikunche\">Dev.to</a></li><li><a href=\"https://www.diversifytech.co/\">Diversify Tech</a></li></ul><h3>Joel Hooks</h3><ul><li><a href=\"https://twitter.com/jhooks\">Twitter</a></li><li><a href=\"https://joelhooks.com/\">Website</a></li></ul>",
    "duration": 1559,
    "episode_number": 50,
    "contributors": [
      "Joel Hooks"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/1en2w",
    "path": "/podcasts/embrace-challenges-with-a-growth-mindset-with-veni-kunche",
    "published_at": "August 2nd, 2019",
    "url": "https://egghead.io/api/v1/podcasts/embrace-challenges-with-a-growth-mindset-with-veni-kunche",
    "edit_podcast_url": "https://egghead.io/podcasts/embrace-challenges-with-a-growth-mindset-with-veni-kunche/edit"
  },
  {
    "id": "podcasts-00000000000000000212",
    "title": "Gaining Freedom and Helping Others Find Success with Pariss Athena",
    "summary": "Pariss Athena talks about how becoming a developer gave her freedom and the means to help others succeed. ",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/4534e24b-3dac-43ab-86c5-d7502a368651/podcast_joel_with_pariss_athena_v1_mp3_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/55d7f360-05c1-43af-9c2d-eb89e156734a/4f8f3c6c-d6be-45aa-ac3a-774756d646fb/pariss_athena.jpg",
    "simplecast_uid": "4534e24b-3dac-43ab-86c5-d7502a368651",
    "transcript": "<p><strong>Joel:</strong>               Hi Pariss.</p><p><strong>Pariss:</strong>             Hey Joel.</p><p><strong>Joel:</strong>               I'm really interested in your general story and about what you've been up to. It's something I've been following since last December I think is around the time where you really kind of highlighted my Twitter timeline, so I want to get into that, but you're fairly recent to this field of web development and you've become a web developer, and you've done lots of different things. You're an actor, you were in the personal wellness and hygiene space, and I was wondering at what point did you have the F this moment that made you switch and change your mindset and pursue this career in web development.</p><p><strong>Pariss:</strong>             It kind of started where I was a waxer and I was okay with being a waxer. I made decent money but it was just that I really enjoyed, I met different people all the time. I even got to wax a few celebrities. It was a really unique sort of career I guess, but I knew that being a waxer, I couldn't move up from there so I decided to enroll in school for marketing. During my time in school I actually went to a function that my brother's school was holding and when I was walking down the hallway of his school, on the left and right side of me there were posters and pictures of Obama and just quotes talking about STEM and STEAM and kids needing to learn to code.</p><p><strong>Pariss:</strong>             I was like, \"What is coding? I keep hearing about it.\" So I ran into my brother's principal and I was like, \"Hey, why are kids learning to code? I don't understand what it is.\" He explained to me. He was like, \"You know, if you don't have some type of technological background you're probably going to get left behind because people are literally being replaced by machines.\"</p><p><strong>Pariss:</strong>             Which is true because as a waxer I was losing clientele to laser hair removal, which is a machine, so that hit home. So I was like, \"All right. Let me find out what coding's about.\" So I went to school a few days later and I was like, I talked to my advisor and I was like, \"Hey, I want to get into coding. Where can I go and learn to code?\" Then she told me about the Resilient Coder's Boot Camp, which happened to be in the same building as my school. Then I went to a hack-a-thon. I got accepted into their program and then it took off from there.</p><p><strong>Joel:</strong>               So you went straight into from basically no experience in development or coding or what have you and jumped right into the boot camp. How was that as an experience? Going from kind of zero to 60 I would assume, because boot camps are intense.</p><p><strong>Pariss:</strong>             Yeah. It was difficult once we started learning JavaScript. Before that it was all HTML, CSS, learning about sort of marketing ourselves and what a work environment with technologists looks like I guess. It was a lot of that stuff and then we hit JavaScript and that's when everything took a turn for me because I was really good at HTML, I was really good at CSS. I was like, \"I like this.\" I was like, bringing ideas to life visually.</p><p><strong>Pariss:</strong>             I was really good at that and then came JavaScript and making everything functional. I did not get it. My brain just didn't understand. It was just difficult.</p><p><strong>Joel:</strong>               It's like a completely foreign language, right?</p><p><strong>Pariss:</strong>             Right.</p><p><strong>Joel:</strong>               Like you're in a new and weird foreign land. It's almost a vocabulary issue, right? Even hello. Where's the bathroom? Like if you're learning the language and trying to travel.</p><p><strong>Pariss:</strong>             I know. It was a totally different way of thinking and I'm still learning JavaScript.</p><p><strong>Joel:</strong>               Oh yeah, me too.</p><p><strong>Pariss:</strong>             Yeah. Yeah. I feel like I've learned it, but yeah, that's where it got rocky for me.</p><p><strong>Joel:</strong>               I think a lot of people are looking at boot camps and it's an amazing paradigm. I really love the entire space of society that we can go and we can learn this trade and be craftspeople and get good jobs and that sort of thing. But if you were looking back now knowing what you know and where you're at, and we were going to do a boot camp straight from scratch, what would you recommend to prepare or how would you approach it differently?</p><p><strong>Pariss:</strong>             I would probably focus more on JavaScript going straight into a boot camp because I know this isn't for everyone. I think personally for me I got HTML and CSS really easily. It kind of clicked for me really quickly, and then once it got to JavaScript, and I feel like a lot of people without sort of a techy background might have this same struggle, just learning JavaScript is hard. It's just so difficult.</p><p><strong>Pariss:</strong>             Like I said, it's a completely different way of thinking and I would have focused more of my time on learning JavaScript than sort of playing around in HTML and CSS. I would have been like, \"All right, I've got HTML, I've got CSS, the fundamentals. Good. Cool. Let's keep it moving,\" and just spent my time in JavaScript.</p><p><strong>Joel:</strong>               Yeah, and your course is like an eight week course, and that's extremely short amount of time to learn a programming language. Do you think a longer session?</p><p><strong>Pariss:</strong>             Oh yeah. Longer. Also, we were sort of, my cohort was kind of the guinea pigs of Resilient Coders, that cohort. We did learn a lot and all of us, our careers all took off, but the program has changed so much where the cohorts are now learning unit testing and integration testing, backend development. They're learning things that we didn't, we still after graduating we didn't even know those existed. We didn't know about testing, any of those things. I had to learn on the job. For my first job they wanted me to write unit tests and I was like, \"What is that?\"</p><p><strong>Joel:</strong>               Yeah, what's a unit test?</p><p><strong>Pariss:</strong>             Yeah. They're like, \"You don't know what that is? You didn't learn that?\" So there was a lot I guess that I should have learned but I didn't, but that was just my cohort specifically.</p><p><strong>Joel:</strong>               Like how do you even know what you don't know?</p><p><strong>Pariss:</strong>             Right, I know. Yeah, they're just expecting. They're like, \"That's so important. You should have learned that.\" I'm like, \"Okay, but I didn't,\" so I had to learn on the job.</p><p><strong>Joel:</strong>               So who's the standout in this space? Who would you recommend that people pursue in terms of a boot camp or that sort of program?</p><p><strong>Pariss:</strong>             Definitely Resilient Coders which is Boston based. Like I said, they learn full stack. Now they're learning about unit testing and networking. They're learning a whole ton of things that I probably still don't even know about. Then I keep on hearing about [Lambden 00:06:06] School. I haven't done my too much research on it, but I know a few people who graduated and they're all very, very successful and they learn the ins and outs of these programming languages. They're like ready for a job and they're getting amazing offers straight out. I think that's really amazing.</p><p><strong>Joel:</strong>               It's a nine month, 12 hour day program too. It's not joke. They do a part-time one that's 18 months and six hours a day or whatever. It's longer but it's still, it's intense and they're rigorous I would say.</p><p><strong>Pariss:</strong>             Right. I think that's great. I think it's better than needing to go to school for four years and paying tuition. I think a shorter program and being so intense, I think that's a great alternative.</p><p><strong>Joel:</strong>               The one I saw, so Flat Iron is a pretty good one, but what stood out to me with them is for like $150 or something, a low cost, you can take their online Introduction to JavaScript. They have several introductory courses that you can take before you go to the school, which I thought that was interesting as well, kind of coverage of ... I don't know anything aspect of entering these things, which can be daunting.</p><p><strong>Pariss:</strong>             Right, right. You can kind of learn anything online. You don't even need to go to a boot camp. You could definitely just be self-taught.</p><p><strong>Joel:</strong>               Like generally speaking because we all kind of regardless of who you are in the US you probably spent eight to 12 years in our public education.</p><p><strong>Pariss:</strong>             Oh yeah.</p><p><strong>Joel:</strong>               So having that, needing that carrot and stick of the grades or just somebody to hold you accountable can be super valuable. But I agree, I learned like on nights and weekends, but it was full stack actually and just with books and doing tutorials and just getting in there. But it's like consistency. You have to be consistent and self-motivated to do that.</p><p><strong>Pariss:</strong>             Right. It's definitely up to the individual. You definitely have to be disciplined.</p><p><strong>Joel:</strong>               I know I've heard you say a few times that the code itself, the JavaScript and just that isn't really what drives you and what you're passionate about. It's more of a vehicle to get to where you want to be, and I was wondering what are you passionate about? Where are you going to use these tools that you've been developing?</p><p><strong>Pariss:</strong>             Honestly I'm using coding just for financial stability. My end goal at the very end of the day is freedom. I don't want to have to work for anyone, so I would take what I get from coding and maybe put that into real estate, invest it. I don't know, just invest it into anything that will bring me some type of stream of income.</p><p><strong>Pariss:</strong>             Right now I'm just trying to learn code though. I really do love acting and writing and all of that, but I did have to put it on hold because those industries, it's really hard to make money, especially if you're a newbie and you're coming in. You don't know anyone. You don't have any connections. It's hard to get work first of all and then to get paid is even worse, so I just kind of put those aside for now.</p><p><strong>Joel:</strong>               Like the luck factor, the real extreme.</p><p><strong>Pariss:</strong>             Yeah.</p><p><strong>Joel:</strong>               It's a factor in everything, right? With the luck factor really presents itself with Hollywood, so.</p><p><strong>Pariss:</strong>             It's true. Yeah, Hollywood is a super cutthroat industry and it terrifies me, so I feel like if I go back into it it's going to be because I do know people, just kind of going in as a wide-eyed inspired actress it can be a little scary.</p><p><strong>Joel:</strong>               I've had this discussion a few times and to me the idea of passionate's fine. You're passionate about something and you want to do this. But then there's the opposite side of that. How do you fund passion? I don't think you necessarily have to be super passionate to do your job well as a web developer, but can use it as a lever to fund what it is you really want to do.</p><p><strong>Joel:</strong>               Whether that's good works or your own personal time and how you want to frow as a human. All that and just our modern day and age requires that it be funded. So it sounds to me like you have kind of an entrepreneurial bend. That's me too. I started programming not because I was really passionate about coding, but this is the way I can build something that's my own on my own terms and for myself.</p><p><strong>Pariss:</strong>             Right. Yeah.</p><p><strong>Joel:</strong>               And help people, right? You've got to make money to be able to help people in a lot of instances I think too.</p><p><strong>Pariss:</strong>             I know. That's what I'm going through right now. I have to make money to continue building and expanding on my community and being able to do things for people within my community. That also pushes me though to I want to continue getting better. Even though engineering is not my passion, development is not my passion, my passions drive me to become better and kind of grow in this industry because obviously the better you get, the more years of experience you have, the better you get paid and so that's just what drives me.</p><p><strong>Joel:</strong>               I've heard you talk a lot about user experience design in engineering as something that you really have been drawn to, and I think that's probably where HTML and CSS were important and you took to them.</p><p><strong>Pariss:</strong>             Right.</p><p><strong>Joel:</strong>               I was wondering what do you love about user experience design and what draws you to that?</p><p><strong>Pariss:</strong>             I just think it's really cool. I know a few UX designers and I watch them work and they're just so particular and they think of things that I don't. When it comes to buttons and they're like, \"You know, does the user have to extend their thumb this far to press this button? Do users want to do that?\" It comes down to those little things and to me that's amazing.</p><p><strong>Pariss:</strong>             I wonder how they view the world. I want to see the world through their eyes because I feel like I'm missing so much and I just think it's really cool. I feel like that's something I would have probably truly been passionate about, but I also didn't know about UX design. I knew about coding and I was like, \"I have to get into coding.\" I didn't know UX design was a thing. I didn't learn until not that long ago.</p><p><strong>Joel:</strong>               That was probably through Twitter, huh?</p><p><strong>Pariss:</strong>             Twitter, yeah.</p><p><strong>Joel:</strong>               That's where I came across your profile on Twitter and you use Twitter in kind of a similar ... It's my internet social place but it's beyond that, right? It's this place to network and meet people and it has had a profound effect on my personal career. For you, how do you explain Twitter to people that might not be familiar with it or haven't figured it out?</p><p><strong>Pariss:</strong>             Twitter is that platform you don't want to delete from your phone. That's the app that you need to keep in your phone and don't clear it for storage or storage space or anything. Twitter, there is an unbelievable amount of opportunity that comes through that platform. I just recently got my new job off of Twitter. I've made amazing connections off of Twitter.</p><p><strong>Pariss:</strong>             I've traveled because of Twitter. I'm doing speaking engagements because of Twitter. If you utilize it correctly obviously and you're using it to network and build a circle of smart and well connected people, then it's going to work to your advantage.</p><p><strong>Joel:</strong>               I think it's weird to a lot of people when they first make contacted. Like, \"What am I supposed to do with this? I follow ...\" whatever the celebrity is and actors and Hollywood types, and to me it's like well, you might be doing it wrong.</p><p><strong>Pariss:</strong>             It's true. I know. I tell people. They're like, \"So how did you get this? How did you find out about this?\" I'm like, \"Twitter.\" Everyone always laughs at me and they're like, \"Twitter,\" because they know it for the memes and the gifs or gifs, however you pronounce it. They use it for that stuff and I'm like, \"Yeah, you can use Twitter for that to look at it and stuff, but ...\"</p><p><strong>Joel:</strong>               I do use it for some entertainment. I'll follow entertainment people or people that think in interesting ways, but for the most part it's like my industry and I want to broaden my spectrum of what's going on and what's happening and keeping the pulse and following along. Because that's part of this gig, right? If you're going to work in tech, you need to stay current and Twitter by far is my number one source to help me do that.</p><p><strong>Pariss:</strong>             Same thing for me, which I learned on my own. Actually, as soon as I got onto Twitter because I only got onto Twitter last September to talk about my journey finding my new job as a developer. That's when I noticed. I was like, \"Hey, there's a lot of developers on here.\" I didn't know that Twitter, Tech Twitter was a thing, and so I found that community and then I accidentally formed my own.</p><p><strong>Joel:</strong>               Yeah, because on December 1st you had your, \"What does Black Twitter in Tech look like?\"</p><p><strong>Pariss:</strong>             Oh, yeah, Black Tech Twitter.,</p><p><strong>Joel:</strong>               Which now has thousands of responses and I remember that day because I'm watchman you and you, was it like 18 hours straight it felt like that you were just retweeting everybody that responded to that particular ...</p><p><strong>Pariss:</strong>             Yeah.</p><p><strong>Joel:</strong>               Because it just kept coming and growing. An amazing group of people that I personally hadn't been exposed to and I want to thank you personally because it really has made my timeline better because I followed so many people. I would look and see what they were talking about and now it's like I'm exposed to a world that I honestly wasn't really aware of. It's been a great benefit to me, which led into the #BlackTechTwitter, which has then grown from there. You tweeted it out and then what happened?</p><p><strong>Pariss:</strong>             Yeah. I tweeted out, \"What does black twitter and tech look like?\" I was just expecting maybe just a few people to sort of post their pictures and tell me what they do in the industry because again, when I got on Twitter, that's when I realized wow, there's a big tech world on this platform. I wanted to know where are all the black and brown people. So I did that not expecting to get the response I did, and my phone, it blew up.</p><p><strong>Pariss:</strong>             I could refresh my notifications every few seconds and I'd have hundreds of new replies, retweets, comments, whatever, messages. It was insane. I didn't really realize what had happened. I didn't think it was a big deal at first until people were saying, \"Wait, I think you just did something. I think you just exposed this community no one knew existed.\" I'm like, \"What?\" It took me a minute because I was so busy retweeting everyone.</p><p><strong>Pariss:</strong>             But it felt really amazing and it made me really happy. It also made me a little disappointed to be a black woman and not know that my people did exist in this industry because I don't ever see them at work or conferences or meetups, but I guess that's the beauty of the internet obviously. You get connected to people you wouldn't otherwise be able to.</p><p><strong>Joel:</strong>               The community's there, it just hasn't been brought together and needed ... You have to have a catalyst and bring that together. So that's gone on from there. You've started the Black Tech Pipeline, which is a platform you're building and opening up a whole new box of challenges and opportunities and stuff. I was wondering, so can you explain Black Tech Pipeline and what that is and what your goals are for that?</p><p><strong>Pariss:</strong>             Sure. So Black Tech Pipeline is a platform for the Black Tech Twitter community and supporters, so I want this platform to be able to help bring sort of resources and opportunities and exposure to the black community in tech. So that means job postings, especially junior ones, mentorship opportunities, chances to collaborate with people within your community, being able to speak to them, which I have a discord for Black Tech Pipeline.</p><p><strong>Pariss:</strong>             Putting on events and hack-a-thons, conferences. I want this to grow to be just a platform of opportunity and resources. If you need something, I'll go to Black Tech Pipeline. If employers don't have a very diverse pipeline, where do they want to go? Black Tech Pipeline. That's what I want Black Tech Pipeline to become, just opportunity, opportunity, opportunity.</p><p><strong>Joel:</strong>               I think that's awesome and totally great effort on your part. I'm wondering, those of us that have an established career and influence, how can we help the efforts that you're hoping to gain with Black Tech Pipeline?</p><p><strong>Pariss:</strong>             Speak up to the community and if there are job openings, if there are speaking opportunities, you want to let all of the underrepresented people know because you don't want to be the conference organizer who's posting all the speakers and they all look exactly the same. That's a problem because these communities do exist in this industry and we're here. You can speak up and ask, \"Hey, Black Tech Twitter, does anyone here want to do a speaking engagement? Is anyone interested in applying for this or that?\"</p><p><strong>Pariss:</strong>             Just reach out to the community and we see this every day, people are tweeting very ignorant things that for example, a lot of people might comment on Black Tech Twitter somehow being racists because it has the word black in it, so they think it's exclusive to only black people and no one else. That's not what it is. To have allies who don't look like us speak up for us and let them know this is a community that was brought together just to bring exposure to themselves. Just speak up. Supporters always means taking action, not just sort of talking about it.</p><p><strong>Joel:</strong>               I've learned, and this is my personal experience, because when Egghead started, our instructor roster and still frankly largely is, just kind of a wall of white dudes, and some part of me because I didn't really understand, and I was trying to figure out why is this, what do we need to do? How do we become better, right? I want to improve and offer opportunity to everybody. It doesn't just happen is what I've learned.</p><p><strong>Joel:</strong>               Systemically our society isn't in a place where it's just going to happen if you wait and see. If you get out there and you take action, be active, right? You've got to participate and be part of the team versus just sitting on the sidelines hoping for the best. Otherwise nothing happens.</p><p><strong>Pariss:</strong>             Exactly.</p><p><strong>Joel:</strong>               To kind of close this out, this is a question that I always kind of ask myself and I was wondering what does your definition of success, what do you see when you personally define success for yourself, what does that mean?</p><p><strong>Pariss:</strong>             for me, success is one, it's freedom and two, it's having people come back to me and letting me know how I've helped them reach their own personal success. I want to be that outlet. I want to be able to help people, and like people thanking me for Black Tech Pipeline or Black Tech Twitter, an opportunity they received because this community came together, that makes me feel really good. Yeah.</p><p><strong>Joel:</strong>               Yeah, and for me, I feel very similar. I want to help people and if I have any sort of legacy at all, I just want to offer a handout to give people a leg up and then freedom. Because I also wanted to define my own terms and not necessarily own a yacht, but have the free time to think and create and explore my passions.</p><p><strong>Pariss:</strong>             Right, exactly. Yeah, I definitely don't define freedom by I have all the money in the world. That's not what it is. I have my own version of happiness and I have my own version of success. Everyone's different, but yeah, just feeling free and not feeling stuck or regretful I guess.</p><p><strong>Joel:</strong>               Yeah, and doing our part to help instead of the opposite, I think that's important too.</p><p><strong>Pariss:</strong>             Right.</p><p><strong>Joel:</strong>               Well Pariss, I really appreciate it. Thank you for taking time out of your afternoon to chat with me. I really look forward to seeing what you do next. I look forward to seeing where Black Tech Pipeline is in a year from now, in five years from now because I think it's awesome and you seem like a good shepherd for this community. So thanks for your work and I'll talk to you soon.</p><p><strong>Pariss:</strong>             Thanks so much.</p>",
    "slug": "gaining-freedom-and-helping-others-find-success-with-pariss-athena",
    "description": "<p>You don't have to be passionate about code to have a successful career as a developer. Pariss Athena talks about how it isn't the code itself that motivates her to get better at understanding it. It's what being good at code provides that drives her.</p><p>The financial freedom code gives Athena enables her to give more to the people and communities that are important to her. Success to her is freedom and helping others find success too. She is working on the Black Tech Pipeline, a platform to bring resources and exposure to the black tech community.</p><p>What can those of us who are already established in this industry do to help underrepresented people? Athena says speak up, reach out to the community with opportunities for jobs, speaking engagements, podcasts, etc. Diversity doesn't just happen by default. Systemically we don't have a society that enables that. We have to be active and be a part of the team to make it happen.</p><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/gaining-freedom-and-helping-others-find-success-with-pariss-athena/transcript\">\"Gaining Freedom and Helping Others Find Success - with Pariss Athena\" Transcript</a></p><h3>Resources</h3><ul><li><a href=\"https://blacktechpipeline.substack.com/welcome\">#BlackTechPipeline</a></li></ul><h3>Pariss Athena</h3><ul><li><a href=\"https://twitter.com/parissathena?lang=en\">Twitter</a></li></ul><h3>Joel Hooks</h3><ul><li><a href=\"https://twitter.com/jhooks\">Twitter</a></li><li><a href=\"https://joelhooks.com/\">Website</a></li></ul>",
    "duration": 1233,
    "episode_number": 49,
    "contributors": [
      "Joel Hooks"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/16mzb",
    "path": "/podcasts/gaining-freedom-and-helping-others-find-success-with-pariss-athena",
    "published_at": "July 22nd, 2019",
    "url": "https://egghead.io/api/v1/podcasts/gaining-freedom-and-helping-others-find-success-with-pariss-athena",
    "edit_podcast_url": "https://egghead.io/podcasts/gaining-freedom-and-helping-others-find-success-with-pariss-athena/edit"
  },
  {
    "id": "podcasts-00000000000000000211",
    "title": "How Vue Earns Its Beginner-Friendly Reputation with Natalia Tepluhina",
    "summary": "Natalia Tepluhina talks about why Vue has such a great community and gets regarded as the most beginner-friendly framework.",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/c4ea295b-b447-4db6-921c-ebd08de97763/podcast_joel_with_natalia_tepluhina_v1_mp3_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/55d7f360-05c1-43af-9c2d-eb89e156734a/be8abf28-ba83-4fbf-819b-bdb428309900/natalia_tepluhina.jpg",
    "simplecast_uid": "c4ea295b-b447-4db6-921c-ebd08de97763",
    "transcript": "<p><strong>Joel:</strong>               Hi Natalia.</p><p><strong>Natalia:</strong>            Hi.</p><p><strong>Joel:</strong>               So, I'm really interested to talk to you. One, about your involvement in the Vue community, as well as RxJS, two technologies that I think are really, really great. But I kind of want to start, maybe get to know you a little better, and find out how you got into this career as a web developer in the first place.</p><p><strong>Natalia:</strong>            It's a really interesting question because I'm not a well-established web developer, considering my experience in years. I had only three and a half years experience inin web development, and previously I worked as a database administrator. I decided to switch my career, I think, after I had a maternity leave, because I was always interested in web development. I was playing with HTML in Notepad when I was in high school, and I decided to give it a try. And it went surprisingly good, because from my experience, frontend development is one of the most exciting, because you can almost immediately see the result of your work without even compiling step, usually.</p><p><strong>Joel:</strong>               Yeah, nice. It's visual, right?</p><p><strong>Natalia:</strong>            Why, exactly. That's why I really liked it and switched to it.</p><p><strong>Joel:</strong>               Is there anything that you're nostalgic for, from your time as a DBA? Or anything that maybe carried over that you learned at that time of your career, that you're still using and is kind of fundamental to your work today?</p><p><strong>Natalia:</strong>            For me it was not that useful because it was NoSQL databases across really old dated stack, like Lotus 1-2-3 and Lotus Domino. So it's like, not very useful for web development. But I also have an education in Computer Engineering, and it gives you a nice basis to work on any programming language, including Javascript.</p><p><strong>Joel:</strong>               Yeah, I agree with that. So what's your current stack? What are the tools that you prefer to use today?</p><p><strong>Natalia:</strong>            My favorite framework is, I think it's very obvious, it's Vue.js, because I'm a part of the Vue.js core team. And it goes a long way, because I really like this framework. And I also like to use tools as RxJS and GraphQL, I'm a big fan of GraphQL as well.</p><p><strong>Joel:</strong>               It's awesome, isn't it?</p><p><strong>Natalia:</strong>            Yeah.</p><p><strong>Joel:</strong>               GraphQL blows my mind, out of anything. I mean, I love technology in general, but GraphQL has absolutely blown my mind.</p><p><strong>Natalia:</strong>            Yeah, absolutely. I really like it, and I think it's one of the future things, even though it's considered sometimes today as a very hyped thing.</p><p><strong>Joel:</strong>               Yeah.</p><p><strong>Natalia:</strong>            You know, like you're jumping on the hype train if you're trying to speak about GraphQL, but in fact it's just great.</p><p><strong>Joel:</strong>               I mean, the hype is because it's awesome. To me that's why there's so much hype, it's not like there's big marketing arm behind it. I know it's a Facebook project, but still it feels like it's more of, this is just cool, and that's why people love it.</p><p><strong>Natalia:</strong>            It's more like a community project than Facebook, to be honest.</p><p><strong>Joel:</strong>               Yeah, I mean, you have Apollo, too. You know, people are building really great tools behind it, and building businesses around it too, which is also awesome. It kind of proves its vitality, and gives it a future too, in my opinion.</p><p><strong>Joel:</strong>               I'm really interested in what drew you to Vue in the first place? But then also how you go from just being interested in this tool, to becoming part of the Vue core team? Which I think is an awesome journey, and I'm curious in how did you go from being an enthusiast and enjoying a framework, to the point where you are actually a core contributor?</p><p><strong>Natalia:</strong>            For me, my Vue journey started in 2016. Previously I was mostly Angular. Not even Angular, but AngularJS developer. Because there was no such thing as Angular as we know it, until September of 2016, when it was released. And I was actually building the switch to Angular 2, but the thing was Angular 2 was released in September of 2016, just two weeks later Vue 2 was released as well. And I decided to give it a try, just so to compare it to Angular, because switching to Angular was kind of scary. You know what I mean, it wasn't AngularJS anymore.</p><p><strong>Joel:</strong>               Totally different.</p><p><strong>Natalia:</strong>            I know. I have no idea why they named it Angular, it's still very confusing for newcomers. When you are trying to search something related to Angular, you always find something related to AngularJS.</p><p><strong>Joel:</strong>               Yeah, because we would call it Angular before the switch, and then we had to call it AngularJS if we're referring to it now.</p><p><strong>Natalia:</strong>            Because nobody was saying AngularJS, right? It was just angular. And I decided to give it a try, and it was very nice. And in Vue 2 was very familiar to anyone who used AngularJS previously, because of directives, because of templates. But it was like more advanced, and probably it was just the thing, what I wanted to be Angular.</p><p><strong>Joel:</strong>               Yeah, to me it feels like Angular, kind of the good parts, to use that phrase.</p><p><strong>Natalia:</strong>            What, the right form of Angular?</p><p><strong>Joel:</strong>               Because we got virtual DOM and all that other fun stuff with it.</p><p><strong>Natalia:</strong>            Absolutely. And also, it didn't require a TypeScript. I mean, I like TypeScript, but I liked it already after I used Angular. It was a way to types for me. And at the moment of 2016 it was like, oh, no additional step to learn, this is nice. Also, it had a great documentation, it still has a great documentation. But even in 2016 it was a very nicely documented framework.</p><p><strong>Joel:</strong>               It's friendly, I think, and not in a negative way, it isn't cute. It's just friendly.</p><p><strong>Natalia:</strong>            Friendly like my friend Sara Vieira likes to say, Vue.js is a kitten of Javascript. It's a little kitten of Javascript, it's very cute, nice and friendly.</p><p><strong>Joel:</strong>               I totally agree with that. Although I think I read something, you use TypeScript with Vue, isn't that true these days?</p><p><strong>Natalia:</strong>            Yes.</p><p><strong>Joel:</strong>               What drives you to TypeScript, why do you like that particular variant of Javascript?</p><p><strong>Natalia:</strong>            Great and funny question, because I think it's kind of Stockholm Syndrome. When you're into work with Angular, you get used to TypeScript, and then you just try to use TypeScript anywhere, because you're like, how can you live without types after this?</p><p><strong>Joel:</strong>               Yeah, I think because Angular 2 and just Angular now, because from 2 to 7, or whatever we're on right now, it hasn't changed a whole lot, fundamentally. And what they did was they kind of forced you into TypeScript, and I think really pushed TypeScript forward as the language, and contributed to the overall popularity. Because now it's everywhere, I feel like TypeScript is all over the place. Anybody writing a library is definitely going to use TypeScript.</p><p><strong>Natalia:</strong>            Yeah, absolutely. I think libraries are the mostly typed. And even with Vue, people consider TypeScript not being that integrated into Vue ecosystem, right now, but you know, Vue 3 is written on TypeScript internally.</p><p><strong>Joel:</strong>               Oh wow, that's big.</p><p><strong>Natalia:</strong>            Yeah.</p><p><strong>Joel:</strong>               So, one of the interesting things, and I haven't seen this on any other framework that I know of, correct me if I'm wrong, the Vue CLI feels pretty unique, and really cool. I was wondering what do you think about that? And why does Vue have this tool, and these other tools that we've used aren't presenting this kind of... Because it's both a visual command... There's a command line interface and then there's a visual UI, where you can get a really nice, friendly UI.</p><p><strong>Natalia:</strong>            Yeah, UI is a great part, exactly. And the CLI in fact, if you think about uniqueness, it's not that unique because we also have Angular CLI.</p><p><strong>Joel:</strong>               Okay.</p><p><strong>Natalia:</strong>            And from some points of view, Angular's CLI is may be even more powerful, because it can generate components, it's one of the ways. But the thing is, why VUE's CLI is unique? Flirts of all, it's because of the plugin system, so it's very modular. You don't need to install the whole tool, the whole boilerplate, you can always select what you need, and install it like different parts, different modules. And I really liked that Angular's CLI followed this path after we implemented it with Vue's CLI. So they started to have the schematics, and you can use them with Angular CLI right now, so it's modular as well.</p><p><strong>Natalia:</strong>            But we also have a UI part, and the UI part is very unique. And I'm really proud of Guillaume Chau, who is the main developer of Vue UI, because it's really great for people who are new to the ecosystem. I mean, if we now, old school developers, who used to use terminals, consoles, and other stuff, for them the CLI tool, a command line interface, is really natural. They're happy to use terminals. But if we take someone who is really new, who has one, two years of experience in web development, maybe even less, for them visual instruments are natural, not terminals. And in fact, terminals are kind of outdated. That's why I really like they can start a project with Vue UI, and it really helps.</p><p><strong>Natalia:</strong>            I think right now Guillaume is also developing even more wide instrument. It will include also installing the node and NPM to the system, so we can install all the boilerplate from scratch.</p><p><strong>Joel:</strong>               That's beginner friendly in so many ways, because I've watched people, new web developers who are trying to learn this. And it's like, open up the terminal, and now you're there, you're staring at this terminal, you have all these things to install, all these new commands to learn.</p><p><strong>Natalia:</strong>            Yeah, and no idea of what to do.</p><p><strong>Joel:</strong>               And it's not to say you won't eventually get there. There's even an argument that a UI like that it will help you when you switch, if you want to switch to the command line, now you have this relationship between this visual UI and the terminal commands that you'll need to run down the road, perhaps.</p><p><strong>Natalia:</strong>            Yeah, exactly.</p><p><strong>Joel:</strong>               I've heard it said a lot that Vue is probably the most friendly framework tool that we have right now for beginners. Is that something that you've noticed, and why do you think that might be?</p><p><strong>Natalia:</strong>            Yes, Vue is indeed the most friendly frame. It has a very nice learning curve, and it's easy to start with, because you can use CLI, but you can also start without any kind of CLI. You can just add a script from CDN and start with it. And the reason for this are, first, we have great documentation, thanks to Chris Fritz and Sarah Drasner mostly. It's very nicely structured, and it feels like a tutorial. You can just follow it, you can read it as a book, and it has great examples, as well.</p><p><strong>Natalia:</strong>            And also, I think we have one the best communities for different frameworks and the whole Javascript ecosystem. I don't know, for me it's like a family, mostly.</p><p><strong>Joel:</strong>               Yeah, that's another thing, right? When we say it's beginner friendly we're absolutely not saying you can't do advanced projects, because there's lots of production Vue going on for major scale projects.</p><p><strong>Natalia:</strong>            Yeah, exactly.</p><p><strong>Joel:</strong>               So being friendly doesn't mean this is a basic tool. It just means that getting into it is easier and a nice ramp up, instead of a smack you in the face situation.</p><p><strong>Natalia:</strong>            Yes, absolutely. I'm working in a major scale project using Vue.js, it's GitLab.</p><p><strong>Joel:</strong>               Oh, yeah, so there you go. And the community is interesting to me, because I think that's so important. I don't think you really discount it, but building a community is really actually quite difficult. Building a real, genuine community. With your experience, both with Vue Vixens, which we'll talk about in a minute, and with web communities in general, what is the secret? How do we work towards building better communities across the board?</p><p><strong>Natalia:</strong>            First of all, what I've noticed for the Vue community is that it's very inclusive and diverse, thanks to both Vue Vixens and both efforts from the core team. As a great example of inclusivity, I can say about our Vue bot. Previously we had a bot just closing issues, and working on VRs on the repositories. And recently we've changed bot messages, and we changed settings for them, so right now we have a nice, really customized message for everyone who contributed to Vue repository, even if it was just a small fix. I don't know, like fixing a typo. Even if your reviewer forgot to say thanks to you, the bot will care about it, and it says thanks.</p><p><strong>Natalia:</strong>            Previously, there was a proposal to add a Tweet link to Twitter, so you can tweet about your contribution, because it's nice. We really try to support first-time contributors to our repositories, and to treat them nicely, as well. And also, it's my personal opinion, I think we don't have any major company making the framework. For Angular, yeah, they have Google to back Angular, and they have Facebook to back React. But it means we're working on our enthusiasm, we're not paid for our job. Of course, we have Patreon and open collectives, but mostly we are just working because we are enthusiasts of this framework, and it helps to form really nice and enthusiastic community.</p><p><strong>Joel:</strong>               I think it's amazing, because you mentioned the two major ad networks that fund these other great tools. But Vue, from the beginning when Evan started this, it's been essentially an independent operation, community built, driven by a very benevolent dictator, which carries a negative connotation but I don't mean it that way. The person in charge, the person who runs and owns this project, he's amazing, right? And he's been just an absolutely wonderful steward of a really great tool and community.</p><p><strong>Natalia:</strong>            Yeah, that's true.</p><p><strong>Joel:</strong>               So, speaking of communities, you are a part of Vue Vixens. You are the CTO of Vue Vixens, and work on the website and all the related technologies. It's a community initiative for women and folks that identify as women. How do you explain Vue Vixens to folks when they're curious about it?</p><p><strong>Natalia:</strong>            Vue Vixens, we're trying to change this huge imbalance in Javascript in general and Vue in particular. Probably you've seen this gender break up on I think it was The State of Javascript Survey.</p><p><strong>Joel:</strong>               There's a lot of dudes.</p><p><strong>Natalia:</strong>            Yes, I think it was 93% of dudes. And it doesn't seem fair and nice. We don't have these rates in different professions. But for Javascript, somehow we have this huge imbalance. And we were trying to increase the amount of women in the technology in general, in Javascript and Vue in particular.</p><p><strong>Natalia:</strong>            We also had examples, it wasn't just an original community idea, because we have communities like Rails Girls, like Django Girls, for frontend development it's ng-Girls, like teaching Angular to women. And it was Jen Looper, our founder, who decided to start an initiative named Vue Vixens. And I really like that we kind of differ with the name. We didn't include the part Girls, because quoting Jen, we're not girls anymore, we are women. Also, it's a nice alliteration, like Vue Vixens, and for those who don't know what a vixen is, it's a female fox. So it led to a really nice logo, so we have a Vue logo with a fox.</p><p><strong>Natalia:</strong>            So what do we do? We are running workshops. It's free workshops for anyone who identifies as a woman. They are basic workshops teaching people to Vue.js. For our full day workshop we include some basics, as well as VueRouter, Vuex, major parts of the ecosystem. For shorter workshops it's usually just building a web application with some API calls.</p><p><strong>Joel:</strong>               Part of your job at Vue Vixens, part of your position, is developing the workshops, is that correct?</p><p><strong>Natalia:</strong>            Yes, I'm actually an author for all the web part of our workshops. Because we also have workshops for native mobile development, with NativeScript Vue, authored by Jen Looper. And I'm an author for all of our workshops.</p><p><strong>Joel:</strong>               How do you approach creating a really good workshop? What's your process when you sit down to work on something like this? Because it's non-trivial, it's not an easy process to teach. So what goes into it, and what do you think about when you're building something like this?</p><p><strong>Natalia:</strong>            When I tried to develop a nice workshop, I had two major ideas in my mind. So first, it should be really accessible for anyone, for people without any previous knowledge, sometimes even for Javascript. It should be really simple, and explained well if you have some complicated parts. Even if you have a great prototype map, you need to explain it to people, on the basic level.</p><p><strong>Natalia:</strong>            And the second idea was I didn't want to build another tutorial application. I wanted people to create something really entertaining and nice, something they can show to their families and friends, and share it with being proud of what they built. So it should be something really nice, simple. It should have images, obviously, because something that has images is always more entertaining than just plain text. And it's why we started with a Dog API.</p><p><strong>Joel:</strong>               I love it.</p><p><strong>Natalia:</strong>            Yeah, I know. Of course, people are divided with dogs and cats, so probably we need to introduce Cat API as well, for those who don't like dogs. But even so, when you have lots of cards with dogs, and you can play with them, it creates a nice possibility to make a simple CRUD application, while also being really entertaining.</p><p><strong>Natalia:</strong>            I've edited these workshops later, thanks to Chris Fritz, and his great advices about how good docs should look like. Because there are some core principles for building documentation in a workshop. You need to try to explain one concept at a time, it was really hard for me, because I was trying to pack the workshop with a lot of things. And I was introducing a few things at a single step, and it could be really confusing to new people. So one step, one concept. Don't try to feed them with all knowledge immediately.</p><p><strong>Joel:</strong>               With Egghead, that's like one of our core principles too, the idea of single concept. A section is a single concept. And I agree with that, people are so overwhelmed anyway when they're trying to learn something new. Part of the job as educators is how do we ease them into it, and make it comfortable, so they'll finish. It's actually hard to get people to actually finish, and I think that's important too.</p><p><strong>Natalia:</strong>            Yes, exactly. Because as a course author, asa workshop author, a documentation author, you operate with a thing called cognitive load, exactly. People have limited resources to actually digest something you try to give them. And you need to always count on this level of cognitive load for anyone using your materials.</p><p><strong>Joel:</strong>               There's a great book that Sarah Drasner recommended to me, called Cognitive Load Theory, that I would recommend to anyone that wants to kind of dig into that. Honestly, at some point in our careers we all have to be teachers, so the more we know and understand how to relay information, and help educate our peers and community members, the better the overall community is going to be.</p><p><strong>Natalia:</strong>            Yes, absolutely, I agree with this.</p><p><strong>Joel:</strong>               One of the things I think is really super interesting with the Vue Vixens model is you do these workshops, and they are for folks that identify as women, but anybody can use this material. If you go to vuvevixens.org, all of the workshop is free to access, it's really, really accessible as you mentioned, it's wonderful, it's linear. And you can work through this in a day or a weekend by yourself, or with a group of friends, or at a local meetup. So this is really presented and delivered so everybody can use it. So while your groups are a place for women, anybody on the planet can go and use this material, and learn from it.</p><p><strong>Natalia:</strong>            Absolutely. We have limited resources to run workshops offline, because you know, it's about place, about venue, about catering. So you can't hold everyone, it's like limited resource, and we try to focus on women, when we're running them offline. But when these materials are online, there's no additional load on us, for anyone who can use these materials. So that's why they are open, so feel free to use them and learn Vue.</p><p><strong>Joel:</strong>               And I also really love the mini workshops and the nano activities, I think that's a really great idea. And honestly I'd ever seen that before in a workshop format. But I think that's just great, because a lot of times full day is daunting, but maybe we can sit down as a group, or over Zoom, or whatever, and do one of these mini workshops, and learn together. I think that's a fun and interesting tactic, as well.</p><p><strong>Joel:</strong>               So, I'm going to switch it up a little bit, because this is something I've long been interested in, and I'm by no means an expert, and I think this is another area that Angular 2 and beyond really are pushing the envelope on, alongside of TypeScript, and that's RxJS. I was curious what do you find compelling about RxJS, and why you think it's a great tool?</p><p><strong>Natalia:</strong>            Yeah, I actually I fell in love with RxJS while using Angular as well. I think it's the most obvious way to reach out RxJS, but even when I stopped using Angular, RxJS was still with me. It's like an eternal love. And I think there are two great things, even three great things about RxJS.</p><p><strong>Natalia:</strong>            First of it, it's an absolutely amazing tool for dealing with asynchronous behavior. I mean, yeah, we have promises, but promises are really limited. It's just a single thing, right? You have a promise, it's resolved or rejected, and that's it. And RxJS really solved that problem with asynchronous really nicely, and in a great way.</p><p><strong>Natalia:</strong>            Another thing I really like is data flow is a first class citizen. You need to follow the stream, and when you start thinking in streams it's really easy to identify what's going on here, and really easy to follow these streams with RxJS operators. Which means, you have a third reason, you have a really nice and clean structure, a clear logic in the application. It's very easy to follow what's going on here, what steps are transforming the data, what's happening.</p><p><strong>Natalia:</strong>            If you have a look at like, a simple drag and drop component, written with a simple plain Javascript in imperative way, then compare it to something written in RxJS, it has almost the same amount of code, but the structure is very different. And with RxJS it's very plain, you can just read it, row by row, and see what's going on. That's why I really like RxJS.</p><p><strong>Joel:</strong>               I think one of the criticisms is that it can be incredibly daunting to newcomers, because of the paradigm. Everything is a stream, right? When you start using RxJS it feels like you kind of have to go all in. And I'm wondering how do you recommend folks approach RxJS and maybe start learning it? What's the path?</p><p><strong>Natalia:</strong>            Yeah, while I partly agree, sometimes it's really hard to switch your mind from imperative to reactive programming, and to streams. I think the best way is to start with really simple and practical examples. I really like to give an example with live search. When you just type in something in the input field, and then this enables an API call.</p><p><strong>Natalia:</strong>            When you try to play with this simple example, you can have the most useful RxJS operators. You can play with map, you can play with debounceTime, you can play with distinctUntilChanged, and it's really understandable what's going on. So just try to take an example, a really simple one, and convert it to RxJS, using RxJS operators. I think we have a great course from John Lindquist on RxJS. I followed it once and I think it's one of the best materials on RxJS available, I really liked it.</p><p><strong>Joel:</strong>               We're big fans, in general, at Egghead. Jafar Husain has an End of the Loop series that I absolutely love. And then there is Andre Staltze's work, and then John. The three of those really combine, and it kind of makes it clear. It's daunting at first, just because of the paradigm shift, but once it starts to sink in, you start to see problems differently. It gives you another way to solve these hard problems of async in the browser. Maybe it's not your (inaudible), but it's definitely worth time to learn and understand. I think it's a great tool.</p><p><strong>Natalia:</strong>            Yes, absolutely. And I can also add, RxJS community is almost as nice as the Vue community from what I've seen. I've recently had my talk published about RxJS, and I had john Lindquist reaching out to me almost immediately with feedback, and some fixes to the talk. I have to admit I didn't know... I think nobody knows all RxJS operators by heart.</p><p><strong>Joel:</strong>               Nobody.</p><p><strong>Natalia:</strong>            Yeah, it's like a lot of them. But he mentioned pairwise, and you should have used pairwise instead of scan. And I was like, oh my God, I don't know about pairwise. It was really nice, because you know how John is kind of celebrity, right? But he's reaching out to you to give you feedback and to teach you something new about RxJS in his spare time. I think it's really great that people are so enthusiastic about RxJS.</p><p><strong>Joel:</strong>               Yeah, it really is. The operators, as something you mentioned, there's always a different operator. But then there's also this core set of operators, it's almost like, to me, I've used the analogy of being like Lodash for async.</p><p><strong>Natalia:</strong>            Exactly like Lodash.</p><p><strong>Joel:</strong>               It falls apart after a while, but just in terms of a beginner mental model to jump into it, like you can reach for it as a tool for that. It's pretty awesome. So you use TypeScript with Vue, and do you also add RxJS to your Vue applications these days?</p><p><strong>Natalia:</strong>            Yes, I'm trying to use it. We have an integration, it's named VueRx, and it's written by Evan You. The problem is, using RxJS with Vue is kind of limited, due to the nature of Vue reactivity. It couldn't be integrated as nicely as with Angular, but you can still use Rx in the scope of the component, and if you want to reach out to your state and change your state, you can always use side effects. I know it's not the best way to use RxJS, but still you can use tap operator to change your state. And I'm really using it within components with complicated UI and UX behavior, like a drag and drop, like searches, like all this stuff, and I really like it. And also, it's great in the scope of any framework to build a game.</p><p><strong>Joel:</strong>               Yeah. And so have you built RxJS Vue games?</p><p><strong>Natalia:</strong>            Not Vue, I've built an RxJS game, it's RxJS Breakout. And I was building it right on stage, it was in the scope of my talk.</p><p><strong>Joel:</strong>               Okay.</p><p><strong>Natalia:</strong>            It was a great plunge but it's nice.</p><p><strong>Joel:</strong>               Yeah, that's pretty bold, building that live. So, when there's a new idea, or something new that you need to learn, whether it's a new framework, or a tool, or a new paradigm in web development, how do you approach your own personal learning?</p><p><strong>Natalia:</strong>            First of all, I'm trying to find out why this idea is useful for me and how can I use it in my applications. Because I think learning a new paradigm when it's still really abstract to you and it can't be used immediately, is really hard. Even if you start to learn it, you will probably forget everything if you don't use it on practice. It's a first step.</p><p><strong>Natalia:</strong>            Second is, so previously I tried to learn it all by myself, but I found out that actually taking a course is a great investment. It's like you're outsourcing your learning, sometimes you pay with your money, but in fact you save your time. And you have it well structured in your mind. So I'm trying to find a good course on this topic, and take it, and then obviously I build something with it. Because without practice it doesn't work.</p><p><strong>Joel:</strong>               Yeah, you have to cement it. And you don't do that by typing along with the course. I'm a big fan of courses in general, and I think I'm with you. You type it out, and you type along, don't cut and paste, and work to the course. But until you build something... And this is why I love your pet shop idea. And whether a bland To-Do list is your thing, or you just want to build a pet store, build something fun, use the Star Wars API, do something kind of zany and silly, it doesn't have to be useful, it just has to make you think about the techniques and the tools that you've been learning.</p><p><strong>Natalia:</strong>            Yes, absolutely.</p><p><strong>Joel:</strong>               This is my last question, and I would like to know what you are most excited about? What's coming up and what do you see that's really, really interesting, beyond what we talked about, your favorite stack right now. What's next for you to learn?</p><p><strong>Natalia:</strong>            I think I'm biased about it, because right now I'm excited about the next release of Vue framework.</p><p><strong>Joel:</strong>               Yeah.</p><p><strong>Natalia:</strong>            Yeah, because I'm a part of the core team, and I can say it will be very nice, and it will be a lot faster. It's so great to see how it's developed, how it works inside. It's not public right now, but I believe it will be a great surprise. And also, aside from Vue, I was really happy with Svelte 3 release, because it's kind of different from all the frameworks we have. It introduced new things, and it was really interesting to look at it. And I can say we will reuse some ideas from Svelte, as well.</p><p><strong>Joel:</strong>               I love it anyway, we talk about the churn or whatever, which I feel maybe has slowed down or isn't even actually a thing, but I absolutely love the idea that developers aren't happy with the status quo, and want to try something new and put it out into the world. That's amazing to me. And those ideas spread, there's not a competition between all these frameworks. If you pay close attention, I feel like the developers across the board are just collaborating, in a meta sort of way. There's broad collaboration to give us better tools overall.</p><p><strong>Natalia:</strong>            Yes, absolutely. I think all the framework wars are just in the mind of some people. If you have a look at the market, we don't have 100% developers using at least one framework. I mean, there is a huge amount of developers using JQuery, or even not using JQuery. And it's a lot of space for new frameworks and for old frameworks to develop.</p><p><strong>Joel:</strong>               Yeah, there's so much space for new ideas, and people to explore them.</p><p><strong>Natalia:</strong>            Absolutely.</p><p><strong>Joel:</strong>               And I feel like anything to the contrary, any non-welcoming, is not the approach. We should embrace that, and allow people to explore, because that's how we advance the state of the art.</p><p><strong>Natalia:</strong>            Yeah, exactly.</p><p><strong>Joel:</strong>               Natalia, it was really great talking to you today, I really appreciate it. Thank you very much. Where can people find you on the internet?</p><p><strong>Natalia:</strong>            Thank you for inviting me. I'm a very obvious person, so I have my name and surname everywhere on the Internet. It's like, on Twitter, it's just N_Tepluhina, and I had my NataliaTepluhina on GitHub as well. It's the two most popular places I'm actually paying attention to.</p><p><strong>Joel:</strong>               That's the way to do it. It makes SEO really easy, if you have a unique name. I'm lucky to, I dominate my SEO from my name, and yours was easy to Google as well.</p><p><strong>Natalia:</strong>            Yeah.</p><p><strong>Joel:</strong>               Well, thank you very much, and have a great evening.</p><p><strong>Natalia:</strong>            Thank you, bye.</p><p><strong>Joel:</strong>               Bye.</p>",
    "slug": "how-vue-earns-its-beginner-friendly-reputation-with-natalia-tepluhina",
    "description": "<p>Vue has a reputation of being the most beginner-friendly framework, but that didn't just happen by accident. The Vue CLI is an excellent example. New developers often struggle with using the terminal and remembering all the commands. The Vue CLI provides a visual interface for the developer to generate a project. By making it easier for newcomers to make Vue projects, they've reduced the barriers to entry. Beginner-friendly doesn't mean basic. Many large-scale projects use Vue.</p><p>Another example of something that fosters beginners and benefits established developers is how friendly, and inclusive the Vue community is. Natalia Tepluhina talks about gender mismatch in JavaScript and how the Vue Vixens are making efforts to make the gender ratio evener.</p><p>The Vue Vixens are using free and accessible education as the primary means of getting more women into tech. Natalia Tepluhina goes on to share her two main ideas when it comes to designing a good workshop. Stay accessible to people of all skill levels; don't assume what people know. Stick to one stack and one concept. People have a finite amount of mental resources; trying to do too much can end up just overwhelming people.</p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/how-vue-earns-its-beginner-friendly-reputation-with-natalia-tepluhina/transcript\">\"How Vue Earns Its Beginner-Friendly Reputation - with Natalia Tepluhina\" Transcript</a></p><h3>Resources</h3><ul><li><a href=\"https://vuevixens.org/\">Vue Vixens</a></li><li><a href=\"https://www.amazon.com/Cognitive-Explorations-Instructional-Performance-Technologies/dp/144198125X/ref=sr_1_2?crid=69U55EJB4LGI&keywords=cognitive+load+theory&qid=1563586184&s=books&sprefix=cognitive+load+%2Cstripbooks%2C193&sr=1-2\">Cognitive Load Theory</a></li></ul><h3>Natalia Tepluhina</h3><ul><li><a href=\"https://twitter.com/n_tepluhina?lang=en\">Twitter</a></li><li><a href=\"https://github.com/NataliaTepluhina/\">Github</a></li><li><a href=\"https://dev.to/n_tepluhina\">Dev.to</a></li></ul><h3>Joel Hooks</h3><ul><li><a href=\"https://twitter.com/jhooks\">Twitter</a></li><li><a href=\"https://joelhooks.com/\">Website</a></li></ul>",
    "duration": 1882,
    "episode_number": 48,
    "contributors": [
      "Joel Hooks"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/k56ks",
    "path": "/podcasts/how-vue-earns-its-beginner-friendly-reputation-with-natalia-tepluhina",
    "published_at": "July 19th, 2019",
    "url": "https://egghead.io/api/v1/podcasts/how-vue-earns-its-beginner-friendly-reputation-with-natalia-tepluhina",
    "edit_podcast_url": "https://egghead.io/podcasts/how-vue-earns-its-beginner-friendly-reputation-with-natalia-tepluhina/edit"
  },
  {
    "id": "podcasts-00000000000000000210",
    "title": "Organizing a Conference to Combat Brain Drain in His Hometown with J.C. Hiatt ",
    "summary": "J.C Hiatt talks about what he did to organize the conference MagnoliaJS and why he did it to help his community. ",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/39917452-ddc9-4b42-8471-a07fc4487277/podcast_john_lindquist_with_jc_hiatt_v1_mp3_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/55d7f360-05c1-43af-9c2d-eb89e156734a/2965154a-b5d2-4479-ab85-6a8b06242014/j_c_hiatt.jpg",
    "simplecast_uid": "39917452-ddc9-4b42-8471-a07fc4487277",
    "transcript": "<p><strong>John Lindquist:</strong>     I'm here with J.C. J.C., why don't you go ahead and introduce yourself?</p><p><strong>J. C. Hiatt:</strong>        I'm J.C. Hiatt. I am a software engineer and growth manager at Echobind, and also, on the side, I run a little fitness company called Dev Lifts.</p><p><strong>John Lindquist:</strong>     Nice!</p><p><strong>J. C. Hiatt:</strong>        And I'm also the organizer of MagnoliaJS.</p><p><strong>John Lindquist:</strong>     Sweet! We're here to talk about MagnoliaJS, and you were the organizer of it. What even gave you the idea of starting a conference?</p><p><strong>J. C. Hiatt:</strong>        I had the idea for a conference probably four years ago, but at the time, I had no idea how to execute on it.</p><p><strong>John Lindquist:</strong>     Yeah.</p><p><strong>J. C. Hiatt:</strong>        And the mayor of Jackson, here in Mississippi, he really wants to try to put, in our area on the map, a little more in terms of tech, and try to attract companies to come and open offices here and create more jobs here. We have a big, what we call \"brain drain\" problem here, where lots of people just kind of get trained up and then they immediately leave because there's better opportunities elsewhere.</p><p><strong>John Lindquist:</strong>     Right, okay.</p><p><strong>J. C. Hiatt:</strong>        He's trying to put us on the map, and his office was planning a more general tech conference to kind of bring in some companies and kind of showcase what's going on with tech in Mississippi, or in Jackson specifically. And then, he asked if I would do something for the developers-</p><p><strong>John Lindquist:</strong>     How did he reach out to you? How did he find you?</p><p><strong>J. C. Hiatt:</strong>        In Mississippi, it's a pretty small pond.</p><p><strong>John Lindquist:</strong>     Okay.</p><p><strong>J. C. Hiatt:</strong>        And so, being the organizer of pretty much the only developer meetup in central Mississippi.</p><p><strong>John Lindquist:</strong>     Right.</p><p><strong>J. C. Hiatt:</strong>        And also, I do a lot of volunteering with the Coding Academy in downtown Jackson, stuff like that. So, just through that network, my name, I guess, came up, but, yeah. They reached out to me...</p><p><strong>J. C. Hiatt:</strong>        They first kind of put it out there in December of, \"We want to do this conference. What do you think?\" And my initial response was I would love to do a conference, but I don't want to tie it to this general tech conference that the city was doing.</p><p><strong>John Lindquist:</strong>     Right.</p><p><strong>J. C. Hiatt:</strong>        \"I don't want to tie it to the general conference the city is doing because I want it to be able to stand on its own, and I think that, I truly believe, that stuff like this is going to... more on the ground level, a grassroots level, is going to be a huge... It's not going to be the single thing, but it's going to be a huge part of moving my state forward, and helping people learn about code, get a job, who actually want to stay here because there are good jobs to work here. So, I really want this to have legs, and whether or not... hopefully not, but if the mayor doesn't care about tech two years from now, I still want this conference to have its own name and recognition and stuff like that.\"</p><p><strong>John Lindquist:</strong>     Right.</p><p><strong>J. C. Hiatt:</strong>        Those were my conditions. I was like, \"Yeah, I will do this. I just want it to be its own thing.\" And they agreed to that. I think they truly believe in what they're doing, they truly believe in trying to move us forward, and so, they supported me a lot. And I know, we can go into that in a little more detail. That was the initial discussion, was just kind of...</p><p><strong>J. C. Hiatt:</strong>        We talked for 20 minutes, they kind of mentioned it, and we decided we would go from there.</p><p><strong>John Lindquist:</strong>     Cool! That's great. I love that it's a conference to help the community, rather than just pro-tech, you know. This is promoting people and community over tech. And I attended it, and I loved it. It's one of the favorite conferences I've been to, just because it felt much more genuine than any conferences I've been to.</p><p><strong>John Lindquist:</strong>     What other conferences had you been to that sort of inspired the way you ran it, the way you organized it? Were there other people you talked to, other conference organizers who helped you out? It seems to me, from behind the scenes, like a lot of work to get it up and running. How did you get the direction and the plan to put it all together?</p><p><strong>J. C. Hiatt:</strong>        This probably actually starts way back in high school for me. I'm currently 26, I've been out of high school for, I guess, eight years now. Back in high school, I did a combination of things. I built websites for businesses and stuff like that, but I also booked concerts back then.</p><p><strong>John Lindquist:</strong>     Okay!</p><p><strong>J. C. Hiatt:</strong>        I was pretty involved in the local music scene, and I was effectively just a promoter, and I would try to put together events, and I think a lot of those types of skills, just thinking logistically about events, kind of transferred over a bit. But I also, after high school, ran my own marketing agency for a while. I learned a little bit about marketing and branding, and then how to create a story and stuff. And I think that those are some skills that definitely helped me out in the past few months.</p><p><strong>J. C. Hiatt:</strong>        But as far as tech conferences, I went to my first tech conference in 2015. It was Connect JS in Atlanta, which is now Connect Tech.</p><p><strong>John Lindquist:</strong>     Okay.</p><p><strong>J. C. Hiatt:</strong>        And that was really my first exposure to a conference, and the only one that I've ever really been to. I went to one called The Lead Developer in Austin last year, just as a sponsor, so I didn't actually get to really attend any talks or anything, but those are really the only conferences I've been to.</p><p><strong>J. C. Hiatt:</strong>        But I still keep an eye on things. By being active on Twitter and stuff, I can kind of get a sense of what different conferences out there are like, and so, between that and then asking the right people for help, and kind of planning all of this in public, that was kind of the staple. The big thing about Magnolia was I planned everything in public. We had GitHub issues for all my to-do's, and I blogged about it a lot. I talked about it on Twitter. I tried to create a drum and beat it as loudly as possible.</p><p><strong>John Lindquist:</strong>     Right.</p><p><strong>J. C. Hiatt:</strong>        Which was the advice of Gant Laborde. Gant is a good friend. He was a speaker. He works at Infinite Red, and when he saw what I was trying to do, he can empathize a little bit because he's from New Orleans, he kind of gets... I won't speak for him.</p><p><strong>J. C. Hiatt:</strong>        For me, it's very easy to feel like the South gets forgotten, especially the Deep South, like Mississippi, in terms of tech. I think he can empathize with that a little bit, being from New Orleans. So, he hopped on a call with me, he and Shawni over at Infinite Red, for about an hour, hour and a half, right after I announced this. And just gave me some pointers, of things that they've done with Chain React and things to think through. And Gant was kind of my sounding board for the whole thing. I would just call and say, \"Hey, here's what I think I need to do next, and am I missing anything?\"</p><p><strong>J. C. Hiatt:</strong>        He was a huge help for me. But, yeah, besides that, it was just putting everything out there in public, getting people's opinions. I think we technically even named it publicly. It was originally going to be called, I think, Blues Comp, or something. And someone else came up with MagnoliaJS, because that's our state flower.</p><p><strong>John Lindquist:</strong>     Right.</p><p><strong>J. C. Hiatt:</strong>        It was really fun to plan in public.</p><p><strong>John Lindquist:</strong>     Cool! Yeah, it seems like it turned out great. The format is my favorite format, the single-track, half hour sort of talks. Whenever I go to a larger conference and they try and do a multi-track thing, three or more talks or whatever, there's always one talk that gets completely full and then other, sad speakers who have the leftovers of that one talk that everyone wanted to go to. It always feels like if you try and do more than one track at a time, that the speakers are sad because they know people are going to go watch someone else's talk, and the attendees are sad because they couldn't get into the talk they wanted to see. And I don't understand why...</p><p><strong>John Lindquist:</strong>     I mean, I understand why conferences get larger, and bigger sponsors, but there's got to be some sort of limit on those things, because every conference I've loved, whether it's Magnolia or React Rally or some of those smaller ones, have kind of kept that single room, single track approach. And I love the way you pulled it off.</p><p><strong>J. C. Hiatt:</strong>        Yeah! I really appreciate that. I think that I won't take credit for that necessarily, because I probably stumbled into that format more than I chose to be in that format. Yeah, I'm glad you enjoyed it, but my only... with Connect JS, I guess, my only experience in a conference was a huge, multi-track conference where I might have to decide between two talks that I'd love to hear.</p><p><strong>John Lindquist:</strong>     Yeah.</p><p><strong>J. C. Hiatt:</strong>        And originally, I was like, \"Well, obviously, I know I can't plan on a conference with 80 speakers.\" I know we probably skipped over some stuff there, but it really came down to about six weeks of actual planning for this thing. I knew I couldn't do that in six weeks. There was no way I was going to be able to get that many speakers or raise that amount of money, and originally, I was actually going to do three stages and we were going to have a main stage, and then we would have a two-hour block in the afternoon for first-time speakers to speak on two different stages.</p><p><strong>John Lindquist:</strong>     Okay.</p><p><strong>J. C. Hiatt:</strong>        You know, concurrently. And I thought that would, first off, give people who are first-time speakers an opportunity to come and, in a pretty forgiving environment... I mean, it was a conference that was planned in six weeks, so people are already probably having pretty low expectations. It's going to be a pretty forgiving environment, they can come and kind of get one under their belt. And specifically, I was hoping for people from the community and stuff to come in.</p><p><strong>J. C. Hiatt:</strong>        And that was the plan, but as I drew closer to the date, it just got too hard to handle logistically, and even though it was-</p><p><strong>John Lindquist:</strong>     Only doing local speakers?</p><p><strong>J. C. Hiatt:</strong>        Well, no, just having more than one stage.</p><p><strong>John Lindquist:</strong>     Okay.</p><p><strong>J. C. Hiatt:</strong>        I was stretched really thin, and that was a pretty stressful couple months, there. But I decided just to merge it all into one stage. I went back and... I'd actually already chosen the speakers, the first-time speakers, and I said, \"Hey, I think that we're going to merge everything on the one stage. Basically, your talk is not 25 minutes anymore. Your talk's going to be 20 minutes.\"</p><p><strong>John Lindquist:</strong>     Yeah.</p><p><strong>J. C. Hiatt:</strong>        No one had a problem with that. They were still grateful to be able to speak and stuff. But I didn't set out to do that, but it did work out that way, and I think that it probably was for the best.</p><p><strong>John Lindquist:</strong>     Did you find all the speakers through Twitter, or, what was the process there?</p><p><strong>J. C. Hiatt:</strong>        Yeah!</p><p><strong>John Lindquist:</strong>     Did you have a CFP? I didn't...</p><p><strong>J. C. Hiatt:</strong>        Yeah, we did.</p><p><strong>John Lindquist:</strong>     Okay.</p><p><strong>J. C. Hiatt:</strong>        It was very short. The CFP was only open for two weeks, and we had 66 submissions, which I thought was pretty good.</p><p><strong>John Lindquist:</strong>     Oh, wow! Yeah.</p><p><strong>J. C. Hiatt:</strong>        Considering that no one had heard of this before, and it was pretty much just kind of getting out there from my efforts on Twitter and some really nice people re-tweeting stuff for me.</p><p><strong>John Lindquist:</strong>     Yeah, that's great.</p><p><strong>J. C. Hiatt:</strong>        Most of them came from efforts on Twitter. I set out to go ahead and pick certain people to just come, ask certain people to come in, because I already had a pretty decent network of knowing people I knew, so, most of the people who I picked to come and they didn't have to go through the CFP process, most of those people, I already had a connection with and I just DM'd them on Twitter and said, \"Hey, I'm doing this thing. You might have heard about it already. I'd really love it if you could come. I'll help out with whatever I possibly can as long as my budget allows me to.\"</p><p><strong>J. C. Hiatt:</strong>        And everyone was really cool about it. We even had some speakers fly themselves in on their own dime, and I thought that was super cool of them. And everyone that I asked to come was pretty low-key and it went pretty well.</p><p><strong>John Lindquist:</strong>     Yeah. How did you find the MC? He was from New Orleans, right?</p><p><strong>J. C. Hiatt:</strong>        Yeah. He came at the recommendation of Gant.</p><p><strong>John Lindquist:</strong>     Okay.</p><p><strong>J. C. Hiatt:</strong>        He and Gant are in Toastmasters together down there, I think.</p><p><strong>John Lindquist:</strong>     Oh, yeah! Gant was... He gave that AI presentation during lunch, right? The magician...</p><p><strong>J. C. Hiatt:</strong>        Yes.</p><p><strong>John Lindquist:</strong>     Okay. That's Gant, okay.</p><p><strong>J. C. Hiatt:</strong>        Yeah. I think they know each other from Toastmasters, and, yeah. He highly recommended getting an MC just so on conference day, I wasn't the one trying to do...</p><p><strong>John Lindquist:</strong>     Yes.</p><p><strong>J. C. Hiatt:</strong>        First off, I'm just not the person you want up there. I'm really monotone, in case anyone hasn't noticed yet. I'm not great at just creating conversation out of thin air.</p><p><strong>John Lindquist:</strong>     Right.</p><p><strong>J. C. Hiatt:</strong>        Or cracking jokes.</p><p><strong>John Lindquist:</strong>     No, it's a talent. Yeah, it's definitely a talent some people have and some people don't. Or, work on, I guess.</p><p><strong>J. C. Hiatt:</strong>        Yeah.</p><p><strong>J. C. Hiatt:</strong>        And Kenneth came, and he was just so good.</p><p><strong>John Lindquist:</strong>     Yeah.</p><p><strong>J. C. Hiatt:</strong>        Kenneth LaFrance was our MC. He took care of everything, and he knew nothing about coding, but it didn't matter. His personality and his energy, everyone... I've heard so many great reviews of him, and so, we'll definitely have him again next year if he's willing to come.</p><p><strong>John Lindquist:</strong>     Yeah, he was fantastic!</p><p><strong>J. C. Hiatt:</strong>        I'm so glad we went with that, because, yeah, I was actually running around pretty crazy on conference day, so I'm glad that we brought him on.</p><p><strong>John Lindquist:</strong>     Yeah, I've seen conference organizers in smaller conferences trying to MC, then a issue comes up, and then they miss their spot to introduce somebody, and it all kind of collapses from there. You got to separate those two responsibilities, for sure.</p><p><strong>J. C. Hiatt:</strong>        Yeah, definitely. Huge props to Gant for that recommendation, because that was huge.</p><p><strong>John Lindquist:</strong>     Yeah. What did you think of the final result? Anything you'd do differently, or any advice you have for someone who would want to start their own conference, based on your new experience?</p><p><strong>J. C. Hiatt:</strong>        Yeah. As far as the good stuff, I highly recommend planning in public, and I kind of got that idea from Sean... Shoot. I'm blanking on his last name. Was it Wang?</p><p><strong>John Lindquist:</strong>     Sean Wang?</p><p><strong>J. C. Hiatt:</strong>        Sean Wang? Yeah. At Netlify?</p><p><strong>John Lindquist:</strong>     Yep.</p><p><strong>J. C. Hiatt:</strong>        His essay series called Learn in Public, it's really talking about you as a developer, but I've been kind of following along with that and adhering to it, to a degree, for the past year. And it's done wonders for my career, and I've found that if you put things out there and... It's kind of hard to... Because people also are going to call BS if...</p><p><strong>J. C. Hiatt:</strong>        If you put things out there and you genuinely are trying to do something good for people, and trying to do something good for the community or whatever it might be, I think the community responds to it.</p><p><strong>John Lindquist:</strong>     Yeah.</p><p><strong>J. C. Hiatt:</strong>        And I think that that was the single biggest thing that I did, was inviting other people to plan this with me, and putting everything out there on GitHub and saying, \"Hey, here's a few things I need on the website. Here's some meetups I'm thinking about contacting. Do you know any others?\" All that kind of stuff, putting all that out in public, then you can still go look at this GitHub repo and see all the issues that are closed, of everything we did.</p><p><strong>J. C. Hiatt:</strong>        I think that was the single biggest help, because giving the community a sense of ownership also helped with the promotional efforts, because people wanted to retweet everything, and if they worked on the site, they obviously were happy to share that they did that. I think that even led to some sponsorships and stuff. It's kind of hard to know what had a direct effect and stuff, but I definitely think...</p><p><strong>J. C. Hiatt:</strong>        We raised about $17,000 in six weeks.</p><p><strong>John Lindquist:</strong>     Okay.</p><p><strong>J. C. Hiatt:</strong>        And that was without me... I wasn't just busting down doors. I am not a salesman. I think that bringing the community into this was the single best thing I did.</p><p><strong>John Lindquist:</strong>     Yeah, I think you even had someone design the T-shirt and stuff, right?</p><p><strong>J. C. Hiatt:</strong>        Yeah! Yeah.</p><p><strong>John Lindquist:</strong>     A bunch of the things that would have taken you who knows how long, right?</p><p><strong>J. C. Hiatt:</strong>        Yeah. When I first got the final confirmation that we were a Go and we were about six weeks out, I asked a friend of mine at work, Ryan Steven, if he wouldn't mind throwing together a logo for me. And he's really fast at that stuff, so it didn't take him too long. I think by the end of the day, he handed me a few ideas and I took that. And then, Natalie Thomas, she's here in Jackson, she's a designer. And she just volunteered to do anything that we needed, so she did our shirts and banners and lanyards and all that stuff.</p><p><strong>J. C. Hiatt:</strong>        Yeah. She kicked ass.</p><p><strong>John Lindquist:</strong>     Yeah, that's really cool. Any other things to recommend, if you're starting a conference, or any things to avoid? Is there something that happened that you wish you could get a do-over on?</p><p><strong>J. C. Hiatt:</strong>        I think, given the circumstances, it went so well. It went as well as I could have hoped.</p><p><strong>John Lindquist:</strong>     Yeah.</p><p><strong>J. C. Hiatt:</strong>        I didn't have any huge issues. We had one speaker that did bail out kind of at the 11th hour, and that was kind of unexpected, but we were able to just deal with it and shift the schedule on the fly.</p><p><strong>John Lindquist:</strong>     Right.</p><p><strong>J. C. Hiatt:</strong>        Then, with the tornadoes, it actually probably worked out for the best. Or else, we would have been there till 7:30 that night.</p><p><strong>J. C. Hiatt:</strong>        I guess, yeah, have a tornado plan, or have a plan for natural disasters that are common in your area.</p><p><strong>John Lindquist:</strong>     Yeah, but having a plan if the speaker is sick or can't make it, I think that probably happens at 90% of conferences.</p><p><strong>J. C. Hiatt:</strong>        Yeah.</p><p><strong>John Lindquist:</strong>     The speaker is sick or whatever. I mean, that's [crosstalk 00:16:25].</p><p><strong>J. C. Hiatt:</strong>        Yeah. It's kind of expected. It's actually surprising that only one out of, I think, 18 have dropped, because from what I hear, it's very common for lots of reasons for a speaker to suddenly not be able to make it. Definitely have your backups and all that.</p><p><strong>J. C. Hiatt:</strong>        And I'll go ahead and say, I'm actually kind of working on a blueprint for this stuff, because, yeah, it can be a pretty daunting task. I think that the more conferences like this, even if they're small; I think we only had 130 attendees come, but at the same time, even if they're smaller, I think more stuff like this is what really stimulates communities.</p><p><strong>J. C. Hiatt:</strong>        I'm working on something that I hope to launch later this year that's going to kind of be more of a blueprint or a framework for people who are trying to plan their own conference.</p><p><strong>John Lindquist:</strong>     Cool!</p><p><strong>J. C. Hiatt:</strong>        Especially in a rural community. Hopefully, I'll think of any other gotchas, and make sure that that's in the blueprint.</p><p><strong>John Lindquist:</strong>     Sweet. That sounds great. I'll look forward to that. Any closing words of advice, or something that people should hear you say?</p><p><strong>J. C. Hiatt:</strong>        I'd just say, if you see an opportunity or even have an inkling of hope that you can do something like this for your community, just go for it.</p><p><strong>John Lindquist:</strong>     Yeah.</p><p><strong>J. C. Hiatt:</strong>        And try to get the city involved. Get everyone you can involved. Our city, the City of Jackson, helped immensely, covered a lot of expenses for me, and they we super helpful. So, you never know. Your city might be willing to do that stuff for you. All that matters...</p><p><strong>J. C. Hiatt:</strong>        I say the same thing with Dev Lifts people for their fitness. All that matters is that you start.</p><p><strong>John Lindquist:</strong>     Right.</p><p><strong>J. C. Hiatt:</strong>        And so, if you think you can make a difference, just get out there and fail until you don't fail anymore.</p><p><strong>John Lindquist:</strong>     Yep.</p><p><strong>J. C. Hiatt:</strong>        Until you fail in different ways, but you have some success from the failure.</p><p><strong>John Lindquist:</strong>     Sweet. That's awesome. Thanks, J.C.! Appreciate your time.</p><p><strong>J. C. Hiatt:</strong>        Yeah! Likewise. Thanks!</p><p><strong>John Lindquist:</strong>     Yep.</p>",
    "slug": "organizing-a-conference-to-combat-brain-drain-in-his-hometown-with-j-c-hiatt",
    "description": "<p>J.C. Hiatt put together the conference MagnoliaJS in the town of Jackson, Missouri to help his community and combat the growing problem of brain drain in his state.</p><p>MagnoliaJS is not only for his community, but it was put together with the help of it too. J.C. put it together, publically by using Github issues, blogging, and posting about it on Twitter. The community responds well when you are genuine and trying to do something good, and bringing them in and giving them a sense of ownership is what J.C. attributes as the single most significant contributor to the conference's success.</p><p>If you have the opportunity to do something like this for your city, go for it. Bring in as many people as possible, contact your city officials, plan it publically. Technology can have a significant positive impact on a community!</p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/organizing-a-conference-to-combat-brain-drain-in-his-hometown-with-jc-hiatt/transcript\">\"Organizing a Conference to Combat Brain Drain in His Hometown - with J.C. Hiatt\" Transcript</a></p><h3>Resources</h3><ul><li><a href=\"https://twitter.com/swyx?lang=en\">Twitter - Shawn Wang</a></li></ul><h3>J.C. Hiatt</h3><ul><li><a href=\"https://jchiatt.com/\">Website</a></li><li><a href=\"https://twitter.com/jchiatt?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor\">Twitter</a></li></ul><h3>John Lindquist</h3><ul><li><a href=\"https://twitter.com/johnlindquist?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor\">Twitter</a></li><li><a href=\"https://egghead.io/instructors/john-lindquist\">egghead.io</a></li><li><a href=\"https://github.com/johnlindquist\">Github</a></li><li><a href=\"https://johnlindquist.com/\">Website</a></li></ul>",
    "duration": 1100,
    "episode_number": 47,
    "contributors": [
      "John Lindquist"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/2j1p3",
    "path": "/podcasts/organizing-a-conference-to-combat-brain-drain-in-his-hometown-with-j-c-hiatt",
    "published_at": "July 7th, 2019",
    "url": "https://egghead.io/api/v1/podcasts/organizing-a-conference-to-combat-brain-drain-in-his-hometown-with-j-c-hiatt",
    "edit_podcast_url": "https://egghead.io/podcasts/organizing-a-conference-to-combat-brain-drain-in-his-hometown-with-j-c-hiatt/edit"
  },
  {
    "id": "podcasts-00000000000000000209",
    "title": "Figuring Out What's Next after Your Needs are Met with Jason Lengstorf",
    "summary": null,
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/7979994f-c577-4728-aa5e-4f2c1e9314ae/Jason_Lengstorf_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/55d7f360-05c1-43af-9c2d-eb89e156734a/3d52cc0a-c791-4b98-95d1-1b2e45b005b1/Jason_Avatar.jpg",
    "simplecast_uid": "7979994f-c577-4728-aa5e-4f2c1e9314ae",
    "transcript": "<p><strong>Joel Hooks:</strong>         Alright, I'm here with Jason today. Jason, why don't you go ahead and introduce yourself.</p><p><strong>Jason Lengstorf:</strong>    Sure. Yeah, my name is Jason Lengstorf. I am a developer on the Gatsby.js open source framework. And I've been doing a lot of work on the developer relations part of things.</p><p><strong>Joel Hooks:</strong>         Awesome. So, tell me a bit about your history as a developer and how ... What's your path from knowing nothing to, now, working with Gatsby?</p><p><strong>Jason Lengstorf:</strong>    It's a long and wandering one.</p><p><strong>Joel Hooks:</strong>         Okay.</p><p><strong>Jason Lengstorf:</strong>    I started out wishing that I was a musician, right? I wanted to be a rockstar. So, I dropped out of college to be a full-time musician. And because we were a band, we didn't have any money.</p><p><strong>Jason Lengstorf:</strong>    So, I learned design so that we could have merch and posters. And then, I learned web design a little bit so that I could customize our Myspace page. And then, I learned how to do a full website.</p><p><strong>Jason Lengstorf:</strong>    And eventually, I needed to figure out how to let other people in the band post photos and blog posts. And so, I had to learn some backend stuff so I could do that. And it kind of just grew from there.</p><p><strong>Jason Lengstorf:</strong>    When the band broke up, I realized I was significantly better as a developer than I was as a musician. So, I started an agency. My agency grew. I got reasonable amount of experience. Eventually, ended up contracting around for awhile.</p><p><strong>Jason Lengstorf:</strong>    Started working as a front-end architect at IBM. And then, just at the end of last year, started looking around and got moved over to Gatsby as of, I think, February?</p><p><strong>Joel Hooks:</strong>         Okay. Sweet. That's a fun path. Do you regret ... Do you still get a chance to sing or guitar, whatever you were doing?</p><p><strong>Jason Lengstorf:</strong>    Yeah. So, I was a bad guitarist. And then, probably a worse vocalist. So, I don't think the world is missing much without me making music. But I still play from time to time, just for fun for myself.</p><p><strong>Joel Hooks:</strong>         Awesome. Alright, so let's chat about Gatsby for a bit. So, what is Gatsby for people who haven't heard about it yet?</p><p><strong>Jason Lengstorf:</strong>    Gatsby is a site generator that's built on React and GraphQL. So, the core focus of Gatsby is to create a unified data layer so you can pull data from anywhere, any headless CMS, any API, static files, whatever you want.</p><p><strong>Jason Lengstorf:</strong>    And then, you use React and GraphQL to build your whole front-end. And then, we will build that into a really high performance, progressive web app so that you're able to focus on building a great experience and not focusing on performance tuning and all that kind of stuff.</p><p><strong>Jason Lengstorf:</strong>    So that's kind of the super high level view, but the general idea is we're trying to make really good decisions baked into a framework so that you get ... You can ace your performance audits, and things like that, without having to do any extra work.</p><p><strong>Joel Hooks:</strong>         So, by any CMS, any API are some examples of that: Ruby, Python, Node, just literally anything pretty much?</p><p><strong>Jason Lengstorf:</strong>    Anything that exposes its data through an API. So, we've been able to pull in ... WordPress is a common backend CMS for us. We use software as a service platforms like GraphCMS or Contentful.</p><p><strong>Jason Lengstorf:</strong>    We've pulled in Drupal sites. We can pull in Shopify. We just built this wag store powered by Shopify. And we can even do weird stuff like Workshop.me, which is one of Ryan Florence's projects. He has actually built from a Google Sheet using Gatsby.</p><p><strong>Jason Lengstorf:</strong>    So, Gatsby consumes that Google Sheet and builds a website out of it.</p><p><strong>Joel Hooks:</strong>         Cool. Yeah. Is there a most common approach? I mean, I know static site generators typically have some mark-down files, just on your local machine. And you say, build. And then, you'd deploy it.</p><p><strong>Joel Hooks:</strong>         Is that still the most common thing? Or what do you guys see-</p><p><strong>Jason Lengstorf:</strong>    I would say that's the ... It's the path of least resistance, right? So, if you're just working on your own blog, the easiest way to get started, if you're starting from scratch, would be to build a Gatsby site, write some markdown files and publish those.</p><p><strong>Jason Lengstorf:</strong>    What Gatsby's trying to overcome though, and I think this is maybe what we're uniquely bringing as a framework, is that you can use Gatsby for your personal blog and just write markdown.</p><p><strong>Jason Lengstorf:</strong>    But as you scale, when you've got a content team or a marketing team or, for example, you've got your dev team writing docs in markdown, but your content team is using WordPress or Contentful for that.</p><p><strong>Jason Lengstorf:</strong>    And your marketing team has got Salesforce hooked up. In traditional business models, or development models, you would end up having three apps for those three data sources that would have to be fit together through sub-domains or reverse proxies, or something like that.</p><p><strong>Joel Hooks:</strong>         Right.</p><p><strong>Jason Lengstorf:</strong>    With Gatsby, what you can actually do, is you can plug all three of those into the same Gatsby backend. And it will unify that data into our GraphQL data layer so that you develop the same way, regardless of where that data came from.</p><p><strong>Jason Lengstorf:</strong>    And so, it will kind of expand with you as you go from a single ... From a one developer shop up to an infinitely scaled company.</p><p><strong>Joel Hooks:</strong>         Right. Yeah. And I can't even imagine trying to take a Jekyll or the others, a Hugo, or something through static site generators. And what the migration story would be to Contentful, or something like that.</p><p><strong>Jason Lengstorf:</strong>    Yeah. It's definitely possible. The stuff that Hugo is doing and the stuff that the Jekyll does, they're really good tools. I think this just isn't what they're built for. They're built for very quickly building small static sites.</p><p><strong>Jason Lengstorf:</strong>    And they're excellent at that. We are targeting ... We just want to do more. We want to be kind of a data agnostic development layer. So, we worked hard to make sure everything was extensible.</p><p><strong>Jason Lengstorf:</strong>    So, if you've got any API, you can just write a source plugin for it. And then, that means that any Gatsby site now can install that plugin and pull in your data source. So, you can write a custom API and have it be integratable with Gatsby out of the box.</p><p><strong>Jason Lengstorf:</strong>    So, you could say, \"Hey, do you want to build a site with your data? Here's what you do.\" And we're seeing that a lot of ... I think, a company called Wings is a new headless CMS. And part of their core marketing strategy was they launched.</p><p><strong>Jason Lengstorf:</strong>    And part of their launch was, we also have a Gatsby plugin, which is ... We are over the moon about that that we've been able to make that kind of impression in the open source community.</p><p><strong>Jason Lengstorf:</strong>    Anyways, that's kind of what we're after is that type of openness and data agnosticism.</p><p><strong>Joel Hooks:</strong>         Agnosticism. I like it. Now, spell that.</p><p><strong>Joel Hooks:</strong>         So, would you say if ... Say, someone who was about to sign up for a site at WordPress.com, what's the difference, skill level-wise, that's required between just signing up for an account on WordPress and maybe playing with some preferences or a PHP template, or something, compared to launching something through Gatsby where ... I'm not familiar with it.</p><p><strong>Joel Hooks:</strong>         But is there Gatsby hosting where you can create an account and just kind of go from the default templates?</p><p><strong>Jason Lengstorf:</strong>    Not yet. That's a plan. Gatsby got Venture Capital funding back in the end of 2017. So, one of the things that we're hoping to bring out, that we're working on now, are a couple different tools that will make Gatsby more of an active competitor with the WordPress seamless model.</p><p><strong>Jason Lengstorf:</strong>    So, one thing that WordPress does better than us right now is if you don't do code at all, you can still set up and operate a WordPress site.</p><p><strong>Joel Hooks:</strong>         Right.</p><p><strong>Jason Lengstorf:</strong>    You're limited in what you can do. You're stuck with whatever theme you can find and whatever plugins, and kind of putting all that together. But there's just this amazing ecosystem in the WordPress community where if you are not a developer, there's almost nothing you can't do with WordPress.</p><p><strong>Jason Lengstorf:</strong>    And that's all with free open source plugins, which is amazing. Gatsby is ... So, if you were a developer who wanted to build a custom theme, the ramp-up between WordPress and Gatsby, depending on what your level of comfort with PHP versus Javascript is, I would make an argument that it's easier to ramp up with Gatsby, because there are fewer internals.</p><p><strong>Jason Lengstorf:</strong>    WordPress has a lot of internals and Gatsby is a little bit more of a concentrated suite of things that it does. That could also make it harder, because in WordPress, almost everything you do on a standard site is kind of baked into the core.</p><p><strong>Jason Lengstorf:</strong>    Whereas, with Gatsby, you're going to end up adding plugins. Almost immediately, you need a plugin just to add the title tag to the HTML. And so, things like that, I think, can be a little bit overwhelming for people.</p><p><strong>Jason Lengstorf:</strong>    But we did that by design, because we didn't want to bake a ton of stuff into the core. If you're comfortable with the plugin style architecture and you're comfortable with writing a little bit of code, I think it's going to come down to your preference.</p><p><strong>Jason Lengstorf:</strong>    But my preference would be that, I think, Gatsby's a little bit easier to pick up.</p><p><strong>Joel Hooks:</strong>         Right. And it's funny. I know a lot of people who their introduction of programming has been launching a WordPress blog. And then, they're like, \"Well, I want to change something.\"</p><p><strong>Joel Hooks:</strong>         And they look at the plugins. And then, they're like, \"Well, that doesn't quite fit what I want to do.\" So, they copy and paste, whatever in-line Javascript or PHP, or whatever it's going to be.</p><p><strong>Joel Hooks:</strong>         Usually, outdated plugins.</p><p><strong>Jason Lengstorf:</strong>    Right.</p><p><strong>Joel Hooks:</strong>         It's funny how much that it's a real development experience for people, even though they're fumbling around a bit. How often do we just check static overflow for the units we're looking for and copy and paste.</p><p><strong>Joel Hooks:</strong>         I think, it's really cool that now, if Gatsby brings that story about, then it can be truly an introductory programming experience for people. Where, here's this working thing and what do you want to change?</p><p><strong>Joel Hooks:</strong>         And then, they say, \"Well, I want to change the way that the footer looks.\" And then, they can do the footer code and make some calendar widget, or whatever.</p><p><strong>Jason Lengstorf:</strong>    Yeah, that's-</p><p><strong>Joel Hooks:</strong>         I think that's exciting that Javascript and React can be more of an introduction.</p><p><strong>Jason Lengstorf:</strong>    And I would agree with that. I have found that we've seen people using Gatsby as a way to learn React. Because one of the things that's difficult about Javascript development is the kind of immediately sharp learning curve.</p><p><strong>Jason Lengstorf:</strong>    When you go from, \"Okay, I'd like to learn Javascript.\", to, \"How do I get some Javascript onto the screen.\". If you're trying to learn React, you can use Create React app, which is great.</p><p><strong>Jason Lengstorf:</strong>    But if you're not using Create React app, you're kind of looking at like, \"Okay, before I can write any React, I need to set up Babel. I need to set up Webpack. I need to set up my CSS suite of SAS or post-CSS, or whatever.\"</p><p><strong>Jason Lengstorf:</strong>    And all of these things are very context-heavy tasks that require you to just have so much knowledge before you can configure them in a way that doesn't feel like just copy, paste, pray. Right?</p><p><strong>Jason Lengstorf:</strong>    And so, what Gatsby does and what Create React app does well, is we are trying to abstract away all of that. When you build a Gatsby site, you just do Gatsby new and then, pick your starter.</p><p><strong>Jason Lengstorf:</strong>    And you're able to move into that folder, run Gatsby develop and then, change something in a file and immediately see it live on the page. We've got hot reloading built in. We've got file watching.</p><p><strong>Jason Lengstorf:</strong>    All of that is happening so that you're just running the server. And if you go from never having used Gatsby before, you can go from there to actually looking at your changes, live rendering on the page inside of two minutes.</p><p><strong>Joel Hooks:</strong>         And that's a story that WordPress and the others don't have.</p><p><strong>Jason Lengstorf:</strong>    Yeah. For custom development, yeah, 100%. The only thing that's really, really close to that ... Create React app is another one. It's really, really good at this. Where I would say, Gatsby is a little bit ... It's got a little more power than something like Create React app is we've also got data access baked in.</p><p><strong>Jason Lengstorf:</strong>    We've also got a really good deployment story. We wanted to make it-</p><p><strong>Joel Hooks:</strong>         Which are things you can make anyway, right? Regardless of whatever site, you're-</p><p><strong>Jason Lengstorf:</strong>    If you're building a website, yeah.</p><p><strong>Joel Hooks:</strong>         Going to do that in deployment.</p><p><strong>Jason Lengstorf:</strong>    Exactly, right? You've got to put it somewhere. And so, how do you do that? So, we've thought through, \"Okay, once you've built a site, where does it go?\" And when you're looking in something like a static site generator, which at its core, that's what Gatsby is, you can host it for free on GitHub pages.</p><p><strong>Jason Lengstorf:</strong>    You can host it for free on Netlify. And Netlify has kind of been our recommended way to go, because Netlify will watch your GitHub repo. And whenever you make a change, it just automatically polls and updates everything.</p><p><strong>Jason Lengstorf:</strong>    It's magical. I'm in love with Netlify as a service. So, we've got that great story of you build something, you hit Gatsby build and then, you save those change ... Or you hit commit, push that up to GitHub and then, Netlify will build your site.</p><p><strong>Jason Lengstorf:</strong>    And the same with data. We've got a story for how to get data in. If you want to use data, here's what you do. And if somebody hasn't already built it for you, here's some instructions on how to get it in so that you can use it in the same way that you would use data from anywhere else.</p><p><strong>Joel Hooks:</strong>         Right. Right. So, I see that Gatsby's version two is in beta. What sort of changes are we looking forward to in the upcoming version two release?</p><p><strong>Jason Lengstorf:</strong>    The biggest ones are mostly under the hood. So, a lot of what's happening in Gatsby version one is just older versions of the technology that powers the web. So, Gatsby version one is on Webpack version one.</p><p><strong>Jason Lengstorf:</strong>    So, Gatsby version two is moving us to Webpack version four. So, it's a big jump. We get a lot of performance benefits there. There are additional performance benefits like better code splitting, better dead code elimination, some other kind of ... How we can do things like sub-setting your fonts.</p><p><strong>Jason Lengstorf:</strong>    So, if you have a web font that you're using, if it's included in the repo, we are going to be able to run a plugin that will look at just what characters you use and only include those in a sub-set font so that you're only sending down what you really need.</p><p><strong>Jason Lengstorf:</strong>    Instead of having to send 500 characters, you send down 10. So, those are some of the under the hood things that are going to happen to make the sites faster, to make your build times faster.</p><p><strong>Jason Lengstorf:</strong>    We've improved the build time by about, I think, it was 80% or something. It's a huge difference between Gatsby v1 and Gatsby v2. One of the biggest limitations of static sites is that they're very slow to build.</p><p><strong>Jason Lengstorf:</strong>    So, we are putting a lot of effort into making it faster. And our target, and who knows if this is physically possible, but what we really want to do is get to the point where our static sites are building in ... Huge static sites are building in seconds instead of minutes.</p><p><strong>Jason Lengstorf:</strong>    And so, those are ... That's another big one that we're working on. And then, other than that, there are just a couple kind of magic things in v1. We had this layout component in Gatsby v1 that was automatically applied to your pages.</p><p><strong>Jason Lengstorf:</strong>    And it kind of worked as an app shell, sort of. You would define your header and footer in there. And it ended up being just this ... It was a little bit confusing, right? So, in v2, we removed that.</p><p><strong>Jason Lengstorf:</strong>    And we went to the point where, now, the Gatsby stuff is pulled out and you have to actually use it like a React component. You plug it in and you have to include it and wrap your files in it.</p><p><strong>Jason Lengstorf:</strong>    And it's exactly what you've always done in React. So, we made a couple decisions like that that make React feel more like React. And there's less magic from Gatsby. We added a couple other things around GraphQL.</p><p><strong>Jason Lengstorf:</strong>    We're going to support external GraphQL schemas as first-class citizens. I think that poll process is getting merged today, if it hasn't been already. And I think everything else is more around stability.</p><p><strong>Jason Lengstorf:</strong>    We've got a whole migration guide written up that covers the nitty-gritty details. There are a couple breaking changes, in terms of the names of things changed to be more clear. But otherwise, it's not a ... The migration path is pretty shallow for most websites, because most people aren't using the stuff that we ended up changing.</p><p><strong>Joel Hooks:</strong>         Right. Right. Now, would you recommend, if someone starts with it today, that they just dive into v2?</p><p><strong>Jason Lengstorf:</strong>    I would start with v2. Our current push is to get to a release client, or a release candidate, for v2 soon. If it were up to me, we would probably have our release candidate out in the next two weeks.</p><p><strong>Jason Lengstorf:</strong>    So, the time horizon for v2 going stable is potentially a couple of months. But I would not ... I would say, it's probably not longer than that.</p><p><strong>Joel Hooks:</strong>         Okay. Awesome. I'm excited. I see on the GitHub page that Gatsby has 964 contributors, 5,500 commits. What's it like managing such a popular open source project? I'm sure, it looks like the issues are at 936, not that that means ... Not that that reflects the quality or anything.</p><p><strong>Joel Hooks:</strong>         But that's just a lot of people asking questions, or [crosstalk 00:17:32]-</p><p><strong>Jason Lengstorf:</strong>    Yeah.</p><p><strong>Joel Hooks:</strong>         That's a load of things on your mind, day in and day out.</p><p><strong>Jason Lengstorf:</strong>    Yeah. And it's something that I am not terribly involved in the day-to-day management of the repo. So, one of the things that is very nice about having a strong maintainer community is that ... So, Kyle Matthews is the original creator of Gatsby.</p><p><strong>Jason Lengstorf:</strong>    And he mostly spends his time on new features, what's kind of next generation stuff. And then, we're super lucky to have great people like Mike Allanson, Michal ... I'm going to murder his last name. He's Polish. And I think it's like Piechowiak, I think.</p><p><strong>Joel Hooks:</strong>         Sounds right to me.</p><p><strong>Jason Lengstorf:</strong>    I'm so sorry, Michal. And then, we've got just this army of amazing people who just show up and put in the work and help keep these things moving. So, we've got ... Mike and Michal are full-time with us now.</p><p><strong>Jason Lengstorf:</strong>    We've contracted them for as many hours as they'll give us, basically, to manage this and keep things under control. We're also working with someone named William Imoh from Nigeria who's helping us do, what we're calling, open source gardening.</p><p><strong>Jason Lengstorf:</strong>    Because a lot of those 900 issues have been fixed. He didn't have great organization in the previous versions of the repo where they were just kind of managed in a very ... There are tons of things happening, so we're tracking as best we can.</p><p><strong>Jason Lengstorf:</strong>    But also, there's just general chaos. So, now we're trying to get more methodical, especially since we got funded. We want to bring that back into check. And so, we've contracted Marissa Morby who is an excellent organizational architect to help us write some project workflow processes, to find some things that we can do better to make the project workflow just work and just identify some different ways that we can do a better job of that.</p><p><strong>Jason Lengstorf:</strong>    Because it is really, really difficult when you've got dozens of issues opening a day to not let some fall through the cracks. And so, we're trying very hard to not let that happen.</p><p><strong>Jason Lengstorf:</strong>    But even just today, we had someone who was unhappy because we ... They opened a poll request. And they did a ton of work on this poll request and we just missed it. It just got lost.</p><p><strong>Jason Lengstorf:</strong>    And by the time we found it again, it was out of date. It didn't match with our roadmap. And so, we ended up having to close it. So, that's super frustrating because had we been paying attention, we would have caught it and we would have closed it earlier, because it wasn't in line with what we were headed for.</p><p><strong>Jason Lengstorf:</strong>    But instead, it was like months. Alright. Somebody just waiting. Like, \"Are they going to merge my work? What's up with this?\" And so, we're trying to figure out, how do we make that not happen again?</p><p><strong>Jason Lengstorf:</strong>    How do we make improvements that prevent us from taking advantage or letting down the people who are basically volunteering their time to help make Gatsby better for the rest of the community?</p><p><strong>Joel Hooks:</strong>         Right. Yeah. And I know for certain, for every young, happy person, there's thousands who are happy. So, you can-</p><p><strong>Jason Lengstorf:</strong>    Yeah, and-</p><p><strong>Joel Hooks:</strong>         [crosstalk 00:20:28]. No one's perfect.</p><p><strong>Jason Lengstorf:</strong>    Yeah. Our goal is that we don't create ... We don't want to create unhappy people. There will definitely be people who just don't like the product and that's fine. But we don't want to be the ones who are like, \"Hey, we did something crappy and you have to deal with that. And now, you don't like us very much.\"</p><p><strong>Joel Hooks:</strong>         So, if someone were to get started with Gatsby today, I know there's a lot of examples in the repo, which one should they start from? Or, is the document the best place to go? What would be your recommended path to I know nothing about Gatsby to launching a personal blog, or whatever?</p><p><strong>Jason Lengstorf:</strong>    We have just done a huge effort with Shannon Soper and Amberley Romo have just done a huge amount of work on improving our tutorial. So, that would definitely be the best place to start. It's really comprehensive.</p><p><strong>Jason Lengstorf:</strong>    They added a part zero that's like ... It will tell you what the command line is and how to get Node installed. And then, it goes all the way from there to pretty advanced topics like building source plugins and stuff like that.</p><p><strong>Jason Lengstorf:</strong>    So, I don't know if it actually builds a source plugin. But we get you to the point where you'll have the level of understanding that you can then jump to the advanced guide on building a source plugin.</p><p><strong>Joel Hooks:</strong>         Right. That's awesome.</p><p><strong>Jason Lengstorf:</strong>    But yeah, for a beginner, that's definitely where you would want to start. Hit up the tutorial, skip ahead to the part where it seems new. And then, go through that.</p><p><strong>Joel Hooks:</strong>         Cool. And that's at gatbsyjs.org/tutorial, so.</p><p><strong>Jason Lengstorf:</strong>    That's correct, yes.</p><p><strong>Joel Hooks:</strong>         Alright. So, it's about time to wrap up. Is there anything you'd like to promote or say about your life or Gatsby before we close it off?</p><p><strong>Jason Lengstorf:</strong>    Something that we're trying to do right now is get more people involved in open source, especially if you're somebody who feels like you're typically not part of the open source crowd.</p><p><strong>Jason Lengstorf:</strong>    So, first time contributors, we'd love to have you. We've got open pairing hours available, so you can find that on our WeMeet. You can tweet at us. It's on my Twitter. There's a link to actually schedule an hour.</p><p><strong>Jason Lengstorf:</strong>    Somebody from the Gatsby core team will do a screen share with you. And we can look at any code you want to do, whether you're getting started with Gatsby. If you're wanting to make a contribution to open source.</p><p><strong>Jason Lengstorf:</strong>    And if you want to make that contribution, it doesn't even have to be to Gatsby. It could be to any open source project you want. We just want to try to get more people involved. So, that's my big effort right now.</p><p><strong>Jason Lengstorf:</strong>    So, come and talk to me. And let's get some time set up.</p><p><strong>Joel Hooks:</strong>         Awesome. That's great. You're awesome, Jason.</p><p><strong>Jason Lengstorf:</strong>    Well, thank you.</p><p><strong>Joel Hooks:</strong>         Well, thanks so much for your time today. And have a wonderful rest of the week.</p><p><strong>Jason Lengstorf:</strong>    Yeah, thank you for having me. I really had a good time.</p>",
    "slug": "figuring-out-what-s-next-after-your-needs-are-met-with-jason-lengstorf",
    "description": "<p>What do we do when all of our needs are met when we are making seventy-five thousand plus a year, working for a company with some prestige, have a home, and don't have to worry about food. Jason Lengstorf wrestled with this after the company he was contracting with didn't have anything for him to do, but kept him around. New goals have to be set, and growth still has to happen.</p><p>Jason discovered that what he wanted was to help other people grow in their personal and professional lives. To help other people you have to have a set of skills beyond your technical skills, typically these skills would be called \"soft skills,\" but they are often just as important as technical skills, Jason prefers to call these skills \"meta\" or \"catalytic\" skills. These are the skills used in planning, bringing people together, decision making, all of these being essential in our careers.</p><p>You don't just use these kinds of skills in a software project; they are also the tools that are used to build communities of people. Jason explains how the trick to bringing a group of people together with something is to make everyone feel invested in what they are a part of, and like they belong.</p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/figuring-out-what-s-next-after-your-nee/transcript\">\"Figuring Out What's Next after Your Needs are Met - with Jason Lengstorf\" Transcript</a></p><h3>Resources:</h3><ul><li><a href=\"https://www.gatsbyjs.org/\">GatsbyJS</a></li></ul><h3>Jason Lengstorf</h3><ul><li><a href=\"https://twitter.com/jlengstorf?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor\">Twitter</a></li><li><a href=\"https://lengstorf.com/\">lengstorf.com</a></li><li><a href=\"https://github.com/jlengstorf\">Github</a></li></ul><h3>Joel Hooks:</h3><ul><li><a href=\"https://twitter.com/jhooks\">Twitter</a></li><li><a href=\"https://joelhooks.com/\">Website</a></li></ul>",
    "duration": 2292,
    "episode_number": 46,
    "contributors": [
      "Joel Hooks"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/4dhff",
    "path": "/podcasts/figuring-out-what-s-next-after-your-needs-are-met-with-jason-lengstorf",
    "published_at": "May 31st, 2019",
    "url": "https://egghead.io/api/v1/podcasts/figuring-out-what-s-next-after-your-needs-are-met-with-jason-lengstorf",
    "edit_podcast_url": "https://egghead.io/podcasts/figuring-out-what-s-next-after-your-needs-are-met-with-jason-lengstorf/edit"
  },
  {
    "id": "podcasts-00000000000000000122",
    "title": "Get out of Your Head and Start with Your Users with Janelle Allen",
    "summary": "Today we are joined by Janelle Allen, a learning designer, who talks to us about backward design, how she grew into her role, the increase in quality of online courses, the importance of contact with users, and how to grow your audience. ",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/815fd97a-c688-43a0-89ec-adb51771d245/edf78b39_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/815fd97a-c688-43a0-89ec-adb51771d245/1558126643artwork.jpg",
    "simplecast_uid": "815fd97a-c688-43a0-89ec-adb51771d245",
    "transcript": "<p><strong>Joel Hooks:</strong>         Hey Janelle.</p><p><strong>Janelle Allen:</strong>      Hey Joel.</p><p><strong>Joel Hooks:</strong>         How are you doing today?</p><p><strong>Janelle Allen:</strong>      I'm doing really well.</p><p><strong>Joel Hooks:</strong>         I got to tell you my new thing, my new favorite thing, and we have to run in an education business the last five years but I've never got into this topic, but my favorite thing is instructional design. Right now I feel like I've opened the Pandora's box of wonderment and you are an expert in instructional design, but you prefer to call it learning design, or call yourself a learning designer. And I want to start there and get you to tell me what is a learning designer to you and how does that differ from being an instructional designer?</p><p><strong>Janelle Allen:</strong>      Yeah, that's a great question. That's a great way to start. It's not different, it's just a preference because instructional design is a pretty, I say old, but it started around World War Two with the military and computing and all of that. And I think that the focus was on instruction. And the way that I view it now is I'm not just, I see instruction, that word is like I'm standing in front of people and I'm telling them information, right? And I changed it, or I prefer to be called a learning designer and you'll see that wave changing in the field because what we're really focused on, what I'm focused on is improving learning, the experience, the results, etc. So that's really the focus for me. It's not so much just giving instruction.</p><p><strong>Joel Hooks:</strong>         Yes, and not the material, but the people that need to use that material and their outcomes is what's really the focus.</p><p><strong>Janelle Allen:</strong>      Yeah. We're focused on learning. I'm not focused on instructing you. I'm focused on whether or not you are learning and how I can facilitate improving that.</p><p><strong>Joel Hooks:</strong>         When we're building courses and we're doing that kind of thing, how do we look at information versus outcome? What's the key there?</p><p><strong>Janelle Allen:</strong>      I've written about this. One of the things that I've noticed, we're all guilty of this, is we tend to default to thinking, when it comes to teaching that we need to give people more information. Right? You don't know how to do this thing so let me give you all this info and then go do it. You're good? Okay, great. And at the end of the day, information is not the only thing that people need to learn. You do need to know certain things, but you also need to be able to do things. And so that's where outcomes come in is where we ask us, and you and I have geeked out about backwards design, right? So what is the goal of this course or program? What are the things that the learner needs to know and do in order to achieve that goal? And what does that look like? How do we break that down? And when you start focusing on the outcomes of what people, what transformation people will achieve, that changes, in my opinion, it just changes everything. You really start to see things like, Oh, my course is missing this particular resource to help people be to do x, or I completely forgot. You have learning gaps and you can start to see them.</p><p><strong>Joel Hooks:</strong>         So you mentioned backwards design, and this is something that, this is part of my, like epiphany that I've had this year about education in general. And can you describe backwards design for folks that might not be familiar with that?</p><p><strong>Janelle Allen:</strong>      Yeah, so the book is called, Understanding By Design by Mick Wiggins and, or I'm sorry, Wiggins and McTighe. And it's a book that basically, it can feel very academic, but the crux of it is that you should start your program, whatever you're creating, you want to start with the end in mind. So where should your learners end up? And work backwards to determine what you need to include in your instruction to get them there. So it was very revolutionary because a lot of times when we create courses or coaching programs or tutorials, we think forwards or however you want it, front facing.</p><p><strong>Joel Hooks:</strong>         Like starting from the beginning, right?</p><p><strong>Janelle Allen:</strong>      Yeah. We think about us, what, okay, what information, I want to teach such and such. I want to teach react. What do I know about react and what you I want to put in here. And it's flipping it and thinking about your learners first and where they want to go, what transformation do they want to achieve at the end?</p><p><strong>Joel Hooks:</strong>         I think it's interesting too, like this idea of backwards design, it goes beyond just education and being a learning designer, it really kind of gets into how we build software, how we might think about building software too, just in terms of the user and what are the outcomes the user wants. And that I think is what has just exploded my brain about the whole thing, because it kind of twists everything on your head. And if you think about what we do as software developers, it really kind of applies to this premise in general.</p><p><strong>Janelle Allen:</strong>      Yeah, I agree. I mean I think I learned about the book Badass from you and [Amy Hoy 00:04:58] talking about it and Kathy is saying the same thing. She's just using the word users. But it's about, really at the end of the day, it's about getting outside of your head and focusing on who you serve and what their goals are. That's the whole point. It's not about us. I have a group program and I just today told this to my cohort, I'm like, it's not about your idea, it's not about what you want. It's about what your learners want.</p><p><strong>Joel Hooks:</strong>         Yeah. I think I've heard you say start with your learner.</p><p><strong>Janelle Allen:</strong>      Yeah.</p><p><strong>Joel Hooks:</strong>         And start with your user. And I think that parallel is significant. And to me it's something that the software development community can learn a lot from the instruction design community because it's all about getting people to their end goal. And I think, I talk about software developers because that's who's listening. But we really like to apply our ideas and how we think and then just kind of feed it to people and hope for the best. But I think that's where user experience and those sorts of disciplines come into the fold.</p><p><strong>Janelle Allen:</strong>      I think software developers intuitively, the concept of backwards design makes sense. Especially if they're familiar, because okay, you're like doing usability testing or anything that helps you understand how your user is interacting and what are the obstacles that they're experiencing. Oh crap, now I need to fix those. As you said, it's the same framework, it's same theory or approach. It's just different. It's learning theory instead of software. But it's the same thing. It's just figuring out, it's not just about information, it's figuring out where are my learners getting stuck. I keep getting the same question, let's dig into that. So it's very applicable and it's very insightful.</p><p><strong>Joel Hooks:</strong>         Yeah. So I'm going to take it back a little bit and I'm curious what got you into the field of learning design and how did you make the transition from your writing as an undergraduate to learning design as your career?</p><p><strong>Janelle Allen:</strong>      Yeah, it's been circuitous. So I had this weird uncanny ability to help people whenever it came to training. Even my very first job as a teenager, I was asked to train and it didn't dawn on me until I got to college. And again, I was asked to train. And then I worked at Apple and I was asked to train and then I did some freelance writing and I ended up doing instructional materials and I realized that I had this ability to break things down into digestible bits. I was good at training. I wasn't the best at managing people, but I was good at training. And then I'm dating myself, but around 2004, 2005, I would say, I decided that I was going to teach myself how to code. And so I would stay up all night and I was teaching myself how to do that. And this is around the time online courses were just starting in academia and something clicked.</p><p><strong>Janelle Allen:</strong>      I don't even remember when or how I found, but I found out, I stumbled upon instructional design and it was like the two worlds combined, training, being really good at helping people learn things and creating online environments and I just went for it. Everything that I had been interested in all of a sudden came together in one nice package and it just, it worked out that way.</p><p><strong>Joel Hooks:</strong>         Yeah. I kind of feel the same. I went a different path, which is landing in teaching and education combined with technology and community and all that stuff has been really rewarding on my end.</p><p><strong>Janelle Allen:</strong>      Yeah. I mean, I tried to be, I tried to get into technical writing before I was an instructional designer and that didn't work out and I was grateful because it was really dry when I started, when I got into it I was like, yeah, [crosstalk 00:08:53]-</p><p><strong>Joel Hooks:</strong>         It still can't be [inaudible 00:08:59].</p><p><strong>Janelle Allen:</strong>      This one going to be it. But it was just, it just worked out, and I still write, but I just have always been very interested in helping people grasp concepts and be able to do things.</p><p><strong>Joel Hooks:</strong>         So what's the future of education online or offline and brick and mortar? Where do you see it going from where we're at now? I know predicting the future is kind of silly, but I want to hear what you think anyway.</p><p><strong>Janelle Allen:</strong>      That's a really big question.</p><p><strong>Joel Hooks:</strong>         It's huge.</p><p><strong>Janelle Allen:</strong>      So I've worked in corporate, I've done e-learning, I've worked in academia, publishing houses, doing online courses for colleges and universities, I've worked with for profit and I will not voice my opinions on that industry and now I work with individual creators, so I don't think I can speak to academia anymore. I'm so disconnected. But when it comes to small businesses and entrepreneurs who are creating and educating online, I think that we are seeing some shifts happening. And one of those is that people are starting to, online courses are coming now, right? So when you first started seeing entrepreneurs creating courses, I think I started seeing it around 2010 and that was early, right? I talked to Rob Walling and he started in 2009 he told me. So between 2010 and 2012 is when you really started to see a few people putting courses out there.</p><p><strong>Janelle Allen:</strong>      So it's still relatively new for entrepreneurs. And what I see now is that newness is starting to wear off in the sense that everybody knows, okay, they know what online courses are and what is happening is a leveling up because back in the day you could have a course that frankly wasn't that great but people would buy it because they didn't know what the quality should be. And now people know, they know when a course is good, they know when a course is delivering value and when it's not. And so what I'm seeing is people leveling up. The market is leveling up and instructors are starting to say, oh crap, I really need to do a better job. Let me pay attention this thing, learning design or just going in and making sure that my course is delivering results.</p><p><strong>Janelle Allen:</strong>      So that's the shift that I'm seeing and I'm seeing more people moving to live or coaching programs who previously had self paced courses because self paced courses can be very challenging when it comes to completion and engagement and motivation. So I'm seeing more live programs or hybrid programs popping up. So I'd be curious to see what happens next. There's this cyclical thing that happens, there's a lot of high value, high dollar masterminds that are happening right now and people are calling it new, but it's not new, it's happened before. So I just think we go around in cycles, but what's happening, it's more of a spiral upwards in that people are investing in quality and leveling up.</p><p><strong>Joel Hooks:</strong>         Yeah, I agree with that. And I think our conversations and, like my epiphany about instructional design and I'm running an education business and should probably be an expert in this particular area of thought is evidence to that. Right? We put out great product, but at the same time, if we want to be better, if we want to compete in five years from now, then we're not just going to be able to be good. We need to push that excellence. I think that's across the board because people are just more savvy and the delivery is better now, plus technology and bandwidth and computers and all that stuff has pushed us to a point where people just, you can't just get away with putting some crap out there, you have to put out some something that really helps people.</p><p><strong>Janelle Allen:</strong>      No, I remember one of the earliest courses I bought from an entrepreneur, it was literally like some html. It was a folder. You click on the files and you download it and it was, that's what it was. And the person did their best, I'm not laughing at that, but it's just, it has evolved. And the other thing I forgot to mention, but I want to make sure I say this, that I'm seeing happen is creators recognizing how important community is. I think that now we get it, that people, the Internet is a thing, right? It's been a thing but it can be lonely and that can be a real deterrent towards results and completion and engagement and people are really, creators are really starting to understand how important community is in addition to the instruction. I see more of that.</p><p><strong>Joel Hooks:</strong>         If you look at education and just how everybody's learned how to learn through our system, that's kind of built in, right? Like in school, you get that community and you get carrots and sticks and accountability and all that stuff, and then we're thrown out into the world and now you get to sit by yourself and read a book or watch some videos. And that takes a lot of of discipline, right? To sit down and do that by yourself alone and just hammer it out to learn something.</p><p><strong>Janelle Allen:</strong>      Yeah. And it takes a lot. So there's the discipline, the self discipline aspect of it, but it's also tied to the three domains of learning, right? Cognitive, affective and psychomotor. Well, we didn't really connect to, cognitive is the information, right? But the affective domain of addressing mindset and feelings and support, that is what I see people now saying, oh, you know what, this is a thing. And it's almost like we remembered that we're human beings and we don't just exist in a silo. We need to connect with people.</p><p><strong>Joel Hooks:</strong>         Yeah, I agree with that. So you mentioned that you worked with big brands and large companies before and now you've switched over the last several years to working with individual creators. How is it different working with individual creators in large companies?</p><p><strong>Janelle Allen:</strong>      Yeah, it's very different. So I had an agency before and I worked primarily with educational publishers and the difference is now working with individual creators and small teams. There's the ability to connect directly to the person who is making the decisions but also usually doing the teaching and that's super impactful. Just being able to work one on one with them instead of going through the bureaucracy of a large corporation where you may or may not have access to the end users. Oftentimes now when I work with clients, I have access to their learner's, their customers and that, it just was not a thing when I worked with larger corporations. So I love the intimacy, I love the direct connection and the agility of small teams that we can fail fast if something isn't working, we can make a pivot and that has been so refreshing.</p><p><strong>Joel Hooks:</strong>         I know we're both fans and friends of Amy Hoy and she has this great post where she talks about her f this moment. And I was wondering if there was any particular f this moment where you realized this isn't what you want to do and you wanted to work with individuals instead.</p><p><strong>Janelle Allen:</strong>      Yeah, it was 2015. So as I have mentioned, I had an agency and look, I hit the ground running and my former employer was my first client and I never had a bad year and I ran my agency for three years. And then 2015 at the end I got a call for projects from my former employer. They wanted me to take on this project because we had done so much good work for them and I didn't want to do it. Hey, I was like, ah. It was a project that they had fired another team from. And so I was like, yeah, I don't think so. But they kept asking, the money got higher and higher and so I took it like a dummy and ignored the red flags and that project ended up being one of, it was the worst project that I had ever been on in that they would not allow us to have access to the client.</p><p><strong>Janelle Allen:</strong>      So we were creating work that the client wasn't reviewing and we weren't getting feedback and then they would be upset about things and we would say, well, we didn't get a chance to talk to anyone. That, as you can probably imagine, that project just blew up and was a horrible, horrible learning experience. But it was also my f this moment where I was just like, I'm not doing this. I need to be in control. I need to have direct access or I'm not doing it. And in this current model, it's not going to happen. So that's when I, after that project, I pretty much fired my employees and made the pivot and it was the hardest, one of the hardest times in my entrepreneur career but it was worth it.</p><p><strong>Joel Hooks:</strong>         Yeah, that's a tough choice. And then now that like you're starting at, kind of almost starting from the beginning in a lot of ways in terms of building your business. You got all that experience under your belt, but at the same time now you have to find clients and do all that stuff.</p><p><strong>Janelle Allen:</strong>      It was hard. The hardest thing, letting people go. I resisted hiring because I just, I didn't know what to do and I had a great accountant at the time who also just became kind of an advisor and she walked me through how to hire and I was excited and things were going, and then, so then to have to turn around and let someone go who's depending on you and you had just hired them not long before, it was the hardest, hardest thing to do.</p><p><strong>Joel Hooks:</strong>         It's very hard. I've had to feel that pain a couple of times and as far as running a business, that's been my hardest and most gut wrenching experience I think for sure.</p><p><strong>Janelle Allen:</strong>      Yeah, it was very hard. But you get through it.</p><p><strong>Joel Hooks:</strong>         Yeah. And then at the end of the day everybody benefits. I noticed that too. When it happens and then people find new opportunities and you help them and do the best you can and it all works out. But it's so, it's an emotional, emotional experience that nobody ever can teach you about. So I hear something from a lot of people and I just want to switch this to thinking about making courses and what that even means. And one of the biggest objections I hear a lot is that somebody has already talked about that or somebody has already taught that, and I was wondering do you run into that with any of the people that you're coaching for making courses and how do you deal with that if so?</p><p><strong>Janelle Allen:</strong>      Yeah, I do run into it from time to time. I think that there's a lot of mindset stuff that, I mean, we could go on and on, we'd probably have a whole episode about-</p><p><strong>Joel Hooks:</strong>         A whole podcast series [crosstalk 00:19:41].</p><p><strong>Janelle Allen:</strong>      ... about mindset. Yeah. And so one of the things that I tell people is, first of all, if someone else is doing it, that's a good thing. That means there's a market, right? And so that's the first thing. And the second thing I say is what makes you different? Figure that out and leverage that difference. It doesn't matter if there's five people, I mean, in my market there's so many people who are teaching people how to create courses. So I leaned into my difference as an instructional designer and it was something I, and I've been guilty of this. I didn't think anyone wanted to know about instructional design. I used to hide it. I wouldn't really talk about it. And then people started asking and that's when I realized this is my differentiator. So I would tell anyone, first of all, if you're dealing with those thoughts of, well, somebody else's doing it, first of all, so what that means, there's a market, do it. Second, figure out what makes you different and start sharing value and also share your story, they'll go for it.</p><p><strong>Joel Hooks:</strong>         Yeah. People that people enjoy that. And I think when people say that, that somebody's already written this and you've read that and you've read 15 other things or you studied this, or you have your particular worldview to apply to what you've learned and it's like remixes, right? That's a great aspect of music and you can remix knowledge and I think literally every piece of knowledge that we're doing is some product of a remix because somebody's always done it. But what do you think? What's your voice? Is an interesting view on most things.</p><p><strong>Janelle Allen:</strong>      I love that you used that word remix because you know I DJ. So that's a perfect way to think about it because as a DJ, I might be playing the same 10 songs as the next DJ who, like down the street but I'm going to play them my own way. I'm going to put my spin on them and people are going to show up for the way that I play them because it's going to resonate with them. Those are my people. The other DJ is going to have their people and they're going to put their spin on it and that's going to be their approach. I think it's really important to recognize that when you start to share, when you start to put yourself out there, you're going to connect to your people. There's always a group and something for you specifically.</p><p><strong>Joel Hooks:</strong>         Yeah. And we call that an audience, right? In terms of marketing and just kind of the marketing jargon that we use. And that seems hard too, right? You start out and it feels like nobody's even listening. So I mean, what should people do when they're starting out? How do you build an audience and how do you get that sort of following that you can teach [inaudible 00:22:27] you can actually create a course and launch it to them?</p><p><strong>Janelle Allen:</strong>      I want to say that first of all, people are always listening even when you think that they're not. So a funny story. I was out this past weekend supporting my DJ friends and I was introduced to a pretty popular DJ in the city and he was like, yeah, you changed your DJ name. And I was like, how did he know that? And that was an Aha moment. The little bit of content I had been sharing, people were paying attention. So people are always listening. I just wanted to put that out there. But as far as how to get started with building an audience, I think the first thing is showing up. But I tell people one of the best things that you can do is to start an email list. So if you're building an audience from scratch, start an email list and it is something that intimidates a lot of people, but set it up, there's several tools. Share valuable content and be consistent. Those are the three key things. Start your list, share valuable content, be consistent. I say valuable content because it needs to be content that resonates with your target audience, not just something random from your life. So that's the key. I think the cornerstone to grow from.</p><p><strong>Joel Hooks:</strong>         And that's why you tell your story and it's very much your community. Because I fully agree with that 100%. I tell everybody, I'm like, where's your website? Are you blogging at all? Do you have an email list? And people, well, blogs are dead, medium took over. And literally all I see about maybe lately on Twitter is kind of how garbage it is. And there's like almost a revival of people blogging and people get scared to do this, right? They don't want to put themselves out there or have their personality or worry about the audience that they'll create. And in my experience you are the filter, right? If you're genuine, if you're yourself and you're providing value in that way, that filters the people that aren't your audience and kind of works out over time.</p><p><strong>Janelle Allen:</strong>      It's hard. It can be scary and there's layers to it. But it's one of those things where the more you do it, the easier it gets. I have shared some, like at the end of the year, I share my annual review and I don't filter. I tell people, look, this is what happened. And the first time I did it, it was hard. But I found that I get so many emails from those, and I realized that people are craving human connection.</p><p><strong>Joel Hooks:</strong>         In a big way.</p><p><strong>Janelle Allen:</strong>      In a very big way. So showing up and putting yourself out there is the best thing you can do to connect with people and start building your audience. The key, I don't want to leave this out is consistency though.</p><p><strong>Joel Hooks:</strong>         For sure.</p><p><strong>Janelle Allen:</strong>      You've got to show up regularly.</p><p><strong>Joel Hooks:</strong>         Yeah. If you go away, it's almost like breaking of trust, right? They're kind of expecting you and you're part of folks routine and how they kind of deal with the world and their sense of community. So being consistent enhances and enforces that over time for sure.</p><p><strong>Janelle Allen:</strong>      Consistency builds credibility. And I don't think people think about that enough. Even if you feel like you might have a small audience. When I started out, just showing up in people's email inboxes a couple of times a week got me my first customers. So it's huge. It really is.</p><p><strong>Joel Hooks:</strong>         Yeah. And it keeps paying off too over time and it grows and kind of compounds and you put in the work, you're consistent, you put in the work, like that, like being consistent, putting in the work and showing up. Not everybody's out there wanting to do the work. And that in my observation is a huge differentiator between most people is those that will do it and those that don't.</p><p><strong>Janelle Allen:</strong>      Yeah, absolutely.</p><p><strong>Joel Hooks:</strong>         So I want to talk about this idea of building courses and mindset. And I was wondering, do you have any kind of personal favorite resources that talk about mindset. I know there's the literal book Mindset. So maybe beyond that one, where do people go? Where can people start kind of digging into it to understand these things more?</p><p><strong>Janelle Allen:</strong>      Okay, so here's where we're going to start, books.</p><p><strong>Joel Hooks:</strong>         Okay. Yeah.</p><p><strong>Janelle Allen:</strong>      So all of the books that I've read that helped me change my mindset are, they're probably books that not many people have read.</p><p><strong>Joel Hooks:</strong>         Now I'm more excited to be honest.</p><p><strong>Janelle Allen:</strong>      There's a book that I love that I love that's called the, so I went through a period where I got really into Buddhist philosophy. There's a book called sacred Path of the Warrior. And I love that book because it talks about fearlessness is not the absence of fear, it is going through fear to the other side. And that book really started to transform how I thought about fear and doubt and showing up. So I definitely recommend that book. I also think that when it comes to mindset, there's two key components that I've learned recently that are super, super valuable. One is who you're surrounding yourself with. Being an entrepreneur can be, and I've said this before, and it's because it's something that I'm mostly working at home alone. It can be lonely. And so you need to make sure that you have the right people around you who are helping you to maintain a positive and productive mindset. And I think that that can be a mastermind group, that can be any type of community of other people who inspire you and keep you grounded and encourage and support you is going to be huge in helping you to stay grounded when it comes to your thinking.</p><p><strong>Janelle Allen:</strong>      But the other thing, just to be completely honest, that I've started this year is therapy. It's been amazing and there's a lot of people who are kind of, that might throw them off, but having someone to talk to regularly in dealing with the ups and downs of entrepreneurship has worked wonders for just keeping things level. So that's really what I would recommend.</p><p><strong>Joel Hooks:</strong>         With therapy, it's interesting to me because it's, somebody that's paid to listen to you talk about you and, like only you and your problems, right? You can do that with friends and family, but to, it has to be reciprocal for one thing generally. And this is somebody that you can sit down and you can just open up to and they're professional and it's a continued conversation and just such a beneficial and helpful thing to so many folks. I would agree with that completely.</p><p><strong>Janelle Allen:</strong>      Yeah. I don't think that we recognize the power of speaking things out often enough.</p><p><strong>Joel Hooks:</strong>         Yeah. Like saying it out loud instead of just the internal voices that constantly [crosstalk 00:29:26] us from the moment we're born, I suspect, I don't remember those, but they had to be there.</p><p><strong>Janelle Allen:</strong>      Yeah, it's really powerful. And you can have friends and family, but what I realized is, look, I'm the only entrepreneur in my family. I think I'm the only, I might have one friend, close friends. All of my close friends are employees, so they're not going to understand and then I'm going to bore them. So having someone who I can just talk to about challenges and not have to worry about whether or not they understand or I'm boring them, but who's there to listen is supremely helpful.</p><p><strong>Joel Hooks:</strong>         Yeah. Well, Janelle, I really appreciate you coming to talk to me this afternoon. Thank you very much.</p><p><strong>Janelle Allen:</strong>      Thanks for having me. This is fun.</p><p><strong>Joel Hooks:</strong>         Have a wonderful rest of your day. Thank you.</p><p><strong>Janelle Allen:</strong>      You too.</p>",
    "slug": "get-out-of-your-head-and-start-with-your-users-with-janelle-allen",
    "description": "<p>Teaching provides a learner with more information, but the information isn't the only thing that is required to teach effectively. Doing is almost just as essential as the information itself for the learner to solidify what was taught. Creating an effective learning path is challenging, and we tend to start from what we know and take it from there. Janelle challenges the tendency to start from our knowledge, and instead, we should start from where we want our learners to end up being and work backward from there, this is called <i>Backward Design</i>.</p><p>Backward design doesn't just apply to education, it applies directly to software development. As developers, it's essential that we get out of our head and start with the user.</p><p>How do you start teaching if you have no one to teach? Janelle says there are three critical components to building your audience, having an email list, providing valuable content, and consistency. If you stay genuine and provide value you'll filter out anyone who doesn't resonate with you and what you offer.</p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/edf78b39/transcript\">\"Get out of Your Head and Start with Your Users - with Janelle Allen\" Transcript</a></p><h3>Resources</h3><ul><li><a href=\"https://www.goodreads.com/book/show/24737268-badass\">Badass: Making Users Awesome</a></li><li><a href=\"https://www.goodreads.com/book/show/336248.Shambhala\">Shambhala: The Sacred Path of the Warrior</a></li></ul><h3>Janelle Allen:</h3><ul><li><a href=\"https://twitter.com/janelleallen?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor\">Twitter</a></li></ul><h3>Joel Hooks:</h3><ul><li><a href=\"https://twitter.com/jhooks\">Twitter</a></li><li><a href=\"https://joelhooks.com/\">Website</a></li></ul>",
    "duration": 1818,
    "episode_number": 45,
    "contributors": [
      "Joel Hooks"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/12r9m",
    "path": "/podcasts/get-out-of-your-head-and-start-with-your-users-with-janelle-allen",
    "published_at": "May 17th, 2019",
    "url": "https://egghead.io/api/v1/podcasts/get-out-of-your-head-and-start-with-your-users-with-janelle-allen",
    "edit_podcast_url": "https://egghead.io/podcasts/get-out-of-your-head-and-start-with-your-users-with-janelle-allen/edit"
  },
  {
    "id": "podcasts-00000000000000000121",
    "title": "Building Vue Vixens With Education and Inclusiveness With Jen Looper",
    "summary": "Jen Looper, the founder of Vue Vixens, joins us today to talk about the Vue Vixens community, what makes a great workshop, how she chooses what tools to invest into for her career, and how her Ph.D. in French Literature has empowered her career in software development. ",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/831dd452-0017-431f-a6aa-e67f656bcbb5/b14002cc_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/831dd452-0017-431f-a6aa-e67f656bcbb5/1557799504artwork.jpg",
    "simplecast_uid": "831dd452-0017-431f-a6aa-e67f656bcbb5",
    "transcript": "<p><strong>Joel Hooks:</strong>         Hi Jen.</p><p><strong>Jen Looper:</strong>         Hi. How are you doing [inaudible 00:00:09]?</p><p><strong>Joel Hooks:</strong>         I'm doing great. I'm really excited to talk to you. Vue Vixens has been pretty inspiring to me and I love it. I had a few questions before we get into that though. Particularly I thought this was incredibly interesting. You have a PhD in French literature and you didn't do that as a career for very long instead you switched over to software development. It makes a lot of sense in my head, but I was wondering specifically not how that relates necessarily to software. Did getting a PhD in that whole process that you had to go through prepare you at all for your career in software?</p><p><strong>Jen Looper:</strong>         I think it prepared me a bit more for being a DevRel actually, for being a developer advocate. DevRel is all about teaching and explaining things and presenting content. When you're going through a PhD and whatever, you are also training to become a professor. You're training to become an educator. You go through a lot of pedagogy classes. At least we had to especially since I was under French department, so we are basically the cheap labor to get the kids through French 101.</p><p><strong>Jen Looper:</strong>         Yeah, so I think in particular being a language teacher has prepared me very nicely to both learn and to teach about software development. I look at software development as just another syntax, whether it's middle French or old English or JavaScript. This is all just a language and we're using language to express our ideas and our thoughts and our concepts concretely to make something else happen, so to get a reaction. Whether it be from a person or for a computer. That is how I look at it. I don't like to think it was completely a waste of time, but I'm happy that I actually went all the way through the PhD process and came out of it without too many bruises.</p><p><strong>Joel Hooks:</strong>         Yeah. I know it can be grueling especially towards the end.</p><p><strong>Jen Looper:</strong>         Yes.</p><p><strong>Joel Hooks:</strong>         In that respect it's like software anyway because the end is always the hard part.</p><p><strong>Jen Looper:</strong>         Right, it's all about the 80% prepping that. The 20% shipping is just the worst. Yeah.</p><p><strong>Joel Hooks:</strong>         Yeah, I feel like that kind of leads into, because you have this amazing collection of side projects that are kind of fun and interesting. It seems like there's a lot of focus on education on jenlooper.com is where these are. I think that's interesting is that, is there a corelation there between your side projects that have an education feel to them?</p><p><strong>Jen Looper:</strong>         Yeah, a lot of them do. As I was developing a lot of these projects I had young kids. I always try to create projects that would be of interest and of use to my own kids theoretically even if it would be hard to make them actually use them. My first and most influential side project has been practice buddy, which is a little mobile app to help kids practice their musical instruments. Fun fact, my kids are both taking music lessons. I thought, \"Well, wouldn't it be interesting if we could quantify that and incentivize them with stickers and maybe connect the student to the teacher. Then the teacher can get feedback on musical clips.\" It's pretty fun to watch. I don't honestly believe my kids got a lot of benefit from it, because they bailed before it was shipped. I do know that other kids have used it and other teachers have gotten benefit from it. That makes me happy, at least somebody is using it.</p><p><strong>Joel Hooks:</strong>         Okay, my next question was, did it work? I have many more children as well and we're always trying to push the music lessons. Some of them take to it and some are just like, \"I'd rather do other things.\" What are you going to do?</p><p><strong>Jen Looper:</strong>         Yeah. I think with the music either you're into it or you're just not. I was like very, very big as a violinist and my husband enjoys tinkering on the piano. I come from a musical family, but my kids are just not as into it as I would have loved. That's just the way the cookie crumbles.</p><p><strong>Joel Hooks:</strong>         Right. What's your process when you have an idea, you have some sort of spark that's like I want another side project because I don't have enough to do? I was wondering what's your process like when you do that? How do you fit it into your otherwise busy schedule?</p><p><strong>Jen Looper:</strong>         Yeah, I just started one yesterday actually.</p><p><strong>Joel Hooks:</strong>         Nice.</p><p><strong>Jen Looper:</strong>         I know right, so it's very fresh in my mind. Actually yesterday was really frustrating, because I had to build this website three times. It was just not behaving itself. I had this idea that, so this is when the .DEV domains came out and everybody got excited and jumped up.</p><p><strong>Joel Hooks:</strong>         Oh yeah, it's nice, too many.</p><p><strong>Jen Looper:</strong>         Yeah. One is, how do I even.DEV and the other is your momma is a. DEV.</p><p><strong>Joel Hooks:</strong>         Oh man.</p><p><strong>Jen Looper:</strong>         For the your momma one I want to showcase moms. Then I tweeted a little tweet and I got a lot of response by asking, what if I launch this website, what would it look like? A lot of people said, \"Well, I have kids, I'd love to be featured. Or my mom was an amazing developer, I'd love to see her featured. Or I'm a farm mom, I want to be featured.\" People want to post themselves with their pets. Yeah, that's my process is like.</p><p><strong>Jen Looper:</strong>         I have a crazy idea, get some tools in place and then tweet about it and see what people think. The tweeter poll is highly underrated as like a product launch thing. I think even Product Hunt mentioned this. See what happens in Twitter polls and if there's interest, because if there's zero interest, I mean even if you love the project it might be hard to ship it. If you could have a spark of interest maybe it's worth building. I started mocking this thing up yesterday in CodeHS Sandbox, and then I tried to export it and make it run on my local. It's a completely different environment, so I had to redo it three times. It's actually in a descent shape now, and that's a learning process in and of itself. I'm always trying to optimize and find a good process where I learn something.</p><p><strong>Joel Hooks:</strong>         Yeah, and you learn for the next time too, what works and like the interplay between CodeHS Sandbox and your local environment is interesting too.</p><p><strong>Jen Looper:</strong>         Yeah, who knew right? Like with the mobile app if I feel like launching something that's considerably more involved than a web app in my opinion, so you have to have a plan in place on how it's going to look. If you're going to do it across platform, android IOS. If you're going to launch it to the community. Does it need a website to go with it? That's a lot bigger project, so a nice sweet little web app, a fun community thing to build, I think that's definitely worthwhile. That's how Vue Vixens actually started.</p><p><strong>Joel Hooks:</strong>         Yeah, so speaking of Vue Vixens, it's a smash hit. Like you've grown to 20 chapters, 20 plus chapters worldwide and I suspect it's still growing. I'm really curious because at the core of it, it feels like a community to me. That's something I think we should all if we don't strive for it can consider striving for. I was wondering what went into that and what went into creating this community over the span of time that you all have been working on it?</p><p><strong>Jen Looper:</strong>         Yeah. I launched Vue Vixens just again an idea, a whim. Something I thought would be fun. I was inspired by ngGirls and I was getting involved in the Vue community at a beginner level. I just DM-ed Sarah Drasner and I'm like, \"I want to do ngGirls but for Vue. I want to give it a cool name.\" All she said was, \"There must be alliteration in here somewhere.\" I was like, \"It's Vue Vixens, that's it.\" Then I just slapped a logo together. I launched it on stage at Vue Amsterdam. At that point I had like a corruptacular website, a logo and nothing else.</p><p><strong>Joel Hooks:</strong>         It's a cool logo.</p><p><strong>Jen Looper:</strong>         Yeah, I love my logo. It's been a big labor of love, but yeah it just went a little bit viral I think it struck a nerve. People have been very, very supportive, both the women in the community and allies. Just the difference between Vue Amsterdam when I launched it and Vue Amsterdam this year has been really a great thing to see. There's a lot more women speakers on stage and I know every single one of them.</p><p><strong>Joel Hooks:</strong>         Yeah and that's good.</p><p><strong>Jen Looper:</strong>         They're all vixens and the number of women attending the conferences up. We were able to start up scholarship fund to help with that. I think it's a really exciting thing. I want to see this replicated in the React community, that's going to be the big interesting challenge to see how that goes. It's a different feel as a community.</p><p><strong>Joel Hooks:</strong>         Yeah, I know like Sarah Vieira and others are, there's the React Girls conference which is coming up as we're speaking. That kind of initiative I see which they felt like there's a little bit of relation because I think Sarah is involved in both communities. It's definitely something that is a community wrangler I guess.</p><p><strong>Jen Looper:</strong>         I think that of all people who could do this, Sarah is the one you know.</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Jen Looper:</strong>         She actually and I had when I was in London we had tea together, coffee and just talked to community. Very, very early days and it was really helpful to me. I think it maybe helped get her ideas a little. She'd already started working with some kind of React Girls type of thing at that time, so she gave me ideas, I gave her ideas. We've kind of played off of each other. What was cool was about couple of weeks ago in Germany, I think it was in I want to say Berlin, React Girls had a core meetup with Vue Vixens.</p><p><strong>Joel Hooks:</strong>         Yeah, that's what I had seen.</p><p><strong>Jen Looper:</strong>         I love that and I had a dual workshop with ngGirls, so ngGirls and Vue Vixens in morning and afternoon workshops. That's spectacular because I find that overlap of community and we can really learn from each other. What mistakes we're making, what strengths we have, what's working, what's not working.</p><p><strong>Joel Hooks:</strong>         I think the idea of these frameworks is competitive. I think it's not the correct idea. Why I really love it is when people come together in the communities, because it happens I think at the higher levels that people that are actually writing these frameworks and doing these things.</p><p><strong>Jen Looper:</strong>         Oh definitely.</p><p><strong>Joel Hooks:</strong>         Are talking and pulling ideas back and forth, but then you get people like strongly identify with the jealous group framework. Instead of exploring what's the good mark in trade offs and that sort of thing.</p><p><strong>Jen Looper:</strong>         Very. Yeah.</p><p><strong>Joel Hooks:</strong>         It is nice to see that kind of crossover. Also, gives people the opportunity to learn both at the same time like when you're in that mindset, I think that's very interesting.</p><p><strong>Jen Looper:</strong>         Oh yeah, I mean people don't have monopoly on great ideas. Like when React Hooks came out then Evan jumped right on it and made hooks for Vue. The interplay between him and Dan Abramov and Twitter was really interesting to watch. I love that it's out in the open, so we can all learn. It's like a masterclass.</p><p><strong>Joel Hooks:</strong>         I think Vue Vixens approach, and I don't know really if other people take the same approach. The workshop I think is interesting and it feels like it's one of the core atoms of Vue Vixen. Can you tell me more about why you chose this approach and how the workshop works in terms of bringing people together?</p><p><strong>Jen Looper:</strong>         Yeah. We were directly inspired by ngGirls who has this exclusive business model to call it that, of going to the big Angular conferences and there are a bunch of them. Doing the free workshops for large groups of women either before or after the workshop. Then people from the conference can get involved as mentors and it works beautifully. I was involved in ngEurope in Paris and I loved the ngGirls workshop there, because I'm coming from the Angular community. It was a beautiful site to see and I just saw the power of the workshop.</p><p><strong>Jen Looper:</strong>         It's not just wrangling code, it's also enjoying a nice lunch together, talking with mentors, building your career networking especially a whole day workshop, it's absolutely lovely. I'm also coming from a women's college standpoint. I went to Wellesley, so I understand this idea of just getting together with like minded ladies and the magic that can happen. It's really very special. We found out that yeah, there are a lot of big Angular conferences, but there's actually not that many big Vue conferences especially in communities that are really interested in Vue Vixens for example in South America.</p><p><strong>Jen Looper:</strong>         We decided that we needed to branch out a little bit from all the workshops and do not only different types of workshops, but also meetups. We've experimented with a meetup model, which has been interesting to tweak as we go to make sure that our mission is kept. We've had the chapter leaders take the lead in fixing up meetups that work nicely with their local communities. There are Vue Vixens Mexico chapter which is one of our most active ones in Mexico city. They are partnering with their local bootcamps, with their local few meetups to create interesting learning experiences for their communities. Yeah we're like trying to figure out where we can have our most impact and our most reach while maintaining the mission. That's always my main concern. It's a bit of a challenge.</p><p><strong>Joel Hooks:</strong>         I think that's interesting because you mentioned Central and South America and I think when people think development there it's US centric and then you have Europe and then Asia. You don't hear a lot of mention of Central and South America. It's like there's a huge thriving development scene.</p><p><strong>Jen Looper:</strong>         Oh yeah. We had our first Vue Vixens day in Argentina last July, it was spectacular especially because I got to go to Buenos Aires and eat the most amazing steak and I'm ruined for steak now. That's finished, I'm done.</p><p><strong>Joel Hooks:</strong>         Nice.</p><p><strong>Jen Looper:</strong>         I can't even touch it anymore. We'll have one in Colombia, I want to say in [inaudible 00:12:33] so that should be our next Vixens day. I think Mexico is going to do something special too. I just find like these communities are vibrant as heck. They know how to create something out of not a lot of external resources. They have companies that are able to sponsor them, but they can create mountains out of mole hills. It's spectacular and I have huge respect for all of our members in these places, South America especially.</p><p><strong>Joel Hooks:</strong>         Yeah, that's wonderful.</p><p><strong>Jen Looper:</strong>         Yeah, it's great.</p><p><strong>Joel Hooks:</strong>         Going back to workshops, what do you makes a good workshop? Like if you're going to sit down and start working on a curriculum, where do you start and where do you see the end when you're starting?</p><p><strong>Jen Looper:</strong>         Yeah. Here we go back to pedagogy. I like to create workshops that people will come away with minimal frustration in terms of weird installation situations and maximum output. I want them to come away with a full fledged mobile app at the end of their session, one way or another. We were helped tremendously by the creation of CodeHS Sandbox and the NativeScript playground. That's something were you're building a mobile app in the browser and flashing it onto your phone with a QR code. It saved us so much agony of I'm trying to make a workshop after installing X code android studio and all the rest of that nightmare.</p><p><strong>Jen Looper:</strong>         This has been an eyeopener to have this tooling available that we can use to create great experiences for our members. There are other things we do at our workshops. NgGirls for example created a to do app over an entire day. I decided I wanted to do something cuter because if it's not cute I'm not interested in doing it. We create a patch lock with the puppies. We query the dogs CLAPI, which is a really easy API to just make axils, use axils to just query it. Grab puppies that you could adopt, and there's also a cat API that we can use as well. It's just I want people to come to have the charm factor, to just be creating cute things that will instantly be appearing on the screen while learning some deep core concepts of the framework.</p><p><strong>Jen Looper:</strong>         We're always geared towards absolute beginners. I'd had success with mechanical engineers, chemists. I had the CMO, the marketing officer, chief marketing officer of progress complete a mobile app on her phone during lunch time with the CEO of our company breathing down her neck. It was hilarious. It was great. I love to see these successes because people walk away with this great feeling that they can do it and they're empowered. Workshops are really about empowerment first and learning deep concepts second at least for us.</p><p><strong>Joel Hooks:</strong>         Vue, I think it's touted as one of the most beginner friendly job JavaScript frameworks that you can jump into. I was wondering if you had any thoughts or opinions on what makes Vue special in that regard.</p><p><strong>Jen Looper:</strong>         I think it's stemming from the docs actually. Well there's two things I guess. The docs are written for the beginner and for really onboarding people as gently as possible. The maintainer of the docs, the core maintainer is [inaudible 00:15:33]. He's an ex-German teacher finally add up. All of us language teachers are in here doing it like the gentle introductions to this thing. The other thing is that, Vue has always been firmly designed first. I think the founder of Vue, the co-creator of Vue Evan is coming from Parsons School of Design. It's not like a CSE field of a framework. It's more of a, let's create something beautiful, useful with a beautiful clean code. I think that there's a heavy expectation that design will be a big part, not just visual design, but also the design of your code. The cleanliness and the beauty of your code will be available to you as well. It's really cool, I really like it a lot.</p><p><strong>Joel Hooks:</strong>         Yeah and I think you see that in a formation of the community to and who the champions of the Sarah Drasner and others that are like the champions of this framework. They're drawn to it and I haven't asked, but I would suspect for similar reasons.</p><p><strong>Jen Looper:</strong>         Yeah, I think so. I did a talk recently on the zen of Vue, it's all about being right at that fulcrum between design and technology. Sarah's the perfect example of that, she's an artist. She went to fine arts school. You know you've got a bunch of random ex language teachers running around doing things. Yeah, it's a very diverse community and a very I can say a design focused.</p><p><strong>Joel Hooks:</strong>         Yeah, I think at the end of the day my thoughts on Vue and the idea of the secret source is definitely Evan, you and his passion for the project. Just a proper project shepherd. It's been very inspiring to me to watch over the years.</p><p><strong>Jen Looper:</strong>         Oh yeah, absolutely. He's a treasure. We all worry if Evan gets eaten by a [inaudible 00:17:13] somebody actually wrote this article, it's hilarious.</p><p><strong>Joel Hooks:</strong>         It feels like the popular frameworks are big multinational corporations that are essentially ad networks. I'm an Angular user and I use React now and I enjoy frameworks for the sake of their architects personally. Just to see Vue and see it succeed has been really a great story to watch.</p><p><strong>Jen Looper:</strong>         Well up and coming is Felt.</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Jen Looper:</strong>         I keep seeing tweets about Felt. Felt has been around for a while I'm I right? I have never touched it.</p><p><strong>Joel Hooks:</strong>         I haven't touched it either. I'm actually honestly because I don't, I used to chase new technology and I feel like I get older and I just have other interests too.</p><p><strong>Jen Looper:</strong>         Yeah, I actually had a nightmare that Vue had been completely defalcated in favor of a new JavaScript framework called, I think it was called Blaze. This is literally a dream that I had and it was very specific. It was called Blaze.</p><p><strong>Joel Hooks:</strong>         Sounds like a nightmare maybe.</p><p><strong>Jen Looper:</strong>         It was a terrible dream.</p><p><strong>Joel Hooks:</strong>         Vue Vixens is for women and those identifying in women and the workshops are free. I think that's amazing. I was wondering the idea that you're being open and generous and inclusive to these folks, how is that important to your overall mission?</p><p><strong>Jen Looper:</strong>         I mean it's critical to the mission. Our reason for existence is to make sure that the community is as friendly and diverse as possible, because I think that it's so obvious to me that it's the strength and the longevity of your framework or of your community is going to be dependent on how diverse it is. You have to have people with other ideas coming in, and people have to evolve to accept new things. We try not to be exclusive of communities, but as inclusive as we can be with our mission being that we're really focused on people who identify as women.</p><p><strong>Jen Looper:</strong>         One thing I wanted to do is I launched segments of our workshops that I allowed my chapter leads to give for all communities. For Vue Boston, which I manage we did some of our nano activities which was a Vue Vixens gift to the community. It's not to shut anyone out, and also our stuff is all opensource, so you can certainly pick it up and do it. It's not underneath the tables or anything.</p><p><strong>Joel Hooks:</strong>         Yeah, and are those the mini workshops because I thought those were super interesting personally.</p><p><strong>Jen Looper:</strong>         Yeah, so there's three groups now and I think there's going to be a fourth one coming soon from our Spanish chapter leader. There's a full day workshop which is six chapters, five web, one mobile. Then the minis are something that we can do in like after hours or lunch meetups. If you want to do a lunch and learn, minis work nicely. I did a mini with our CMO and our CEO the mobile mini and it's just been built a really quick link Tinder for dogs or something like that. Yeah, and then the third group is nano. The nanos are the ones that we offer for the entire community that you can just get a group of friends together and just bash through a nano as an icebreaker, though a code icebreakers.</p><p><strong>Jen Looper:</strong>         I have one mobile in there and then all of our chapter leaders and our community numbers created about six other nanos. These are like how to setup your environment for Vue. How to create a master detail list as a mobile app. Stuff that as of interest to the membership, they just wrote it out. Then with the format that I specify and then we publish them and they can be used. I think it's a really nice thing to give to the community.</p><p><strong>Jen Looper:</strong>         The chapter lead for Spain is working on a workshop on how to design your own personal website and that's like a six part workshop. He's really killing it over in Spain, so it's coming soon.</p><p><strong>Joel Hooks:</strong>         Yeah and these are all available at vuevixens.com for free. They look to me like they're all great for self paste learning too.</p><p><strong>Jen Looper:</strong>         Yeah.</p><p><strong>Joel Hooks:</strong>         They're really laid out and have everything you need to start up.</p><p><strong>Jen Looper:</strong>         Oh thank you. Yes, so it's vuevixens.org just click workshops so it's right there. Yeah.</p><p><strong>Joel Hooks:</strong>         You've mentioned Native or mobile and doing NativeScript and that relates to your professional job that you do your developer advocate with the focus on NativeScript. I was wondering if you could tell me about NativeScript and what it is, because I had the opinion when I first heard it I was like, oh this is a whole new language. This is something we'd have to learn from scratch. I suspect I'm not the only person that's had that idea in their head. Can you tell me what it is and what it's about?</p><p><strong>Jen Looper:</strong>         Yeah, definitely I used to work on a lot of booths with NativeScript. People do come up with and they're like, \"Oh you know I really don't want to know, like which one is a disaster.\" It's like, \"No, no, no it's just JavaScript and it's a keen to React Native.\" Well for React Native it's a bridge and for us it's a runtime. We've created this runtime that runs on your mobile device and you're able to write an entire mobile app in JavaScript across platform. Then the runtime will translate what you've written into Native modules.</p><p><strong>Jen Looper:</strong>         If I write in JavaScript I write that I want to create a button or I use a NativeScript module to just use some text to create a button, that will be translated using the JavaScript engines to a Native button on IOS and a Native button on android. It's this kind of cool, new fashioned way of writing a mobile app to be differentiated from code over technologies which is basically a little web app that runs in a web view. It's like the next generation after the code over idea of using JavaScript to build across platform. The pioneer in this technology actually I believe was titanium, because there's not a code over technology they have a different way of translating your JavaScript to Native code.</p><p><strong>Jen Looper:</strong>         We use a runtime, React Native uses a bridge and with NativeScript we have this ability to use just JavaScript or TypeScript or Angular or Vue. We have a new port for this Felt and a new port for React. We have a Canadian member use it, a Canadian React NativeScript because he didn't really love React Native. I'm like, \"All right, well just knock yourself out, enjoy.\"</p><p><strong>Joel Hooks:</strong>         It feels like it was Angular centric in the early days, but since then we've seen more adapters that have appeared.</p><p><strong>Jen Looper:</strong>         Yeah and that's what brought me into the view community actually was watching this lovely student from Bulgaria, not Bulgaria, Budapest who just decided to port a NativeScript for Vue. I couldn't believe my eyes. I saw him tweeting and I was like, \"You've got to be stopped. How could I help?\" It was a really exciting moment that actually changed my career and brought me into the Vue community.</p><p><strong>Joel Hooks:</strong>         Yeah, that's pivotal then.</p><p><strong>Jen Looper:</strong>         Yeah, start with mobile and then you can join the whole ecosystem, it's awesome.</p><p><strong>Joel Hooks:</strong>         How do you personally choose and evaluate what tools you're going to use or what you're going to invest in, in terms of career?</p><p><strong>Jen Looper:</strong>         Well what has worked for me actually is to try to build the same app in several different technologies. Like Practice Buddy has been rewritten four times now I think at least. I started with Native IOS and then I did Corona SDK and then Kendo Mobile and then JavaScript with Angular. Right now it's an Angular app and you learn a lot. Rewriting something that you know well again and again and again. Unfortunately my poor customers have to deal with release after release, but I did the same thing in a talk.</p><p><strong>Jen Looper:</strong>         I did in Amsterdam last year it was a cheese display app, so very basic master detail for Dutch cheese. It was delicious. I wrote this app in rack NativeScript and showed the pinpoints in both platforms. Oh I did on Ionic too. Then somebody else ported it to Flatter, so it's all on my repost. it's really a cool way to learn, compare apples to apples and see how it feels.</p><p><strong>Joel Hooks:</strong>         Kind of the idea ToDoMVC, but with more delicious or a cuter centric arithmetic.</p><p><strong>Jen Looper:</strong>         Oh yes, popping [inaudible 00:25:05] and cheese.</p><p><strong>Joel Hooks:</strong>         Yeah. I'm actually a big fan of ToDoMVC and I think this is the same principle in just like...Well one I like to do apps, personally I like checklists and stuff. Just the idea that you don't have to learn the domain over and over again, right?</p><p><strong>Jen Looper:</strong>         Yes.</p><p><strong>Joel Hooks:</strong>         Like you don't have to talk about the domain because you know it. I think it's similar pet store or whatever with like you don't need a clever thing to learn. You just need something that's familiar so you're not having to think about and design the domain from scratch while learning right?</p><p><strong>Jen Looper:</strong>         Exactly, yeah. Exactly. It can be pleasant to look at at the same time.</p><p><strong>Joel Hooks:</strong>         Yeah and having fun while you do something that is otherwise become tedious is perfectly acceptable and maybe even encouraged.</p><p><strong>Jen Looper:</strong>         Definitely. It helps with learning process.</p><p><strong>Joel Hooks:</strong>         It seems to me just from the outside that you're a very busy person. Like I love productivity, this is why I like checklists and stuff. I'm wondering like how do you keep it all together? Through the years what have you learned to keep it all sane and actually accomplish what it is you set out to do?</p><p><strong>Jen Looper:</strong>         Well at this point in my life I'm an empty nester, so this does make it a lot easier. We also downsized. I think simplifying your life, I mean not that you're going to throw out your kids. If you can simplify your lifestyle a little bit, you know people in my time usually have two houses, two properties so one on the cape and one in town. I can't even enVisual, I can't even like conceptualize that because it's just too much complexity. If you can Marie Kondo the heck out of your life, that is very helpful. If it doesn't spark joy just like go on.</p><p><strong>Jen Looper:</strong>         I think that like you said about to do lists, I'm also a big fan. I have a little app extension or a Chrome extension called Compliment Dash. It's by Sarah Wegman who is this lovely ex Wellesley which is a Wellesley alarm and she's a Vue Vixen. She wrote this cool extension that gives you a compliment and then it allows you to write your to do list right on your browser. This has been helpful to me. I've also used like to do lists, mobile apps and that kind of thing. I use that for packing lists, but yeah and trying to keep organized. I'm going to be going back to using Google Keep because I need a good note-taking app and I got off of using Evernote. I think Keep is pretty good.</p><p><strong>Joel Hooks:</strong>         I've been on Notion lately.</p><p><strong>Jen Looper:</strong>         Yeah, Notion is great.</p><p><strong>Joel Hooks:</strong>         It's free form so you can do all sorts of fun stuff with it, though that has its drawbacks, because like lack of structure. It's like JavaScript framework, some of them have a lot of structure, some of them don't. It's kind of how does your brain work? Do you need it to build your own structure? Do you need to have it provided for you?</p><p><strong>Jen Looper:</strong>         Do you use Notion for note-keeping, because I have a lot of stuff on there already? I never thought about that too much.</p><p><strong>Joel Hooks:</strong>         It works okay. I actually don't like it very much for writing. I use Dropbox Paper.</p><p><strong>Jen Looper:</strong>         I do too, yeah.</p><p><strong>Joel Hooks:</strong>         For most of my actual like when I'm sitting down to write because of the collaboration and just the general writing flow feels good to me. It's not perfect, but nothing is.</p><p><strong>Jen Looper:</strong>         Yeah, I keep all my conference pictures on Dropbox Paper, but I really would like to consolidate my life. I do use a lot of tools.</p><p><strong>Joel Hooks:</strong>         Yeah, me too.</p><p><strong>Jen Looper:</strong>         It's better to consolidate.</p><p><strong>Joel Hooks:</strong>         I get internal criticism from my joy of new tools.</p><p><strong>Jen Looper:</strong>         I know. We're developers and hackers and engineers [inaudible 00:28:12].</p><p><strong>Joel Hooks:</strong>         It's something new I'll try that. It's okay if my stuff is on 12 different sites on the internet. I know where it's at.</p><p><strong>Jen Looper:</strong>         Yes, I know. Now we're moving our stuff on from our own blogs right to either Medium or [inaudible 00:28:24].</p><p><strong>Joel Hooks:</strong>         See I've been pushing the opposite approach. I've been encouraging people to go back to your own space and own. I was reading your blog and you go back several years and it's like this is great. You have this entire backlog and it's yours and you own it. I think that's so important and the move away from that into the Mediums now popping pay well and stuff which is really sad.</p><p><strong>Jen Looper:</strong>         Yes, so [inaudible 00:28:46] has been a great blogging platform. I actually had a ton of excellent content on Teller at developer network. That thing was defalcated.</p><p><strong>Joel Hooks:</strong>         Oh ouch.</p><p><strong>Jen Looper:</strong>         Now if you look at some of my dug links those are like my best articles. I'm actually over this weekend this is my task, this weekend I've got to go on the way [inaudible 00:29:06] machine, grab that content and just publish it to my own stuff. It's a tragedy to lose that stuff, it's so good.</p><p><strong>Joel Hooks:</strong>         Will you build a scrapper or not?</p><p><strong>Jen Looper:</strong>         Oh I don't know. I've got the raw files of the similar I just don't remember where.</p><p><strong>Joel Hooks:</strong>         Yeah. No, that's something that we use.</p><p><strong>Jen Looper:</strong>         We pretend to be organized and we're really literally not.</p><p><strong>Joel Hooks:</strong>         Yeah. It's piles on the floor. It's fine. My last question that I had for you was, have you read any good books lately that you found inspiring or maybe insightful in terms of career or software or anything, even loosely related?</p><p><strong>Jen Looper:</strong>         Yeah. It's a cool question, because I gave a talk, this talk I mentioned before called zen and the art of Vue. That was inspired by Zen and the Art of Motorcycle Maintenance. If you haven't read this book recently, it's an astonishing book. It was written in 1971 by a guy who is doing software manuals, so he's a tech writer. He's talking about building up, maintaining motorcycles in a very similar way that we talk about maintaining code and writing about without using manuals. It's really interesting and you realize that since 1971 until now nothing has changed. We're still writing useless manuals and docs that nobody understands or no docs.</p><p><strong>Joel Hooks:</strong>         You can go back to like Plato and that kind of trend emerges in terms of humans.</p><p><strong>Jen Looper:</strong>         Oh yeah nothing has changed. Yeah.</p><p><strong>Joel Hooks:</strong>         It's a great book though. I think one that you can revisit. It's not one you read once and then it's gone forever. It's one that can be revisited and you'll learn something new and refresh.</p><p><strong>Jen Looper:</strong>         Absolutely. Yeah, and I have also been reading the Manager's Path kind of slugging through managerial stuff. I can announce it here, I'm actually jumping ship. I'm moving to Microsoft to be a manager.</p><p><strong>Joel Hooks:</strong>         Microsoft is snatching up all of the best people. Congrats to them for getting you to jump ship and move over there.</p><p><strong>Jen Looper:</strong>         Thank you, yeah.</p><p><strong>Joel Hooks:</strong>         That's exciting.</p><p><strong>Jen Looper:</strong>         I'm really excited, so I get to manage an awesome team of six incredible people the original. They gave me the Canada, US and Latin American regional developers to manage cloud advocates.</p><p><strong>Joel Hooks:</strong>         Awesome.</p><p><strong>Jen Looper:</strong>         We're really excited. Now it's like slugging through a lot of managerial material.</p><p><strong>Joel Hooks:</strong>         I'll send you link. My friend Will [inaudible 00:31:13], but it's a really good book they just put out on engineering management.</p><p><strong>Jen Looper:</strong>         Oh really?</p><p><strong>Joel Hooks:</strong>         I just tweeted about it. He's at Stripe and he's one of the most conscientious engineering managers I've ever had the pleasure of encountering. It's funny because we work on the same, like I hired him to work on my first software project and it was his first time to ever get paid to write software. I have this interesting kind of not parallel, but career check to get there, so it's fun to see it.</p><p><strong>Jen Looper:</strong>         Wow, that's fantastic yes.</p><p><strong>Joel Hooks:</strong>         Thanks Jen. I really appreciate it for you sitting down and talking with me today. I appreciate all the work that you do in the community. Vue Vixens is amazing and I look forward to seeing what you come up with next.</p><p><strong>Jen Looper:</strong>         Thank you for your support. Watch for your momma is a.DEV and I'm going to release it for mother's day.</p><p><strong>Joel Hooks:</strong>         Nice, we'll be on the look out. Thank you.</p><p><strong>Jen Looper:</strong>         Awesome. Thanks.</p><p><strong>Joel Hooks:</strong>         Bye.</p>",
    "slug": "building-vue-vixens-with-education-and-inclusiveness-with-jen-looper",
    "description": "<p>Jen Looper, developer advocate and the founder of Vue Vixens, didn't study software development in college, she has a Ph.D. in French Literature. Her degree might seem unrelated, but it strengthened her ability to explain complex ideas as well as her overall communication abilities, skills that are essential for her role as a developer advocate. These skills also come into play in her work building the Vue Vixens community, which now has over 20+ chapters all over the world!</p><p>The workshop has been a powerful tool for growing the Vue Vixens. Jen explains how the shared experience of learning, eating, and hanging out together can build a lot of lasting connections. Vue Vixens has also branched out from workshops into also hosting meetups, the structure of which is determined by the local chapter leader to suit the needs of their particular location. </p><p>But what makes a great workshop? Minimal installation, maximum output. Codesandbox and Nativescript playground have massively cut down on the initial setup times for the Vue Vixen workshops by doing away with all of the installing and installation issues that will always come up. Jen likes to use a cute app project to make the workshop more fun and to make exploring the deeper concepts less dry. To Jen, workshops are about empowerment first and foremost. If a student can leave the workshop feeling empowered and hungry to learn they'll end up much better off than if they learned more but left feeling disinterested. </p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/b14002cc/transcript\">\"Building Vue Vixens With Education and Inclusiveness – With Jen Looper\" Transcript</a></p><h3>Resources:</h3><ul><li><a href=\"http://VueVixens.org\">VueVixens</a></li><li><a href=\"https://yomamaisa.dev/#/\">yomamaisa.dev</a></li><li><a href=\"https://www.amazon.com/Zen-Art-Motorcycle-Maintenance-Inquiry/dp/0060589469\">Zen and the Art of Motorcycle Maintenance</a></li><li><a href=\"https://www.notion.so/\">Notion</a></li></ul><h3>Jen Looper:</h3><ul><li><a href=\"https://www.jenlooper.com/\">jenlooper.com</a></li><li><a href=\"https://twitter.com/jenlooper?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor\">Twitter</a></li><li><a href=\"https://github.com/jlooper\">Github</a></li></ul><h3>Joel Hooks:</h3><ul><li><a href=\"https://twitter.com/jhooks\">Twitter</a></li><li><a href=\"https://joelhooks.com/\">Website</a></li></ul>",
    "duration": 1923,
    "episode_number": 44,
    "contributors": [
      "Joel Hooks"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/2h2fx",
    "path": "/podcasts/building-vue-vixens-with-education-and-inclusiveness-with-jen-looper",
    "published_at": "May 13th, 2019",
    "url": "https://egghead.io/api/v1/podcasts/building-vue-vixens-with-education-and-inclusiveness-with-jen-looper",
    "edit_podcast_url": "https://egghead.io/podcasts/building-vue-vixens-with-education-and-inclusiveness-with-jen-looper/edit"
  },
  {
    "id": "podcasts-00000000000000000120",
    "title": "Turning Technical Concepts into Approachable Illustrated Metaphors with Maggie Appleton",
    "summary": "Today Maggie Appleton, the course illustrator at egghead.io, discusses how she became an illustrator, researching a technical topic she plans to illustrate,  accidentally becoming a web developer, and how she turns technical concepts into digestible illustrations.",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/27992848-007f-4c0e-b0b6-74518b758f7e/e855d7bc_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/27992848-007f-4c0e-b0b6-74518b758f7e/1556842744artwork.jpg",
    "simplecast_uid": "27992848-007f-4c0e-b0b6-74518b758f7e",
    "transcript": "<p><strong>Joel Hooks:</strong>         Hi, Maggie.</p><p><strong>Maggie Appleton:</strong>    Hi.</p><p><strong>Joel Hooks:</strong>         I'm really excited to talk to you. I mean, we work together so we talk occasionally anyway, but I have a desk that's essentially covered with sticky versions of your illustrations and I was thinking about it, and to us programmer nerds that are probably listening to this, it really comes off like you're some sort of wizard crafting these magical images that astound and delight us. But I'm curious about what sort of study and training actually goes into being an illustrator, because I think people look at developers in a similar way. You know, what we do is magical, but in fact it takes a lot of skill and lengthy dedication to get to where you're at. So how did you get into this and what's your kind of training and background as an illustrator?</p><p><strong>Maggie Appleton:</strong>    Yeah, there's definitely analogies there. There's a lot of black box mysticism that surrounds both fields as if ... the thing is that you're always told you must've been born with it. You're so lucky to be able to know how to draw, like as if it's not a thing that anyone can learn how to do, which yeah, developers get the same myth attached to them that yeah, you're born Mark Zuckerberg or you're not.</p><p><strong>Maggie Appleton:</strong>    So yeah, in terms of training and study, I tend do the usual thing that I think the vast majority of illustrators do, which is art school of some sort. I actually had a degree in anthropology and realized that wasn't going to get me a whole ton of jobs, and I'd always been into drawing, but you get told that it's not a career. So I had sort of written it off quite early and was focusing more on either politics or NGO work but got pretty disillusioned pretty quickly with that stuff and started training to be an illustrator only after earning my undergraduate degree.</p><p><strong>Maggie Appleton:</strong>    I was doing it I guess all independently and only because of the time that we live in. You know, the online learning was just taking off then. Like, Skillshare had just come up and they had some illustration courses online, but I pretty much learned probably the most ineffective way possible, by patch working together a whole bunch of different resources and sites. Like, some really notable ones for people that are interested in teaching themselves illustration online would be Schoolism was a big one for me, which is run by a guy called Bobby Chiu, which is really good.</p><p><strong>Maggie Appleton:</strong>    New Masters Academy, so definitely a lot of online resources, a lot of books. And I did spend a year in LA doing on the ground training with a lot of guys who worked in the film industry there, and they're very highly technically skilled so that leveled me up a lot.</p><p><strong>Joel Hooks:</strong>         So that's more like industrial design, like those folks that are doing concept art and that sort of thing.</p><p><strong>Maggie Appleton:</strong>    Yeah, exactly. So it's much less, I guess, a what I might call wishy washy artistic illustration, which is a completely valid form of the discipline. But I very much love the more technical side, which I would maybe, you know, is a bit more like my developerish side coming out. I love, you know, formal perspective and correct lighting and stuff that concept artists really emphasize in their work.</p><p><strong>Joel Hooks:</strong>         I think we share a love for that, because I really love that stuff too. But then being creative with it as well, because I don't think that like the saps the creativity out of it, it just kind of adds a constraint to the work, I think.</p><p><strong>Maggie Appleton:</strong>    Yeah. Yeah. I like to think of it as it's ... I mean, visual language has a lot of analogies to programming languages where it is just a language that you're using to communicate and build certain things. So I like to think of things like perspective and color and light, they're all just tools and you use them to communicate, you know, specific things. They're just a medium, they're not the thing in itself.</p><p><strong>Joel Hooks:</strong>         Yeah. And in a way that it's code, it's encoded and it's carrying some meaning and relevance to folks. You know, if that's the goal and it's done that correctly.</p><p><strong>Maggie Appleton:</strong>    Yeah. Yeah.</p><p><strong>Joel Hooks:</strong>         You work at Egghead, and you do these amazing technical illustrations for programming courses and concepts, and I was wondering how you describe your work to your family and friends that aren't in this industry.</p><p><strong>Maggie Appleton:</strong>    Yeah, it always depends a lot too on, right, the positionality of the person. So with my grandparents I of course just say I make things on the Internet and leave it at that. But when it's actually, you know, someone who has some knowledge of how the Internet works, I tend to use the tagline, I help explain web development through illustration, is sort of my one sentence. And some people don't know what web development means, so then you break it down to, you know, I help explain how things on the Internet get built through illustration.</p><p><strong>Joel Hooks:</strong>         Yeah, just kind of paring it back. A little more general, a little more general. Your undergraduate degree was in anthropology?</p><p><strong>Maggie Appleton:</strong>    Mm-hmm (affirmative).</p><p><strong>Joel Hooks:</strong>         You know like it's formative and we all are stacking skills up over time, and it feels like a lot of the work that you do is actually kind of related to anthropology and I was wondering if you thought the same and how it might be similar.</p><p><strong>Maggie Appleton:</strong>    Yeah, yeah. It's definitely baked into my ways of looking at the world is how I would describe it. So I did love my anthropology degree. It was probably a little bit indulgent, but I did focus on digital anthropology. Like I wrote my thesis on the Quantified Self Movement, which is like over nerdy fantastic self tracking like Fitbit's and quantified data and how it relates to our personal sense of self. I love that stuff, so I definitely applied an anthropological lens to the programming community and developers.</p><p><strong>Maggie Appleton:</strong>    And generally, I mean, Internet culture is just sort of something I feel like I'm always looking at through an anthropological lens. And yeah, it definitely gets baked into the illustration because then you're always trying to look at things from the cultural angle. So things like looking at the JavaScript community from the cultural angle of how we perceive JavaScript in like a metaphorical way and how the culture of it builds up and how that affects how people might write JavaScript to the kind of things they might build with it. So I like thinking about it from that lens, I guess.</p><p><strong>Joel Hooks:</strong>         Yeah. And there's kind of the idea of what people say, right? Like what they say and what they, then on the other side of that is what they actually do and how approach it and how things really work under the hood as a kind of Zeitgeist and all that fun stuff comes into play I would think.</p><p><strong>Joel Hooks:</strong>         So when you sit down, you had this, a greenfield task of illustrating some sort of complex technical concept. What's the process like? Like, how do you get into that and even start. Do you start with a pencil in your hand and start drawing right away or what goes into creating an illustration?</p><p><strong>Maggie Appleton:</strong>    Yeah, well especially for the Egghead ones, right? So for a couple of years now I've been doing all the course illustrations on Egghead, and the way that usually goes is we'll have a course that's whatever's next in line to be released and I'll sort of dig first into figuring out on whatever the topic is. And of course it spans just an enormous range of any web development topic that someone's going to teach, everything from what if we had like dependency injection? Angular was like a whole course. There's always ones on React.</p><p><strong>Maggie Appleton:</strong>    So I got to sort of take whatever topic it is, you know, open up a thousand Google tabs, just make sure I have a good understanding of what the subject is, flip through most of the videos that are in the course, and that whole time I'll usually ... either on paper or on my iPad, it depends how I'm feeling, just me taking handwritten notes, and it's mostly or words to begin with. There's like very small, tiny icon type sketches of things, ideas of how I might visualize things, but it's all rather research based I suppose. Once I have a really strong, I guess, mental concept of the topic then I'll usually start brainstorming a good metaphor I think that might encompass it in a single image.</p><p><strong>Maggie Appleton:</strong>    Yeah, coming up with metaphors is like a whole discipline in itself that I feel like isn't very well developed in the world in the sense. I've really tried to find as many books and people teaching it as possible and it's all rather vague, but the best tactics I found are just you sort of take a look at something and say, all right, what are the main qualities of it? What are the main functions of it? Then you just start doing lateral thinking. So lateral thinking is like ... you know, we all know linear thinking is what most developers are really good at. Right? Following one logical train of thought to the next, and lateral thinking is when you try to go sideways in the world.</p><p><strong>Maggie Appleton:</strong>    So you try to look at something and say, \"Well what else is like this from another discipline?\" Which can be really difficult because you're trying to break your brain out of its normal structures of how it thinks about things.</p><p><strong>Joel Hooks:</strong>         Yeah, the preconceptions, right?</p><p><strong>Maggie Appleton:</strong>    Yeah. The ways we think get so rooted in ... it's really difficult to break them and sort of think of things that we've never thought of before on purpose. But one field I really have loved that has helped me a lot with this was called Synectics. There's these two books, Design Synectics and Art Synectics. They're really old. I've had to like hunt for second hand copies of them, but they're worth getting if you're into creative thinking, and they work through different techniques for how to break up your patterns of thinking. So you'll do things like substitute, reverse, morph, maximize, minimize. So it's just like adding like twists to things. So I'd say, React is a little bit like a car, but how would you reverse, minimize, maximize that?</p><p><strong>Joel Hooks:</strong>         Like, what if it was a giant car?</p><p><strong>Maggie Appleton:</strong>    Exactly.</p><p><strong>Joel Hooks:</strong>         That kind of thing. I think that's kind of like oblique strategies or thinking obliquely too. Right? You try to try intentionally to think outside of what is commonly understood is like the metaphor or whatever.</p><p><strong>Maggie Appleton:</strong>    Yeah. Yeah.</p><p><strong>Joel Hooks:</strong>         Do any sort of common metaphoric structures appear when you're dealing with programming in general? Do you have like a favorite or go to is or something like a common thread that you see throughout the way we think about code?</p><p><strong>Maggie Appleton:</strong>    Well, we definitely always end up in the mechanical analogies, right? I, of course, fall into these as well because it does feel so natural and this is where the anthropology ties in, where you remember that it's all culturally constructed. Our association with the Development Wells being mechanical or everything nowadays being mechanical, right? The brain is a machine, the body's a machine. Everything's a machine. Like that's like industrial revolution forward. We haven't been able to think of anything else.</p><p><strong>Maggie Appleton:</strong>    So yeah, machines are always a good one to dive into. You know, could it be a set and type of tool? And that's when you like, I have fun thinking about certain disciplines. So you say, \"Okay, what gardening tools could this be? What a financial tools could this be? What sort of cleaning tools could this be?\" And you can sort of pick categories and test out different things within them. Yeah. So that sometimes helps.</p><p><strong>Joel Hooks:</strong>         Because there's those also like the cultural, like global, we're teaching a global audience with these things. And like we were going through our course development process and we use as an example driver's education just to explain how we do the thing. As it turns out, not everybody does that now, because we thought, \"Yeah, this is universal. Everybody has to do drive.\" And somebody was like, \"Oh we don't do that in my country.\" And I was like, \"Oh.\" [crosstalk 00:10:40]</p><p><strong>Maggie Appleton:</strong>    I've never been through driver's Ed.</p><p><strong>Joel Hooks:</strong>         Yeah. And that's, you know, like we just assume. It's kind of, maybe it's even, you know, USA centric. I don't know. But we generally speaking do driver's Ed here. So, you know, it's just interesting to me that like these metaphors and these ways of looking at things across the board can change. So finding something that's common enough that the people understand it, that has to be a challenge.</p><p><strong>Maggie Appleton:</strong>    For sure. And it's also a bit difficult to test too. I don't know if we've ever had feedback on any of the illustration saying they don't make sense. I mean, sometimes you'll get Twitter commenters who just want an opinion.</p><p><strong>Joel Hooks:</strong>         Yeah. Reply guys.</p><p><strong>Maggie Appleton:</strong>    Yeah. But most of the time people either take it has is. I suppose that's probably why the mechanical ones are an easy cop out because it becomes a bit global. But yeah, I suppose some probably do get lost in the mix that we just never hear a feedback on.</p><p><strong>Joel Hooks:</strong>         Yeah, that's probably true.</p><p><strong>Maggie Appleton:</strong>    Yeah.</p><p><strong>Joel Hooks:</strong>         How has illustration similar to program? We talked about this a little bit, but I'm curious because I feel like the process, and there's of lot of interesting kind of crossover in programming computers and illustration.</p><p><strong>Maggie Appleton:</strong>    Yeah. Well, I suppose my approach to illustration is probably more like programming a lot of other illustrators approach. So like I mentioned before, I am quite technically inclined with it. I do just see it as a language to express ideas through and not necessarily ... well I suppose if you're doing illustration for illustration sake, it becomes art and then that's a whole different debate.</p><p><strong>Joel Hooks:</strong>         The what's art debate, you mean?</p><p><strong>Maggie Appleton:</strong>    Yeah. Yeah.</p><p><strong>Joel Hooks:</strong>         We can get into that if you want. No, I'm just kidding. [crosstalk 00:12:14]</p><p><strong>Maggie Appleton:</strong>    No, no, no. Whenever I get called and artist, I'll always sort of argue against it and say, \"I'm really not. I would never call myself an artist. I don't call what I make art. Art seemed something different to me.\" Whereas, I see illustration as you know, even the definition of the word is to explain something clearly. And that's not necessarily art goal, but it's always illustration's goal.</p><p><strong>Joel Hooks:</strong>         Yeah. So when I take your sketch pages and print them and then hang them on my wall, that's like a little cringey. Is that what you're saying?</p><p><strong>Maggie Appleton:</strong>    I suppose then maybe it becomes art. Unintentional art, I suppose.</p><p><strong>Joel Hooks:</strong>         Speaking of like unintentionally, right? Like not ... like it feels like in a way, and just because I know you and I see your work, like you've become, kind of like, I describe it as an accidental web developer [crosstalk 00:13:07] into it you've done, you know, like you've done some web development in the past, but like while you're doing this research, while you were studying these, you have to go in depth, and I can't help but think you would also pick up some of the skills and I was wondering if that's the actual case.</p><p><strong>Maggie Appleton:</strong>    Yeah, definitely. I do love now the concept of the accidental web developer, because it's absolutely happening. Where I feel like it's not like I was resistant to it, but I have so much fear around web development and imposter syndrome that no matter how much I learn I think I'll always say I'm not a web developer if I was speaking to a web developer. I know how to build a React App and like know how to get Gatsby and MDX up and running, and when I get really in the weeds, at least I have the whole Egghead team to message and ask to come save me.</p><p><strong>Maggie Appleton:</strong>    But I think that's maybe what motivates a lot of my work too is because I very acutely feel the pain and frustration and fear of not knowing what you're doing and trying to figure it out in the web development world right now where everything feels broken all the time and we can't figure out what anything is, and I don't know how Webpack works. It's always broken. Both of my parents were programmers, one of my brothers is a programmer working in California, so it definitely runs in the family and I taught myself HTML at like age 13 on neopets.com, if anyone else remembers that.</p><p><strong>Joel Hooks:</strong>         I'm sure there's [crosstalk 00:14:25].</p><p><strong>Maggie Appleton:</strong>    So, it's in the history. Yeah. And Myspace, gosh, you've got to like customize that page. But in, yeah, it's so complex now and I feel like people, it's not as easy for people to get into the world and I know everyone in the community talks about this all the time, but one of my big motivations for illustrating web development concepts is hopefully making it less frightening for other people. Yeah.</p><p><strong>Joel Hooks:</strong>         Yeah. That beginner's mindset one, because you're interested, right? Like, you have this background and you're interested in the technical side, both with your illustrations and with the concepts that you're illustrating, and does your kind of like beginner's mindset, which is hard to retrieve after you lose it. But you have that. Has that helped in the process of creating these and thinking about, you know, \"How do I illustrate this where people will gain some knowledge from it?\"</p><p><strong>Maggie Appleton:</strong>    Absolutely. I mean, the beginner's mind thing is definitely critical to making them, and I also think it's fairly critical that I'm especially slow at learning web development concepts or it really takes me a lot of energy to wrap my head around it where I can see other people maybe get it quite quick and I have to really draw the whole thing out and get a really strong visual mental structure in my head of like how you know the Gatsby product is structured and how it talks to the Babel and how that's all talking to some server on Netlify, like I really need a drawing strongly in my head but then also on paper to like see how it all works.</p><p><strong>Maggie Appleton:</strong>    So I think the fact that I'm a little bit thick in that sense makes it better because then I really have to break it down to micro pieces and hash it all out. Whereas, when I read a lot of other tutorials written online, I think they're skipping a thousand steps because their brain is just working through the logic faster than mine would.</p><p><strong>Joel Hooks:</strong>         Yeah, they're making assumptions. Because it's a struggle for me too. I don't instantly understand any of this and feel like I'll be, you know, learning these concepts forever. Then at the same time, a lot of that work is hidden and yours gets exposed. You know, because you're actually trying to visualize it and create something visual for people. So in a way you have to attack it that way I don't think.</p><p><strong>Maggie Appleton:</strong>    Right. You can't have it just be abstract code. You have to ... I always like to think of the explainers that I've been drawing at Egghead. It's really like building a real, physical world of all the stuff. That's a bit how it gets back into that. The concept artists that I originally studied with is they have to really build imaginary worlds. And I like to imagine I'm sort of drawing this imaginary world and building in my head of web development and of the Internet and how everything on the back end of a website actually works as if it's some like animated film, you know?</p><p><strong>Joel Hooks:</strong>         Well yeah, because while you're learning it you're also thinking about explaining it, which explaining the thing and teaching is generally, that's an advanced concept, right? Like people associate that with expertise. I actually don't think that's true. I think you can learn something and come up with an explanation, and your explanation solidifies your own learning and shares, you know, like helps others learn the thing too, so you can kind of share that even if you don't have the years of experience.</p><p><strong>Maggie Appleton:</strong>    People talk about this all the time too, that someone who knows something really well has forgotten what it feels like to not know it and doesn't actually remember all the bits that were difficult to learn in the first place.</p><p><strong>Joel Hooks:</strong>         Yeah. If you watch somebody that's like totally new to web development try to like even like figuring out the terminal and the [inaudible 00:17:50] and how to get their code to run it's pretty enlightening, and you forget about that, all that stuff when it becomes just second nature over time. There's so many steps and pitfalls along the way.</p><p><strong>Maggie Appleton:</strong>    I know I'm always amazed talking to \"normal people\" in the world, as in people not in the development community. The vast majority of people don't know the word JavaScript and they don't know ... I mean they maybe have heard of HTML and CSS, they haven't a clue what a compiler or transpiler is. The level of awareness I think most people have is very, very low. So I always try to think about it as if they're able to understand things that I make. Like, I've won. Like, I need to use language that they would get.</p><p><strong>Joel Hooks:</strong>         Somebody was like, \"Oh, everybody knows HTML.\" And I was like, \"Statistically speaking, nobody knows HTML. Literally nobody. If you take all, you know, seven whatever billion of us that are on this planet, then all the people that know HTML or even know what it is, statistically it's approaching zero.\" I'm making that up, so it's not real statistics, but you know.</p><p><strong>Maggie Appleton:</strong>    I bet you, yeah.</p><p><strong>Joel Hooks:</strong>         It's somewhere close to that.</p><p><strong>Maggie Appleton:</strong>    Yeah. I work in a shared studio space with a whole bunch of people who are not at all techie. They're like marketing or sales or all sorts of other things. And they're my favorite people to test content on. Yeah. Like I had a bunch of them read the ... I made an explainer about what is an API a couple of weeks ago and had them all do read overs of it, and everyone was just like, had never had the what API, had never given a thought to how their email might talk to her like another app or anything of that sort.</p><p><strong>Joel Hooks:</strong>         So you're talking about explainers and you mentioned this, so you've been working on illustrated.dev, and this is a project that takes programming concepts, takes Internet web development concepts, then you're creating essentially explainer comics for these concepts. And I was wondering, who is this project built for and like what are the goals that you have for illustrated.dev?</p><p><strong>Maggie Appleton:</strong>    This project is one, I've been mulling on for a while and only finally got off the ground this year, but thankfully now it's like it's something I have way too much excitement about. The target audience is definitely a bit of a range, because while I initially thought it was definitely beginner focused, I tried to not use a lot of technical language and really sort of do fundamental concepts, so things like APIs, or I'm working on one right now about the very basics of what a database is in conjunction with an Egghead course coming up that's about SQL, which will be a little bit more of the advanced side.</p><p><strong>Maggie Appleton:</strong>    I really wanted it to be people who wouldn't naturally get into web development through all the other types of tutorials that are currently available. I think if you're the kind of person that really loves watching sort of get into the weeds quick, fast logical thinking tutorials, there's an endless amount on the internet for them. People who are good at just like fearlessly opening up VS code and just trying it out and being able to problem solve their way through when they get stuck.</p><p><strong>Maggie Appleton:</strong>    Whereas, all the people I feel like who probably more visual and maybe have a bit more fear or have never thought of themselves as potentially being able to be web developers might need a different language to be spoken to in. I thought this might be an interesting way that maybe we could get people in who wouldn't, yeah, be naturally inclined to the all the other ways that web development gets taught right now.</p><p><strong>Joel Hooks:</strong>         Maybe like click, like click for somebody because they see it in a different way. Maybe they didn't ever think they could do this or could never understand these concepts, then they see this and it's very friendly and they're explained very well. So they see that and it would click for them and maybe inspire them to dig further</p><p><strong>Maggie Appleton:</strong>    Yeah, even though it is ... I had those people in mind, I guess, or I do when I make them. It seems to be resonating with even people who have been web developers for ages, and would fall in the expertise category. I think they at least maybe have things reinforced or just enjoy seeing it done in a simpler way. I don't know. At least a lot of the people that I see following it appear to be like well established web developers already.</p><p><strong>Joel Hooks:</strong>         Yeah. I mean, I really enjoy it and I know what the concepts are to begin with, but then seeing them visualize like that is always like, wow, look at that. You know, I feel like it adds depth to my knowledge. It gives me a new way to look at it or even explain it to others, which is great.</p><p><strong>Joel Hooks:</strong>         So like taking that further, right? Like you have illustrated.dev, and it's pictures and as you've gained these like programming skills over the years in your illustration skills and you're working on both of these things, what's the potential of combining those two worlds and making something, I don't know, that moves or is interactive or taking it to that next level? Have you put any thought into that?</p><p><strong>Maggie Appleton:</strong>    Yeah, that's definitely like the only thing my brain can think about at the moment. I've been diving into a lot of, actually a lot of Sarah Drasner's content on SVGs. She's been great teaching that, and trying to look at ... so we're using Gatsby to build the illustrated.dev project, which is really fantastic, because it uses MDX, so that's mark down but has JSX integrated into it. So you can use React components, which just feels like magic because then, yeah, you can write all these really cool little pieces of things and bring them into articles and I'm sort of, yeah, full of ideas of ways that we can ... I like the idea of like putting, you know, just simple stuff, right, as like links in into these what look like hand drawn images but you can hover over things and have maybe a tool tips pop up that link to resources of where I might have originally read something. So like further readings.</p><p><strong>Maggie Appleton:</strong>    Then definitely SVG animation I've been studying a lot for the last two weeks, and inevitably ended up dreaming about SVGs last night because that's what happens when you-</p><p><strong>Joel Hooks:</strong>         Oh, yeah. I love that, though. When you're learning something new and all of a sudden it appears in your dreams. It's like, \"Oh, this stuff is really sinking in if I'm ...\" Or if it's really mind boggling, it can also be the case.</p><p><strong>Maggie Appleton:</strong>    Yeah. Like I definitely did like a solid two weeks of just Reacts dreams when I was first trying to do that.</p><p><strong>Joel Hooks:</strong>         Yeah, for sure. I've had so many like database programming nightmares too where you're basically stuck in a box nightmares, but like they're horrible code centric versions of that.</p><p><strong>Maggie Appleton:</strong>    Well my brain isn't even creative with them. It's always just like the dream is that the code doesn't work and you can't figure out why.</p><p><strong>Joel Hooks:</strong>         But yeah, exactly. But it's so frustrating in your dream, like beyond this, just generally speaking as an illustrator, do you have any sort of longterm plans or ideas and with regard to what you want to do or create?</p><p><strong>Maggie Appleton:</strong>    Yeah, I mean definitely. I've always kind of went into illustration with the driving passion that it was about explaining more academic concepts or explaining things that are more cognitive concepts that are usually only expressed in language and that I didn't see anyone explaining in visuals. So like I'm also a huge economics nerd, and of course anthropology, I read a lot of ethnographies, and no one has really visualized those in meaningful ways. So that was what got me excited about the idea of learning illustration in the beginning, but getting so deep into the web development world now.</p><p><strong>Maggie Appleton:</strong>    I'm starting to think of myself in this concept of like an embedded illustrator, a lot like in anthropology, people embed themselves in cultures for decades and they really become the anthropological expert on that culture. So I'm sort of analogizing it to me being the illustrator for the web development community where I'm sort of all in now and just very excited about being able to illustrate as much web development stuff as I can in my short lifetime. I mean, I'm sure.</p><p><strong>Joel Hooks:</strong>         I mean there's like a flavor of journalism involved too, right? Like if you combine these things and how it works, it feels like embedded journalists and anthropologists. I think that really has a ring of truth to what it is you're doing.</p><p><strong>Maggie Appleton:</strong>    Yeah. And definitely a lot of the illustrators I follow. I suppose most of the ones that I really follow closely are ... it's called graphic journalism. But yeah, they draw journalistic story through illustration and they probably do something that's most similar to what I'm trying to do.</p><p><strong>Joel Hooks:</strong>         Yeah. And you see a lot of that. And I think the New York Times does a really awesome job of combining journalism and data visualization and illustration through like the scrolling pages style articles and stuff that really show you concepts or are complicated concepts in a way that's like, \"Oh, look,\" and you can really understand it,\" and I love that stuff and where the world's going in that direction.</p><p><strong>Maggie Appleton:</strong>    Yeah. And especially like, I have to mention the pudding, I stalk them endlessly.</p><p><strong>Joel Hooks:</strong>         Yeah. For sure.</p><p><strong>Maggie Appleton:</strong>    Yeah. And it is. I do love that stuff as well. It's just so fantastic to see the mediums blending in a way everyone's be waiting for it to happen for so long. I still feel like we're not quite there yet, but things like MDX open up the field a ton more and make for a lot more possibility in what we can do in it.</p><p><strong>Joel Hooks:</strong>         Yeah. I can't express how excited I am about MDX and the potential for education and learning and interactive, you know, like flipping books on their head where you're kind of like this full multimedia experience that it feels like it's been promised since the late 80s to me. But yeah. And we're finally getting there, and like we're getting the confluence of all these things that's getting us to the point where we can actually realize that.</p><p><strong>Joel Hooks:</strong>         So I wanted to close it out. I was looking on your website and you listed a few books that you said were formative for you. One of them in particular stood out to me, which was Addiction by Design. I was wondering how you would describe that book and it's effect on your work or your outlook.</p><p><strong>Maggie Appleton:</strong>    Oh yeah, that books one of my favorites. So I think like the majority of my thesis just cited that book endlessly. So it's an ethnography of a woman who went and studied the gambling machines in Las Vegas, and the people who get addicted to gambling there but the ways that it had changed in recent years since the machines had gone digital and she even goes in and interviews a lot of the programmers who programmed machines and how they ended up being consultants for all the social media companies. And I'm sure a lot of people in the tech world might have heard snippets of this story through other sources, but if anyone wants a good addictive read, this one is like a very well written ethnography that makes you look at the entire digital world very differently.</p><p><strong>Maggie Appleton:</strong>    And a lot of the tech world has gotten on this bandwagon too. I'm sure everyone else does. I use a ton of blocking software and the gray scale phone and whatever limits you can do to set around the tech in your life. But when you start to see the analogies between how the gambling industry and how the social media industry like played off each other, it's really frightening. But again, this won't be news to web developers. As like every, you know, as people building this stuff and responsible for it, I think everyone's well aware of the ethics nowadays, but I was reading this back in 2013 and no one was really talking about it and it sort of blew my mind at the time.</p><p><strong>Joel Hooks:</strong>         Yeah. I don't know if everybody is aware of the ethics these days. Maybe they're getting better. Another in like in that line is this a new book by Mike Monteiro of Mule who says it's called ruined by design and basically the premise is that that everything is by design. Like, if you look at literally everything in our world, it's all kind of outside of nature, right? Like it's all by design, right? So it's like the good, the bad.</p><p><strong>Joel Hooks:</strong>         Like people using, you know, we have all these social media networks that are always trying to ... they read that book, right? Like, they read Addiction by Design and took it to heart and have applied it. And there's all like, in a way like we try to do that with our work too. But you know, like generally I want people to learn more, so I try to figure out how to encourage them and motivate them to do that. But then that's by design too, whether you know it's good or bad or you can take these and make it a good thing or it can end up being used for, you know, the opposite of that.</p><p><strong>Maggie Appleton:</strong>    Yeah. All just about intention. I love Mike's stuff too. I didn't know he had a new book out though. I think I only read his design as a job one.</p><p><strong>Joel Hooks:</strong>         Which was good and he has, Fuck You, Pay Me, which is one of my favorite talks.</p><p><strong>Maggie Appleton:</strong>    Yeah, that one's great.</p><p><strong>Joel Hooks:</strong>         All time and every freelancer, I think everybody should listen to. It should be canon in our public education system in my opinion.</p><p><strong>Maggie Appleton:</strong>    Yeah, he has a pretty good podcast too. I forget what it's called.</p><p><strong>Joel Hooks:</strong>         I haven't listened to that one at all. I imagine, he's so smart and just has a lot of interesting things to say. This book is brand new. It just came out a few weeks ago. It just showed up at my house. I can't wait to look at it.</p><p><strong>Maggie Appleton:</strong>    Oh, nice.</p><p><strong>Joel Hooks:</strong>         I also ordered Addiction by Design, because I'm want to check that out too because it sounds great.</p><p><strong>Maggie Appleton:</strong>    Oh, yeah. It's an addictive read.</p><p><strong>Joel Hooks:</strong>         Yeah, that's cool. I liked that they dog fooded their own concept.</p><p><strong>Maggie Appleton:</strong>    Yeah.</p><p><strong>Joel Hooks:</strong>         Maggie, thank you very much for chatting with me today and have a wonderful rest of your day.</p><p><strong>Maggie Appleton:</strong>    Yeah. Thanks for chatting.</p><p><strong>Joel Hooks:</strong>         Cheers.</p>",
    "slug": "turning-technical-concepts-into-approachable-illustrated-metaphors-with-maggie-appleton",
    "description": "<p>There's a kind of \"black box\" mystery that surrounds illustrators and programmers, to someone who isn't one their skills seem like a form of magic, but to someone who is these skills are just the tools that they've been learning to use through time and hard work. </p><p>Maggie is the course logo illustrator at egghead.io, and she has the challenge of turning the concepts being taught in the course into something more visually concrete. The challenge isn't necessarily the drawing, but the research that is needed to understand a topic to the point of being able to create an accurate metaphor that people who don't know what is being taught can grasp. Maggie discusses her process in research and creative thinking to get to that point.</p><p>The beginner's mindset is critical to Maggie for creating these illustrations. When someone becomes an expert in something, they tend to overlook things that have become muscle memory to them that make beginners struggle. You don't have to be an expert to teach something to someone! The problems that you ran into when learning a topic and the things that helped you wrap your head around it are still fresh in your mind and can be extremely valuable for other beginners and even those with experience. </p><p>Maggie started a site called illustrated.dev to bring visual learning perspective of web development and internet concepts. There is a lot of content out there that teaches with language, but for many people, that style of learning makes it difficult for things to click. Never be afraid to teach things that are already being taught, often it is the way that you teach that matters most. </p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/e855d7bc/transcript\">\"Turning Technical Concepts into Approachable Illustrated Metaphors - with Maggie Appleton\" Transcript</a></p><h3>Resources:</h3><ul><li><a href=\"https://www.schoolism.com/\">Schoolism</a></li><li><a href=\"https://www.nma.art/\">New Masters Academy</a></li><li><a href=\"https://illustrated.dev/\">Illustrated.dev</a></li><li><a href=\"https://www.amazon.com/Design-Synectics-Stimulating-Creativity/dp/0871921987\">Design Synectics</a></li><li><a href=\"https://www.amazon.com/Art-Synectics-Stimulating-Creativity/dp/0871921510/ref=pd_sim_14_1/147-9062490-5704104?_encoding=UTF8&pd_rd_i=0871921510&pd_rd_r=5593d07f-6d37-11e9-9f57-c98fbdd56605&pd_rd_w=bz0Nf&pd_rd_wg=BdRmc&pf_rd_p=90485860-83e9-4fd9-b838-b28a9b7fda30&pf_rd_r=Y8M5NA27Z5PJKT9EE9F2&psc=1&refRID=Y8M5NA27Z5PJKT9EE9F2\">Art Synetics</a></li><li><a href=\"https://www.amazon.com/Addiction-Design-Machine-Gambling-Vegas/dp/0691160880\">Addiction by Design</a></li></ul><h3>Maggie Appleton:</h3><ul><li><a href=\"https://twitter.com/Mappletons?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor\">Twitter</a></li><li><a href=\"http://maggieappleton.com/\">maggieappleton.com</a></li></ul><h3>Joel Hooks:</h3><ul><li><a href=\"https://twitter.com/jhooks\">Twitter</a></li><li><a href=\"https://joelhooks.com/\">Website</a></li></ul>",
    "duration": 1840,
    "episode_number": 43,
    "contributors": [
      "Joel Hooks"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/2m983",
    "path": "/podcasts/turning-technical-concepts-into-approachable-illustrated-metaphors-with-maggie-appleton",
    "published_at": "May 3rd, 2019",
    "url": "https://egghead.io/api/v1/podcasts/turning-technical-concepts-into-approachable-illustrated-metaphors-with-maggie-appleton",
    "edit_podcast_url": "https://egghead.io/podcasts/turning-technical-concepts-into-approachable-illustrated-metaphors-with-maggie-appleton/edit"
  },
  {
    "id": "podcasts-00000000000000000119",
    "title": "Being Curious and Facilitating the Success of Others with Stacey Mulcahy",
    "summary": "Stacey Mulcahy joins us today to discuss Arduinos, cute dogs, growing your creativity, organizing a community, and facilitating the success of others. ",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/a593adfa-6bc5-4774-9fe9-cc5e34e6f2c4/49266475_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/a593adfa-6bc5-4774-9fe9-cc5e34e6f2c4/1556580270artwork.jpg",
    "simplecast_uid": "a593adfa-6bc5-4774-9fe9-cc5e34e6f2c4",
    "transcript": "<p><strong>Joel Hooks:</strong>         Hi Stacy.</p><p><strong>Stacey Mulcahy:</strong>     Hi, how are you?</p><p><strong>Joel Hooks:</strong>         I'm doing pretty good. I'm really excited to talk to you because, when you do a lot of interesting things and I think we have a lot of crossover in terms of our interest in education and constant learning and that kind of thing. But I wanted to ask you first about the questionable life choices you've been making recently because this is something we also share. I noticed you got a new designer puppy.</p><p><strong>Stacey Mulcahy:</strong>     Oh my God! Honestly, I don't know if a dog can turn you around and make you think about yourself in the way that my dog has, but I was like, I have so much allowed to give. It's so disgusting. So she's not a bit of a long time, like two years. And I remember even Mario, don't do it. Don't get a dog. You can't travel. And I'm like, I know. But I went and I finally kind of pulled the trigger and, it's been like, week of chewing redirections. Best way to describe it. But yeah, I'm this person I didn't know I could be, which is kind of a really awesome and also very scary.</p><p><strong>Joel Hooks:</strong>         Is it your first puppy?</p><p><strong>Stacey Mulcahy:</strong>     As a kid we had one, and I was very young, so I vaguely remember my mom yelling at it and putting Tabasco on the furniture, But like I said, I did so much research. I'm such a nerd that way because I was just like, I don't want to screw anything up.</p><p><strong>Joel Hooks:</strong>         I mean, I did the same thing, this friend of mine, Ryan Florence posted on Twitter, \"hey, we got this cute little puppy. It's a mini golden doodle.\"</p><p><strong>Stacey Mulcahy:</strong>     So cute.</p><p><strong>Joel Hooks:</strong>         It's just ridiculous. So cute. And I'm like, I'm going to get one. And then three weeks before we take delivery of our puppy, he posts on Twitter what an awful mistake he's made and how this is the worst decision he's ever made in his entire life. And I was like, I've had, we've had dogs and, like you, when I decide to get a dog, literally every five star puppy raising book on Amazon arrived two days later, and he signed up for puppy classes and all that fun stuff. But then at the same time,</p><p><strong>Stacey Mulcahy:</strong>     Well, I haven't done that. I'm very fortunate, like this last week. I mean my job doesn't really afford me to work from home, just because I am so public facing with everyone and I run a space and everything else. But this last week everyone's been so good. They're all like, no girl, you go home, you know like, \"don't get a puppy sitter.\" You being home with your puppy for the first week. And then now this is the second week and I'm like, I'm traveling to speak at a conference at the end of the week. And I'm like, I don't really have any major reason that absolutely requires me to be in the office. Everyone's like, you stay home girl, you post those pictures for us. I'm so thankful that my local kind of direct team is so supportive, but it is kind of gross. But your puppy looks so cute. They're so smart.</p><p><strong>Joel Hooks:</strong>         Yeah, and I have a house of, like my little 11 year old daughter has taken to the puppy and she was like, \"Oh I'll take care of it.\" So we took her up on that, and I don't know that she fully was aware of what she was getting into, but she's done a really great job like bleary eyed seven in the morning when then she has to wake up so it doesn't destroy his Kennel.</p><p><strong>Stacey Mulcahy:</strong>     There's always that thing I'm like, so I'm going to put you in this little broom and I read all of a crate training, and how I should feel okay about it. And I do, I mean, she's really taken to it and she's good, but she sleeps through the night and everything bag. I'm totally like, I'm up at 5:00 AM, 6:00 AM like, \"come on girl, let's go back. You must be dying.\" I don't know. Like I said, I'm this person I didn't really know I could be. Maybe I knew I could be. It just didn't want anyone to know I could be, I don't know.</p><p><strong>Joel Hooks:</strong>         Right, right, didn't want rumors to get out.</p><p><strong>Stacey Mulcahy:</strong>     Well, you don't want to show any vulnerabilities, right?</p><p><strong>Joel Hooks:</strong>         [Laughter] Got to keep the facade up.</p><p><strong>Stacey Mulcahy:</strong>     [Laughter] Oh my God.</p><p><strong>Joel Hooks:</strong>         So puppies technology, everything's always changing. We're in a constant state of learning and this is something I know about you that you keep on it, right? We share the, another trait where we're learning and we're growing and we're constantly keeping up with technology. And I was wondering, how you came about that philosophy, or if it just kind of comes naturally to you to just kind of embrace the change of our digital age.</p><p><strong>Stacey Mulcahy:</strong>     I don't know. I mean, there's two sides to this coin, right? I have my moments where I get super overwhelmed, especially lately with social media because I just see all the amazing things people are doing. They get a lot of like, I'm not pushing hard enough. I'm not doing things hard enough. And so I struggle with that part of it. But I think for me, it's like just curiosity. And I'm also like, I don't know if I should admit this and maybe have a little this a yourself, but I'm a little like, nope, I can do it. I'm very independent. I was brought up that way, And so I don't need someone to help me. I don't need someone to show me. I can figure it out and that's good and bad. I realized that trait.</p><p><strong>Stacey Mulcahy:</strong>     But for me that's where it comes to. Technology is really good because, I'm just super curious about all the things. And to be frank in the last maybe couple of years, I haven't been able to dive really deep on a single technology, but I kind of liked that. I kind of liked that I've embraced the fact that my tendencies to be more of a generalist, and to pick up the things that are happening. And so. I know a little bit about react and I know a little bit about angular, like I did enough to get dangerous and, but I also know python and I know some machine learning and, I love that because it allows me to actually connect with people in a variety of ways.</p><p><strong>Stacey Mulcahy:</strong>     So I don't know, for me it's just kind of, if people are saying, well this is the best thing. I want to go look at it and kind of decide for myself if I think it's the best thing instead of, who this is the best practice. And I think that's kind of always been where I've come from. I don't know. What drives you? What makes you feel like you should change? Why you so interested in all the things and moving forward and constantly learning.</p><p><strong>Joel Hooks:</strong>         Umm I think this is my interview Stacy. [Laughing] No I'm just kidding.</p><p><strong>Stacey Mulcahy:</strong>     [Laughing] I realize that, I was like, \"Ohhh she's putting on the hat\".</p><p><strong>Joel Hooks:</strong>         No, no. Is like for me, I have this constant desperate need to know everything before I die. Since a very young age, I've always had the feeling of eminent looming mortality and, I feel like I want to learn and learn and constantly never stop doing that. I could never pull a single lever every day, day in and day out and, and be satisfied. And I intentionally took a technology break. I decided not to, I was learning a programming language a year and doing that kind of cycle and decided I wanted to do things like, marketing and copywriting and philosophy and psychology and like taking it to those skills as well as the technology stuff, which means I'm a little behind some of the curves too and kind of like deep dive, deep dove into react specifically so I could do my job.</p><p><strong>Joel Hooks:</strong>         Also, I've kind of stepped back from, because there's so many cool things and I'm not a zealot. Like I don't like to see technology. Like this is the technology. I know that's not true. Five years from now, that's not going to be true. We both were flashed. Developers, we know it's not going to be true.</p><p><strong>Stacey Mulcahy:</strong>     [crosstalk 00:07:04] It's like Oh my God, Why did you say that? I'm just kidding. I totally embrace that history because the funny thing is, I've been reflecting a lot on it. I'm helping some interns work on a VR project and the VR project's not like an app where it has screens. It's experimental and it's got a lot of things that it needs to accomplish, and it's an experience and I kind of feel like, wow, like I am prepared for this moment. Because I've been, the beauty of where we came from, at least where we met in the industry is that like, we got to touch so many aspects of creating an experience. I just, I really embrace that. So anytime I see anyone kind of like, we shouldn't be doing this, me, I'm kind of like, eh...</p><p><strong>Joel Hooks:</strong>         I mean, to me it's like if there's a constant thrill and new technology and I see people moaning or, like woefully moaning about fatigue or whatever and like technology moves too fast and there's this constant, stressful feeling, which is almost like the Internet and social media is pushing that stress more than the technology. [crosstalk 00:08:08].</p><p><strong>Stacey Mulcahy:</strong>     it's so bad. I actually kind of reduced how much stuff I've put out there and definitely reduced how much I've consumed just because it's so easy to wake up and just be like, oh all these cool things and like what am I going to have the time to play with it? And it's just so easy to overwhelm yourself. So I kind of gave up with keeping up with the Jonases, like you talked about a learning like occur keeping up on the curve and I kind of go with that because I'm, I guess if anything else, I'm now confident that I can pick up anything. If I need to do it I can pick it up. And so I kind of enjoy that aspect of, I don't need to know all the things, what's actually important to me now, what am I curious about? What do I enjoy?</p><p><strong>Stacey Mulcahy:</strong>     And then obviously, I mean, a girl's got to get paid, you could align it back to work, whatever that may mean, but, gone from you are the days of spending weeks to pick up something. It's just like if I can't pick it up in a day, I don't know, maybe I put it to the side. I think.</p><p><strong>Joel Hooks:</strong>         Yeah, I didn't mistake like exploratory, right? It takes to be an expert in anything takes a significant amount of time, but you can tell if this is something you even want to do or if it's going to suit your purpose. And that's like a knowledge and experience.</p><p><strong>Stacey Mulcahy:</strong>     Yeah, totally. I think that's it for anything else. I feel way more comfortable doing that kind of thing to be like, man, you can go ahead and dabble in that. I don't think that's for me kind of thing. So that's kind of Nice to be at that position.</p><p><strong>Joel Hooks:</strong>         How do you feel about the label maker?</p><p><strong>Stacey Mulcahy:</strong>     It's weird. I go in between back and forth. I mean, I think we're all makers at the end of the day, right? I don't know. I'm okay with it. I just, a lot of times when people, when you say maker, they're like, oh, she's in the woodshop or there's a glue-gun. And then there was no, I struggle with that. Even my perception at work a little bit like, oh, she's a good maker, she knows all these tools, blah blah blah. Oh she knows how to code, right? It's going to be clear that's not a gender thing. That's it. Just like, oh, and software and hardware and this like it's, again, I'm embracing generalism at its best. So I think maker is just another title, just like some people say creative.</p><p><strong>Joel Hooks:</strong>         Yeah, almost like an inventor kind of comes in there as well. I kind of like that term better. I think everybody's capable of it. Not everybody does it. And it's not something that you get just out of the box, right? It's something you have to work for and creativity isn't it? You know what I mean? It's like a skill versus, like some natural endowment that we are granted when we're born.</p><p><strong>Stacey Mulcahy:</strong>     Working with engineers. I realized that the whole creativity thing is they feel like it's not for them, right? Like I'm not creative, I'm an engineer. And it's like as soon as you can figure out a way for them to kind of circle around that and to explore in a different way, and for them to enjoy it and have a little bit of fun with it, whatever that may mean. For me it's always around humor of some sort. But if you can get that, then people start to see that it's not like a skill. Creative programmer like those, they're not the same thing. Creative problem solving. There's creative, just coming up with different approaches, different ways to solve things, different ways to look at things. And it's so funny cause when people realize that they do have that and it's actually just something you need to exercise.</p><p><strong>Stacey Mulcahy:</strong>     I really believe that, that if you're not giving yourself the opportunity to invent, like I love, they use the word inventor, but if you're not giving yourself those opportunities and, if you're not allowing yourself to explore without an end point in sight a little bit, if you're not allowing yourself to make mistakes, then you're not exercising creativity at the end of the day. So you're not, never going to have that. And so for me, that's, as a developer who worked in an agency for years, I was never the creative one, but yet we all were. And it's funny now people label me the creative one now that I'm at an agency land, so you know it's all about exercising it. And for me it's a muscle. The more you can kind of exercise, the better it gets personally.</p><p><strong>Joel Hooks:</strong>         And it atrophies too. Right? If you stop being creative, and you creative a week out of the year, it's really difficult. But that's me actually. Like I spend the summer in the mountains with Josh and I go into the whole thing and I'm, I haven't been creative, I haven't been creative, I haven't been creative and I'm stuck. But then, once you start doing it and you get it rolling, it kind of comes back.</p><p><strong>Stacey Mulcahy:</strong>     Yeah. It's like a bike, right? You're like, oh I got to do this, and then, oh, what about this? And then it's just that moment of like, it's almost like self pleasure where you're like, oh, I did that. That's cool. [crosstalk 00:12:23] I can't believe I did this. And then you're just like, now you've kind of created your own momentum around it. I love that feeling and I wish that feeling for everyone.</p><p><strong>Joel Hooks:</strong>         Is there a power in being a little bit weird?</p><p><strong>Stacey Mulcahy:</strong>     Yeah, totally. Oh my God. I mean, seriously.</p><p><strong>Joel Hooks:</strong>         Is that related to the creativity. I think in some ways it is.</p><p><strong>Stacey Mulcahy:</strong>     Yeah. I mean, I do, I think that for some people when they're labeled a Weirdo or, whatever it may be, I think creative would probably go alongside of it, right? Because it's a person who, I think if you're being weird, it just means that you like, whatever weird, the definition of weird is. Because that's a whole another story. But I mean if you're just doing something that someone doesn't expect you to do, let's just put it that way, then you were kind of like confident in what you're doing and embracing it. Right. And so we're talking a lot of people, it's like, when people say stay weird to me, it's more like, stay confident, stay good with who you are and just kind of embrace it. So, I mean, bring me all the weirdos.</p><p><strong>Joel Hooks:</strong>         And to me being weird is like being yourself. I think everybody's different. And obviously we all have to have filters and boundaries, right? We live in a public space, but at the same time like being yourself and doing unexpected things and people aren't, that isn't the norm and is out of the ordinary. I'm using the finger quotes weird. But at the same time, that's what makes it great. Like to me is the people, when they have that freedom to do that.</p><p><strong>Stacey Mulcahy:</strong>     Oh yeah. I mean when you meet someone who's like an onion and you're just peeling away all the layers, it's just so fascinating to me. So I think people need to understand is that other people feed off of that. Like I know for me, if I meet someone who's really embraced it and just doing what it would do in their thing, whatever that may be, and they're passionate about it, that's infectious to me. I want to be around them, I want to listen to them, I want to try to sponge some of that stuff off and then I'm kind of an introvert, believe it or not, and I want to go away. And then I want to figure out how to funnel it for myself. And so there's a lot of beauty in embracing who you are and that weird or creative kind of side I think. And especially not just for you but for others too.</p><p><strong>Joel Hooks:</strong>         Yeah. So I have this problem with this box of Arduino products, LEDs, and I want know what do you have? I know I'm not unique in that there's a lot of these boxes scattered around the country and the world, and I'm wondering what's the advice, what do you tell people to get past the beginner kit? Like the tutorial in terms of coming up with some ideas. That's something that does, is there any advice take to get folk?</p><p><strong>Stacey Mulcahy:</strong>     It's so painful because, it's like we call it LED blinkies like the hello world, right? I don't know. I think it depends on where you're coming from. If you're a software developer of any sort or a designer who's around code or any of that kind of stuff, I always say, don't go buy a regular Arduino, go buy something that's Wifi connected, because you're going to add a little bit of novelty that you understand to your world. Right? So automation, creating a some stupid thing that lights up based on acts, those kinds of things are extremely satisfying. And extremely easy, a little bit of software and a little bit of hardware goes a long way, but, there's so many people who just buy kits and they collect dust and I think that like ... kind of immersing yourself in, how to get inspired with a lot of those things.</p><p><strong>Stacey Mulcahy:</strong>     And so looking at what other people have built and done and trying to solve a problem or, are you just making something useless for fun? If it's someone younger, I'm always just, I kind of focused around humor and pranks because they're really rewarding. They're pretty funny and they're pretty easy to kind of like set up. So a book that when you open it up sensors lights and it plays off a really loud sound or something like that. So I always kind of, try to figure what the person's actually interested in. I don't think there's a one size fits all for any of this stuff because really, there's no difference between scaffolding an app and never putting anything in it and doing the LED Hello world thing, unless you've kind of got an idea or an application for it.</p><p><strong>Stacey Mulcahy:</strong>     But there's so many places that you can look in. There's so many amazing makers who are starting to really share their stuff a lot more than they ever did. Last year, I think it was last year with everyone doing all the custom PCBs, very limited form factor. You can't do a whole, we can do quite a bit. But like for the basics, you're not doing a whole lot, but the things that they are doing and how they were just like augmenting like Defcon badges and stuff, so much more inspiration that's so much more visible.</p><p><strong>Stacey Mulcahy:</strong>     I would say that there's ways to get a lot more ideas than before. But I didn't answer your question probably because, I kind of feel like it's, for me when people ask me that question at work, I'll be like, what's your apartment like, what do you do? What are you interested in? Like what do you find, and then I'll kind of be like, hey, here's a few things to get you inspired.</p><p><strong>Joel Hooks:</strong>         I think the pranks answer was actually a pretty good one. So that's what I pulled out. I love what you said, but like to me the idea of wait, I could do cool pranks with these Arduinos. I have sensors, it's like taking the box of sensors and I'm just kind of figure it out how you can make somebody laugh or, you can give them a little tiny fright or something with these things is kind of fun actually.</p><p><strong>Stacey Mulcahy:</strong>     You tell 14 year olds that, that they can go and build something that will automatically turn off the TV. Like a TV be gone. They just like what? And you're like, \"yeah, just IRR,\" and you break down and then they're like, and then they go do it. And it's just so fascinating. So then you going to find the right motivation, from a person, but I don't know. I like pranks. I mean, I don't like what they've done to me, but I like pranks.</p><p><strong>Joel Hooks:</strong>         That's their fun sometimes. But I agree, being the pranker is better than being the prankee.</p><p><strong>Stacey Mulcahy:</strong>     Sure, all right. [crosstalk 00:18:07]. We need like matching T-shirts, pranker prankee.</p><p><strong>Joel Hooks:</strong>         So you mentioned teaching kids this stuff and I know you spend time mentoring middle school kids and probably a variety of others. And I'm wondering, how did you get into that and how does that work and what's the response been from the kids themselves?</p><p><strong>Stacey Mulcahy:</strong>     So I'm fortunate to have a job that's really flexible, and I can figure out ways to do things that I like along with the things that need to get done. I usually like those things as well. So, for me, for working at a big corporation, Microsoft, obviously education is a focus for a lot of groups. And so I kind of have the ability to do that a little bit as part of my job. But I guess if you kind of roll it back, years ago I went to a conference, this story a had always makes me cry. I hate it. So anyways, years ago I went to a conference and as a conference be created, typically go to conferences and, you have a speaking slot and you're stressed out about your speaking slot, and then you have to do all the extrovert stuff they force you to do.</p><p><strong>Stacey Mulcahy:</strong>     And so you got to do all that. And usually, you don't have a lot of time for anything else and you're hiding in your room because you need to recollect yourself. I went to one conference in Halifax and this, the group, the conference was really great, and the organizers is really awesome. They asked me to attend this women's night and I was like, No, I don't really want to do like a women's networking thing. That's a whole another story. But, and they're like, well we're going to have high school students there. I was like, I'm in. I'll go. So they asked, instead of it being networking, we did little like teaching sessions and so I taught Arduino, and I had this young woman who was about 15 and her name was Amanda. And, so she sat at my table, we started chatting and she was going to attend the conference, which I thought was also awesome.</p><p><strong>Stacey Mulcahy:</strong>     I was like, oh, a 15 year old attending a conference. This was unheard of. And this was about three years ago, and I was like, this conference really has it together. They really bring their community together. And so we're talking, and she's big into games, childhood games or parents met online playing games. She could talk really, really articulately about game level design and what made some feel good and bad and like cheery it as a whole space. So I just asked her the question like, have you ever made a game? And she was like, no. And I was like, this is insane to me. I'm here for two and a half days. If you have any free time and you want me to teach you how to make a game and unity, and I can teach you a little bit of illustrator, and we'll go through the basics.</p><p><strong>Stacey Mulcahy:</strong>     We can make like a flappy bird clone. It's up to you, but I'm here, so you need to figure out how to find me, and you need to figure out how to do it. And she did.</p><p><strong>Joel Hooks:</strong>         Awesome.</p><p><strong>Stacey Mulcahy:</strong>     So over two days at the conference, where everyone gets coffee, people are checking in, all sorts of stuff. She basically finished the game. I would say at the end of it, it was working, and she had it like, physics going and she did her own graphics. I think she even did a few sound effects, which was kind of awesome. But the cool thing that happened out of that is that one of the business owners in Halifax who ran a fairly, kind of big tech company there, he hired her as an intern in the summer. And I thought that's what it's about.</p><p><strong>Stacey Mulcahy:</strong>     For me that was the most amazing part because, you do a lot of things right, like you volunteer your time or someone says, \"oh, thank you for writing that book.\" But like when you actually see the door open in front of you, and someone walked through it, like that becomes, \"Ooh, sorry.\" That becomes a moment that kind of like changes who you are. And I tear up every time I tell this story because, I truly believe I was a bit of a jerk before that, for whatever reason. And I truly believe that, that experience changed who I was.</p><p><strong>Stacey Mulcahy:</strong>     And so, after that I was in New York, I was like, okay, you know what, I'm going to do an experiment, because experiments to me sound like less of a commitment. It's an experiment. So I'm going to teach kids who's a really great group in New York, who they kind of, they have all the Indie game developer community called play crafting. Dan Butchko is who runs it.</p><p><strong>Stacey Mulcahy:</strong>     And so I said to him, you know what? I want to teach kids on the weekends and I'll do it every Saturday and I mean, can you help me engage your community to help me? So can we get different teachers and whatever. So we did that. Probably it was one or two Saturdays a month, maybe just one a month. But we did it for almost a year, I think. And I did in various cities. Anytime I traveled, I would just like spin something up and I'll come teach for a couple of hours. And it was always kids between the age of about, eight to, I don't know, 16. I would teach whatever, whatever I needed. So sometimes it was, we're doing something in processing. Sometimes it's, gave me her or unity or whatever. And I think over the year we ended up probably around 4,000 kids, I think.</p><p><strong>Stacey Mulcahy:</strong>     And I love that with the help of the Indie game community in New York for sure, we would sell tickets, just so that we had seats because people like to come to things that are free and then not show up. And so, and it's just, you're just taking a spot. So we'd sell those tickets for next to nothing, and we would provide kind of like diversity tickets too. So for underrepresented and kind of looked around and figured out how to get those out. And then, any of the money that we made, we just ended up donating. So we went to two organizations. I think one was girls who code, and the other one was, most are, I believe are most, sorry, it's an organization in New York City. So, I did that for a year and then I got burned out. Because it was a lot. Because it was a lot.</p><p><strong>Joel Hooks:</strong>         It a lot of work though.</p><p><strong>Stacey Mulcahy:</strong>     Yeah It was a lot. But it was like, I mean, I still love it. And so now, like I have school visits that come in and I kind of have them more structured and, I do, I really do enjoy it. I like being in front of kids. I like curating the space, and like for me, all the ages are good, but there's something really amazing about a seven year old. And there's also something equally amazing about 14, 15 year old. You're just like, these are building blocks, let's find the building blocks and put them together. And so we did do a few things at work. I have like a class that comes in every month and I do work closely with a couple of school boards here. And, this year I've been trying to work more on, in depth relationships with a couple of kids and not always the ones that are super promising.</p><p><strong>Stacey Mulcahy:</strong>     I'm kind of more interested in the people who don't think it's for them, or don't feel that it could be for them. And so we've done a little bit of that. And then, we've taken at different directions at work and an example is we, this is kind of cool, well I love this story, but we have a guy that we know quite well and he works at a local school board with, at risk, indigenous, young men. So it's a youth club that they have and they do all sorts of things. And, his wife works at Microsoft and she connected us and I said, I'd love to have them in. Here's, at risk men between 14 to 17, let's bring him in. And so I was like, let's build an escape room for the employees.</p><p><strong>Stacey Mulcahy:</strong>     And so that's our, do we know all the way that's like, that's being creative, that's designing, that's all ... Everything you can imagine. And so we had them for a series of a couple of weeks. We had a couple employees supporting and they came in and they helped us build out an escape room. But the cool thing that I thought was, we kind of threw the idea out there and we said, hey, what about making it themed around your culture and heritage? Because in Vancouver, for us sitting on the land, that doesn't belong to us, it's very important. It's very important. We honor those things. And so you could ... We thought this is a really great learning and sharing moment for them. And so they totally embraced it and, was looking up appropriate artwork. They enlisted like a chief to come and do a voice over.</p><p><strong>Stacey Mulcahy:</strong>     They really did a great job. And so, for me those are the kinds of things that, when they come and they see people using their escape room and they see like the things they created and how much people enjoy it, I think sometimes if you don't have that connection for someone that, what you've done and versus like how it's received, that people can't push forward because they don't understand that what they're putting out there has value. And so, that was a great, great experience.</p><p><strong>Joel Hooks:</strong>         That's amazing. So direct to, right, like their ability to do the work for one thing and then like see people that really actually enjoyed it. Right? It's not just an idea, it's a reality and then it's in, we made this, my people love it and that's been in the booster hands out there and just really, I think like leveling somebody up in a way that otherwise, would they even ever have that opportunity. That's wonderful.</p><p><strong>Stacey Mulcahy:</strong>     I mean, I was thankful that I was given the opportunity to kind of engage that way. But I was also thankful that I got to work with one of our employees. Her name is Jennifer Reardon. And she was awesome, because she was really passionate about it. Her passion kept me driving it forward and, it's important that you find those connections, I think. No matter what you're doing, because as you spend time, especially your own time doing things, whether it's side projects or giving back or whatever you want to do, it's really easy to get burnt out. And so you need to reenergize from other people and you need to reenergize from a bunch of places I think.</p><p><strong>Joel Hooks:</strong>         Yeah. And it's really, I mean, essentially, you build a community space, right? Like a creative community space that people can use and grow in and like access to a space like that. And even creating one, I don't think a lot of people would even know where to start.</p><p><strong>Stacey Mulcahy:</strong>     I didn't. But that's why I love the word experiment cause you just try things in ... I think if you're looking at community, even if we look at you know, your egghead community. You need to understand who are your people and what do they care about and what are they interested in? And like, what do they bring to the table? How can you meet them there, where they are at? And so for me, I think that the favorite part of my job is, I get to meet so many people and I get to, I am just so fascinated by something that someone tells me every single day because it's just such, so rewarding to be like, \"oh you work on this and this is what you do.\" And, help them celebrate their successes, and then provide them a space where they can feel safely is also important. So I'm pretty fortunate.</p><p><strong>Joel Hooks:</strong>         That's awesome. Do you have any advice for folks? Just if, when you're starting a community, and I know you've touched on this, but, I think it's something that more people could do and in a grassroots capacity, like how do you start to doing that? And like locally, after you've had some experience doing this, if you were going to offer up some advice in that regard.</p><p><strong>Stacey Mulcahy:</strong>     Number one is I think that, if you're a person in a town and you're like, you want to learn python, let's say, and there's no python groups, just start your own right. And put it out there for anyone like, first of all you just gotta be okay to be vulnerable, but you also gotta be okay to be the organizer. Because at the end of the day, most people want to do the things they just aren't sure how to organize it and they're not maybe sure how to be that person to push it forward.</p><p><strong>Stacey Mulcahy:</strong>     And so a great way I think to start is start small and, hey I really want to start doing X and here's where we're going to do it and be consistent. So I think when it comes to community, consistency is really key. If people always know that X is going to happen, once a month at this place or you know that whatever, like that kind of consistency that you bring to the table, that's how you're going to get more and more people interested or that's how you're going to find the people who are invested to stay there.</p><p><strong>Stacey Mulcahy:</strong>     So I always, for me, it's about consistency and it's also about knowing the audience and just that, like how do they want to contribute? Like what makes them excited. And so, whenever I talk to like maker spaces, like schools, they're always like, how do I use a 3D printer? And I'm like, can we take a step back and just talk about what are all the skills that everyone has, whether it's kids, parents, whatever, that they bring to the table. Do a survey and understand what actually people have before you start making plans on it. And so I think community is kind of similar. Sometimes you just have to put it out there. And if only two people come the first time, that's okay. It's two more than just yourself. And so just being consistent and just constantly putting it out there.</p><p><strong>Joel Hooks:</strong>         I think I heard you say get doing.</p><p><strong>Stacey Mulcahy:</strong>     Yeah, probably. Well there's this too. I learned to get it done when I was in Atlanta and then I also now often say get doing, so it's just like, just stop talking about it and just do it. And the funny thing is a lot of this organizational stuff, isn't that bad. There's so many platforms and stuff available, but like, I mean it's really just a matter of, I'm going to a coffee shop who wants to join me? I used to do that in New York, I'm going to coffee shop, I'm going to be here at this time. Anyone who wants to join me, can join me. And then I was always like, it's just a smart thing to do. But I met so many interesting people that way.</p><p><strong>Joel Hooks:</strong>         I know New york is good for that.</p><p><strong>Stacey Mulcahy:</strong>     Everyone's like, \"Yeah I'm in.\" Sure. Who are you? But my fashion designer, I'm not like a fashion designer who's just like, happened to catch my tweet on Twitter. I don't know how. So things like that.</p><p><strong>Joel Hooks:</strong>         That a good point.</p><p><strong>Stacey Mulcahy:</strong>     You've going to put yourself out there.</p><p><strong>Joel Hooks:</strong>         I've had weird Twitter connections like that too, which is amazing. And why I love the platform and it's way too weird and overwhelming for it seems like most normal folks. But I still love it.</p><p><strong>Stacey Mulcahy:</strong>     What's your weirdest connection?</p><p><strong>Joel Hooks:</strong>         I Don't know. It was just like, I'll be the guy at the conference standing in the corner on my phone and someone's like, \"hey man, you want to hang out?\" And then we become friends and still talk afterwards. Like stuff like that, it's just interesting. I made lifelong friends across Twitter. The decade I've been-</p><p><strong>Stacey Mulcahy:</strong>     Oh me too.</p><p><strong>Joel Hooks:</strong>         It's like my favorite, but I can see why people are overwhelmed and confused and hate its guts too.</p><p><strong>Stacey Mulcahy:</strong>     Why the hate, love relationship? Because like I feel like it's always my feeds. Like I need to change up my feed because I swear this past year, it's always about how the world is so horrible to women or how like some crazy controversy in tech or whatever. And it's like I understand all that stuff exists and stuff. Like that's been happening for a while. Like can I just see more puppies, or like I, so I always feel like I just, I need a break when I feel that way a little bit. But I'm with you. Some of my longest friends are or Twitter.</p><p><strong>Joel Hooks:</strong>         My top tip for Twitter is turning retweets off. Aggressively. It makes it way better. There was a, Julia Evans made a little program that would do it automatically, but last time I checked it was broken. But that was great. You can go through and just turn everybody's off and like it cleaned the entire thing up. But it's a bonsai tree. It's a constant battle against Twitter's, constant need to like try to monetize and, like make money versus us just wanting to communicate and have a sense of togetherness, which don't often have the same path to two different goals at all.</p><p><strong>Stacey Mulcahy:</strong>     I do love it though. I'm not going to lie it's still my nearest and dearest. So like I said, I have some friends I've met from conferences that I never would have met if it wasn't for Twitter. And I have a lot of good friendships that helps me keep in touch. So, it's good.</p><p><strong>Joel Hooks:</strong>         Stacey, it was great catching up with you and chatting today. Thank you.</p><p><strong>Stacey Mulcahy:</strong>     Thank you. You hear me sniffle because I'm still like, I cry. This is no good. I have a cold cold heart! Thanks so much.</p>",
    "slug": "being-curious-and-facilitating-the-success-of-others-with-stacey-mulcahy",
    "description": "<p>JavaScript fatigue is a topic that has been trending for a while now. It's easy to get overwhelmed with the constant influx of new technology, but it's also thrilling to learn the latest cool new thing! Stacey Mulcahy discusses how she embraces this deluge of technology by being a generalist, allowing her to make connections with more people than she would have if she specialized in one thing.</p><p>Stacy is a Maker, a kind of tech-based DIYer and inventor. Creativity is, of course, important for the DIY hacker, but it's essential for everyone else too. Creativity is creative problem solving, and it's something that you can train. If you aren't \"working your creativity muscle,\" your creative skills are going to degrade. Try to push the envelope and find outlets where you can apply your creative skills!</p><p>Like a lot of people in the tech world, Joel has a box of Arduino stuff that is gathering dust somewhere. How do you get past that initial \"hello world\" LED blink project? Stacey recommends to immerse yourself, see what other makers are doing and find inspiration from them. Try to find something that you enjoy and find fun and see if you can do it with an Arduino. </p><p>Lastly, Stacey tells us her story of what caused her to begin teaching children technology, and how she got to where she is now. It's rewarding to celebrate people's successes and provide them with a space where they can fail safely. If there isn't a community meetup for something you enjoy in your area you have the complete ability to start one yourself and be the organizer. There are multiple platforms that help organize events. The key for your community to grow is to be consistent with it. </p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/49266475/transcript\">\"Being Curious and Facilitating the Success of Others - with Stacey Mulcahy\" Transcript</a></p><h3>Stacy Mulcahy:</h3><ul><li><a href=\"https://twitter.com/bitchwhocodes\">Twitter</a></li><li><a href=\"http://thebitchwhocodes.com\">thebitchwhocodes.com</a></li></ul><h3>Joel Hooks</h3><ul><li><a href=\"https://twitter.com/jhooks\">Twitter</a></li><li><a href=\"https://joelhooks.com/\">Website</a></li></ul>",
    "duration": 2003,
    "episode_number": 42,
    "contributors": [
      "Joel Hooks"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/12n78",
    "path": "/podcasts/being-curious-and-facilitating-the-success-of-others-with-stacey-mulcahy",
    "published_at": "April 29th, 2019",
    "url": "https://egghead.io/api/v1/podcasts/being-curious-and-facilitating-the-success-of-others-with-stacey-mulcahy",
    "edit_podcast_url": "https://egghead.io/podcasts/being-curious-and-facilitating-the-success-of-others-with-stacey-mulcahy/edit"
  },
  {
    "id": "podcasts-00000000000000000118",
    "title": "Creating Authentic Content and Developing Yourself with Emma Wedekind",
    "summary": "Today we are joined by Emma Wedekind who will speak about self-teaching, creating authentic content, what being a T-shaped developer means, how to ask good questions, and how she manages her work-life balance. ",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/750d4286-a236-4635-b58f-c4ecf7d5a625/f01d7c04_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/750d4286-a236-4635-b58f-c4ecf7d5a625/1553663199artwork.jpg",
    "simplecast_uid": "750d4286-a236-4635-b58f-c4ecf7d5a625",
    "transcript": "<p><strong>Joel Hooks:</strong>         Hi Emma.</p><p><strong>Emma Wedekind:</strong>      Hey how's it going?</p><p><strong>Joel Hooks:</strong>         It feels like the internet want's to know how to code. The whole entire internet, I know people ask you for help and they want to get started and when they do what do you tell people, like if they're just getting started, what do you tell people in terms of learning how to code?</p><p><strong>Emma Wedekind:</strong>      Well I get several messages from people who say 'I'm thinking about making a huge career shift or my wife or my husband or my friend is thinking about making the shift, should they do it?' And I always so absolutely, but you have to go in being aware of the fact that it will take dedication, you can't join any field and not put in the time and effort, right? This just so happens to be a field were you can teach yourself everything that you need to be successful and you can do it for little to no money at all, which is incredible but that doesn't mean you don't need to put in the hours.</p><p><strong>Emma Wedekind:</strong>      So there are a couple of resources that I would suggest people to start with, one is 'Free Code Camp' because it's awesome and it's amazing and its free and ... Quincy Larson has done an incredible thing, building that community. I actually used it the other day, I went and took the entire Reg Ex thing and then I made that blog post that blew up the internet, because no one understands Reg Ex right? Just because I've been in this industry and just because I went to school for Computer Science doesn't mean that I don't still have trouble understanding certain things so, I would recommend Free Code Camp, also there are so many podcasts out there, like Egghead Podcast, obviously, is a great place to start, the Free Code Camp [crosstalk 00:01:29]</p><p><strong>Joel Hooks:</strong>         Sure.</p><p><strong>Emma Wedekind:</strong>      if you're a newbie, and also The Change Logger are all really great ones that I found recently.</p><p><strong>Joel Hooks:</strong>         I love Wes Bos' Syntax FM too, I think there's is really good as well.</p><p><strong>Emma Wedekind:</strong>      Yeah, there are so many and I don't have enough time to listen to all of them, I need to [crosstalk 00:01:42]</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Emma Wedekind:</strong>      Make more time.</p><p><strong>Joel Hooks:</strong>         Yeah. It's like a massive stack.</p><p><strong>Emma Wedekind:</strong>      I know, yeah and also there so many blogs out there, I gotta say Ben Halpern is killing the game with his practical DEV site, there are a lot of great posts for beginners on there, but one [crosstalk 00:01:57]</p><p><strong>Joel Hooks:</strong>         That's at dev.to?</p><p><strong>Emma Wedekind:</strong>      Yeah, dev.to, yup. My biggest piece of advice would be don't get overwhelmed.</p><p><strong>Joel Hooks:</strong>         Like that site in particular to me is really interesting, I'm trying to figure it out because you get there, and it's a stream of posts and what they're allowing everyone to do is basically use it as a syndication platform [crosstalk 00:02:11]</p><p><strong>Emma Wedekind:</strong>      Yeah.</p><p><strong>Joel Hooks:</strong>         As well as an original content platform, and it's almost overwhelming at first, but once you start paying attention I think the patterns emerge and I know you spent time on there and I was wondering how do you use dev.to ... personally, like what's your reading and writing habits on that site?</p><p><strong>Emma Wedekind:</strong>      I subscribe to all of the ... the topics like JavaScript and I like the discussion ones too because I like to have discussions with people and learn new things, but anything tech related goes on DevTo, I find personally, I was actually asked the other day between Medium and DevTo which one do I prefer, like what are the differences. In terms of technical blog posts I highly recommend practical Dev, I feel like the engagement is much higher, because you're really only getting developers on that right versus Medium is kind of like the entire universe is on there and I never get as much engagement, I also find a platform way easier for code snippets and embedding different mediums, for lack of a better term into it, so yeah, I would say there are so many awesome people on there as well. Everyone on there is doing great work and I do like the discussions part, because I think then it opens up the door to knowledge sharing versus Medium is really just a place for static posting. The comments section really, at least in my experience it's never been a conversation starter.</p><p><strong>Joel Hooks:</strong>         I'm just going to say it, I think Medium is garbage and nobody should put any of their content on there ever. That's, that's me and that's my opinion, that's where I'm at with that particular website.</p><p><strong>Emma Wedekind:</strong>      Yeah, I have a love hate relationship with it , the one thing I did like was that I could write drafts, and they would auto save, like that was super useful for me, because [crosstalk 00:03:44]</p><p><strong>Joel Hooks:</strong>         Design wise it's amazing, it's a beautiful site, I mean its homogenous, everything kind of looks the same, the editing experience is pretty cool, they've started randomly throwing paywalls up on context that you've put up there in the past, and you know not necessarily sending out checks, they do stuff like that</p><p><strong>Emma Wedekind:</strong>      Right.</p><p><strong>Joel Hooks:</strong>         I just don't, I feel in some ways the same about YouTube, honestly like that's, you know, that's why we do Egghead, right? We want to make a place where developers can go and put their content up there, and it's not like driving people away from pure content, I don't know, did that make sense?</p><p><strong>Emma Wedekind:</strong>      Right.</p><p><strong>Joel Hooks:</strong>         It's not an ad platform.</p><p><strong>Emma Wedekind:</strong>      Right.</p><p><strong>Joel Hooks:</strong>         Because there's no way Medium can ever go outside of being an ad platform, because you know it's got like a hundred and thirty-five million dollars in investment, and those people want returns, so you know.</p><p><strong>Emma Wedekind:</strong>      Right, right.</p><p><strong>Joel Hooks:</strong>         How are they going to get that? And we are the product, our words are the product so, you know, own your words is my advice, like DevTo, does it differently because they're allowing you to economical URLs right, so you can still get credit for your work, I think is important.</p><p><strong>Emma Wedekind:</strong>      Yeah. And I like, to be honest, I like the way that they socially interact with the community, like they always retweet their, the blog posts that people post and they're very active in that and I think that's great, like if I'm on a platform, the fact that they will help me grow as an author, like that's just pretty incredible. To me it kind of feels like, like I don't hate Medium, I think that there are a lot of benefits to it, but it does feel like there's more of an ... I don't want to say ego, it feels like ... a very, pretty rigid right? Like it's a nice minimalist concept but there's not as much room to be creative, or to differentiate, I wouldn't say, I think yeah. I'm migrating all my tech ones over.</p><p><strong>Joel Hooks:</strong>         Ben and the rest of that company are doing an, a really amazing thing ... they don't, they're basically taking donations, to run the site, and you know some sponsorships, but it's not, there's not this huge push for them to monetize what they've done, and I have so much respect for what they've built, and I love the community, because it feels like a community versus Medium [crosstalk 00:05:43]</p><p><strong>Emma Wedekind:</strong>      It does.</p><p><strong>Joel Hooks:</strong>         Which is, you're just going there to drop a post.</p><p><strong>Emma Wedekind:</strong>      It's a business, right.</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Emma Wedekind:</strong>      Yeah, absolutely.</p><p><strong>Joel Hooks:</strong>         Yeah, you're going to drop a post and take off and hopefully you get some, some engagement and increase your brand, or whatever you know. There's, they've been getting a lot of flack lately, I'm not the only person yelling at Medium right now, but I don't wanna pile on too much.</p><p><strong>Emma Wedekind:</strong>      No, I know. One misconception I will say I hear all the time is like 'What should I blog about, or like why should I blog about a topic if someone's already written it?' And that's kind of two fold, one you don't have to blog, like there are a ton of different ways that you can share your knowledge with the world, whether that's with like github projects, open source contributions, YouTube videos, find your niche and own it, right. You don't have to blog. And second thing is like, just because a topic's been written about doesn't mean that you don't have a unique experience. Or if I like, not double negating myself, just you know, if you have knowledge, share it, like someone will find use out of it so yeah.</p><p><strong>Joel Hooks:</strong>         I actually run into this a lot, and we get people who want to create content like Egghead and it's like well there's another lesson, someones already said this, and to me it's almost every perspective is unique, and not you know, if you're not plagiarizing</p><p><strong>Emma Wedekind:</strong>      Right.</p><p><strong>Joel Hooks:</strong>         If you're taking the [inaudible 00:06:52] of the resources that you've looked at then running that through the funnel of your experience, your voice is valid. It's like is there too may tutorials on low dash on the internet, like how many low dash tutorials probably exist and if you write another one is that too many? And the answer is no, people want multiple sources, and they want to hear multiple voices and see multiple opinions on things.</p><p><strong>Emma Wedekind:</strong>      Well it's funny because I'll do one of those Twitter polls and I'm like 'Oh do you guys want to see a blog post on ... I don't know, cat breeds.' And everyone's like 'No, there's like a thousand videos on cat breeds.' And other people are all like 'Well it's free content, like why are you saying no?' And it's true, why would you really say no to more knowledge I mean, it is what it is, you know maybe my words help someone who up until that point couldn't grasp the concept, but I was having a conversation with me husband earlier in the car and we were talking about ... unique ideas and it's like we're in the day and age where almost no idea is completely unique, right. So how do you be unique and not plagiarized? And one of the best ways to do that ... I forget who said it I fell like it was Sarah Drasner but I could be wrong so don't quote me on this but someone said 'To create unique content, you know it's okay to read what other people have written or watch what they have created and then think about it for a day or two and let it sink in.</p><p><strong>Emma Wedekind:</strong>      And then kind of, not regurgitate it, but if you were to explain this to someone, how would you explain it, and at that point you've digested it enough and like formed your own opinions about a topic to where it is a unique opinion on it, so yeah it's definitely a balancing act, though.</p><p><strong>Joel Hooks:</strong>         Yeah well it's in your own words, right? Like if you, you know obviously if you were cutting and pasting like don't do that and if you do, do that put it in a block quote and give credit and add a link. Which is fine too, right, and if your just like hey I'm going to express my understanding of this concept and to me, I would do that with emails, or whatever and if somebody said something to me and I want to repeat it back to them, so to make sure that I understand it in a way that makes sense to both of us. And it's similar in a lot of ways, it's almost conversational.</p><p><strong>Emma Wedekind:</strong>      Absolutely.</p><p><strong>Joel Hooks:</strong>         So something that I've heard you talk about is this idea of being T shaped</p><p><strong>Emma Wedekind:</strong>      Mm-hmm (affirmative)</p><p><strong>Joel Hooks:</strong>         As a developer and I was wondering if you could tell me more about what being T shaped means and why that's a benefit, and why that's something that we should think about.</p><p><strong>Emma Wedekind:</strong>      The general concept behind being T shaped is ... two folds, so one you have a breath across a different, a discipline, so for example I would call myself T shaped in the sense that I have a breath of knowledge about development and design as a whole. So I have some working knowledge of a UX design and a visual design, I have some working knowledge of data base and APIs and then the second part where you have a depth within a certain discipline or like an area of expertise so like I would say my area of expertise is primarily in the front end, right?</p><p><strong>Emma Wedekind:</strong>      I would say maybe towards accessibility, that would be my deep vertical knowledge, so being T shaped is important because while you know expertise in one specific knowledge area is extremely important, if you are kind of living in the silo where you don't have any confidence across other disciplines, it can get really hairy when you need to integrate, or create like a full site application, like okay let's say I have a vertical knowledge of building a front end website but now I need to hook it up to a data base, and if I have no knowledge of what even is a data base, or like where do I even start like that can get pretty hard so, gain a lot of knowledge in a lot of different areas it doesn't have to be deep, it can be pretty surface level.</p><p><strong>Joel Hooks:</strong>         Like vocabulary almost.</p><p><strong>Emma Wedekind:</strong>      Yeah ... I mean I took one database course when I was in school and I know enough to be able to have a conversation about, okay what is a relational database, what is this thing that people are freaking out, called Graph QL, like to be able to have a high level conversation, is very valuable and I would say it makes me a better developer and it makes other people better developers, so yeah just because something isn't exactly your area of expertise it doesn't mean that you shouldn't go out and learn it if it interests you</p><p><strong>Joel Hooks:</strong>         Yeah so when we're learning stuff it often means we need to get out there and we're asking questions and we're trying to figure it out and I think part of that, you know it's like having the vocabulary, and you're talking about and that's your horizontal knowledge.</p><p><strong>Emma Wedekind:</strong>      Mm-hmm (affirmative)</p><p><strong>Joel Hooks:</strong>         And like asking good questions is so important and I was wondering have you had any experience asking good questions versus asking bad questions.</p><p><strong>Emma Wedekind:</strong>      Oh yeah and only because I've asked terrible questions during my life.</p><p><strong>Joel Hooks:</strong>         Yeah me too.</p><p><strong>Emma Wedekind:</strong>      You know what it's a skill that's not appreciated enough, is asking good questions. It was at the point where I would not even take the time to try tp find the answer before I would just go bother my co-workers, and it's just a disservice to both of us, right? I'm not trying to help myself at all and I'm wasting their time so, let's say you're solving a problem and you get stuck, the first thing you should do is write out a list of things you know that you need in order to solve this problem, right? And then from there what information do you already know? And then what pieces of information are you missing? And then the next thing is how do you find this missing information? And that kind of lays into problem solving, and I believe Ali Spiddle is going to come out with a problem solving course soon, you should go check her out if you haven't.</p><p><strong>Emma Wedekind:</strong>      This is an area that I always struggle with, what questions to you ask when you don't even know where to start? So, if you want to ask a good, well informed question that you'll get a lot of benefit from, you have to first try to solve it. And once your suck, right like don't sit around a problem for two weeks, if it gets to the point where you're spending an hour or more on a problem that could be solved within five minutes of talking to a co-worker like at that point you should probably go and just talk to someone, but do make sure that you've done a little bit of high level research. And you're well informed to be able to have a discussion and you're not just going in to say 'Hey, like uh how do I uh.' Find an element in a ray, like how do I grab an aray element. That's the kind of stuff you should know enough to be like 'Alright, well like I know that I'm working with an Aray maybe I'll start with a documentation and I'll look through there and see what methods are available.</p><p><strong>Emma Wedekind:</strong>      But one thing that I would suggest is, if you're going to ask a question keep it simple, if you make a question overly complicated and have several parts it's gonna be kind of confusing. So I would say just like, find out what pieces of information are missing to sold our problem and then ask very simple questions, because once you break it down ... [crosstalk 00:13:11]</p><p><strong>Joel Hooks:</strong>         A paragraph verse in an essay?</p><p><strong>Emma Wedekind:</strong>      Yeah, if you break it, like that's even how you would construct a blog post or like a ... talk right, it's like break it into bullet points. That's essentially what you want to do with a problem that you're trying to solve, is break it into bullet points, hae one line be one piece of information and like go from there.</p><p><strong>Joel Hooks:</strong>         Yeah, one of my favorite, I think all time resources for asking questions and Stack Overflow they have a how to ask article, they actually have an entire section of their help center revolved around asking, but this how do I ask a good question article, is really great and pretty simple in and of itself. And like oh yeah, I've been asking bad questions. Like I need to up my question asking game, like the benefits of that are immense, one I think people answer you more, and you get better answers but then they also read, know that you respect them and respect their time because you ask good questions and [crosstalk 00:14:02]</p><p><strong>Emma Wedekind:</strong>      Right.</p><p><strong>Joel Hooks:</strong>         Their just more ops to, you know allow you that, because I think we have social credit. [crosstalk 00:14:07]</p><p><strong>Emma Wedekind:</strong>      Absolutely.</p><p><strong>Joel Hooks:</strong>         With people and when you ask good questions, you're drawing from that. So that's something to be aware of. [crosstalk 00:14:13]</p><p><strong>Emma Wedekind:</strong>      That's so true.</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Emma Wedekind:</strong>      I never thought about it like that.</p><p><strong>Joel Hooks:</strong>         Yeah I mean you know if you're going around and you ... people always want, want mentors, you know I see this so much and you'll get emails or direct messages or whatever and it's like 'Hey will you be my mentor?' And I think that's such a, to me it's like an odd question, I understand where it comes from but it, it's, I don't think it's the way to start that.</p><p><strong>Emma Wedekind:</strong>      Right.</p><p><strong>Joel Hooks:</strong>         That question should be something different, like how do you ease into that, and have you see this, the idea of everybody want's and needs mentors and they're asking for it specifically 'Will you be my mentor?'</p><p><strong>Emma Wedekind:</strong>      Yeah, for sure and I get messages like this and while I would love to help everyone, the problem with saying 'Will you be my mentor,' is well what type of mentorship are you looking for right? Like for me I would always, let's say I wanted to enhance my web animation skills and so I messaged Sarah Drasner, and I was like 'Hey can you be my mentor?' Like that doesn't tell her anything that I'm looking for, but if I'm like 'Hey I saw your course on web animations, I think that you're really well versed in this, would you have time for maybe one at house session mentorship where I can send you maybe a list of questions ahead of time and then we can just have a little discussion about it.'</p><p><strong>Emma Wedekind:</strong>      And if you respect someone's time enough to do the heavy lifting, on the mentorship side, like yes mentorships are a two way street, where like you can both learn things from each other but realistically the person asking for the mentorship, is typically a mentee looking to get the majority out of this relationship, and as a result the majority of the responsibility should be on them to do the preparations, so as opposed to saying 'Would you be my mentor,' say 'Hey, you I see that you're well versed in AB and C, I am looking at enhancing my skills in these, if send you over a couple of questions would you be able to help me understand them.</p><p><strong>Emma Wedekind:</strong>      And that's always what I tell people is like 'Hey, I don't have a ton of time for a mentorship,' right, because that term is so broad, 'But if you have specific questions I am more than happy to help. I'll get on a little call with you, or I'll send you messages,' whatever but yeah.</p><p><strong>Joel Hooks:</strong>         So, I mean all of hour work that you've done, all of the blogging that you've done, all of this work that you've put out there is, to me literally very, very pointedly a form of mentorship if somebody wants to go learn from you and learn what you know, like just your practice that you've done has provided that for people, and to me the same is true like Sarah, I can't even imagine what her inbox looks like.</p><p><strong>Emma Wedekind:</strong>      Right, I know</p><p><strong>Joel Hooks:</strong>         I try to imagine it and it completely blows my mind but if you think about what Sarah's done and where she has produced, you know content, or the front end master stuff, which is amazing and you can literally pay her via Front End Masters to get what, to me very, very close to mentorship and I understand everyone want's pis poke right, like I want you to hear my problems and I want to be heard.</p><p><strong>Emma Wedekind:</strong>      Right.</p><p><strong>Joel Hooks:</strong>         But at the same time, if you record something, whether it's video or a book, Sarah has a great book, all that stuff is a form of mentorship and if you've consumed all that and your questions are so, you know deep that you need to contact that person, one you have to know if they're in the advice business because a lot of people aren't, and I say pay people to be mentors, like that's fine but that's if they are in the advice business and so 'You can pay me to be your mentor.' But if that specific person can't maybe you can pay somebody else, like I've paid almost every single mentor that I've ever had.</p><p><strong>Emma Wedekind:</strong>      Yeah.</p><p><strong>Joel Hooks:</strong>         Like cash for their time, and I say that and then people will email me and say 'Hey, can I pay you to be my mento?' And I'm like that's not what I'm saying.</p><p><strong>Emma Wedekind:</strong>      Yeah.</p><p><strong>Joel Hooks:</strong>         That's not, that's not what I'm saying, that isn't how it works but you know it's like why don't you look at the sum, whole of what's available. People are just so, need direction just as a [crosstalk 00:17:46]</p><p><strong>Emma Wedekind:</strong>      Yeah.</p><p><strong>Joel Hooks:</strong>         As species, we crave direction and personal attention, where our problems aren't necessarily unique.</p><p><strong>Emma Wedekind:</strong>      I never thought about content producing, as a form of mentorship and you're not the first one to, to say this but now that you mention it, it's true, I mean it's like asynchronous mentorship if you think about it.</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Emma Wedekind:</strong>      I personally produce content because I need to learn a skill and once I learn it, I want to share that with the world, but also remember it for myself, like that regex thing, like everyone was all like 'Oh you understand regex!' And I'm like 'No I really don't.' Like I, I created that so I could go back and look at it later.</p><p><strong>Joel Hooks:</strong>         Those fifteen minutes there there you really understood regex, but now you're going to have to have to re-reference your own article.</p><p><strong>Emma Wedekind:</strong>      Exactly, yeah.</p><p><strong>Joel Hooks:</strong>         The best is when your own article comes up in your google search, like that's the, like to me that's the biggest smile on my face, ever.</p><p><strong>Emma Wedekind:</strong>      It's so funny though because sometimes I'll reread my articles and I'm like oh my God I'm so smart. Like oh my God I wrote this, like who am I? And then I'm like oh crap, I need to write better posts because recently I've been slacking, this old stuff is real great.</p><p><strong>Joel Hooks:</strong>         Right.</p><p><strong>Emma Wedekind:</strong>      I mean that's a good feeling though, when you reread your old stuff and you're like 'Oh, I've learned a lot.' And it's, part of my blog posts are too almost a form of therapy for myself because at least the ... not the super technical ones but the higher level ones that just talk about the industry like 'Oh, how to write a cool resume and get hired in the Tech Industry.' Or 'How to do great on your interviews.' Like these are almost a form of, like therapeutic form of, they help me process my feelings and experiences in this industry.</p><p><strong>Joel Hooks:</strong>         I mean it's a journal right? Like at the end of the day [crosstalk 00:19:22]</p><p><strong>Emma Wedekind:</strong>      Exactly!</p><p><strong>Joel Hooks:</strong>         And it's professional, so it's a professional journal and you're writing it in a certain way for you know the broader internet but it's for you, I write for myself.</p><p><strong>Emma Wedekind:</strong>      Right.</p><p><strong>Joel Hooks:</strong>         Like first and foremost, you know</p><p><strong>Emma Wedekind:</strong>      Exactly</p><p><strong>Joel Hooks:</strong>         I'm the audience.</p><p><strong>Emma Wedekind:</strong>      A lot of people are like 'Oh, how do you get followers on social media, like how do I get people to my blog now?' And I'm like, well the first step is don't write content for the sole purpose of having other people read it, write content, or like, okay that came out wrong. But like write content because you love it and you're interested in it, not because you want to get views and I think that's the biggest misconception is like okay if you think the public want's to hear about topic X and you don't even like that topic no ones gonna want to read your stuff, if you don't want to read your own stuff, no one else will, right? So right about the things you're passionate in or like make videos about the stuff that you love and then people will be drawn to that.</p><p><strong>Joel Hooks:</strong>         Yeah. Yeah and I mean people want, one they want expert's but they also want authenticity, that's important so you know lyou can be out there, and there's all sorts of ways to kind of fake it or work on your personal brand and like I employ content strategy, I get all that stuff, but at the same time if you're not authentic and your not, you know being true, people smell that and that's what they crave, they want people there that have something to say that have a voice and you know give good advice too, that's really important at the end of the day, like if you are saying things and it actually works and you know true problems with real solutions.</p><p><strong>Emma Wedekind:</strong>      Mm-hmm (affirmative)</p><p><strong>Joel Hooks:</strong>         And at the end of the day the audience will follow, like it's like that Field of Dreams, build it and they will come kind of thing.</p><p><strong>Emma Wedekind:</strong>      Yeah, yeah I love that.</p><p><strong>Joel Hooks:</strong>         Which is trite, but like at the same time its true, if you do, if you consistently put out you know useful and helpful material at the end of the day the audience will show up because you're going to have a certain section of the vast sea of humans on the internet.</p><p><strong>Emma Wedekind:</strong>      Well that's funny because that's what got me back on Twitter was like I had a co-worker, and he was like 'Oh yeah, people are sharing your blog on Twitter.' And I was like 'Oh yeah I forgot Twitter was a thing.' And like I haven't used this since college and I had like three hundred followers so I was like alright I'll get back on twitter, and I was like 'Oh cool, people are sharing my blogs.' And that is why I got on Twitter was to share content and learn from other people, and then he was right, he was like if you post people will come and I'm like okay, well alright let's try it and I just kept posting blog posts and tweets and I was very consistent, sporadically consistent, but consistent, and he was right people will eventually come. You just have to passionate and consistent.</p><p><strong>Joel Hooks:</strong>         Yeah, yeah, my friends Amy and Alex have a blog called Stacking The Bricks and to me that phrase stacking the bricks, is what it's really all about, you know every time you write a post or sometimes even a tweet, those, Twitters weird, but you know every time you write a blog post or do something with depth, you're putting a brick, you're building your wall and presence and overall audience. But it's a slow and methodical process kind of over time.</p><p><strong>Emma Wedekind:</strong>      Yeah, there are people like on Twitter in noticed specifically that they just want to get followers and all they care about it follower count and to me that's kind of backwards, right, if you cared about the content first that's what's really important but not only that, I don't think people see the negative side of so called Social Media fame right, like I wouldn't say I'm famous but having a certain number of followers comes with down sides and I don't think people see that, I think people only see the positive sides of this internet fame so to say,.</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Emma Wedekind:</strong>      So, yeah.</p><p><strong>Joel Hooks:</strong>         No I mean and you did, ou blew up a little bit on Twitter over the last year and it changes, like the whole thing changes right? Like if you're writing and it's going to a thousand people, fifty of those people actually only see the Tweet, but you get people who get into the six figures of, you basically can't have an opinion without spending a day thinking about it unless you just want to be annihilated.</p><p><strong>Emma Wedekind:</strong>      Yeah.</p><p><strong>Joel Hooks:</strong>         And it doesn't matter what you say, you're going to get, you know there's going to be fifty, like the same percentage of folks that are going to be really mad about it, and then some that you know are going to be really passionate about what you have to say and that puts you in a box, a weird box.</p><p><strong>Emma Wedekind:</strong>      It is.</p><p><strong>Joel Hooks:</strong>         Twitters a weird space in general, I think.</p><p><strong>Emma Wedekind:</strong>      I forget ... I was in a podcast recently and I was asked 'Does the fear of having what you say being taken out of context keep you from producing content?' And I'm like well I don't think it keeps me from producing stuff but I'm hyper aware of how I say things now because if you ... first of all Twitter, you have a hundred and forty characters so there's only so much you can say unless you want to write a novel, but if you don't kind curate what you put out there people will come and they will rain on your parade and that is mentally, extremely difficult and no one, I don't, I try to be very transparent about this stuff, like on the internet because I feel like there's a stigma about being transparent about the negative sides of things, whether that be mental health, or dealing with negative things on social media like we should be openly talking about these things because there's nothing wrong with it and you should never feel ashamed for having to take mental health break from social media or like from things in general. It's a double edge sward.</p><p><strong>Joel Hooks:</strong>         I took a week off of Twitter, I'm a twitter fanatic, I spent an accessive amount of time just scrolling and then I do, it's part of my job right, like I need to keep a breast and see who's doing what and that sort of thing. But you know, they, like the likes and retweets and metrics side of all this can be such a ... it affects us at a deep level, as humans, and triggers the internal dopamine releases and all that fun stuff, they're playing a game for them though, they're playing on us.</p><p><strong>Emma Wedekind:</strong>      It is.</p><p><strong>Joel Hooks:</strong>         And they do it very skillfully.</p><p><strong>Emma Wedekind:</strong>      Or like either, I don't know if it's classically conditioning ourselves or operantly conditioning ourselves to like continue to scroll, my screen time, I don't even want to take a look at it, I had to disable screen time because it was like you're officially, your brain is turning into a pile of mush, it's like yeah I know, but to some extent that how you build a brand and that's how you build, you know your company but it does definitely take toll mentally.</p><p><strong>Joel Hooks:</strong>         Yeah. And ignore for today, screen limit three just ignore for today.</p><p><strong>Emma Wedekind:</strong>      Great, right, I don't care let me in!</p><p><strong>Joel Hooks:</strong>         Give me my metrics.</p><p><strong>Joel Hooks:</strong>         So for onlookers speaking of, like looking at Emma and you blogging and producing and making content and doing the thing, you appear relentlessly productive, and I'm wondering how do you balance that in terms of your life and work and the separation between the two and is there a separation or is it all just kind of the same thing?</p><p><strong>Emma Wedekind:</strong>      Surface level I seem like I have my life together but sub-surface level I'm a hot mess.</p><p><strong>Joel Hooks:</strong>         Same.</p><p><strong>Emma Wedekind:</strong>      And I think, well okay I wouldn't say hot mess right, but it's, it's not as perfect as things seem so very recently I tweeted about the fact that I feel anxious or I feel bad about myself if I'm not doing something to further my career, further my skill set, like if I need time to read a book, which is my favorite hobby, I feel like I'm being unproductive and I get really antsy, and that's not healthy because you do need to make time to relax so what I was odin wrong was trying to do everything at the same time and when you multitask you just by default are ... destroying your chances at succeeding any of these things.</p><p><strong>Emma Wedekind:</strong>      Jason Langstorp had an awesome talk about how he cut his working hours in half and managed to get twice as much done, and I highly recommend people go check that out because it's all about time boxing things, maybe like the Pamadora Techinique works for you but I always have a to do list that I make whether that's a long term one or day to day, I also like to time box my tasks and much as I can because we have this flow state that Jason talks about if you go listen to his talk, the amount of flow state you can have, whether that's forty-five minutes or sixty minute sessions to focus on one task, turn off all of your notifications, and yeah instead of tryin gto focus on all of these things at once I'm like alright well I need to learn German so I'll do that two days a week during my lunch break, right.</p><p><strong>Emma Wedekind:</strong>      okay so that's taken care of, and then maybe Tuesdays and Thursdays I work on my coding coach thing or maybe I get up fifteen minutes earlier and do some open source grooming, so I would recommend focus on one to two main things, and focus on them until they're done, and that could take a week, that could take months, but try not to multitask and when you're really trying to work turn off notifications because I gotta tell you I turned off all notifications on my phone, I set do not disturb on my laptop and I just try and get things done, but when you time box yourself I feel like it's almost like if I don't put a time box I'll spend all day like screwing around for lack of a better term, like I'll get distracted I'll go on YouTube. But if I know that I have sixty minutes to do a task, I just kick butt and I get it done, while superficially it looks like I have it all together, it's something I continually struggle with and you've got to consciously make an effort to keep being productive but also make sure to schedule time to relax because you will burn out.</p><p><strong>Joel Hooks:</strong>         yeah I left my phone at the office basically I took a week off from work and also left my phone at the office, like that was one approach I took, its so hard, if it sits there like how do you not pick it up? It buzzes at you and what are you going to do?</p><p><strong>Emma Wedekind:</strong>      Right.</p><p><strong>Joel Hooks:</strong>         I've also been trying bullet journaling which I think feels like a big portion of the internet is doing it right now. That guys making a lot of money.</p><p><strong>Emma Wedekind:</strong>      Mm-hmm (affirmative)</p><p><strong>Joel Hooks:</strong>         Which it's been working just using paper and trying to figure out what it is I'm trying to do and prioritize and figure out what the real essentials are of what I need to get done, which helps but it's a constant struggle, there's so much choice, there's so many things to learn, there's so many things to do.</p><p><strong>Emma Wedekind:</strong>      Yeah for sure, I've always wanted to try bullet journaling but I'm that kind of person that like I hate my handwriting and everything has to look perfect and if I don't like the way it looks ill throw it out and rewrite it, which got me into a lot of trouble at school because I focused too much on rewriting my own stuff and not enough time on studying.</p><p><strong>Joel Hooks:</strong>         Just for the aesthetics.</p><p><strong>Emma Wedekind:</strong>      Yeah exactly. I'm not artistic, I can draw things on a computer but ask me to play Pictionary and I will lose. Is bullet journaling primarily for writing down your to do list or is it kind of a reminder of what you did during the day, or kind of both?</p><p><strong>Joel Hooks:</strong>         So I use the, I kind of do the traditional, like the original bullet journaling approach from them, I forget his name that wrote it, to where you're writing down what you're going to do tomorrow, you add things during the course of the day, if you and something comes up and you need to get it done. But then it also works as a free form journal so ... under 02.20 W for Wednesday I have Emma Podcast, and then I wrote down of the list of prompts that we would talk about so that's a perfectly valid bullet journal entry, and then it has an index and that kind of thing but then you can go back through it and you have a month log, and a week long and an everyday. The interesting thing about the bullet journals is because people ge really artistic with it, so you can go on Reddit and look at the bullet journaling and stuff about it and feel totally inadequate right, because they're doing these big spreads and they're all fancy [crosstalk 00:30:07]</p><p><strong>Emma Wedekind:</strong>      Right</p><p><strong>Joel Hooks:</strong>         And they're obviously graphic designers and that's not really me, I like my handwriting, I'll scratch things out and I misspell stuff and don't really care, you know I'll write right over it with the correct spelling, that doesn't bother me, but at the same time I write small and it's fairly legible and that's my thing just by nature.</p><p><strong>Emma Wedekind:</strong>      I gotta try that out that sounds really interesting.</p><p><strong>Joel Hooks:</strong>         It's fun and if you really take it more loosely like how is this useful for me and go back to like talking about the Agile Approach like if you think about this is something I can incrementally improve what works for me, what doesn't work, like it really starts to make a lot more sense versus this is a rigid format and I have to do it this way. That doesn't work for me at all.</p><p><strong>Emma Wedekind:</strong>      Mm-hmm (affirmative)</p><p><strong>Joel Hooks:</strong>         With almost everything in life, that doesn't work for me.</p><p><strong>Emma Wedekind:</strong>      Yeah, absolutely.</p><p><strong>Joel Hooks:</strong>         Talking about learning and an infinante variety of things to learn what are you excited about learning coming up? What's on the horizon, what are you working on?</p><p><strong>Emma Wedekind:</strong>      I have so many fun things right now, yay, I'm focused right now on design systems, which is going to be a huge shocker to everyone listening I'm sure, that's one thing but in terms of other skills I really told myself this year I would learn web animations so like I really need to get back on [inaudible 00:31:10] and take Sarah [inaudible 00:31:12] SPG animations course, that's been on my backlog.</p><p><strong>Joel Hooks:</strong>         Good stuff.</p><p><strong>Emma Wedekind:</strong>      Yeah, I also want to learn more about design patterns in terms of coding, there was a really great, the last talk on day two of [inaudible 00:31:25] was given about design patterns and it was incredible so I need to go back and kind of learn more about that. And then lastly Graph QL it's something I use within Gatsby for [inaudible 00:31:37] sites, but let's be real like I really don't understand Graph QL so I need to go back and learn that.</p><p><strong>Joel Hooks:</strong>         Yeah. It's cool stuff and Gatsby is amazing and that's what I've been telling people lately, get off of Medium post to Gatsby.</p><p><strong>Emma Wedekind:</strong>      Well I feel like a fan girl.</p><p><strong>Joel Hooks:</strong>         Because they made it easy and I do too like every posd cast I've been talking about it and I've had all the team members on because I really, really like Gatsby a lot.</p><p><strong>Emma Wedekind:</strong>      I know and the team is super nice and yeah they're doing great stuff, I can not praise them more.</p><p><strong>Joel Hooks:</strong>         They made blogging fun again for me, because I have avoided mine for so long because I didn't like hacking on it because it was Jackie and Ruby and I do code Ruby but I didn't like it and I didn't enjoy it, I didn't like playing with it but now it's like this has all the cool stuff that I really enjoy working with and it's right here so maybe I'll write again, because MDX is awesome too, like the whole thing has just blown my mind.</p><p><strong>Emma Wedekind:</strong>      Right. Yeah absolutely and its open source, so like I love open source. Jason does a great job too because like [crosstalk 00:32:33]</p><p><strong>Joel Hooks:</strong>         Yeah and they're doing it in the right way as like a project they're really running it well and like the whole things is just, I'm definitely a fan boy of what they've got going on and they just hired Marcy Sutton, like that's amazing.</p><p><strong>Emma Wedekind:</strong>      Yeah! I haven't met her but I've heard so many great things about her, and her accessibility works so</p><p><strong>Joel Hooks:</strong>         Yeah she's just a cool human and they just keep stacking cool humans at the Gatsby.</p><p><strong>Emma Wedekind:</strong>      Right.</p><p><strong>Joel Hooks:</strong>         Go go Gatsby.</p><p><strong>Emma Wedekind:</strong>      Absolutely.</p><p><strong>Joel Hooks:</strong>         Well that's awesome, thank you Emma so much for spending your evening with me and chatting I really appreciate it. I'm excited to see what you get up to but yeah. Thanks.</p><p><strong>Emma Wedekind:</strong>      Yeah thanks for having me. It was a lot of fun, we talked about so many different things I love it.</p><p><strong>Joel Hooks:</strong>         Yeah yeah it was a good ride, cheers.</p>",
    "slug": "creating-authentic-content-and-developing-yourself-with-emma-wedekind",
    "description": "<p>Web development is a fantastic field where people, for little to no money, can self-teach everything you need to make a career, and it's amazing, right? That doesn't mean that there isn't a time cost though, it isn't easy, but the internet has an overwhelming amount of information that you can use to teach yourself. Authors who write this free content are the life-blood of the internet and provide an invaluable service to countless people. </p><p>However, in the sea of information, it's easy for your content never to get noticed. You wrote that blog-post that killer blog-post on medium, but no-one seemed to have seen it. Where you write your content is important, there are communities like the amazing dev.to that reach a specific audience and are more focused towards engagement, but the reason why you create your content is also important. People can smell inauthenticity if you are writing your content for the sole purpose of brand-building and getting views people are going to notice. Create content that you love and that you find interesting. You don't even have to be an absolute expert to teach, writing about what you are learning helps people learn right along with you!</p><p>Learning a discipline you love profoundly is invaluable, but that doesn't mean you should turn a blind eye to other subjects. It's valuable to have a breadth of general knowledge across different disciplines and be able to have high-level conversations. </p><p>A huge part of learning is asking people good questions. When you don't ask good questions, you are doing both yourself and the person you are asking a disservice. When you are too vague about what you are missing, and you don't give enough context, it's difficult to get a clear answer, and you are putting the burden of figuring that stuff out on the person you are asking. </p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/f01d7c04/transcript\">\"Creating Authentic Content and Developing Yourself - with Emma Wedekind\" Transcript</a></p><h3>Resources:</h3><ul><li><a href=\"https://stackoverflow.com/help/how-to-ask\">Stack Overflow: How do I ask a good question?</a></li><li><a href=\"https://www.vuemastery.com/conferences/vueconf-us-2018/7-secret-patterns-vue-consultants-dont-want-you-to-know-chris-fritz\">Chris Fritz: 7 Secret Patterns </a></li><li><a href=\"https://www.youtube.com/watch?v=3KREV1_2mA4\">Jason Lengstorf: Cutting Work in Half</a></li></ul><h3>Emma Wedekind:</h3><ul><li><a href=\"https://twitter.com/emmawedekind?lang=en\">Twitter</a></li><li><a href=\"https://github.com/emmawedekind\">GitHub</a></li><li><a href=\"https://emmawedekind.com/\">Website</a>  </li></ul><h3>Joel Hooks</h3><ul><li><a href=\"https://twitter.com/jhooks\">Twitter</a></li><li><a href=\"https://joelhooks.com/\">Website</a></li></ul>",
    "duration": 1994,
    "episode_number": 41,
    "contributors": [
      "Joel Hooks"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/rfkvk",
    "path": "/podcasts/creating-authentic-content-and-developing-yourself-with-emma-wedekind",
    "published_at": "March 28th, 2019",
    "url": "https://egghead.io/api/v1/podcasts/creating-authentic-content-and-developing-yourself-with-emma-wedekind",
    "edit_podcast_url": "https://egghead.io/podcasts/creating-authentic-content-and-developing-yourself-with-emma-wedekind/edit"
  },
  {
    "id": "podcasts-00000000000000000117",
    "title": "Heading Gatsby's Learning Experience and Bridging Gaps with Marcy Sutton",
    "summary": "Marcy Sutton is the Head of Learning at GatsbyJS. She discusses the van life, migrating her blog from Wordpress to Gatsby, what she does as the Head of Learning, the potential that Gatsby has as a platform, championing accessibility, static CSS versus inline CSS, how JavaScript is impacting roles and careers, and creating inclusive communities. \r\n",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/8daa13e5-1ffe-4cdd-8054-d3a26ef196a9/7c3086d2_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/8daa13e5-1ffe-4cdd-8054-d3a26ef196a9/1552608117artwork.jpg",
    "simplecast_uid": "8daa13e5-1ffe-4cdd-8054-d3a26ef196a9",
    "transcript": "<p><strong>Joel:</strong>               Hi, Marcy.</p><p><strong>Marcy:</strong>              Hello.</p><p><strong>Joel:</strong>               So I'm pretty stoked to talk to you in general. You've had a lot of interesting circumstances in your life recently. But what I really wanna ask you first of all, 'cause this is what's important to me, and I'm curious if you could describe van life to me and what that is and how you use that as a kind of escape from these screens that we spend so much time with.</p><p><strong>Marcy:</strong>              Yes. So van life probably means different things to different people. To us, it is an escape and kind of a home away from home. Make it really comfortable, it's got a diesel heater in it, a diesel furnace. But, you know, we're pretty lucky that we have a really comfy home to go back to. I think for a lot of people that can't afford to live in big cities, van life is stability and a warm place to sleep at night. So, I remember walking around Seattle and being like, \"Man, there's a lot of people sleeping on the streets here.\" And that's because people can't afford to live there.</p><p><strong>Marcy:</strong>              So, van life, in that circumstance, is very different than how we think of it in our household, which is a fun time and a privilege to get to go out and explore. Go wheeling and go camping, and then come back to our house. So, yeah, it's a big topic and I'm so excited that- you know, it took us two years to get our van up and running, and it enables some pretty great escapes. I can work remotely, which is really awesome. So, looking forward to more of that in our future.</p><p><strong>Joel:</strong>               I think that's a pretty good point, because there's the recreation. And we see a lot of that. So Marcy and I are both in the Pacific Northwest, that's where we live at, and it's just the paradise for outdoor recreation. So you have that side of it, but then you have the folks that, this is just a place that they can afford and it's how they live, in their vehicle. In that respect, a van's kind of a nice tiny house, probably, for a lot of folks, too and is even a step up.</p><p><strong>Joel:</strong>               My sister lives on a 26-foot boat on the Molalla River here in Portland. And I'm always impressed with folks that can achieve that, right? Like have a small space and their small footprint and make it work. It's not the easy route, I guess, when you're talking about that as your home.</p><p><strong>Marcy:</strong>              Yeah, I mean, it's not easy, but I think people make it work and find more affordable ways of living. And it's like, whatever you gotta do to have a warm place to sleep at night. It's been really cold here in the Pacific Northwest this week. I think we were in the low 20s Fahrenheit, down to 16 degrees, at one point, maybe colder. So that's pretty dangerous, to be sleeping literally on the street. So, if you've got, you know, a van or some sort of a vehicle that you could sleep in, that's a huge deal.</p><p><strong>Marcy:</strong>              So, yeah, I feel really lucky that we get to use it as a recreation thing, but when you asked me this question beforehand, I was like, \"Wow, well, yeah. It certainly means different things to different people.\"</p><p><strong>Joel:</strong>               Yeah. I think that's a great point. 'Cause when I was thinking of it, I'm thinking of the fun time, four-wheeling in the woods with your conversion van, 'cause that's what springs to mind. But, yeah, there's definitely a deeper story there, for sure.</p><p><strong>Marcy:</strong>              Yeah, I mean, I feel like it's a privilege to go out on these trips and just have the best time and not wanna come home and be like, \"Why do we have a home, anyway?\" And then we come back to it and I'm like, \"Oh, yeah.\" Nice to have a little more space.</p><p><strong>Joel:</strong>               What's the longest trip you've managed doing with your van in the backwoods?</p><p><strong>Marcy:</strong>              We went out for a month in September, October, for our honeymoon. And we came home in between to drop the dog off, so we could go mountain biking, and that was pretty awesome. I really liked Montana and there's some spots in Idaho that are really neat. And yeah, just getting out there. We were pretty glad to have a diesel furnace by the end of it, but it was super fun.</p><p><strong>Joel:</strong>               Yeah. To go from the escape back to, I think, our general reality ... You recently moved your entire blog from WordPress to Gatsby, and I talk about it all the time with anybody that'll listen, because I personally love Gatsby as a product and a company. But I was wondering like the technical experience of converting your space on the internet from WordPress, which is kind of traditionally the leader in that space, to this kind of new platform with Gatsby.</p><p><strong>Marcy:</strong>              Yeah, I told my husband it's like a once in 10 year affair to make that big of a move, for me at least. I don't have a ton of content, but, going back to I think my ... I originally moved onto WordPress in 2010. So, that's a long time to kind of get used to a way of working, and I just kinda got tired of all of the server maintenance. I was always worried about the vulnerabilities on my server. It's like, I'm not a full time ops person. So, I really like Digital Ocean, but I found once Gatsby came along, it was just a totally different way of working with ...</p><p><strong>Marcy:</strong>              You know, instead of having a database, you do a build, and then you push ... I mean now I'm using Git and Netlify, so I think it only really deploys changes, so you're not having to copy all of the files over, as if you were doing it manually. But I found it was a really awesome experience going from WordPress to Gatsby with the plug-in that they've made. So, it took some getting used to, for sure, and I just had to, I don't know, do some error debugging and it was really great kind of source material for my new job, which is the Head of Learning at Gatsby.</p><p><strong>Marcy:</strong>              Ultimately, I ended up completely detaching from WordPress. Like, the plug-in made it possible for me to ... It kinda built out my pages and pulled in all my content so I could at least bring my design vision to life. And then, ultimately, I detached from WordPress and moved all of my content into Markdown, and that was ... It could have gone smoother. I think I need to write a postmortem of like, \"Don't do what I did.\" But it was good, and I'm really psyched that I have a new site that uses CSS Grid and you can save stuff offline and it's like, the future is here.</p><p><strong>Joel:</strong>               Yeah. It's nice. So you mentioned in there, and it was probably one of the highlights of that, is ... So you're now the Head of Learning at Gatsby. Did the site migration happen- was that occurring before the job or was that as a result of the new position?</p><p><strong>Marcy:</strong>              It was occurring before the job and I mean, when I'm excited about something, I'm usually shouting it from the rooftops. So I think they had seen that I was working with Gatsby and Jason Lengstorf reached out to me and was like, \"Hey, I've been meaning to talk to you, actually. We have this role that you would be perfect for.\" And, at the time, I had taken all that time off for honeymoon and I felt like I really owed DQ, my former employer, some quality time. So at first I was like, \"Ah, I don't know if I'm ready yet.\" And then I took a closer look at what he was saying. I'm like, \"Wait, head of something? Good pay, benefits.\" I mean, DQ has great benefits, but every time you move jobs ... I mean, having to deal with health insurance and pay. It's a bigger decision than just the work alone when you have a family and a household.</p><p><strong>Marcy:</strong>              So, for us, this was just a really smart career move and it turns out that I'm really psyched about Gatsby. So, it's a perfect fit.</p><p><strong>Joel:</strong>               Yeah, it's definitely a bigger change than, say, moving your website from WordPress to Gatsby. Like uprooting your entire self and moving into a new position.</p><p><strong>Marcy:</strong>              My entire life. Yeah.</p><p><strong>Joel:</strong>               So, I know at this point in time, you've only been doing this job for, what, a couple weeks? But what is the Head of Learning? What is that position and what's your role there at Gatsby?</p><p><strong>Marcy:</strong>              I am in charge of the learning experience at Gatsby. And that's pretty broad. So, because the nature of Gatsby is that they are really putting a focus on community and making sure that the experience of using Gatsby is positive and, you know, if there's bugs and problems, that we're working through those. And so, documentation plays a huge role in that. Error handling, that's a big project I'm about to start. Just making sure that if people are stumbling on stuff that we're not just like, \"Whatever, it's not our problem.\" That things are getting fixed and addressed and documented.</p><p><strong>Marcy:</strong>              And so, I think they have done a really great job already of getting good docs, and they have a great infrastructure for it, great community. They just need somebody dedicated to it full time, 'cause there's lots of things to do and it's a startup. And at some point, you grow to a point where you need to create new roles for a certain amount of work, because it's too much for the founders to do, or whoever was doing it before. Currently, the woman who was doing Head of Learning before, Shannon, she is also a UX designer, a UX person, researcher, so she was doing two jobs and that's not super sustainable.</p><p><strong>Marcy:</strong>              So, I stepped into this role, and it's really cool being technical and so ... Like, this morning, we had a meeting on caching to talk about how to smooth out that experience, and so I got this core insight into what the team is doing so I can kind of look longer term at, \"Okay, well maybe we'll document this fix now, and then long-term, we'll have some other tool to make that easier.\" So, yeah, lots of things. It's sort of like I have to prioritize and pick the most important things because there's so much we could do but we only have so many hours in a day.</p><p><strong>Joel:</strong>               Yeah, it's like the eternal challenge, trying to figure out what's most important and what's next. Like, there's a lot of complex projects that you can do, and then there's a lot of relatively simple things.</p><p><strong>Marcy:</strong>              Yeah. And the relatively simple things could eat up your whole week. You gotta get those bigger goals in mind so that you can kind of move the needle further forward, rather than just these little things alone.</p><p><strong>Joel:</strong>               I've realized recently, with a lot of this. 'Cause I spent a lot of time thinking about how to teach people as well and I tend to try to turn everything into a software project when, a lot of times, it's more of a human need like a communication issue. Whether it's some sort of direct communication versus building some sort of software tool or robot to shield me from that communication, which has just been interesting to me.</p><p><strong>Marcy:</strong>              Yeah, yep. Yeah, sometimes the answer is just writing a good doc on it. But maybe you write the doc and you're like, \"Ah, this could be better.\" That's when, maybe long-term, there's more thinking around a technical solution that prevents the user from having to do what you documented in the first place. Or maybe there's an easier way.</p><p><strong>Marcy:</strong>              So, yeah, it's a really interesting role, because I'm the Head of Learning and Documentation, but they consider that pretty core to the product, so rather than just kind of being off in marketing or being off on the side, I'm on the product leadership team. So that for me, professionally, was a huge step forward, to be the head of something and to be in the conversations where we're talking about where we wanna go instead of being further down the chain and being like, \"Okay, yeah, sure. I'll go present at this conference but I don't really know how it's helping further the business goals of the company I'm with.\" So, I'm pretty excited.</p><p><strong>Joel:</strong>               I mean, it can. That's an extension too, right? Those presentations can and should be important and part of the overall strategy and messaging for a company.</p><p><strong>Marcy:</strong>              Absolutely, yeah. But what I think about is, you're kind of presenting on what's there now and not looking too far forward. Like, maybe there's some new technologies you're being exposed to, but what happens when you bring that information back to the team? You're like, \"Hey, there's this really cool thing going on. We should be thinking about this.\" If that stuff never ends up happening, you're kind of ... It's like, okay. I don't know where we're going.</p><p><strong>Marcy:</strong>              So, yeah, to be in those conversations where decisions are being made of which direction we're going in is ... I personally felt ready to take on more responsibility like that, so it was great timing.</p><p><strong>Joel:</strong>               Overall, what you kind of see is the potential for Gatsby in terms of a platform, like what kind of impact can it have on the internet and how people communicate.</p><p><strong>Marcy:</strong>              I think it could have a huge impact. I mean, WordPress has dominated for a long time. What's the stat? It's like 33% of the internet or something. And I don't necessarily think that's going away, but the thing with WordPress is that it's really centered around the authoring experience. And I could go off into that, but I'm not. I will spare you my personal opinions of that.</p><p><strong>Marcy:</strong>              But what I wanna drive home is that the front-end development experience for that is like, you're writing PHP, you're kind of writing sites in a way that used to work very well. But if you have a lot of traffic, you gotta cache it, you gotta add a plug-in for that. If you are doing a lot of stuff in developing markets and on low-powered mobile devices, you're gonna have to do a lot of extra work to make that content render quickly and work in all these scenarios.</p><p><strong>Marcy:</strong>              So, Gatsby presents a way of developing front-end code that really looks forward, looks way more to the future. So no database, no PHP. You know, it builds out static HTML, which as an accessibility person, I really love. I'm kind of in this position where I care a lot about JavaScript, but I also care about accessibility. And so, yeah, Gatsby just gives you this new way of developing that outputs static files but you have this rich interactivity opportunity at the same time.</p><p><strong>Marcy:</strong>              So, I think it's really pushing the needle on the innovation of front-end development. And where I see it growing in the future is to kind of democratize that experience with themes and have an ecosystem so that, if someone isn't a hard-core React developer, or even a JavaScript developer at all, that they could still use Gatsby. I think we're pretty early in that part of the story right now and it's definitely positioned more at developers, but I think long-term, there'll be more of an ecosystem to support more collaboration with your colleagues. So, there's definitely more to come on that.</p><p><strong>Joel:</strong>               And right now, it feels like a very strong opensource development project with a huge upside potential going forward. You mentioned your experience. On the internet, I see you a lot, you're a champion for accessibility and empathy-driven development, and I'm wondering how your experience and perspective is going to help Gatsby along the way in reaching that potential?</p><p><strong>Marcy:</strong>              It helps that they're super open to that stuff already. I know I was sold when I did my kind of initial test of Gatsby and I did a build and I'm like, \"Does this work without JavaScript?\" And it does. I mean, depending on how you build your app, but ... I didn't use client-side routing in mine, because I wanted actual static pages and I'm not doing a ton of interactivity. I have some longer-term vision for my home page that GraphQL really makes a lot of sense. So that's why I chose this technology.</p><p><strong>Marcy:</strong>              But, we can't leave people behind, so that's something I'm thinking about a lot. Maybe this will dovetail into ... I think I saw you had a question about the kind of CSS versus JavaScript debate. So, I definitely am excited to have an impact, to ask hard questions like, \"Are we doing enough for this group of people?\" You know, \"Is this as accessible as it can be?\" But they're already proving to be such an open-minded, caring team that I think I'll be in good company there.</p><p><strong>Joel:</strong>               Yeah, they really do. And it's not just paying lip service to everybody in the organization. It's truly something they're behind and wanna effect change and push forward in a positive way.</p><p><strong>Marcy:</strong>              Yeah.</p><p><strong>Joel:</strong>               So you mentioned JS, JS, JS. Which has been something that's kind of blown up, you know. There's lots of rants on, I think, both sides of this idea. But I think the general premise is that JavaScript is eating the web and it's making it more and more difficult for folks that have traditionally had a different direction into web development through HTML and CSS, or other kind of maybe more accessible approaches.</p><p><strong>Joel:</strong>               How do we reconcile that and how do we be more inclusive, as people with experience that understand these things more completely? How do we make space for newcomers in our industry?</p><p><strong>Marcy:</strong>              Well I think it starts by recognizing that HTML and CSS are still here.</p><p><strong>Joel:</strong>               They are?</p><p><strong>Marcy:</strong>              I have definitely seen hot takes on both sides. And one from Kevin Wheeler that's like, \"You could still save a HTML file, right?\" Yeah, you can. I think the challenge is in jobs where people are having ... it's impacting their career. And I think it's totally understandable that there would be a lot of fear and uncertainty from folks who feel like, \"Well, crap. How am I gonna make a living?\"</p><p><strong>Marcy:</strong>              And the decisions being made on tech teams don't consider that, necessarily. Where this is really challenging is, sometimes that might be the right technology for building out a web application. And what I'm wondering is, maybe there's other, supplementary work that would make it possible for folks to contribute, like UI prototyping. Before you write your application in React or whatever technology you've chosen, building out your UI with static files first to just ... Prototype things, making sure they work.</p><p><strong>Marcy:</strong>              So I think there's definitely room for that role, it's just where it's tricky is like, if you're building an application. I don't know, it's these choices in tech stacks. There isn't a good choice sometimes. You're picking the thing that'll make a high-quality, well-performing web application. Where does HTML and CSS fit into that? It comes down to the individual tech stack decisions. And I think there's maybe some smaller decisions we could make, like, maybe don't use CSS in JS. I don't know. That's a really controversial one.</p><p><strong>Marcy:</strong>              I personally like a static CSS file. That's what I did for my site. I think maybe you could use CSS includes instead of ... So what I'm talking about is, you know, style components or something, where you have in-line CSS in your templates. And some people really like it.</p><p><strong>Joel:</strong>               I'm raising my hand, actually. So I'm on the other side. My relationship with CSS has improved so much over the last, say, year and a half or so, since we started ... We use InMotion, which is styled components and same kind of principle. But this idea that my styles are really close to the elements and I'm not having to give them- like conjure up names for things, and everything's just kind of right there, for me has been a huge ...</p><p><strong>Joel:</strong>               I've traditionally said I hate CSS. And that's a mindset, right? But, I actually really enjoy what it does for the internet and I think it's a great tool. But moving it closer to the elements has been great for me. But there's two sides to the argument, just like you said. It's hard to pick a winner and it's really kind of almost team and project and organization-based at that point.</p><p><strong>Marcy:</strong>              Yeah, I mean, there's so many ways to build things. I think a good intermediate step would be, let people write static CSS and then import it. That would be a good compromise. I personally started with a static CSS file because I share styles across components. And, at least for my initial build, the refactoring required, like if I changed something in one place ... I just didn't have a good system for that. And I'm a team of one on this project, so I think that works. It doesn't exactly scale though.</p><p><strong>Marcy:</strong>              If you're working on a big team, you can't all be working in the same giant CSS file, nor do you wanna load a giant CSS file.</p><p><strong>Joel:</strong>               I think we literally use like every way that you can possibly use CSS on our primary [inaudible 00:19:25]. Literally every single approach to CSS is in use, from tacking ons to static files, to SAS, to importing, to CSS modules, to InMotion. Like, \"Oh, it's just 'cause it's a five-year project, right?\" So as it's evolved over those five years, we end up with just this stack of ... It's a mess.</p><p><strong>Marcy:</strong>              Yeah. I mean, sometimes you need a good in-line style. And if you are writing a React component, doing it in-line makes sense. Like I do some of that, but if I want things to be reusable, I usually will put them in CSS and then I just use the CSS class. So I'm kind of like a bridge between the static CSS side and the JavaScript side.</p><p><strong>Marcy:</strong>              I wrote a thing on Twitter that got a lot of commentary, and I was just like, \"Can we focus on making stuff that works for people regardless of what the tech is?\" Because I see so many inaccessible projects, and we only have so much energy. Can we focus our energy on just making stuff that works for people instead of so much on our own fear.</p><p><strong>Marcy:</strong>              And I felt like I was coming from kind of a wholesome place, but getting all those responses of people of how worried they are and there is a genuine concern. And I ended up writing about leadership in that I think it's a failure to not listen to people around you and not give them some empathy. So, it's a really challenging situation to find solutions for quickly. But I think the first start is just listening to people and hearing their genuine concerns about things and not just shrugging it off like, \"Ah, whatever.\" Because a lot of us, as we get more senior in our careers, are making decisions about products and about teams that can impact the people around us. It would be a real shame to not pay attention to those around you in your industry and just kind of, I don't know, look out for number one.</p><p><strong>Joel:</strong>               Yeah, it's kind of like the got mine attitude, right? Like we need to not have that, in my opinion, right? We've made it, we broke through, we understand how to code and can write JavaScript and software and do all this fun stuff, but not everybody can. And just because we have reached that point doesn't mean we have to stop thinking about those folks that are still trying to get to where maybe we're at.</p><p><strong>Marcy:</strong>              Totally, yeah. You might really miss out on some innovative, front-end engineering by going straight to a JSX and stuff. Whereas maybe in your organization, there is room to hire someone who really kicks ass at CSS, and they could create something so innovative in the way of working that they can really be successful, and then maybe you convert that into the UI for your application. You make sure it works, you validate it in CSS and HTML, and then you divide it up into components later.</p><p><strong>Marcy:</strong>              So I think the UI prototyping role is super important, especially for products that live on. So I think just recognizing that that's a skillset that can be super valuable to your organization is a really good start, whereas I think some of the fears around like, \"Ah, we don't need that. We're just gonna have a full stack grad do this,\" but they didn't learn that part of the job, so ... Yeah, I think there's room for lots of different ways of working and I think our goal should be to make the most successful products we can. And sometimes having people whose expertise is making a really solid UI, they might be better in HTML and CSS. We should embrace that.</p><p><strong>Joel:</strong>               For egghead, we'd done that, actually. And it's been really great for us. The way we approach things is different. We're not a high-stress organization in general, just 'cause I can't handle that and I don't want that. We have two folks that started with us. One as a pure designer, just doing comps and layouts in respect, who has learned CSS and JavaScript and development over the last several years. And then somebody that just did CSS and HTML and would just do static comps. It was just me and him for a long time. He would do static comps, I would implement them, in Rails, at the time, or React going forward.</p><p><strong>Joel:</strong>               But over the years of working with these folks, they have those fundamental skills and are really good at that, but then can also implement these things as React components now at this point, because we've done code reviews and talked about it and learned over time. And it's really been actually pretty great and now we have a working relationship and this really, truly full stack of skills. Which to me, if you're really talking full stack, it goes ... design and comps is part of that, to me, through all the way back to the database or wherever you draw the line at a full stack.</p><p><strong>Marcy:</strong>              Yeah. Man, that's a lot of skills to have to be a master at.</p><p><strong>Joel:</strong>               Isn't it? It's a lifetime.</p><p><strong>Marcy:</strong>              Yeah, it is a lifetime. Well and, not everyone's gonna be passionate about all of that stuff.</p><p><strong>Joel:</strong>               No, no. And you can stop at any point in that line. I don't know Sequel at all, really. I'm like a two-finger, look up, stack overflows Sequel person. I can do it if I have to, but it's gonna take all day.</p><p><strong>Marcy:</strong>              Yeah. Well, I think it's worth reminding everyone that we've kind of always had this problem, like with databases and server-side languages that you didn't wanna write in. So, it's like, this isn't exactly a new problem, it's just that now, CSS, you can write it in JavaScript.</p><p><strong>Marcy:</strong>              But if you were writing stuff for CMS or ... I mean, I remember doing stuff for Target where stuff was written in Java. And you kind of had this front-end stuff sprinkled in there. And yeah, getting me to write Java in that circumstance was like, no way.</p><p><strong>Marcy:</strong>              So I would definitely prototype outside of the real environment. And I don't think that's really changed, necessarily. It's just that now, with JavaScript, a lot more of us can write in the front-end. So it feels like it's swallowing the world because now we can do more. But I kinda think that this problem has existed in some ways the whole time.</p><p><strong>Joel:</strong>               There's a lot of interesting solutions being done, too. 'Cause there's like Webflow and Figma and these other tools that feel like bridge tools, to me. To bridge those worlds and help ease the pain and do integrations and exports and different things to take the design side and move that forward.</p><p><strong>Joel:</strong>               So I think there's hope, and I actually personally believe that we're in the best place that the web has ever been. But it's still not great and we have to work to improve it over time.</p><p><strong>Marcy:</strong>              Yeah, definitely. And yeah, that's the thing is we have to keep working at it to improve. And the web is more complex than it used to be. It's also kind of bad for humanity at the same time.</p><p><strong>Joel:</strong>               It's so weird. It's like, the phones ... It's like the worst best thing. I don't know. The whole is just weird to me at the end of the day.</p><p><strong>Marcy:</strong>              The comment section.</p><p><strong>Joel:</strong>               Man. Is shaming and scolding the way forward?</p><p><strong>Marcy:</strong>              No.</p><p><strong>Joel:</strong>               Like should we be calling people out more and doing that sort of thing? What's another approach? We won't even talk about shaming and scolding, but if we wanted to choose something different, how can we be more inclusive in our encouragement to folks that we think are doing the wrong thing?</p><p><strong>Marcy:</strong>              Well, I think it starts with listening, and I definitely try to do my share of that. Someone called me aggressive recently, or they were like, \"I think you're being too aggressive.\" And I'm like, \"Me? Really?\" But even then, I'm still really taking that to heart. So I think it starts by, yeah, listening to people around you and trying to be someone that people wanna work with.</p><p><strong>Marcy:</strong>              I saw this a lot with accessibility, with the kind of carrot and stick conversation. Yeah, it really doesn't work too well most of the time to jab people with a stick and shame them into doing something. I've found that if you're excited and forgiving and encouraging, then they're like, \"Oh, cool. Yeah, I can do this.\" And they feel like, \"Oh,\" you know, they're not mad at me. So yeah, I think the encouragement is definitely the way forward, but it can be hard, because we're humans and we get frustrated and we have valid points sometimes. I bend over backwards trying to be as nice as I can sometimes and I know for a lot of women, that's true. Especially for a lot of women of color, as well, where you have to be endlessly nice or people will call you aggressive.</p><p><strong>Marcy:</strong>              And yeah, so women I think innately know this very well. But in general, I think we do the best we can. I would like to see the thought leaders, with their hot takes, maybe cool it sometimes.</p><p><strong>Joel:</strong>               It's always people just demanding that people do what they want them to do. It's, \"Hey, you need to do this right now.\" Instead of starting a conversation or listening. Like you personally giving us feedback, like egghead, 'cause I'm the first to admit, we're not the most accessible site in the world. For one, we're delivering video but we weren't ... our transcripts weren't great, we didn't have close captions, and you gave me feedback and it really made me think. And the way you delivered it, actually, I didn't feel defensive, I just wanted to participate and be better. And it was much appreciated. So, all of that feedback you've given us over the years has been much appreciated, just to let you know that.</p><p><strong>Marcy:</strong>              Oh, thank you. Yeah, I see or hear from colleagues with disabilities, like the trouble they have, and I can hear the frustration in their voice. The situation for people with disabilities on the web is pretty horrible sometimes. And so, if I can hear them and try to take their concern and the barriers that they're hitting and then try to, I don't know, use my power and influence to make it better for them somehow, I think I've done a good job.</p><p><strong>Marcy:</strong>              So, yeah. And it's always a work in progress, too. Nobody expects you to fix it in the next release. You chip away at it, do what you can, get more feedback, and it's always a process. So, I think knowing that, as long as people are starting to do the work and then keeping on it over time, we'll gradually make things better. And educating people of it is the most important thing. And we kind of rag on full stack boot camps and stuff, just because there's so many that don't even really touch on accessibility or front-end fundamentals. If you go through one of those and you don't learn about HTML semantics and CSS, they should beef up their curriculum for sure.</p><p><strong>Marcy:</strong>              Because this stuff impacts real people. It's like, your choice in tech stack, to the end user, as long as it renders and they can use it, they don't really care that you used Redux or whatever thing it is that you picked. They care whether they can use it. So that's what I was trying to convey with this conversation and trying to corral our energy back to making stuff work for users, but what I ended up learning was I should listen more to the people around me and really try to ... I don't know. Just because I'm comfortable with it doesn't mean that I should just brush off everybody's concerns.</p><p><strong>Marcy:</strong>              I don't really have good answers other than listening more. Trying to use our power for good. It's tricky.</p><p><strong>Joel:</strong>               Listen more, try to improve things one step at a time. Build community versus building silos and being aggressive to one another. I think that's super great advice in general. Like it's a good lifestyle choice in my opinion.</p><p><strong>Marcy:</strong>              My stress level is way lower. Any time I get in any kind of a conversation that's a little heated, I'm just so distracted for the rest of the day 'cause I'm just like, \"Did I say something wrong? Could I be better?\" And it eats me up until I feel like I've grown and listened enough to, I don't know, not make the same mistakes and to do better next time.</p><p><strong>Joel:</strong>               Something that you've done recently that I thought was really interesting. You started your own local group, Northwest's Tech Women. And I was wondering if you could tell me about that organization that you started in Bellingham and what it's all about.</p><p><strong>Marcy:</strong>              Yeah, so it's a super small group, 'cause Bellingham is a small city. It grew out of the closure of Girl Develop It Bellingham, which was a one-off group. I intended to make it a full Girl Develop It chapter, but two, three years ago, that organization ... It's a national nonprofit encouraging women and non-binary adults in software. Unfortunately, I think they scaled too big, didn't have good processes, and maybe the wrong- not maybe. They do have the wrong leaders in charge. And I think it's really been disappointing.</p><p><strong>Marcy:</strong>              But, in the end, if we make better opportunities and we've learned, then it's not all bad. So, with Northwest Tech Women, I started a new group kind of with no constraints of a nonprofit that GDI had, and we can have social events. Once I kind of recover from the new job fire hose I wanna have more of a focus on volunteering. So, you could come meet with the group and say, \"Hey, I've got a little extra time and I wanna donate my time to a good cause, so we're gonna pair with some nonprofits and just have some little side projects that we can say we've done things in our community and tried to make an impact there.\" Whereas like, that never fit in the Girl Develop It model, really.</p><p><strong>Marcy:</strong>              They were always trying to fit into their model, but we were not a full chapter at the same time. So between that format mismatch and what I've learned about that organization ... There's some really hard-learned life lessons there about leadership. And I think we're all ... You know, we make mistakes. That's not unusual. It's what you do after you've learned you've made a mistake. Like, what do you do then? And I think it's that that pushed me to get away from Girl Develop It and create something new. Just knowing that we can do better in our community.</p><p><strong>Marcy:</strong>              I've been really grateful to be a part of a Girl Develop It alumni network. Lots of conversations about how much more we can do for women of color in our communities. Bellingham is super white. But I think I can still do more. And so, that's kind of how this new group was born, was having those tough conversations and making a commitment to do more for our community.</p><p><strong>Joel:</strong>               So if folks wanted to start a group like this in their own city ... Maybe they don't have one or maybe they're not happy with what's available. Do you have any advice for how to get that started?</p><p><strong>Marcy:</strong>              Yeah, well I think it really helps to partner with an organization that exists, as long as their values align with you. There is another effort spinning up, it's called We Pivot, and that, for women in tech, really is a values-aligned thing. 'Cause the problem with Girl Develop It is like, they said it in their mission. They literally said all of these values in their mission, but they didn't live up to it. And so, all of us, we're just tired of waiting.</p><p><strong>Marcy:</strong>              And so, doing something where you really put your values first and act on those, a group like We Pivot, that'll be a new nonprofit that you could partner with. If there's other groups in your organization, maybe go to an event and see if you wanna be a part of it. Knowing from running a chapter of a group, it's always really helpful to get help. For Northwest Tech Women, we kept it pretty low-pressure. So, it's just social, and that alone is such a value add in our community. 'Cause we get women showing up who are new faces from neighboring communities, maybe they work remotely in Sedro-Woolley or Anacortes or wherever nearby, and they come to the group and they're like, \"Yes, I found community.\" And we network and ...</p><p><strong>Marcy:</strong>              So I think you could even just have Code and Coffees. Maybe find a sponsor to cover your meetup fee. I just took that on 'cause that's my ... I can give back to my community by paying for a meetup group. So yeah, I think there's lots you can do just by starting small. I think it's easier to do that in a small city. Thinking somewhere like Seattle, there's just so many people that-</p><p><strong>Joel:</strong>               So much going on.</p><p><strong>Marcy:</strong>              Yeah, there's a lot going on and that can grow pretty unwieldy. So, having something established, like this new We Pivot group, could help. I mean, there's lots of other groups as well, like Black Girls Code and lots of different formats. So yeah, I think just finding one that aligns with your values and what you wanna do, and finding some time to contribute.</p><p><strong>Marcy:</strong>              I know it's given me a lot back in my life. So, I highly recommend it.</p><p><strong>Joel:</strong>               I think it's interesting too, the more casual approach where it's not about tech presentations, it's really more about sitting down and having conversations and talking to one another and just kind of interacting. I really appreciate that, 'cause I don't necessarily ... One, you don't have the pressure of always organizing and finding people to speak or whatever. But then you also just are there to hang out and kind of be a part of a community.</p><p><strong>Marcy:</strong>              Yeah, I think it helps to see people ... For women, it helps to see other women that are doing it. And we're all in different stages of our careers, so we can help each other network and talk about tech and just have our own environment where we feel comfortable. And we are a part of another group here in Bellingham called Bellingham Codes, and they have monthly meetups. So, we have a joint Slack, so there's definitely some crossover.</p><p><strong>Marcy:</strong>              But when I closed GDI Bellingham, I thought, \"Should we just roll into Bellingham Codes?\" And then ultimately I thought, \"No, I think this women's group that-\" we're gender inclusive, but just having a dedicated group for these type of conversations and for people to come in ... women and non-binary people, gender-fluid people to come in. It's like, it's just a different environment and there's something really special and magical about it. So yeah, it's super [inaudible 00:36:46].</p><p><strong>Joel:</strong>               I love that it's explicit, too. It's not like, \"Maybe I'm gonna be welcome here.\" You know, it's like, your values and your message is telling people that yes, regardless of whom you are, you're welcome here and this is a space for you. And we need more of that. There's lots of spaces for white dudes to go hang out and feel like they belong, but not as many that are explicitly expressing that in terms of core values. And I think that's important work and I appreciate that you're participating.</p><p><strong>Marcy:</strong>              Yeah, I mean, I think there's just lots of groups in general and for white guys and even white women, it just like ... We're just the default. You're welcome everywhere. I think it's for people of color and for women like, maybe you don't always feel comfortable. And so, that's where these spaces are born. It's not that white guys aren't allowed in this group, it's just that, I don't know, you wanna have a different vibe at the place. And so I think there's lots of room for different kinds of things. And we explicitly say, \"All are welcome, including your partner, or your friend that's a guy.\" It's not that you're excluded, and I've made that really explicit just because I get that question a lot, and I think a lot of women's groups get that a lot.</p><p><strong>Marcy:</strong>              Like, \"Am I welcome here?\" It's like, \"Heck yeah, you're welcome.\" As long as you know that you're signing up for a space where all questions are valued and we just wanna be together and network, yeah, it's totally fine.</p><p><strong>Joel:</strong>               It's a filter, and the good kind, in my opinion. Right? Like, \"You're welcome here as long as you can accept this is our core values,\" and \"You don't have a problem with that then this is a space for you too. But if you do, then maybe don't show up.\"</p><p><strong>Marcy:</strong>              Yeah. Yeah. Well and then the people who do show up, because they're like, \"Yeah, that sounds cool,\" they add to the conversation and it ends up being great. But I do think it takes good leadership and moderation to kind of walk that balance and know like, \"Maybe they shouldn't come back.\"</p><p><strong>Marcy:</strong>              So, having leaders that kind of recognize the vibe of the thing and the balance is important. But yeah, making it inclusive is also very important.</p><p><strong>Joel:</strong>               Well, Marcy, I really appreciate you coming and talking to me today.</p><p><strong>Marcy:</strong>              Well, I'll have to come and buzz by you in the van sometime.</p><p><strong>Joel:</strong>               Yeah, that'd be fun. Thank you so much. Cheers.</p><p><strong>Marcy:</strong>              Yeah, cheers to you.</p>",
    "slug": "heading-gatsby-s-learning-experience-and-bridging-gaps-with-marcy-sutton",
    "description": "<p>Marcy Sutton is the Head of Learning at GatsbyJS, but what does that mean? One of Gatsby's core focuses is the community, and a part of that is making the experience with Gatsby as friendly as possible. A large part of making Gatsby friendly is having <i>excellent</i> documentation, so that learning and debugging experiences would be smooth. </p><p>So the learning experience is smooth but what is Gatsby's potential on the web? Marcy talks about how Gatsby has the potential to make a huge impact. Currently WordPress is powering about a third of the web, that's huge, but it has its issues. WordPress is centered around the authoring experience but the front-end experience is not good. Gatsby is looking more towards the future, it doesn't use a database, it can build out static HTML, it's accessible, and it's also democratizing the experience with a themes ecosystem. </p><p>This brings up the point that JavaScript is eating the web and it's making it more difficult for folks who've had a different intro to webdev. This is a real challenge and people are having their careers impacted, what can we do to reconcile this? The decisions made by tech teams aren't considering this when the pick the technologies that they use, they're picking tech that's going to deliver a high preformance application, where does HTML and CSS fit into this? Marcy discusses how we can bridge the gap and find ways to include people with different skill sets. </p><p>Marcy also discusses the inclusive community that she has helped build, NW Tech Women, a small group out of Bellingham WA that hosts social events, but also volunteers and pairs with non-profits to make a community impact. </p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/7c3086d2/transcript\">\"Heading Gatsby's Learning Experience and Bridging Gaps - with Marcy Sutton\" Transcript</a></p><h3>Resources:</h3><ul><li><a href=\"https://twitter.com/NWTechWomen\">NW Tech Women Twitter</a></li><li><a href=\"http://www.blackgirlscode.com/\">Black Girls Code</a></li><li><a href=\"https://www.gatsbyjs.org/\">GatsbyJS</a></li></ul><h3>Marcy Sutton:</h3><ul><li><a href=\"https://twitter.com/marcysutton\">Twitter</a></li><li><a href=\"https://marcysutton.com/\">Website</a></li><li><a href=\"https://github.com/marcysutton\">GitHub</a></li></ul><h3>Joel Hooks</h3><ul><li><a href=\"https://twitter.com/jhooks\">Twitter</a></li><li><a href=\"https://joelhooks.com/\">Website</a></li></ul>",
    "duration": 2345,
    "episode_number": 40,
    "contributors": [
      "Joel Hooks"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/1p9j1",
    "path": "/podcasts/heading-gatsby-s-learning-experience-and-bridging-gaps-with-marcy-sutton",
    "published_at": "March 15th, 2019",
    "url": "https://egghead.io/api/v1/podcasts/heading-gatsby-s-learning-experience-and-bridging-gaps-with-marcy-sutton",
    "edit_podcast_url": "https://egghead.io/podcasts/heading-gatsby-s-learning-experience-and-bridging-gaps-with-marcy-sutton/edit"
  },
  {
    "id": "podcasts-00000000000000000116",
    "title": "Making Dumb Stuff That Makes Strangers on the Internet Smile with Sara Vieira",
    "summary": "Today we are joined by Sara Vieira, a developer advocate and maker of wacky stuff on the internet. She joins us today to talk about why she makes all of her weird experiments, how being a lazy developer doesn't mean she isn't doing work, the Redux cargo cult, why you shouldn't always use GraphQL, her meetups and upcoming conference for woman speakers, and of course making people smile. ",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/a7643d5a-69df-46b4-a484-28ca9b7d3909/a63f7af2_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/a7643d5a-69df-46b4-a484-28ca9b7d3909/1552423642artwork.jpg",
    "simplecast_uid": "a7643d5a-69df-46b4-a484-28ca9b7d3909",
    "transcript": "<p><strong>Joel Hooks:</strong>         Hi, Sara.</p><p><strong>Sara Vieira:</strong>        Hello.</p><p><strong>Joel Hooks:</strong>         I am always amazed at your ability to make weird demos. They seem to come out of nowhere, but I assume they have a point or purpose in your life. Where do you come up with these ideas to make wacky demos and then throw them out into the world? What drives that and what motivates you when you're doing these fun, interesting, technology related demos on the internet?</p><p><strong>Sara Vieira:</strong>        I can give you a really deep answer, or I can give you the normal answer.</p><p><strong>Joel Hooks:</strong>         What's the middle ground? What's the middle in between? We don't wanna get too deep on people.</p><p><strong>Sara Vieira:</strong>        Cause it's just starting, right? I think some of the ideas come from things that I need, some of the ideas are just random things that people say or that I say. Like one experience I was with a friend eating, I don't remember what, and we were talking about CSS and JS for some reason. And then we're talking about CSS and PHP and then I was like, oh, my God, dude, is there CSS in NDX? And he was like, no. I was like, I need to do that. He's like, why are you fucking doing that? I was like because I'm bored. And I think I have this thing where I get bored very easily, so when I'm bored I just make stupid things. Did you know there are 9015 airports in the world? I did because I scraped that all out of Wikipedia.</p><p><strong>Joel Hooks:</strong>         Just to get all the airports in the world, you're curious about how many airports there are and where they're at?</p><p><strong>Sara Vieira:</strong>        I'm making this website where you mark all the airports you cried in.</p><p><strong>Joel Hooks:</strong>         Oh, I like that.</p><p><strong>Sara Vieira:</strong>        So then you can list airports by the most cried in airports.</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Sara Vieira:</strong>        And then you can have like, the happiest airports in the world, the saddest fucking airports in the world.</p><p><strong>Joel Hooks:</strong>         The saddest airport.</p><p><strong>Sara Vieira:</strong>        It's gonna be a weird mix. I've had a question which was, what happens if I cry on the flight? If you cry on the flight, you have to mark both airports.</p><p><strong>Joel Hooks:</strong>         Yeah, that counts for both. Coming and going.</p><p><strong>Sara Vieira:</strong>        That counts for both.</p><p><strong>Joel Hooks:</strong>         Do you build these for longevity? I was trying to load makefrontendshitagain.party, and it didn't work.</p><p><strong>Sara Vieira:</strong>        What? No.</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Sara Vieira:</strong>        What?</p><p><strong>Joel Hooks:</strong>         And actually, your meme site didn't work last night either but-</p><p><strong>Sara Vieira:</strong>        What? Why is this not working?</p><p><strong>Joel Hooks:</strong>         I don't know, cause the Internet's horrible, but ... So I was curious if that's a strategy if they're just kind of broken that's a thing too but-</p><p><strong>Sara Vieira:</strong>        No, this is not supposed to be broken. I don't even know what error 451 is.</p><p><strong>Joel Hooks:</strong>         Yeah, I don't either. We're going to start debugging your website now.</p><p><strong>Sara Vieira:</strong>        Unavailable for legal reasons? What bitch? I think there's a problem with the party domains.</p><p><strong>Joel Hooks:</strong>         Oh, yeah. That's definitely a thing ...</p><p><strong>Sara Vieira:</strong>        I think we may have an issue because it says HTTP error 451, and apparently that's unavailable for legal reasons.</p><p><strong>Joel Hooks:</strong>         Oh wow.</p><p><strong>Sara Vieira:</strong>        But awesometalks.party works. I don't know, I'll try to figure this one out. I don't wanna email the German government though.</p><p><strong>Joel Hooks:</strong>         No.</p><p><strong>Sara Vieira:</strong>        That sounds like a lot of bureaucracy.</p><p><strong>Joel Hooks:</strong>         It does.</p><p><strong>Sara Vieira:</strong>        Yeah.</p><p><strong>Joel Hooks:</strong>         So, let's talk about awesometalks.party then. What's that all about? Where did that come from?</p><p><strong>Sara Vieira:</strong>        That was actually out of need, it's not a dumb thing. That was probably one of the non-dumb things that I made. Awesome Talks, I made it because I also end up on deep ends of YouTube that I do not wanna end up when I start watching talks. I start watching this really good talk and then all of a sudden I'm watching something about screw driving a motorcycle for some reason.</p><p><strong>Joel Hooks:</strong>         Yeah, alien invaders.</p><p><strong>Sara Vieira:</strong>        No, that's actually interesting. I'd watch the fuck out of that.</p><p><strong>Joel Hooks:</strong>         It's good.</p><p><strong>Sara Vieira:</strong>        I always had the issues of having a really hard time finding that and so I made that website. That one was actually on purpose. Also, the meme website is working, though. The meme website.</p><p><strong>Joel Hooks:</strong>         Okay. And this is another one that I'm interested in. It's here, I am Sara Vieira website, and it's the memes docz, right? Where does that come from?</p><p><strong>Sara Vieira:</strong>        Honestly that was because once I went to a conference called ...</p><p><strong>Joel Hooks:</strong>         There's the one picture that I think it's kind of the quintessential on why you're sitting there and there's-</p><p><strong>Sara Vieira:</strong>        Oh, that is fancy, the quintessential [crosstalk 00:03:54], it's from Fenton Newcastle.</p><p><strong>Joel Hooks:</strong>         Yeah, the flag.</p><p><strong>Sara Vieira:</strong>        Oh no, that was because I watched the England versus ... Oh yeah, we really like football this side.</p><p><strong>Joel Hooks:</strong>         This is a remake cause this is a meme made out of it. That's what's going on here.</p><p><strong>Sara Vieira:</strong>        Exactly, that's a meme made out of the meme. So the meme, it was basically because it was lunch and my talk was after lunch at Fenton Newcastle. And it was my talk about mental health and I was eating and I was like, why am I doing this to myself? Why am I telling people about my fucked up brain? Why do I hate myself? And Chris Almond took that photo and he has a lot of followers on Twitter, that's literally it. And then I started realizing that I'm very meme-able as a human being. There are a lot of photos that I have just look like Sharknado photos, they just look so bad that they are slightly good. So I started collecting them because I use them as reaction gifts for people.</p><p><strong>Joel Hooks:</strong>         Nice. So it's a resource for you to come back to people?</p><p><strong>Sara Vieira:</strong>        Yes. You might as well be on the Internet. So it's one of those things. Also, a lot of people seriously message me asking for my meme photo.</p><p><strong>Joel Hooks:</strong>         Yeah, so there are multiple birds being hit with that single stone, and that's good.</p><p><strong>Sara Vieira:</strong>        Yes, it's great. I'm really proud of this website.</p><p><strong>Joel Hooks:</strong>         This comes out of you before the talk on mental health, and you had a period of time where you were, basically every week ... Cause I think that's actually when we started communicating. You were writing the mail storm of every single week, you were in a different country giving talks at a different conference. Is it last year or was that the year before? Is that 2017, is when you were doing?</p><p><strong>Sara Vieira:</strong>        No, that was last year. This was right in the middle of it. This was the beginning of a month that I basically didn't go home for the entire month. I left on the 3rd of March and I came back home on the 4th of April. I went to four or five countries, I don't even remember very well. And that was the first conference. So I wasn't even tired at that time, I was just wondering why I'm doing this to myself.</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Sara Vieira:</strong>        Not the traveling, the speaking about mental health in front of people.</p><p><strong>Joel Hooks:</strong>         Oh yeah.</p><p><strong>Sara Vieira:</strong>        And also the traveling.</p><p><strong>Joel Hooks:</strong>         You had a blog post of the dark side of conference talks. It gets into this idea of the glamorous life of the technology conference circuit speaker, and how that relates and what that ends up. Because we see it, this is why people show up, cause they wanna see the speakers give their talks and blah, blah, blahs, and all that kind of stuff. But at the same time, when you're on the other side of the microphone, it's not free. There's a cost to you when you're doing these things.</p><p><strong>Sara Vieira:</strong>        I've gotten actually plenty of really good answers to that, and I think one of the ones that actually stroked me the most was ... Before I did that, a week before I canceled a bunch of conferences, four or five. And one that I canceled was FrontEnd Con in Poland, and after I released that post, two days later I got an email from FrontEnd Con and it was the woman that I canceled the conference too, thanking me for doing that post. She was like, I assumed it was hard to speak, but I never thought that you could actually affect someone in such a way and I wanna thank you for making me a better professional. And I was like, oh my God thanks.</p><p><strong>Joel Hooks:</strong>         As an organizer they have to think about that too, right? They should be. They don't have to I guess, but they should be thinking about the health of the folks.</p><p><strong>Sara Vieira:</strong>        If you've never been a speaker or anything, it doesn't really make sense for people to complain about free shit. I get it. I expected like nine out of 10 comments to be like, rich complain about free shit and one coming like, a got you fan. Actually, the Internet was really nice, which was weird.</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Sara Vieira:</strong>        I have really nice Twitter followers, it's really weird. I don't know where they came from but they're nice. I love them. They usually don't shit on me. It's great. I don't get man-splained a lot.</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Sara Vieira:</strong>        It's great. Once I got man-splained about taxes in Portugal ... I am Portuguese Joel. I know how our taxes work, he was like, no. And I was like, dude it's like this. We get robbed. That's why we're poor.</p><p><strong>Joel Hooks:</strong>         Yeah. That seems like a universal truth also. We don't wanna go down that hole.</p><p><strong>Sara Vieira:</strong>        Yeah.</p><p><strong>Joel Hooks:</strong>         I'm from the U.S. I don't understand U.S. taxes but I don't wanna be man-splained on U.S. taxes either.</p><p><strong>Sara Vieira:</strong>        Exactly. I think that's the thing.</p><p><strong>Joel Hooks:</strong>         Nobody wants that. Of all topics, pick something useful or interesting.</p><p><strong>Sara Vieira:</strong>        It was one of those things, because like in Portugal ... Okay, we're gonna get into taxes now because this is important and apparently this is not a thing everywhere else. It's like we don't have brackets. So imagine that you make 35K a year or whatever, our salaries are very low. It's okay. Imagine now you make 35K a year and the tax bracket closest to you is 30K. So usually, apparently which I did not know, but usually what happens is that you pay 30K of the other tax bracket, like the lowest one, and then those 5K go to the higher one. We don't have that, you pay 35K to the higher one and that's it.</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Sara Vieira:</strong>        So what happens is you can get a raise and get less money because you went up a tax bracket.</p><p><strong>Joel Hooks:</strong>         Yeah. That's a real slap in the face. No, I don't want my raise, keep me where I'm at cause I'm gonna do better.</p><p><strong>Sara Vieira:</strong>        Don't move to Portugal. Yeah, that happened to a friend of mine. He once got money for doing on-call, and she actually got less money and she was so pissed. It was so sad. I laughed, but she cried a bit [crosstalk 00:08:59].</p><p><strong>Joel Hooks:</strong>         I'd cry. I feel that pain actually. So I want to ask you another question about being a lazy developer. I think it's something that you claim that we all can maybe even aspire to. What does that mean when you describe yourself as a lazy developer, does it mean that we're not doing the work?</p><p><strong>Sara Vieira:</strong>        I don't think it's that we're not doing the work. I think first of all, I always try to come up with an easy solution for something that involves me writing less code and doing less things. And second of all, the main reason why I call myself lazy ... It's not even lazy, it's more of I do a lot of productive procrastination, and that's when you don't wanna do something so you do something else.</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Sara Vieira:</strong>        So imagine that I have to write a talk, and I just make a dumb website and people think, I was so productive. And I'm like, nope. I'm supposed to be doing a talk, I'm just not doing it, I'm doing this. And by lazy I actually mean I think the combination of the two things. It's not that I don't do things, it's that I do the wrong thing sometimes.</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Sara Vieira:</strong>        And then the things that I'm actually supposed to do take me forever. I think that's the main thing of a lazy developer. And for example there are things that ... I've been meaning to change my portfolio for six months, but if it involves any type of design work I'm like, it's gonna look like shit. I can see it looking like shit from all the way over here in Berlin. So I just procrastinate the hell out of it and that ends up in my head being a lazy thing, but it's more of a procrastination thing. I just procrastinate the hell out of everything. I feel like a lot of people are like this.</p><p><strong>Joel Hooks:</strong>         Because you're procrastinating yourself into a solution.</p><p><strong>Sara Vieira:</strong>        Yes.</p><p><strong>Joel Hooks:</strong>         How do you even ... All that design problem, right? So I'm just gonna wait until it makes itself easier or something occurs that I think of the idea to make it easier.</p><p><strong>Sara Vieira:</strong>        Until I get a girlfriend who's a designer and she'll just fucking do it. That sounds more likely than me doing it.</p><p><strong>Joel Hooks:</strong>         Yeah. That's how I feel about CSS work in general. I'm trying to improve my relationship with CSS, and you talked about ... I'm just imagining now cause I've been really loving MDX lately and now you're bringing CSS into my MDX, so I had this one last-</p><p><strong>Sara Vieira:</strong>        Am I ruining it or making it better?</p><p><strong>Joel Hooks:</strong>         ... Place where I was ... I would say if I don't need it ... Are you ruining it or are you making it better when you put CSS and MDX? That's a good question.</p><p><strong>Sara Vieira:</strong>        That is a very good-</p><p><strong>Joel Hooks:</strong>         I think you're actually making it better. You said it's making dumb shit but at the same time it's interesting to make that approach, and just thinking about that and can I do this? And then, is it useful to anybody else?</p><p><strong>Sara Vieira:</strong>        Weirdly enough it's useful for me though because MDX deck doesn't support CSS by default, you need to change either the layout or import the CSS loader or something. And actually if I just do CSSX, then I can use CSS in MDX deck, that's the thing I used to make slides. So it's actually slightly helpful for me because I can just put global CSS everywhere, but don't tell people that it's actually helpful. That was my cred.</p><p><strong>Joel Hooks:</strong>         So CSS and JSX and Markdown-</p><p><strong>Sara Vieira:</strong>        For slides.</p><p><strong>Joel Hooks:</strong>         And that's where we're at.</p><p><strong>Sara Vieira:</strong>        Oh my God.</p><p><strong>Joel Hooks:</strong>         To make your slide decks to give your conference talks.</p><p><strong>Sara Vieira:</strong>        Yes. Weirdly enough it's the easiest way for me that I got to make conference talks. I'm terrible at anything that's visual editing, that creates code or creates anything, I'm just terrible at it.</p><p><strong>Joel Hooks:</strong>         MDX is kick ass, or is it not? I've been blown away. I was a little hesitant at first, the idea of JSX. I think a lot of people already have a hard time with JSX, and then you're gonna combine that and put that in a Markdown document now. That's not what we do. Even me at first I was like, that's no good, but at this point I'm pretty much all in on the whole concept.</p><p><strong>Sara Vieira:</strong>        I think I was a bit hesitant like you were, I think most of us were. And then I used docz with a Z. Did you ever use that?</p><p><strong>Joel Hooks:</strong>         Yeah. I was just looking at that yesterday actually, it's pretty cool.</p><p><strong>Sara Vieira:</strong>        Yeah, so I use docz and I was like, this is amazing. Because the thing about docz is that you can create document, you create a style guide, you can create anything because it's react and I was like, this is amazing. We should all be building things with this. [inaudible 00:13:03] the things, this is so easy. I love this.</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Sara Vieira:</strong>        I feel like it's one of those things that you need to use it because it looks stupid. You're just like, why do I need this.</p><p><strong>Joel Hooks:</strong>         It does.</p><p><strong>Sara Vieira:</strong>        I don't need this. There's no point for me to have this. And then you use it and you're like, oh it's very niche, but I love it.</p><p><strong>Joel Hooks:</strong>         I've been thinking about the potential in terms of interactive training and teaching and presentations like you're already doing with MDX deck and just the ability to combine multimedia. To me, if PBS didn't suck, cause they've been trying to put flash and graphs and video and all that stuff in PBS for forever, Michael Adobe, but it never works because it wasn't accessible, it wasn't portable. But now you have Markdown and this is extremely portable format. So I can use docz but then I can take that and I can make a Gatsby side out of it next week if I feel like it.</p><p><strong>Sara Vieira:</strong>        That's the thing, you can do anything with it. Cause Markdown is readable everywhere, you can transform it to HDML, you can do anything you want. Markdown is one of the best things.</p><p><strong>Joel Hooks:</strong>         Everything should be Markdown, right? Like all your texts, to me, why wouldn't it be in Markdown in general.</p><p><strong>Sara Vieira:</strong>        I just literally [inaudible 00:14:10] that was to remove HDML files and turn them into Markdown. The terms and conditions were written in HDML and I was like, no.</p><p><strong>Joel Hooks:</strong>         Yeah, great.</p><p><strong>Sara Vieira:</strong>        You Markdown this shit. We Markdown this.</p><p><strong>Joel Hooks:</strong>         Yeah. Not on my website.</p><p><strong>Sara Vieira:</strong>        I am not gonna touch this HDML file, and he was like, oh this is great. I was like, yeah. I think the moment you realize that Markdown can be combined with Gatsby and that Gatsby can be combined with source, like Gatsby source plugins, your life just becomes so much better.</p><p><strong>Joel Hooks:</strong>         Like the idea they can take 15 different data sources and create a single unified graph jewel data source that now I can play with and build a site around, it blows my mind. It still blows my mind and I've built several sites doing it that way. It's just cool.</p><p><strong>Sara Vieira:</strong>        It's amazing.</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Sara Vieira:</strong>        It's really good. You can source things from meet-up, you can source things from ... Examples that I had was Jason files, Markdown files, you can get things from Medium, Content full, Airtable, everything on the same site. And I'm just like, how does this magic even work? I honestly have no idea how Gatsby works, and it's one of those things that I feel like if I figured it out it would lose all the magic.</p><p><strong>Joel Hooks:</strong>         Have you looked at the source?</p><p><strong>Sara Vieira:</strong>        No. I think it would lose all the magic. Should I look at the source?</p><p><strong>Joel Hooks:</strong>         It's the most intense Redux I've ever looked at. It's interesting. It's actually really well-built and it's probably the best use case of Redux that I've ever seen, if that makes sense. A lot of times you're like, you don't need Redux, why is everybody using Redux, which is still the most popular single course on our site, it's Dan's Redux course.</p><p><strong>Sara Vieira:</strong>        Really?</p><p><strong>Joel Hooks:</strong>         Yeah. Three years running, still the most popular content that we've ever put out by a long margin. It's an outlier in a big way.</p><p><strong>Sara Vieira:</strong>        Damn.</p><p><strong>Joel Hooks:</strong>         Every single day and people like our search term, people are searching up Redux. And that has to do with the fact that that exists on the site as part of that. Like Dan's course, people wanna watch that. But still it's like, all right y'all, maybe you don't need Redux, but you look at Gatsby and you see how they're using it and seeing what they've used Redux for and it's like, oh, okay. Here's what we're doing, cause it's like event sourcing and all that fun stuff which I don't fully understand, which is what Redux is based off of and it makes a ton of sense in the Gatsby context.</p><p><strong>Sara Vieira:</strong>        I think the problem that happened with Redux, and this happens with everything honestly. It's the hype train.</p><p><strong>Joel Hooks:</strong>         Yeah, the cargo cult.</p><p><strong>Sara Vieira:</strong>        Do you ever go on a website then dot church?</p><p><strong>Joel Hooks:</strong>         No.</p><p><strong>Sara Vieira:</strong>        It's a photo of Dan, and it gives me life sometimes. I just look at it, it's great. I think the thing that happened with Redux was that ... I could tell you a story about a friend of mine. She's gonna get mad at me again, but I don't care.</p><p><strong>Joel Hooks:</strong>         I just went to Dan dot church by the way. Okay, tell me your story about your friend.</p><p><strong>Sara Vieira:</strong>        Okay. So I have a friend of mine, we went to boot camp and then tried to get a job, like you do after you go out to boot camp. And she did an interview for a company, and the company asked her to make a simple app. It wasn't a to-do app, it was basically when you try to not make a to-do app so you make a movies app or something like that.</p><p><strong>Joel Hooks:</strong>         Yeah, the address book.</p><p><strong>Sara Vieira:</strong>        Yeah. It's basically a to-do app with a different name.</p><p><strong>Joel Hooks:</strong>         It's a to-do app but it's not. Yeah right.</p><p><strong>Sara Vieira:</strong>        Yeah, it's a to-do app but not really. And so she did it and she delivered it and she made it with set state because it's a to-do app. And they failed her because she didn't know Redux.</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Sara Vieira:</strong>        They were like, Why didn't you use Redux? And she was like, I've never used Redux. You can also just do this with this set state. It was for a junior position dude.</p><p><strong>Joel Hooks:</strong>         Yeah. That's why the Course is so popular though, right. It's a job thing to me and it always is, what's driving views on our courses. It gives us a really interesting look into the job market and what people are looking for in turn, because it's always what people are hiring for. That's what everybody wants. Everyone wants a good job so they can make money and not have to toil away all day.</p><p><strong>Sara Vieira:</strong>        What are the most popular ones besides the Redux one? What are people looking for right now?</p><p><strong>Joel Hooks:</strong>         It's React or Redux. Kraft Yell's huge, Angular is hard because it's split across RXGJ Angular and Typescript.</p><p><strong>Sara Vieira:</strong>        There's a lot of React people using Typescript now.</p><p><strong>Joel Hooks:</strong>         Typescript has picked up in the last six months like nobody's business. But you've also seen it ... It's Microsoft coming in there and it's job-</p><p><strong>Sara Vieira:</strong>        VS code man.</p><p><strong>Joel Hooks:</strong>         Yeah. VS code has definitely something to do with it. It's like they get a wedge because it's all ... A big part of it to me is marketing, they're big budgets to get these technologies in front of people, and VS codes eating the entire IB market right now because it's great.</p><p><strong>Sara Vieira:</strong>        It's beautiful. I honestly I'm okay with that.</p><p><strong>Joel Hooks:</strong>         I love it.</p><p><strong>Sara Vieira:</strong>        I love it. Before I used to use Adam which I think is actually way better now.</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Sara Vieira:</strong>        The only problem I had with Adam was I was slow. I literally just used to should be as good as we got. We go so fast, and I was like, it's fucking electron, it's never fast, why are you lying to me? Apparently they fixed the electron.</p><p><strong>Joel Hooks:</strong>         I was throwing VS code into CodeSandbox is the most insane thing that I've seen in quite some time. It's just bizarre to me because at the end of the day they're electron apps, right?</p><p><strong>Sara Vieira:</strong>        Yeah.</p><p><strong>Joel Hooks:</strong>         So their page email, JavaScript and CSS, like ostensibly-</p><p><strong>Sara Vieira:</strong>        But they have a lot of node features, so it was actually had to probably feel a lot of ... It basically made node to work on the browser. So there's a browser to that FS that he has, which is basically the FS-</p><p><strong>Joel Hooks:</strong>         That's like his hobby though, right? Making node work in the browser is his hobby?</p><p><strong>Sara Vieira:</strong>        Yeah. So the next thing which was already shown at ... I'm sure it's completely fine is that Codex extensions work now. So I think the most amazing extension that works ... Did you ever use View in VS code?</p><p><strong>Joel Hooks:</strong>         No, I haven't used View very much.</p><p><strong>Sara Vieira:</strong>        So View has an extension called Vitter and it's literally the only extension he gives for View because it comes with ESLint, [inaudible 00:19:43]. It comes with syntax highlighting, it comes with literally everything. It made that shit work in the browser and I'm just like, I have no idea how you do ... I don't wanna even look at that code. I don't even wanna touch it. I feel like if I touch it I'm just gonna break it. So yeah, extensions now work. Oh so you have vim mode and everything now.</p><p><strong>Joel Hooks:</strong>         Yeah. I saw the pop up come up, then I was like, I thought that worked already but now it makes more sense. I haven't seen the talk yet. I'm here to check that out.</p><p><strong>Sara Vieira:</strong>        I don't think that talk was recorded. It was a 10 minutes talk.</p><p><strong>Joel Hooks:</strong>         Okay.</p><p><strong>Sara Vieira:</strong>        I don't think it was recorded.</p><p><strong>Joel Hooks:</strong>         Okay.</p><p><strong>Sara Vieira:</strong>        It was just something like, we made extensions, we're gonna ... One really good thing about Eve is, I feel like no one appreciates. It's like he says we a lot, so it was me, him and Boaz, we were on stage showing the new things of CodeSandbox. He was like, we made extensions work in a browser. And I was like, Eve, that was you babe. That was all you, I didn't fucking touch that. I have no idea what you're talking about. He says a lot of we when he means he, and I'm just like, oh sunshine.</p><p><strong>Joel Hooks:</strong>         My favorite story is the day that they released the ability to donate or become a patron and I went to the slider and I was on Twitter and I was like, it doesn't go up high enough.</p><p><strong>Sara Vieira:</strong>        Still doesn't.</p><p><strong>Joel Hooks:</strong>         I had to hack it, I had to get in there and literally hack it and you can force it that way, you can hack it to make it go higher. It doesn't go high enough still, I think it's still stuck at the same level.</p><p><strong>Sara Vieira:</strong>        Yeah. I think the max is still 50. We got a Twitter thing a couple of days ago being like, free marketing, no free tip, make your slide go high.</p><p><strong>Joel Hooks:</strong>         No, I went in and I literally ... Cause you can go in and you can edit the source of the HDML and make it go higher. It's not protected, you can give more money, you just have to-</p><p><strong>Sara Vieira:</strong>        I don't think we should though, I don't think that's the thing we should protect.</p><p><strong>Joel Hooks:</strong>         No, I did. That's what I did. So I was able to give what I felt was appropriate. Cause we're literally using CodeSandbox across ... It's like a quarter of our business and I love it so much and I wanna support this project. It's bootstrapped, it has everything that I love about a project and just simplicity, but then the features keep coming at this crazy pace and it's so useful and it has so much to offer, and it's like, I'm totally down to pay for that. I wanna pay and help this project not just in some sort of altruistic sense but because it's amazing. It's really awesome.</p><p><strong>Sara Vieira:</strong>        I feel like one of the reasons that I started contributing to CodeSandbox was also because it's actually not hard to start contributing to it if it's actually very helpful. I don't think it was the first one, but one of the first things that I did was that when I did workshops, it kept happening to me that I saved the thing and then I was like, so let's do this exercise and I'll start typing in it. And then I lose the start of the exercise, I bet this happens to everyone. Every time I think I'm special Joel, fucking damn it. So I made a slider that just freeze the sandbox, so that means that if you try to edit it when you save it you actually just force it. It was intense, trying to figure out what the fuck was going on with that state management. After you figured it out it's actually pretty good.</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Sara Vieira:</strong>        It was so friendly and everyone was so friendly and it was something that I already used and I was like, oh my God, I could actually help on this. It's something that I use, I already am a patron to it but this is something that I use and then I can actually make better. I actually have a voice in this. I think it was the first time that I was like, oh shit, I have a voice now. I can make things, I'll just go merge more things.</p><p><strong>Joel Hooks:</strong>         That's gonna help you and it's gonna help a lot of other people too. I don't know the daily use statistics on it but I have to imagine they keep going up and up.</p><p><strong>Sara Vieira:</strong>        I actually have no idea, but I researched one thing for a talk.</p><p><strong>Joel Hooks:</strong>         Are you clicking that?</p><p><strong>Sara Vieira:</strong>        Yes. CodeSandbox has been around for like a year and a half. There's 32755 results for to-do app, so it has a lot of people.</p><p><strong>Joel Hooks:</strong>         A lot of people making to-do apps.</p><p><strong>Sara Vieira:</strong>        I was so sad that Ben doesn't actually give you the number of results for search because I think that would have been amazing.</p><p><strong>Joel Hooks:</strong>         Yeah. A lot of people wanna get to-dos done. That's what I know.</p><p><strong>Sara Vieira:</strong>        I have a friend who actually started working at a to-do app company and she was like, all the interviews prepared me for this.</p><p><strong>Joel Hooks:</strong>         Yeah. It's everything. It's all just come together now and this is the pinnacle.</p><p><strong>Sara Vieira:</strong>        Yeah. She's like, I got this. I'm good, I'm moving, this is great.</p><p><strong>Joel Hooks:</strong>         So speaking of state management, what's your go-to? How do you manage state in your reactor.</p><p><strong>Sara Vieira:</strong>        I try to go with set state if I can. If its small things ... By set state I mean either hoops or set state or context. The core react things-</p><p><strong>Joel Hooks:</strong>         Yeah, the built-ins.</p><p><strong>Sara Vieira:</strong>        Yeah. The moment you put something on, you will increase the difficulty of the app. If I'm using GraphQL and I need a lot of state and not just stating contexts, I will use what comes with Apollo,[inaudible 00:24:34], evolving state and that basically allows you to manage state with GraphQL. Which I really like if I'm using GraphQL mostly because if you're already writing GraphQL query so you don't have to get that mind shift to go from GraphQL to another thing to manage basically just another Jason File, every state is just the Jason object. This is it, this is the moment, this is the groundbreaking moment where I tell everyone that state is just an object and everyone's like, I know Sara shut the fuck up. And if I'm just using GraphQL, I really like Maven by Michelle Sprostater. I think that's how you say his name, and it's really nice. It's reactive and you can also use that with Maven state tree which allows you to have types and everything. So it's actually pretty nice.</p><p><strong>Joel Hooks:</strong>         It's my favorite library for state management for sure. It just makes a lot of sense and it's lightweight and it's kind of opt in. It doesn't have to do everything, it can just do the small things where you need that extra special state management.</p><p><strong>Sara Vieira:</strong>        Yeah, exactly. I feel like it also doesn't really slow down your development and a store, because you can just pop it in and start doing it. And I don't know, it's just nice. I feel like it's one of those things that's just nice. It feels nice, I never had any growing pains with it so I'll just stay with it.</p><p><strong>Joel Hooks:</strong>         And it rides through, it's had a lot of change and react in the last six months and hooks are here and suspense is on the way and all this stuff, and I feel like Mobex is going to ride those waves.</p><p><strong>Sara Vieira:</strong>        Yeah.</p><p><strong>Joel Hooks:</strong>         And still be there and still be a useful tool even when it all settles down.</p><p><strong>Sara Vieira:</strong>        Yeah, that's the thing.</p><p><strong>Joel Hooks:</strong>         Are you all in on GraphQL? Is that your go-to whenever you sit down to do a new app? Is it GraphQL or ...?</p><p><strong>Sara Vieira:</strong>        If you have an end point that's gonna [inaudible 00:26:15] just make it Rest API.</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Sara Vieira:</strong>        There is no point to making a GraphQL API for something like ... Imagine that you have a weather app and it just returns if it's raining or something like that. There's no need to make a GraphQL API, just send some Jason. But if I have two or three layers of data that I can actually combine, if I have cars and people and storage facilities for cars, then I will use GraphQL because I can combine all of those into one thing and make less stupid requests. But honestly if it's one call or two calls that you have to make in your app and if all of that is fetch, there is no need to use GraphQL. There's no need to add that type of complexity to your front end and back end and everything because it's two calls and it's fetch, just make a fetch API call. I think one of the things is that we tend to be gentle like ... I forgot the name you gave before the hype train.</p><p><strong>Joel Hooks:</strong>         The cargo cult.</p><p><strong>Sara Vieira:</strong>        The cargo cult is great. I love that. And if you try to use a hammer for everything, it's not gonna work. It is gonna work but it's gonna be terrible and it's gonna fuck up your whole house.</p><p><strong>Joel Hooks:</strong>         Yeah. You're trying to get in there and fit in something that doesn't fit just because it's popular or some thought leader told you that this is the way.</p><p><strong>Sara Vieira:</strong>        Yeah, exactly. Don't do it. If you look at something and be like, this would be easier to do with rest, than you could probably do with normal rest call. The reason GraphQL was created was because of big things.</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Sara Vieira:</strong>        It was because of big stuff like ...</p><p><strong>Joel Hooks:</strong>         Facebook.</p><p><strong>Sara Vieira:</strong>        Facebook, yeah. But I think the best example of GraphQL and its use is that you get API. If you try to get three or four things and they get API and the rest one you cry because you have to make a shit ton of requests that give you so much data. And if you're using the GraphQL API, you just make one call and it's great. And that is a really good use. I think that is the power of GraphQL, but if you don't need that type of power there's no need to have that type of complexity and force yourself to use it just because, yeah I use GraphQL now. Cool.</p><p><strong>Joel Hooks:</strong>         So if you're building an app then you don't necessarily start at GraphQL? I don't know, it really depends. And then to me it feels like hybrid solutions are gonna be here for a long time for what we have. We're making fetch calls, and we have a GraphQL API and we're doing a hybrid approach.</p><p><strong>Sara Vieira:</strong>        Yeah. I feel like that's gonna happen. Also, one of the trends that I've been seeing a lot, and I actually really like it, is to just wrap rest end points with GraphQL. So if you have rest end points you can just wrap it with GraphQL and it works pretty okay and I really like it. And I think we're still gonna do both things for a long time, but for example, for Awesome Talks I picked up GraphQL automatically because I knew I was gonna have speakers and talks and probably categories and everything. I feel like that was gonna be easier with GraphQL.</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Sara Vieira:</strong>        So if I have something like that I'll pick up GraphQL automatically, but if I have a weather app ... I just did a weather app a couple of weeks ago, there's no need to pick up GraphQL. Let's just put a function on [inaudible 00:29:19] and call that function. It's just basically like an express end point, so lambda. A middle lambda, I'm proud of myself.</p><p><strong>Joel Hooks:</strong>         They're making it easier. Cause first I was like, I don't think I wanna fire up the AWS console for whatever that is. But now with ZEIT and Netlify, they're pretty nice functions right there in your face and make it a lot easier, which I appreciate. I've only made one function personally so I'm getting there. I'll be server list one day.</p><p><strong>Sara Vieira:</strong>        I'll probably never be suitable.</p><p><strong>Joel Hooks:</strong>         Probably not.</p><p><strong>Sara Vieira:</strong>        I like my service.</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Sara Vieira:</strong>        I feel like we don't appreciate Netlify, and love for one thing is that they allow us to put anything on the Internet.</p><p><strong>Joel Hooks:</strong>         Quick too.</p><p><strong>Sara Vieira:</strong>        Yes. And it's not for someone who is starting out, it's not easy. Netlify is more because you can just plug it in with Get Hop, but if you don't know a lot of get hop then you still can't do it. But if you have some get hop experience and anything, you can put anything on the Internet. And that allowed us to make so much dumb shit, and I love it.</p><p><strong>Joel Hooks:</strong>         Yeah. It's like it's dumb shit party time for sure, and if somebody sets it up for you, you're set. Okay, now you just have to get pushed and then it just works. It's amazing because it does, it just functions as expected. It's really glorious.</p><p><strong>Sara Vieira:</strong>        And that's literally all we needed. And I think up until now all we got was a lot of things that a lot for scalability and blah blah blah and I was like, but I just wanna put things on the Internet. Why do you all hate me.</p><p><strong>Joel Hooks:</strong>         That's why WordPress is whatever massive percentage of the Internet. It's because it was just, okay, I can just go punch two buttons and now I can do some configuration and look at my Website and just made it relatively simple. And this is still a little more technical I think than, I go to wordpress.com and firing up one of their instances or whatever. But it's a lot more accessible than having to ... Even services like Roku or whatever, which were great but this is like the next evolution of that abstraction to me.</p><p><strong>Sara Vieira:</strong>        I feel like it is too. I feel like Roku is a really good idea and I feel like it depends on what you want. But if you just wanna put something online then just go with Netlify here on out.</p><p><strong>Joel Hooks:</strong>         Yeah, we use Roku at Egghead. For us it would be either that or straight AWS, which we still like a little abstraction over AWS.</p><p><strong>Sara Vieira:</strong>        Honestly I've used AWS like two times. I have this domain that stuck there and I can't get it out. And so I have no idea how and I just gave up on it. I gave up on the entire website, I'm just like, just let it die.</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Sara Vieira:</strong>        It's fine.</p><p><strong>Joel Hooks:</strong>         That's your graveyard. Good luck.</p><p><strong>Sara Vieira:</strong>        I'm never gonna get it back.</p><p><strong>Joel Hooks:</strong>         They're making amazing strides too, amplifier is really cool and does a similar idea to Netlify or ZEIT now.</p><p><strong>Sara Vieira:</strong>        They're trying to make a lot of CLIs which I really appreciate because AWS is not easy and I'm glad they hired someone to actually show us how to build things with it, like anyone. Because it's not easy and I think they just get this idea that it's easy because when you make something it's easy.</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Sara Vieira:</strong>        That's the main issue that we have. We'd like everything intact, like the documentation. I can't write documentation about things that I made because I'm like, it's so easy cause I mean it and I'm stupid.</p><p><strong>Joel Hooks:</strong>         Once you know it, it's easy, that's the things.</p><p><strong>Sara Vieira:</strong>        Exactly.</p><p><strong>Joel Hooks:</strong>         It's easy when you know it.</p><p><strong>Sara Vieira:</strong>        It's like riding a bike.</p><p><strong>Joel Hooks:</strong>         Yeah. Riding a bike algebra. Like oh yeah, that's easy. Algebra is easy.</p><p><strong>Sara Vieira:</strong>        Yeah. Algebra is super easy.</p><p><strong>Joel Hooks:</strong>         If you know it.</p><p><strong>Sara Vieira:</strong>        I have this thing where like if someone tries to speak to me in English, in Portugal or some shit and they misspell a word, not misspell because I also misspell words, but they say something wrong, just under my breath I'm correcting them. That's because I just fucking know English. It's so fucking easy, and I don't remember when I was learning it because it was so long ago that I'm like, it's so easy. You should fucking know this. This is everything that we ever make as people. For example if you know how to a play guitar you're gonna tell me that it's really easy to play a guitar, and I'm gonna tell you that it's really easy to play drums. And then you try to play drums and I try to play guitar and maybe we both cry.</p><p><strong>Joel Hooks:</strong>         Yeah. Cause then we're learning to play them together and that's the next level.</p><p><strong>Sara Vieira:</strong>        That's some guitar hero level shit right there.</p><p><strong>Joel Hooks:</strong>         Yeah. Rock Band. Tell me about React Girls. I'd like to hear more about this project and your involvement.</p><p><strong>Sara Vieira:</strong>        While Dee and I started the React Girls in, I don't know when but it was last year back when I was living in London, I lived in London for about four months. I came back because I didn't like it, straight up. And so we started this thing and so I came from Portland, there's not a lot of meetups, by not a lot I mean there's one.</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Sara Vieira:</strong>        That's about it. It's great. It's not one. You're going to the meetup.</p><p><strong>Joel Hooks:</strong>         Yeah, the meetup.</p><p><strong>Sara Vieira:</strong>        It's sad actually. Continuing, Greta which is the marketing person, she's great. She doesn't like when I call her a marketing person. So she came to me and she was like, we should make a react meetup and we should just have it with girls. And I was like, Greta, I have no idea how you're gonna get people. She's like, you'll speak at it. I'm like, fuck I knew this would happen. And so we started that in London and it actually got a lot of attraction. I remember that when I actually attended the meetup without speaking, it was the first time that I realized that we actually did something good. Because I realized there were a lot of women who were making their first talks there because they felt more comfortable. So there's usually about 60% women and 40% men, but the thing is, and that's what I've realized. If you tell men there's only women speaking, the dicks won't go because they think they can not learn from women, so they won't go. So it's so cheap.</p><p><strong>Joel Hooks:</strong>         It's a filter, right? It's not that men aren't welcome, it's just a filter for-</p><p><strong>Sara Vieira:</strong>        No, any man is welcome to come. It says on every meetup page men are welcome to come, only women speak though. And the men who are like, I'm not going to girls meetups. I'm like, yeah cool. I'm so glad you're not coming, that's sounds great. That's exactly what I wanted, thanks.</p><p><strong>Joel Hooks:</strong>         Mission accomplished.</p><p><strong>Sara Vieira:</strong>        Mission accomplished, dick repellent. And so I've started to realize that that was actually a good thing because one of the people that actually did one of their first talks there then ended up speaking at a conference in London and everything, and she's great. [inaudible 00:35:39]. She's great. I just started noticing that women felt way more comfortable doing it that way, speaking in front of more women and it was not as daunting to them. So when I moved to Berlin I started the same meetup in Berlin. It's been hard getting speakers but I'm doing it slowly and steadily, getting speakers. I speak at my own meetup last month. It's not good. Apparently that's the curse of the meetup organizing.</p><p><strong>Joel Hooks:</strong>         Yeah, that's not uncommon. I know our local meetup, the react meetup organizer is a frequent speaker just because-</p><p><strong>Sara Vieira:</strong>        Yeah, you can't get anyone else.</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Sara Vieira:</strong>        It's actually really hard to find speakers and it's also I think really hard to find women speakers mostly because I think we suffer more from ... If we don't have college degrees, we suffer more from imposter syndrome. More from the idea that we're gonna be judged even though maybe we won't be judged, but we have this idea that we will be judged and we will be found out or something. And it's just harder for us. So after a while I just thought like, I think we should make this into a conference and I think it would be a great idea to have something. It does what some conferences do, but the other way around. So the thing that a lot of conferences say is that we don't get enough females because of the CFB.</p><p><strong>Joel Hooks:</strong>         Right.</p><p><strong>Sara Vieira:</strong>        Which is valid, it's true probably. So what happens if all those CFBs women, then does that make it a worse conference, does that make it a better conference. What happens if they're not afraid to speak cause everyone else is also a girl. And I feel like it's a really good opportunity to bring more women into speaking. I'm not speaking or I'm seeing or doing anything at this conference, I'm just helping around. Not gonna do anything, people have seen enough of me for fuck's sake.</p><p><strong>Sara Vieira:</strong>        So the idea is that we bring new people into speaking that we try and show people that it's not that scary, that it doesn't always have to be the same people and that you can do it too, that it's not that hard. And also that it's not that glamorous, that it's just sharing your knowledge and that you don't have to be scared and there is no reason to believe that you're gonna be humiliated or found out or something like that. It's about giving people a safe space basically. And I honestly didn't realize that until I myself went to the meetup. I was like, yeah girl meetup, sounds like a great idea. And I was like, oh you actually did something good, okay.</p><p><strong>Joel Hooks:</strong>         Yeah. Like you had an idea, and it turns out it was a good one. It makes a lot of sense to me. You had to catch some flack in terms of Twitter and the public. I personally appreciate you putting it out there and willing to go there in general and create something that's interesting and different and a place where other people can get an opportunity. I think that's amazing and very commendable. So thanks for that.</p><p><strong>Sara Vieira:</strong>        A lot of the flames that I got on Twitter were also people that didn't actually read the thing and assume that only women could attend, which if not by any reasons it would be stupid financially because we cannot afford to do the conference.</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Sara Vieira:</strong>        We have to pay bills, but it would also be ... How do you call it when you're being bad to a scent that could generate a thing of people?</p><p><strong>Joel Hooks:</strong>         Discriminatory.</p><p><strong>Sara Vieira:</strong>        It would be discriminatory. Completely just be like, no you cannot enter because you are a man. That doesn't make any sense.</p><p><strong>Joel Hooks:</strong>         Like some sort of old school country club shit-</p><p><strong>Sara Vieira:</strong>        Yeah.</p><p><strong>Joel Hooks:</strong>         ... But we're the opposite. We're, oh no, you have to be a stud, white dude or you can't show up here.</p><p><strong>Sara Vieira:</strong>        No, that doesn't make any sense. The idea's that men will come and will applaud these women, these people for speaking and will be there. That's the idea. The idea is not that no man can ... It's a no man's land.</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Sara Vieira:</strong>        That doesn't make any sense. I think most of the hate was because of that and there's also one dude who was like, I cannot forget this because he was like, well, I don't think this makes any sense because I'm gay, I wouldn't like to go to a conference where everyone's gay. And I was like, oh my God I need this conference.</p><p><strong>Joel Hooks:</strong>         Sounds like an amazing conference to be honest.</p><p><strong>Sara Vieira:</strong>        I know, and I was like, I should make gay JS night. Every speaker is either gay or trans or anything. I'm like, this sounds amazing I need this. And everyone was like, oh my God, we should make this a conference. I think that one backfired.</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Sara Vieira:</strong>        It was like, I would feel uncomfortable in a conference where every speaker's gay and I'm like, I would not, I would fucking love it.</p><p><strong>Joel Hooks:</strong>         I think that sounds like a theory that might not even be true for the individual, but maybe it's true. Who knows. I can't speak for them.</p><p><strong>Sara Vieira:</strong>        I can't speak for them but I really wanna make this conference now. I feel like that's the next one, it's gonna be career JS.</p><p><strong>Joel Hooks:</strong>         Thanks. I like it. When is this happening?</p><p><strong>Sara Vieira:</strong>        It's gonna be in London.</p><p><strong>Joel Hooks:</strong>         When is the react JS Girls conference occurring?</p><p><strong>Sara Vieira:</strong>        The conference is on the 3rd of May. It's in London. So we already have three conference speakers, which is great, and the website already operates on tickets and everything and CFB is still open. So if anyone wants to submit their thing please do. Everything is still open. Everything is great, and we already have three speakers. We have Erin Fox, Laura Medalia, and Mercy Sutton.</p><p><strong>Joel Hooks:</strong>         Nice.</p><p><strong>Sara Vieira:</strong>        I'm really excited to meet Mercy cause I never did.</p><p><strong>Joel Hooks:</strong>         She's awesome.</p><p><strong>Sara Vieira:</strong>        She looks awesome.</p><p><strong>Joel Hooks:</strong>         She is.</p><p><strong>Sara Vieira:</strong>        Once I was actually at Script Gowns and I was like, does anyone want anything? Cause I was gonna pick up some water and someone was like, when you pick up water can you also pick me up some food. I was like, yeah sure. So I went to the food thing and like Mercy was speaking to people next to the food thing, and I was just like, not worthy of this. I went back to my seat and they were like, where's my food. I was like, Mercy Sutton is there. They were like, what does that matter? I'm like, I just left. You go get your food. Like, are you serious. I was, I'm not gonna ask her to move.</p><p><strong>Joel Hooks:</strong>         Right. Can you please get out of my way, I need food.</p><p><strong>Sara Vieira:</strong>        Yeah. I wasn't gonna ask her to move so I just left. I don't want food, you go get your food. You ask Mercy Sutton to move, I'm not doing it.</p><p><strong>Joel Hooks:</strong>         She's one of the most down to earth, coolest people I've had the pleasure of meeting. So when you do meet her in May, it will go all right.</p><p><strong>Sara Vieira:</strong>        I think so. I still won't ask her to move though.</p><p><strong>Joel Hooks:</strong>         Yeah. I get that. Sara, I really appreciate it and I look forward to the dumb shit you're gonna make in the future because-</p><p><strong>Sara Vieira:</strong>        I'm gonna try and fix my website. No idea what's up with that.</p><p><strong>Joel Hooks:</strong>         You make me smile honestly. Twitter sometimes can be a little rough and I think you're a bright light on the tech world and I really appreciate all your efforts and look forward to seeing what you do next.</p><p><strong>Sara Vieira:</strong>        Thank you so much.</p><p><strong>Joel Hooks:</strong>         Thanks for talking to me, and I'll talk to you soon.</p><p><strong>Sara Vieira:</strong>        That's the deep thing that I wanted to say. There is no better way to make the world better than to make people smile, and when you make dumb shit people will smile because it's dumb.</p><p><strong>Joel Hooks:</strong>         That is deep and awesome and also true, and I couldn't agree more.</p><p><strong>Sara Vieira:</strong>        See, but I shouldn't have said it at 58 seconds. It wouldn't have that much impact. It would just be like, look at this girl, she moved to Berlin and now think she's deep.</p><p><strong>Joel Hooks:</strong>         We've come full circle. It's great.</p><p><strong>Sara Vieira:</strong>        I know.</p><p><strong>Joel Hooks:</strong>         Awesome.</p><p><strong>Sara Vieira:</strong>        Thank you so much for saying that. It really means a lot to me that it actually makes people smile, the things that I make and dumb things that I say and that's really all I can hope for. So thank you so much for saying it. Seriously it means a lot. And thank you so much for having me.</p><p><strong>Joel Hooks:</strong>         My pleasure. Cheers.</p>",
    "slug": "making-dumb-stuff-that-makes-strangers-on-the-internet-smile-with-sara-vieira",
    "description": "<p>Sara Vieira, developer advocate and professional maker of dumb shit, talks through why she does her weird experiments on the internet. Sometimes it is out of need, but honestly a lot of the time it is a random thing that she thinks of or something that someone says that brings up the idea, and she just has to make it. A lot of it is out of boredom, and also procrastination from other projects that she just doesn't want to do. </p><p>Sara calls herself a lazy developer, but that doesn't mean she isn't working. She finds simpler solutions that involve less coding and also avoids things that aren't necessarily interesting or fun for her to do, like CSS or writing her talk for a conference... A part of being a lazy developer is using the right tool for the job. GraphQL and Redux have an almost cult-like following, but for small apps, their solutions for state management and fetching data are complete overkill.</p><p>Netlify and Zeit's Now are great for deploying your projects, they allow you to get your unique dumb-shit out there quickly. There was this period where services were all focusing on scalability, but it wasn't easy to just throw your wacky side-projects out on the internet. </p><p>Sara is organizing the conference ReactJS Girls which will be happening in London on May 3rd, 2019. It started last year while Sara was living in London. She hosted a meetup where all the speakers would be women, but everyone was welcome to attend as a guest. Organizing it this way had multiple benefits, it acted as a filter for the dicks who wouldn't want to learn from women, and it empowered first-time speakers who'd otherwise feel imposter syndrome or fear of judgment. </p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/a63f7af2/transcript\">\"Making Dumb Stuff That Makes Strangers on the Internet Smile - with Sara Vieira\" Transcript</a></p><h3>Resources:</h3><ul><li><a href=\"https://reactjsgirls.com\">ReactJS Girls Conference</a></li><li><a href=\"https://twitter.com/reactjsgirls?lang=en\">ReactJS Girls Twitter</a></li><li><a href=\"https://meme.iamsaravieira.com/\">meme.iamsaravieira.com</a></li><li><a href=\"https://dan.church/\">dan.church</a></li><li><a href=\"https://awesometalks.party/\">awesometalks.party</a></li></ul><h3>Sara Vieira:</h3><ul><li><a href=\"https://twitter.com/NikkitaFTW\">Twitter</a></li><li><a href=\"https://iamsaravieira.com/\">Website</a></li><li><a href=\"https://github.com/SaraVieira\">GitHub</a></li><li><a href=\"https://medium.com/@nikkitaftw\">Medium</a></li></ul><h3>Joel Hooks</h3><ul><li><a href=\"https://twitter.com/jhooks\">Twitter</a></li><li><a href=\"https://joelhooks.com/\">Website</a></li></ul>",
    "duration": 2583,
    "episode_number": 39,
    "contributors": [
      "Joel Hooks"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/13dja",
    "path": "/podcasts/making-dumb-stuff-that-makes-strangers-on-the-internet-smile-with-sara-vieira",
    "published_at": "March 12th, 2019",
    "url": "https://egghead.io/api/v1/podcasts/making-dumb-stuff-that-makes-strangers-on-the-internet-smile-with-sara-vieira",
    "edit_podcast_url": "https://egghead.io/podcasts/making-dumb-stuff-that-makes-strangers-on-the-internet-smile-with-sara-vieira/edit"
  },
  {
    "id": "podcasts-00000000000000000083",
    "title": "Developing Yourself While Teaching Others with Ali Spittel",
    "summary": "Joel and Ali Spittel discuss her time in a teaching position, code challenges, blogging platforms, teaching beginners, and getting involved in local dev communities.",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/5a4528b4-dbfe-49b2-b521-11dda68ade41/2ed84114_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/5a4528b4-dbfe-49b2-b521-11dda68ade41/1550274493artwork.jpg",
    "simplecast_uid": "5a4528b4-dbfe-49b2-b521-11dda68ade41",
    "transcript": "<p><strong>Joel Hooks:</strong>         Hey, Ali.</p><p><strong>Ali Spittel:</strong>        Hey.</p><p><strong>Joel Hooks:</strong>         So, I'm pretty excited you joined the team at dev.to, and I think that's an awesome move for everybody in that community, and I was wondering how that's been for you so far.</p><p><strong>Ali Spittel:</strong>        Thank you so much. I'm so excited about it. It's really, really cool to have been part of the community for a while and then be on the other side of it now. It's dream position, as well, that I'm working as a software engineer and getting to write production code. But then also doing more developer advocate work and getting to talk and things and still interact with the community and work on education-focused stuff as well for them. So, I'm really excited. It's kind of the perfect position for me.</p><p><strong>Joel Hooks:</strong>         Previously, you were doing a almost pure teaching role, was your prior position. Is that a good way to put it?</p><p><strong>Ali Spittel:</strong>        Yeah. I was teaching full-time for the enterprise program at General Assembly. I still actually teach part-time for them, but full time all at dev now.</p><p><strong>Joel Hooks:</strong>         I was thinking about that, and I think I saw you maybe even tweet something about it. Like, if you move to full-time teaching in some ways you actually lose because you're not making production code anymore, right? If you're teaching all the time, you're teaching to a curriculum and you're not in there solving production software problems. You're solving problems, but not production software problems. Did you notice that that was an issue while you were teaching versus writing production code?</p><p><strong>Ali Spittel:</strong>        Yeah, a little bit. It's great to get back into it. I think a lot of that still remains. My fundamentals are so much stronger than they were before I was teaching. And debugging as well, because students come up with bugs that I personally would never come up with, just because different people work different ways. It's really cool to see all the different things that different people come up with and all the questions that different people have. So, it was super, super helpful in that way. But also not writing production code in the same way that I was at a traditional software engineering job.</p><p><strong>Joel Hooks:</strong>         So, it fundamentally changed. The teaching aspect of it was a way to enforce your own fundamental understanding what you're doing when you're writing software.</p><p><strong>Ali Spittel:</strong>        Totally. I think, for me, I was mostly self-taught. I took two computer science classes initially in college before getting my first software engineering job. So most of my knowledge came from other resources rather than formal education. A lot of times I would just make stuff work and learn stuff so that I could use it rather than really understanding what was going on. In order to teach something you really have to understand what's going on in order to answer people's questions that come up and think about things different ways so teaching was really helpful in that regard. Really shortening up those fundamentals and really knowing exactly what's going on with JavaScript and HTML and CSX and all that. Especially because my background is mostly Python and C++ educationally, so really shortening up those front-end skills was really helpful for somebody who has been working on full stuff for a while but probably understood what was really going on in the back-end and could hack together front-ends. </p><p><strong>Joel Hooks:</strong>         One of the primary skills I took out of it, from teaching workshops, is the ability to spot syntax errors like I'm a human linter. I can look at a page of code and be like look there it is, right there. Change that one character and your thing will work. </p><p><strong>Ali Spittel:</strong>        A hundred percent! That's such a teaching thing. It's so funny how people think you're magic but you're like, \"no I do this all day, everyday\". </p><p><strong>Joel Hooks:</strong>         It's like an intense pattern matching on people's code.<br />                    So you've moved to a new position, it's like an amalgamation though cause you're still teaching, you're still out here. You've written some of the nicest, friendliest, most informative blog posts that I've been reading lately, and I really enjoy that. So I've been wondering, this practice of blogging and sharing, how did you develop that and where does that come from?</p><p><strong>Ali Spittel:</strong>        Thank you. Actually, I totally started blogging pretty randomly. I went to school for government, but my focus was that I wanted to be a journalist and follow people on the political campaign trail. That was my dream. But I fell out of that when I started a software engineering job and then last year, this idea for a blog post, I was learning how to create art with CSS and I didn't know CSS that well before creating art with it. I wrote this post about learning CSS through creating this artwork. From there, I started writing a couple more medium posts, mostly on that same topic of learning something new and how that process was for me learning that thing. That didn't really gain any traction [inaudible 00:04:56] I think I got seven readers per post or something like that.<br />                    I found dev too and started cross-posting my work to there and it gained a more traction. And then I fell out of it this winter and spring because my speaking stuff was getting more traction. So I was having to focus and spend more time on that. But then this summer, I moved to Connecticut and didn't know anybody. I was totally isolated and had a ton of free time on my hands so I started writing again and that was really the concept that got a lot more attention. I have really been passionate about writing, I like writing the more beginner, friendly content because that's what I am used to, writing as the teacher working with newer people to programming and really distilling those concepts down and explaining them in usually multiple different ways so that different people can understand those different ways. I like a lot of multi-media content, I will explain something in words and then I'll do a picture and I'll do a code-pen or something along those lines so that people can really understand things from different angles.<br />                    Blogging has been huge for me this year, its been super, super exciting and I'd love to be a bigger part of the developer community as a whole. </p><p><strong>Joel Hooks:</strong>         I think one of the coolest things, you mentioned this, is that you focus a lot on people that are just getting started and you explain things and in this clean way, but for multiple directions too. And I think a lot of time developers are like, oh well if I blog I have to spend a lot of time in doing something fancy and novel and deeply technical or advanced. I got a lot of recent CSS posts that you did that was amazing, that they really explained it a lot to me and I learned something and I've been doing this for quite some time. Where does this idea, is it just from your teaching practice or just kind of what you know in terms of teaching, but the focus on the beginner in terms of what you write and teach?</p><p><strong>Ali Spittel:</strong>        For me that's been what's most interesting to write just because I like writing more comprehensive stuff and usually more advanced content is a more niched down. And I like writing more broad stuff. In the future maybe I'll try to write some stuff more geared towards my level at this point. But, I've felt I could have the most impact if I'm writing a post for our newer programmers and so that's where I've focused and that's where most of my readers come from at this point, and so I have that niche that's there already. </p><p><strong>Joel Hooks:</strong>         Well that's huge. I don't have any real statistics, but I would think that the audience for beginner content is way way bigger than really specific, advanced content. Like the net you can cast or here's what CSS is and here's how it works versus here's how to animate or do something very specific with CSS. </p><p><strong>Ali Spittel:</strong>        Oh totally. I would guess the same, especially I still teach a bunch of very beginner workshops and the amount of people coming through those each weekend is huge. There are tons of people out there that have basic HTML and CSS knowledge but aren't really full developers or maybe not even looking to become full developers but want to learn more about code and so I think there'll be even more of those people in the future. </p><p><strong>Joel Hooks:</strong>         I saw on Twitter, somebody was talking about the idea that we are narrowing the entry paths to web development. You hear a lot of folks that are talking about view source and the stuff that we have lost as the web has progressed. But the actual path into the career, from somebody that doesn't know anything, the conversations around CSS and JS and as HTML and CSS as an entry path still valid. I was wondering, if you've noticed anything along those lines.</p><p><strong>Ali Spittel:</strong>        Oh interesting. Yeah, I really like HTML and CSS as an entry point just because for the pure reason that it is really visual, so people can see what they're creating. Whereas, something like writing a Python script can maybe more abstract at first. But both are totally valid paths. Huge proponent of CS Fraud and trying to teach computer science earlier to people just because I think that once you have fundamental algebra skills, programming is there to some extent. And a lot of those skills can really build off of one another. Like teaching algebra through code I think would actually be really cool. I think teaching earlier and making sure that everybody has access to computer science education at some point is really important in the future. </p><p><strong>Joel Hooks:</strong>         I am always torn because I think at the edges when we're building software when we're building web apps, you have to have the complexity a lot of times just to plain index HTML and a CSS file wouldn't allow me to build \"Egghead\" for instance. But at the same time, like you can just make an HTML file and add some CSS to it and start playing and watch it change in almost real time and hit refresh and watch your page change, which is super powerful and kind of fun when you're learning and first approaching these things. With kids it's harder though because they're like this isn't Xbox. </p><p><strong>Ali Spittel:</strong>        Yeah that's so true. That beings said, I have almost found it easier to teach kids how to code than adults. I've taught workshops for middle schoolers and seeing them code was just incredible they were building stuff so fast. I was so impressed by. I think in a lot of ways that kids will totally have these skills in the future. </p><p><strong>Joel Hooks:</strong>         Yeah, I mean, I think they're gonna need them. I mean hopefully, they need them for a while, I'm counting on these skills being viable for many more years, personally. </p><p><strong>Ali Spittel:</strong>        Same, same. </p><p><strong>Joel Hooks:</strong>         One of the cool things, to me just as an observer right, like you know yourself, as an observer, you're very intentional and I feel like you build really good habits and practices around just being a developer in general. And things like your daily code challenge that you do quite a bit, is really interesting to me. And I was wondering if you could explain the daily code challenge and then where that practice actually came from. </p><p><strong>Ali Spittel:</strong>        That's a good reminder that I should start doing those again, I've fallen out of them because of puppy. </p><p><strong>Joel Hooks:</strong>         Oh yeah, that'll do it. </p><p><strong>Ali Spittel:</strong>        So, last year, for around six months on Twitter every morning, first thing when I got to work I would do a code challenge off of something like Hacker Rank or Code Wars or even from Cracking the Coding Interview or something like that, I would just do one of those. They would be increasing difficulty. So Mondays would be really beginner, friendly ones for people just starting out. And then the Friday ones would be really hard ones, something like a Google Code Jam or something along those lines.<br />                    And I did those for a lot reasons. One, we talked about how I wasn't writing production professionally at that point, so I wanted to keep my skills fresh in that regard.<br />                    Second of all, being somebody on the Internet people can sometimes doubt your skills or pass things off and so part of me was like I'm proving to the world that I can write good code and that I can solve hard problems. So maybe that's not the best reason for doing it, but in some ways it was pretty validating to show people that I'm not just some blonde chick on the Internet that was stupid.<br />                    The third reason is I think a lot of people think of those problems as being for interviews only and I think that there's just a lot of fun in just solving them for their own sake. They're fun to solve puzzles and to solve problems, that's a lot of reason why I'm a programmer in the first place and so doing them for the sake of doing them and building my skills and just having fun with it was a big reason for that. And then, also just getting in the habit of it was really nice as well. I have a lot of fun with those and should really start doing those again.  </p><p><strong>Joel Hooks:</strong>         It's kinda like doing the New York Times Crossword Puzzle or Sudoku or something right. It's like its using your brain, it serves so many different purposes. One, cause I think the public reception, just be what it is, right, cause you are writing beginner blog posts, so its dudes on the Internet that are like oh nice beginner stuff, but at the same time, how do you show that you do other things. To me, it seems like one of the least benefits but it's actually a real benefit too. Aside from, the gross part of the Internet, just for yourself and having a catalog and showing yourself in public and building your personal brand is like hey look I'm somebody that solves problems and I do this for fun and recreation and also to build problem solving skills is a great practice. </p><p><strong>Ali Spittel:</strong>        Totally, there is this awesome little community of other people solving them in different languages or the same language in different ways. And that was really cool to see and build some base level knowledge of programming languages that I haven't used before. Just even seeing them, you can learn from them. </p><p><strong>Joel Hooks:</strong>         Oh yeah, cause you get the crossover. A lot of times you use Python, right, to solve yours but then you'd see someone solve it in a different language. It's like watching a moving a foreign language essentially, right? So you can match up the context and the words. </p><p><strong>Ali Spittel:</strong>        Totally. </p><p><strong>Joel Hooks:</strong>         So you blog a lot, and I've been really pushing this idea that we should get off of platforms, like Medium, and build our own spaces and blog and share what we know. And, I was wonder what do you think? Do you think that there is going to be a blog revival, that we will have a pushback from these wall of gardens, and people are going to start blogging more? And maybe we can get back to Web-Rings and that sort of environment that we no longer have. </p><p><strong>Ali Spittel:</strong>        I think for me and people starting out blogging, I think the overhead of having to write the code for this site and doing the SEO and doing the publishing work and pushing it on social media platforms and stuff like that, that's a lot of initial overhead if you don't know that you like blogging in the first place. And so that's why I started out with Medium and Dev and honestly, at this point I'm just writing on Dev and have had great experiences there with interacting with the community and having that community already in place instead of having to start from scratch. I did have some success building my own platform and I think that it's totally valid to do so and I think it's a great idea but it's definitely a lot more initial overhead than posting somewhere else. </p><p><strong>Joel Hooks:</strong>         This is where I've been sending people actually, I send them to Dev because, I don't know, I get a really good feeling from the entire thing and what Vince built in general. And then, I don't feel that as a platform is trying to steal your words for their own commercial gain. So much, as that is the exact feeling I get from Medium. </p><p><strong>Ali Spittel:</strong>        Totally, yeah, for sure. That's an important one. </p><p><strong>Joel Hooks:</strong>         So just to dig into that, can you explain what Dev2 is how that community operates for those that might not be familiar?</p><p><strong>Ali Spittel:</strong>        Community for developers in order to write posts, have conversations, there's a bunch of different multi-media options on there for embedding things and having different forms of posts, doing videos, doing podcasts, all of that is built into one platform, but the thing that really sets it apart is the community is a lot more inclusive and friendly than a lot of other developer communities out there. That's really been what's drawn me, especially as a woman in tech to right there instead of some other places on the Internet. It's been really pivotal for me and there platform has been super helpful for me in building my blogging presence. </p><p><strong>Joel Hooks:</strong>         It's open-source too. So the entire platform you can go and fork and run your own. And one of the things that I think is really interesting, is its an amazing example of a rails app that's really well put together and super performant. I've been startled by that actually, just the way its blazingly fast and the design is clean and everything about it top to bottom is just gold stars all the way down for me. </p><p><strong>Ali Spittel:</strong>        Totally. If you ever want to contribute, or anybody listening if you want to contribute we have open issues and so you too can write code for the code base. </p><p><strong>Joel Hooks:</strong>         Do you keep inter-friendly issues or good first issues, is that something that's part of the repository in the project in general?</p><p><strong>Ali Spittel:</strong>        Yep, there are two flags for beginner friendly issues. The first one is good first issue, and then the other one is entry level as well. Entry level is a good one for new developer. Good first issue is good for new people to the project. </p><p><strong>Joel Hooks:</strong>         You've dealt with a lot of people that are just getting started with code, and adults that are trying to get into the industry, where should they start? Should people start with Python or should they start with HTML, CSS, and JavaScript? Or should they start somewhere differently entirely? What's your opinion on that?</p><p><strong>Ali Spittel:</strong>        I think it's totally different for everybody. I think that it really depends on the persons interests and what they're trying to get out of programming. I think Python is great if you want to work on data science apps or something along those lines and if you're not super interested in the visual aspect of code, then it's a great place to start. If you're wanting to build something faster and that's more tangible then HTML and CSS is probably the way to go so that you can see your output as it's going. Same thing with JavaScript, in order to make those websites interactive down the road, even starting with something like Java if you're going to be computer science major, then you're going to be seeing that a lot. I think there's no one real path, it is dependent on what you want to learn and what you want to get out of programming. </p><p><strong>Joel Hooks:</strong>         I know you've done a lot of generative art type stuff, you mentioned doing art with CSS, which I need to research. I want to look more into that and see what you're doing there, cause I think that's very interesting. And then, there's P5JS and then even just a language like processing to create generative interactive art pieces, have you experienced that from the learning side, in terms of getting people interested and involved in solving those problems but in a very visual sort of way? Have you explored that at all?</p><p><strong>Ali Spittel:</strong>        Totally, yeah I've done a workshop on learning code through generative art and I'm also doing another one later this spring using Python and there's a library build in called Turtle. So I'm gonna be teaching people Python through that. That's pretty much what I'm very excited about, but I've also done a bunch of workshops on TSS art which I think is another great on-boarding tool up there. I think just focusing on people's interests and if somebody is already an artist and already likes building visual things, maybe that's a really good path for them to get into code.  </p><p><strong>Joel Hooks:</strong>         Is the Python Turtle like a tell-turtle drawing application. </p><p><strong>Ali Spittel:</strong>        Yep. </p><p><strong>Joel Hooks:</strong>         I'm kinda dating myself, but on a TRS80 with Logo is when I did my first Turtle graphics. And I still, to this day, is one of the absolute best ways to get an introduction to the power of what you can do with computers. It's kinda amazing what you can do with turtle graphics in general I think are a neat low [inaudible 00:20:41] entry approach. </p><p><strong>Ali Spittel:</strong>        Yeah, totally. It's actually built into the Python's standard library which I think is really cool. </p><p><strong>Joel Hooks:</strong>         Yeah that is cool.</p><p><strong>Ali Spittel:</strong>        So, really excited to teach that like loops and conditionals. Those become a lot more apparent when you can visual what that loop is actually doing or what that conditional is doing. </p><p><strong>Joel Hooks:</strong>         Yeah, fun spiral flowers and weird mazes and all that kind of fun stuff. </p><p><strong>Ali Spittel:</strong>        Totally. </p><p><strong>Joel Hooks:</strong>         I remember using graph paper, so we'd have to get the graph paper out and then graph out our name or whatever and then make our turtle do our name. </p><p><strong>Ali Spittel:</strong>        That's awesome, that's a lot of work, but that's really cool. </p><p><strong>Joel Hooks:</strong>         Yeah it was but they had a lot of time to kill, so it was fun.<br />                    Another thing that I observed that you do, is you have a practice of volunteering and putting your time out there and supporting local groups and efforts, mainly around the coding side. And I was wondering, how did you get involved with that and where can people go to find those opportunities to help people and do service with their communities in a real in person kind of way?</p><p><strong>Ali Spittel:</strong>        I started volunteering actually pretty early into working in software. I mentored for Djengo Girls, maybe a year into writing professional code, maybe a little bit more than that, but somewhere around there and that was a really awesome opportunity to see people grow and then got more involved with other community groups. There's an awesome community in DC called Hear Me Code, that teaches women Python in day-long workshops and so I started teaching that as well. Then after that, I started teaching full time at, GI, and we encourage students to go to a lot of meetups so that they're interacting with the tech community and building that really awesome network so that finding a job is easier once they graduate. And so, I started going to those a lot more in order to practice what I preached. And so, I ended up getting more involved in speaking at them and then from there, organizing. So right now, the meetup that I founded is called the Art Code Collective and that one focuses on the intersection between art and code. And then I'm the tech director for women who code in DC, we actually just had a lightening talk meetup last night, which was really fun. And then I'm working on starting up a Vue Vixens chapter here in DC as well.<br />                    So I think for getting involved, there's great online communities that turn to great in-person communities, but in DC specifically, we have two slack groups. One for women who code and one for DC tech as whole. And those have been really awesome for meeting people and getting involved in the communities before even going to something in person.<br />                    And then there's also a website called DC Tech Cal that lists every single meetup in the DC area in the tech community. And so, that's been really pivotal as well. So I think in order to get involved, it's meeting new people, going to the events in the first place. Once they see you a couple times, normally every meetup is in need of more organizers so they will probably reach out once they've seen you a couple times, in my experience at least. </p><p><strong>Joel Hooks:</strong>         So how do you get motivated after working all day to, its five o'clock, the day's over, and now the meetup is on the schedule, do you just do it? Is that the trick? Cause you're busy, right? You're not an inactive person, at all. </p><p><strong>Ali Spittel:</strong>        Totally, I think its side tracked. I think that's one of the nicest parts of having a puppy. She makes me stay home more, relax. But I'm definitely very used to going pretty much all the time at this point. In college, I actually was working a sophomore junior job, going to school full-time and then I had a part-time teaching job. And so, at that point I got used to working a lot. And then, from there, I've really like to stay busy and so, I think it's just carried over. But, in a lot of ways, I've had a lot of fun with these things as well. Especially for Women Who Code, a lot the women in that have become some of my closest friends and so going to those events is not really work thing or a networking thing it's really just a hanging out with my friends thing. So, that's a big part of that, it makes that a lot of fun. </p><p><strong>Joel Hooks:</strong>         That's the best part of networking, right? It's not like some sort of, I'm trying to get ahead, it's just I would like some friends and human companionship. </p><p><strong>Ali Spittel:</strong>        Oh, totally. And I feel like that's what networking should be. One sided relationships are just not going to be beneficial to anybody. </p><p><strong>Joel Hooks:</strong>         I had a tweet that was like building real relationships and friendships as a business strategy. That's the approach I want to take, I actually want to have connection and not just see how much cash I can extract out of the world. Cause what is that if you don't have the relationships and the contact with other people. </p><p><strong>Ali Spittel:</strong>        That's awesome, totally. </p><p><strong>Joel Hooks:</strong>         I think it's also what you're talking about. Cause as you get older and you're out of school and you're not forced to be with people all the time, the idea of making friends gets even harder and the types of folks you can meet in this field, there are so many good people and you have this common ground that's something you can talk about and have intelligent conversation. And getting out there and actually showing up at the meetups is such a great way to meet folks and build friendships that can last a lifetime. Right, its an awesome way to go. And you continue to inspire me, Ali, I really appreciate your efforts and what you do and your general message and all the hard work that you put in. </p><p><strong>Ali Spittel:</strong>        Thank you so much. That means a lot. </p><p><strong>Joel Hooks:</strong>         Thank you so much for sitting down and talking with me and as a last question, what's your top tip for anybody that's just getting started to code?</p><p><strong>Ali Spittel:</strong>        That's a good question. I think this message has been through this whole thing, but find your niche and find the thing that you're interested in and the thing that makes you like writing code because if you like doing it and you're having fun writing that code, then it makes a lot the other stuff that you'll have to deal with a lot more worth it. If you're not loving writing code and you're trying to teach yourself or go through a bootcamp, or something like that, that's a lot of commitment and a lot of work that you're putting in to something that you're not having fun with and that motivation might be really hard. So find something that you're interested in within the code world, there's so much from games, to web-development, to more specific things within web-development if you like styling or making things interactive or dealing with databases, or something like that, or data. Find the thing that you're interested and focus on that, and learn that first so that you like what you're doing instead of just spending time on something that's not fun for you. </p><p><strong>Joel Hooks:</strong>         Yeah, have fun. I think that's a great message cause its possible and there's so many options and there is fun to be had. So we can do that. </p><p><strong>Ali Spittel:</strong>        Totally, totally. </p><p><strong>Joel Hooks:</strong>         Alright, Ali, thank you very much.</p><p><strong>Ali Spittel:</strong>        Thank you. </p>",
    "slug": "developing-yourself-while-teaching-others-with-ali-spittel",
    "description": "<p>Today we are joined by Ali Spittel, a Software Engineer and Developer Advocate at dev.to, who speaks with us about:</p><ul><li>The skills she gained from a developer teaching job</li><li>How she kept up on her coding skills without writting production code by doing daily code challenges</li><li>Why she began to blog and how she made a habit out of it</li><li>Blogging on a platform vs having your own website</li><li>Using visual feedback to teach beginners to code</li><li>Involving herself in the local developer community</li></ul><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/2ed84114/transcript\">\"Developing Yourself While Teaching Others - with Ali Spittel\" Transcript</a></p><h3>Resources:</h3><ul><li><a href=\"https://dev.to\">dev.to</a></li></ul><h3>Ali Spittel:</h3><ul><li><a href=\"https://twitter.com/aspittel?lang=en\">Twitter</a></li><li><a href=\"https://dev.to/aspittel\">Ali on dev.to</a></li><li><a href=\"https://www.alispit.tel/#/\">alispit.tel</a></li></ul><h3>Joel Hooks</h3><ul><li><a href=\"https://twitter.com/jhooks\">Twitter</a></li><li><a href=\"https://joelhooks.com/\">Website</a></li></ul>",
    "duration": 1689,
    "episode_number": 38,
    "contributors": [
      "Joel Hooks"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/bqyvh",
    "path": "/podcasts/developing-yourself-while-teaching-others-with-ali-spittel",
    "published_at": "February 22nd, 2019",
    "url": "https://egghead.io/api/v1/podcasts/developing-yourself-while-teaching-others-with-ali-spittel",
    "edit_podcast_url": "https://egghead.io/podcasts/developing-yourself-while-teaching-others-with-ali-spittel/edit"
  },
  {
    "id": "podcasts-00000000000000000082",
    "title": "The Changes Gatsby and Mdx Are Making to the Internet with Chris Biscardi ",
    "summary": "Joel and Chris Biscardi discuss, live-streaming, Gatsby becoming a dominant force, MDX replacing markdown, and building resources for maintainers.",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/49d73931-5a16-40c6-bf6b-362787900164/7874d9cd_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/49d73931-5a16-40c6-bf6b-362787900164/1550267266artwork.jpg",
    "simplecast_uid": "49d73931-5a16-40c6-bf6b-362787900164",
    "transcript": "<p><strong>Joel Hooks:</strong>         It's going really well. So I wanted to talk to you a little bit, like just to kick it off, about your general practice of what I would call, from my friend Sean Wang, learning in public.</p><p><strong>Chris Biscardi:</strong>     Yep.</p><p><strong>Joel Hooks:</strong>         You seem to like really just kind of embrace this idea that, \"Hey, I'm learning stuff and doing things and I'm gonna share it with you.\" And I was wondering is that an intentional approach that you've taken?</p><p><strong>Chris Biscardi:</strong>     Yeah, that's definitely an intentional approach. I feel like I've been learning for a very long time and I'm not gonna stop learning anytime soon. And when I put out more content as I'm learning or things that have already learned, I can go back and I can find them later or people who are hitting similar problems, who maybe haven't had the context, time to develop the context that I have, can look at it and go, \"Okay, well, he did this. I watched him do this. I saw him do this. Yeah, maybe he screwed it up a couple of times. But I also screwed it up a couple of times. And that helped me.\" So yeah, it's very intentional.</p><p><strong>Joel Hooks:</strong>         And taking it like even to the next extreme where you're, you're literally live streaming your development process and your learning process.</p><p><strong>Chris Biscardi:</strong>     Yeah.</p><p><strong>Joel Hooks:</strong>         And I was wondering, how has that experience been? You know, just broadcasting as a programmer?</p><p><strong>Chris Biscardi:</strong>     It's been a lot of fun. You know, I don't expect it to ever get to the point of some of these video game streamers, right? Where I have tens of hundreds of thousands of people watching me at any time. But it's really nice to be able to sort of develop something. Say I'm working on like Gatsby Teams or something like that, right? Or MDX or Gatsby MDX or something like that. People use these projects all the time and it's sort of hard to formulate if you've never built and distributed an open source project like how this happens. And it's really easy to build up this mental model of sort of open source maintainers as these like infallible super genius people, just because they have a bunch of repos that are open source and distributed and like a bunch of people are using them. Right?<br />                    But really, everybody sort of starts from the same place and we all learn sort of what we're doing as we're going. And most open source projects that I know of are sort of, somebody starts building it and they're not really sure if it'll work out. And then, you know, sometimes it works and sometimes it doesn't. And you sort of have to deal with that when you're doing it. And exposing that process online is a really interesting because I've found that people really appreciate sort of the transparency and it gives them sort of more of a idea of community about the project.</p><p><strong>Joel Hooks:</strong>         Yeah. I'm actually surprised and honestly I, like when I first started watching people doing it for video games, I was surprised too. And then I spent a couple months just like enwrapped every evening watching MoonMoon play Overwatch 'cause like I can't play Overwatch competitively. I have a hand injury, but watching him was like 80 percent of like the feeling of, of playing Overwatch. And it was, it's really been interesting to me. Just the immediacy you get when you are connecting that way. Right? Like we had this ability to live stream and connect that way and it's kind of amazing.</p><p><strong>Chris Biscardi:</strong>     Yeah, it was pretty amazing. And it sort of delivers on that promise of like, I know GitHub's slogan was sort of like social coding at some point. Right? But when you're live streaming, it like really is social coding. It's like a group of people working on a project at the same time, even though I'm sort of driving. Right? It's almost like mob programming or like extended [inaudible 00:03:19] programming in that sense.</p><p><strong>Joel Hooks:</strong>         Mm-hmm (affirmative)<br />                    Yeah. Have you done that as a practice, like pair programming in any of your professional capacity?</p><p><strong>Chris Biscardi:</strong>     I don't usually do it in a professional capacity when I am a, either consulting or as an employee. I do it more informally in terms of like, we'll have a junior person or a more senior person and they'll have, be having trouble with something that I know about or I'll be having trouble with something that they know about. And then we'll sort of sit around a computer or do a video hangout or something like that and walk through it. But never really as an official structured, \"Hey, here's the pair programming computer, go over and sit over there and do pair programming.\" No.</p><p><strong>Joel Hooks:</strong>         Yeah, I haven't really had the opportunity to either. I don't know. I'm a, I've only worked remote for the past decade and over that time, you know, it's like we build up the patterns and practices of being a remote worker and communication and over communication is like a huge part of that. So to me it's an extension of this idea of remote work. We can work anywhere but we can still work together.</p><p><strong>Chris Biscardi:</strong>     Yeah, definitely. I definitely see that. So I've been doing remote and onsite for over the past 10 years or so. And you see it interestingly in like the way that you talk to people. 'Cause you'll say, you'll type something out. They'll send it and you'll look at it. He'll go, \"Wow, that could be read like I'm attacking you.\"</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Chris Biscardi:</strong>     So then you'll just do it like a quick check in and then they'll go, \"Oh. No, no, no. I didn't read it like that.\" And then we'll continue the conversation.</p><p><strong>Joel Hooks:</strong>         Yeah. Like the tone. And just like I, and honestly like I didn't even embrace video chat until the last couple years and I think that's 'cause it was kind of crappy, but like it seems like the tools are catching up and now, you know, like the ability to, you know, broadband's where it's at. And we're able to push video over the internet at a reasonable speed and actually have conversations without stuttering and weird artifacts and that sort of thing that makes it miserable.</p><p><strong>Chris Biscardi:</strong>     Yeah, for sure. You know, I think the habits that I pick up with remote work and sort of checking in with people as you're talking to them really apply to in person conversations as well. It's just that nobody really ever is forced to pick up on them. So unless you've done the work and figured that out yourself, people usually don't have conversations where they're constantly checking in with people.</p><p><strong>Joel Hooks:</strong>         Yeah. When I'm doing this. And I've started doing the live broadcasting internally to the Egghead member audience. And it was something that was hesitant to do because it was like, \"People be even be interested in this? Would they want to watch this? Is this boring?\"<br />                    We're literally watching Egghead videos like as a group and then chatting about them. And I'm like, \"Would people even want to do that?\" Like why would anybody have any interest in that? And then as it turns out, the response has been fantastic. Like people do want to sit down and watch videos with other people and then chat about them afterwards. And, you know, like all of this is kind of an extension of that and, you know, the idea of community and bringing people together, and like having a shared experience. And learning as we go.</p><p><strong>Chris Biscardi:</strong>     Yeah, definitely.</p><p><strong>Joel Hooks:</strong>         So you've been pretty heavy into Gatsby and that ecosystem for quite some time. I think I would, it would be fair to say you were a very early adopter of Gatsby. Is that true?</p><p><strong>Chris Biscardi:</strong>     Yeah, definitely. I was using Gatsby pre one dot O. I think I came in and started committing around zero dot seven or something like that. But yeah, it's been awhile.</p><p><strong>Joel Hooks:</strong>         And this is before they had the, you know, there was no graph QL at that point. This was kind of like early, early days of Gatsby.</p><p><strong>Chris Biscardi:</strong>     Right.</p><p><strong>Joel Hooks:</strong>         And you've seen it. You've been there pretty much since the beginning, watching it grow. And, you know, where do you see Gatsby fitting into the internet and publishing on the internet now and where do you see it going in the next year or two?</p><p><strong>Chris Biscardi:</strong>     Yeah. So, right now it's fitting in very well with anybody who's using sort of these modern frameworks like [react` 00:06:50] that are component based and things like that. And you want to sort of like get away from the monolithic Wordpress CMS installation. And I mean, Wordpress has plenty of security issues and things like that-</p><p><strong>Joel Hooks:</strong>         Mm-hmm (affirmative)</p><p><strong>Chris Biscardi:</strong>     ... that we don't really need to get into. But, so Gatsby fits really well in sort of this field where you've got this content mesh somewhere. Right? Your Wordpresses. Your Contentfuls. Your [inaudible 00:07:15], etc. Or just local unstructured data and you need to pull all of that data together and build a site based on that. So you see people doing things like building entire sites based on their Airtable Excel sheets, right? So it fits really, really well if you have data and you need to do something with that data and render a site out, that transformation pipeline is Gatsby's real core strength right now.<br />                    As for where it can be sort of in the future? I think it has a very strong chance to sort of replace a lot of the internet. All of the people that are currently running things like Wordpress, I think Gatsby has a shot at actually replacing a lot of those sites with sort of simpler, more modular sites for people. And that's part of the work that I'm doing with sort of Gatsby Teams and things like that. Making it easier for people to use Gatsby to build things when you only know [inaudible 00:08:07]. Or when you only know a piece of GraphQL and you don't really know how to build a GraphQL server, but you can like fetch your data.</p><p><strong>Joel Hooks:</strong>         Yep. Is it pure content sites or people having luck building more, like the dynamic sites? Right? Like we bring it in, we use the content mesh, which I was kinda curious about. That's just like the, everywhere we can possibly pull our content from is our content mesh. Right?</p><p><strong>Chris Biscardi:</strong>     Mm-hmm (affirmative)<br />                    Yeah.</p><p><strong>Joel Hooks:</strong>         And then we want to bring that in, so, you know, Gatsby's a, what we would refer to as a static site generator, but then it just becomes a react app at the end of the day. Right? Like so when it's all said and done at build time, we're building the static site, then it takes over as a react app so we can build any sort of kind of dynamic capabilities that we want into it at that point. I would assume.</p><p><strong>Chris Biscardi:</strong>     Right. Yeah. So, Gatsby does the full pre-render, so it renders out html for you, right? So you actually have your static site and it doesn't need to run anything else. Right?</p><p><strong>Joel Hooks:</strong>         Yep.</p><p><strong>Chris Biscardi:</strong>     But then you also get this very modern react app to bootstrap on the other side and it's code split and everything like that. And you've got these progressive web app features. So really what I refer to Gatsby as is sort of a progressive web app generator, not really a static site generator.</p><p><strong>Joel Hooks:</strong>         Yeah. That's a good way to put it.</p><p><strong>Chris Biscardi:</strong>     Because you get the static site aspect of it, which can replace Hugo and things like that. But you also get the very dynamic nature of it, in which case you can like throw in Apollo client and start actually building a web app. Right? It can be a replacement for create react app that actually has pre-rendering on one side and a full dynamic app on the other side.</p><p><strong>Joel Hooks:</strong>         Do you think we'll ever get to the point where Gatsby isn't a react? Do people do that? Do they use it to generate other, you know, like view for instance. Can you use it for that now? Or is it strictly react at this point?</p><p><strong>Chris Biscardi:</strong>     It's strictly react right now. There's been a couple of issues filed, things like that about potentially building view support in and things like that. It's not something that I know anybody is taking an action on right now.</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Chris Biscardi:</strong>     But I could see it happening in the future. Right? All the infrastructure underlying Gatsby doesn't necessarily prevent you from doing that, it's just that it was originally built on react and, you know, it's working out really well.</p><p><strong>Joel Hooks:</strong>         It's a pretty good bet, I think, at this point. And, you know, react is what it is and it's kind of dominating the space.</p><p><strong>Chris Biscardi:</strong>     Yeah.</p><p><strong>Joel Hooks:</strong>         So it's the easy choice if you want to use Gatsby. And I know that the other, you know, tools out there are, you know, there's tools out there for doing these same type of things with other frameworks. But Gatsby, like to me it's been interesting just because of, as a business, right? Like Gatsby's a business. It's a funded startup company, right?</p><p><strong>Chris Biscardi:</strong>     Yep.</p><p><strong>Joel Hooks:</strong>         Like, and so what are they gonna do? And like from the business strategy angle of it? And like, I would love to see somebody just completely, you know, Wordpress was great and they've had their time. But, you know, if they don't, I think embracing this idea, this idea of PWA generator, is really gonna hit pretty big. As history will tell us, I guess.</p><p><strong>Chris Biscardi:</strong>     Yeah. And I mean, you even see Wordpress moving in this direction, right?</p><p><strong>Joel Hooks:</strong>         Yeah, yeah. For sure.</p><p><strong>Chris Biscardi:</strong>     They have an API now. They have their new content editor and things like that. This is the way the world is moving and Gatsby, I think, got there basically first. So.</p><p><strong>Joel Hooks:</strong>         Yeah. And I also love it as my absolute favorite example of a complicated redux application. So.</p><p><strong>Chris Biscardi:</strong>     Yeah. Yeah. A lot of people don't realize that it uses [redux 00:11:28] under the hood because you don't actually need to know that.</p><p><strong>Joel Hooks:</strong>         No, no. It doesn't pertain to your usage of Gatsby. But if you open up the covers a little bit, it's like, \"Whoa.\"</p><p><strong>Chris Biscardi:</strong>     Yeah. Yeah, I do that a lot. I sort of, I do things like access to redux database directly what I'm working on new features and things like that. But that's not normal usage.</p><p><strong>Joel Hooks:</strong>         No, I'd hope not. Like that's like the whole point of the project is to abstract that complexity for us and make publishing easy. Right?</p><p><strong>Chris Biscardi:</strong>     Yeah. Right?</p><p><strong>Joel Hooks:</strong>         Speaking of publishing, at least recently, a big part of your focus has been, one, the Gatsby themes, which are very exciting and I think make sense on a lot of levels. And then the other side of that is Gatsby MDX. MDX is like mark down with the ability to drop react components in it. Is that a pretty good short explanation of what MDX is?</p><p><strong>Chris Biscardi:</strong>     Yeah. It's close enough.</p><p><strong>Joel Hooks:</strong>         Yeah. So how would you describe it, though? Like if you're describing MDX to another developer, how would you describe MDX?</p><p><strong>Chris Biscardi:</strong>     No, I usually describe it to them based on their context. If they're a design systems team and they work on a design system, I say, \"Hey, this is the way that you can use all your design system components to render your markdown out.\" If they are somebody building a documentation site, I say, \"Hey, this can let you actually use react components and because you can use react components, you get to do things like embed a go playground inside of your documentation site,\" right? So I try to use sort of the core example for their use case and then say, \"Okay, but it's all MDX and you can do all these things, but this is how it's useful to you and what it can enable you to do.\"</p><p><strong>Joel Hooks:</strong>         What is MDX gonna change in terms of publishing and creating content on the internet?</p><p><strong>Chris Biscardi:</strong>     I think MDX has a actually pretty strong opportunity to sort of replace markdown as the default content type. Right?</p><p><strong>Joel Hooks:</strong>         Yep.</p><p><strong>Chris Biscardi:</strong>     Because it's compatible with markdown. Right? It's the same. It's the same thing. If you want to write a markdown file, you can write an MDX file and it'll be the same thing. You could just change the file extension if you want to. And then it gives you all this power on top, right? It gives you the ability to create your header tags or your code blocks and replace them with these super power, dynamically imported react components. Right? So I think over time we'll see MDX probably expand into other frameworks as well. I know that there's some work being done on view support for MDX.</p><p><strong>Joel Hooks:</strong>         Mm-hmm (affirmative)</p><p><strong>Chris Biscardi:</strong>     And it can actually end up replacing markdown as the default platform for people to build on top of. Right? And the people that don't care, don't need to. And the people that care are suddenly gonna go, \"Oh, wow. I have all of this power now that I didn't have before. I can just write a single react component and it gives me this really powerful code block. Right?</p><p><strong>Joel Hooks:</strong>         Yep. We think about markdown. Right? And it's just text.</p><p><strong>Chris Biscardi:</strong>     Yep.</p><p><strong>Joel Hooks:</strong>         And, you know, that's how we look at it. And that's, it's true. It's text, it's data. And I think a lot of times, and I know I personally will take text processing for granted and then I see something like MDX and I also see another project, the unified project-</p><p><strong>Chris Biscardi:</strong>     Mm-hmm (affirmative)<br />                    Yep.</p><p><strong>Joel Hooks:</strong>         ... which I think is fascinating. And I hear almost nothing about it. And could you describe unified as it, maybe, as it relates to MDX?</p><p><strong>Chris Biscardi:</strong>     Yeah. So unified is this basically an AST manipulation tool kit. Right? If you look at markdown and you look at approaches like remark, remark is built on top of unified, right? If you want to do anything with the remark, which is the markdown AST, you [inaudible 00:14:55] unified plugins, effectively. It's the underlying layer between a markdown AST and html AST and all of the MDX extensions to those ASTs. So unified is the abstraction abstraction, as I would put it, right?</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Chris Biscardi:</strong>     It's the AST behind the AST kind of thing.</p><p><strong>Joel Hooks:</strong>         Yeah. I mean, it's getting down to the bare essentials of picking apart our text files and doing things with them, manipulating them and doing interesting things with them.</p><p><strong>Chris Biscardi:</strong>     Yeah, for sure.</p><p><strong>Joel Hooks:</strong>         So, as far as that goes, like as far as, you know, like MDX, we get to this point, we have, you know, a supercharged markdown that we can add dynamic capabilities to it. What examples are your current favorites? Like where do you send people to show like the power of MDX and what the capabilities can and will be?</p><p><strong>Chris Biscardi:</strong>     So, there's a bunch of people building, sort of design system sites, that are starting to get, so, they're actually using MDX and they've been using it for a while. And now they're starting to get to the point where they're like, \"Okay, we have all of this stuff and now what can we do with it?\"</p><p><strong>Joel Hooks:</strong>         Mm-hmm (affirmative)</p><p><strong>Chris Biscardi:</strong>     So we're still in the very early days, but most of the sites that I send people to are documentation for design systems, 'cause those people felt this need the most, I think, over the last couple years. Where they tried to build this documentation and they have all these components and they're like, \"I don't know how to put these two things together without a lot of work.\" And now it takes like, no work. So, yeah, basically design [inaudible 00:16:24] and documentation sites.</p><p><strong>Joel Hooks:</strong>         Do you have any favorites? That are public?</p><p><strong>Chris Biscardi:</strong>     Yeah. So, Reach Router's documentation actually uses Gatsby MDX-</p><p><strong>Joel Hooks:</strong>         Okay.</p><p><strong>Chris Biscardi:</strong>     ... which is pretty [inaudible 00:16:32].</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Chris Biscardi:</strong>     And that's a good example. There is some work going on in carbon to use MDX. There is some work going on in seeds to use MDX. And I can give some links to you so that people can see it in the show notes, but.</p><p><strong>Joel Hooks:</strong>         Then you have a Doc Z, too, right? Which is [crosstalk 00:16:53] MDX-based, so you can, you know, anybody can pick it up and it gives you kind of a, almost to a structure framework type thing to build around.</p><p><strong>Chris Biscardi:</strong>     Yeah. Doc Z is really interesting from a Gatsby themes perspective-</p><p><strong>Joel Hooks:</strong>         Mm-hmm (affirmative)</p><p><strong>Chris Biscardi:</strong>     ... and also from an MDX perspective. I think that a lot of the work in Doc Z itself has already been written inside of Gatsby, right? So there's this sort of DV extraction, abstraction inside of Doc Z.</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Chris Biscardi:</strong>     That could just be the Gatsby content mesh data layer. Right? And it would sort of allow you to use the entire Gatsby ecosystem if you wanted to extend your documentation with a blog or something like that.</p><p><strong>Joel Hooks:</strong>         So you'd use the plugins and and that sort of stuff.</p><p><strong>Chris Biscardi:</strong>     Yeah, yeah. I mean, you'd use like SV MDX. And it would come in a nice little Gatsby theme Doc Z package. And if you wanted anything else you could use any plugin, right? You could pull in stuff from Airtable, pull in stuff from Paper, pull in wherever you want. Right?</p><p><strong>Joel Hooks:</strong>         Yeah. And I mean, I don't know, the entire concept is very exciting to me. I keep literally wanting to rewrite our entire front end using this technology and like leveraging, you know, MDX and Gatsby and the idea of, you know, PWA generator is so appealing.</p><p><strong>Chris Biscardi:</strong>     Yeah. I've seen some of those [inaudible 00:18:08].</p><p><strong>Joel Hooks:</strong>         Yeah. It's hard like to have restraint and not do the rewrite. I think just in general as a developer.</p><p><strong>Chris Biscardi:</strong>     Yeah, for sure.</p><p><strong>Joel Hooks:</strong>         Reach router's cool too. So that's using Doc Z or it's using MDX anyway.</p><p><strong>Chris Biscardi:</strong>     That's using Gatsby MDX.</p><p><strong>Joel Hooks:</strong>         Gatsby MDX.</p><p><strong>Chris Biscardi:</strong>     Yep.</p><p><strong>Joel Hooks:</strong>         And then reach router's what's actually driving Gatsby too? Is that correct?</p><p><strong>Chris Biscardi:</strong>     Yeah. Yeah. So, reach router-</p><p><strong>Joel Hooks:</strong>         That's Ryan Florence's project.</p><p><strong>Chris Biscardi:</strong>     ...replaced. Yes. Ryan Florence's project, X maintainer of react router, sort of an accessible next generation approach to routing from somebody who has built a lot of routing over the past few years for the react ecosystem.</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Chris Biscardi:</strong>     And it's really nice. It's really nice to see accessibility baked in like that.</p><p><strong>Joel Hooks:</strong>         I love what he's doing in general because that's his mission, is to build components and a router and push accessibility as a first concern. And I think that's an amazing banner to be waving that everybody needs to pay attention to.</p><p><strong>Chris Biscardi:</strong>     Yeah. It's pretty important. And I like the work that he's doing over there. For sure.</p><p><strong>Joel Hooks:</strong>         Yeah. It's good stuff. So, what else are you looking forward to this coming year? What are you gonna learn and focus on, or are you just gonna stick to what you started?</p><p><strong>Chris Biscardi:</strong>     So, I'm definitely gonna stick to what I've started. Right now I think I'm at like 24, 25 blog posts in the last 23 or 24 days.</p><p><strong>Joel Hooks:</strong>         Yeah, you're on fire.</p><p><strong>Chris Biscardi:</strong>     So, we'll see how long that lasts. Gonna definitely try to get to a month. And if I go beyond that, then, then, yeah, call that a success. There's a product that I'm building called Maintainer Systems that is basically tooling and analytics for open source maintainers. So some of these projects like Gatsby have, need to find out things like are the people at my company merging BRs in two days and everybody else merging PRs in 14 days? Which I'm definitely not saying Gatsby is-</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Chris Biscardi:</strong>     ... but you sort of need to know those things if you're gonna build a company on open source software. Right?</p><p><strong>Joel Hooks:</strong>         So, is that a maintainer systems and for open source companies like Gatsby or-</p><p><strong>Chris Biscardi:</strong>     Yeah.</p><p><strong>Joel Hooks:</strong>         ... who else would be a good example of that?</p><p><strong>Chris Biscardi:</strong>     Yeah, so like Doccer, for example.</p><p><strong>Joel Hooks:</strong>         Right.</p><p><strong>Chris Biscardi:</strong>     Worked there for a couple of years and saw the same problems. Things like Kubernetes it would be good for, etc.</p><p><strong>Joel Hooks:</strong>         Yeah, that's pretty cool. I think there's a big need for that kind of thing. And like the cross between, you know, commercial, like we need to make money and I think open source as a business is strong and something that should be encouraged. But then, at the same time, there's, you know, people are, then get used to free. So how do you-</p><p><strong>Chris Biscardi:</strong>     Yeah.</p><p><strong>Joel Hooks:</strong>         ... like cross that divide and what does open source even mean in terms of business and livelihoods and that sort of thing.</p><p><strong>Chris Biscardi:</strong>     Yeah. And if you look at the things that people are building already today and, sort of, examples for like the Rust community, right?</p><p><strong>Joel Hooks:</strong>         Mm-hmm (affirmative)</p><p><strong>Chris Biscardi:</strong>     And their bots and things like that. They apply to all levels of open source maintainership, whether you're just starting a project, you have some success, or you have major success like some of these companies have.</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Chris Biscardi:</strong>     So I'm hoping to build tools that work for the larger groups of people and also be individual maintainers in small groups and sort of give them a bit more leverage.</p><p><strong>Joel Hooks:</strong>         Yeah. And that's good too, because like that to me would be something that would grow with people as well-</p><p><strong>Chris Biscardi:</strong>     Yeah.</p><p><strong>Joel Hooks:</strong>         ... right? 'Cause you never like, I don't know that you ever start an open source project and think, \"Yeah, this is it. This is gonna be the big thing.\" It was like you said, you know, we're all just kind of making it up as we go along and then all of a sudden you hit a good idea and other people are like, \"Wow, that's really good idea.\" And they start joining in and-</p><p><strong>Chris Biscardi:</strong>     Yep.</p><p><strong>Joel Hooks:</strong>         ... then all of a sudden you are a maintainer.</p><p><strong>Chris Biscardi:</strong>     Yeah. Right? You are a maintainer today. Congratulations.</p><p><strong>Joel Hooks:</strong>         You know, and the email.</p><p><strong>Chris Biscardi:</strong>     [crosstalk 00:21:43] notifications hit 300.</p><p><strong>Joel Hooks:</strong>         Yeah. The emails never cease-</p><p><strong>Chris Biscardi:</strong>     Yeah.</p><p><strong>Joel Hooks:</strong>         ... for the expectations for the maintainer.</p><p><strong>Chris Biscardi:</strong>     Yeah, yeah, yeah. For sure.</p><p><strong>Joel Hooks:</strong>         Which could be a tough position for anybody. So like more resources that I think we have to support those folks that are there doing this good work, the better. 'Cause, you know, it's like, that's actually, you know, like one of the core tenants of Egghead. And one of the things I love is that somebody that's building open source can like make content and make money from the content that they produced and augment-</p><p><strong>Chris Biscardi:</strong>     Yeah. For sure.</p><p><strong>Joel Hooks:</strong>         ... the documentations with videos. And, 'cause it's hard, right? Like a lot of times, the folks that are making open source software and maintaining it don't really want to do like content marketing and sales and all that kind of stuff. So, there's a weird, you know, like there's a weird gray zone and how do you achieve that?</p><p><strong>Chris Biscardi:</strong>     Yeah, for sure. And that's one of the reasons I'm really comfortable sort of repping Gatsby. They're very aware of like the mental health issues that come with being an open source maintainer, where you're, sort of, if you have a very, very successful project, you do get those people who come in and are just yelling at you. Right? For whatever reason.</p><p><strong>Joel Hooks:</strong>         Yeah. Oh, yeah.</p><p><strong>Chris Biscardi:</strong>     And, yeah, they're very aware of that. And I'm pretty happy with the way that they're approaching sort of supporting the people that are involved in that.</p><p><strong>Joel Hooks:</strong>         Yeah, I won't shut up about Gatsby. Like I keep going on, like I sent emails to our list and I like to talk about it on the podcast and like, I really truly like appreciate what they're doing from top to bottom, not only like in the product that they're making, which is wonderful and I love, but then like the general attitude and their approach to community and development and the team that they're building and everything. They really just hit a lot of notes for me. So like, that's, you know?</p><p><strong>Chris Biscardi:</strong>     Yeah. One of the things that I really like is that they pay sort of the people who write documentation and things like that on the same scale as engineers.</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Chris Biscardi:</strong>     Which I believe Egghead does too, right?</p><p><strong>Joel Hooks:</strong>         Yeah. Yeah. It's pretty even keel across the board. Like we're all just building software, so.</p><p><strong>Chris Biscardi:</strong>     Yeah. So, I mean, that's amazing. Right? Documentation is, you don't have a product [inaudible 00:23:37].</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Chris Biscardi:</strong>     So it's really nice to see those people sort of get what they're due. Right?</p><p><strong>Joel Hooks:</strong>         Yeah. For sure. Alright, so where are you writing all these blog posts anyway?</p><p><strong>Chris Biscardi:</strong>     Christopherbiscardi.com<br />                    I usually Tweet them out as well, if you want to follow me at ChrisBiscardi.</p><p><strong>Joel Hooks:</strong>         Cool. Well, thanks for chatting with me today, Chris.</p><p><strong>Chris Biscardi:</strong>     Yeah, thanks for having me. It's fun.</p><p><strong>Joel Hooks:</strong>         Cheers.</p><p><strong>Chris Biscardi:</strong>     Cheers.</p>",
    "slug": "the-changes-gatsby-and-mdx-are-making-to-the-internet-with-chris-biscardi",
    "description": "<p>Today we are joined by Chris Biscardi where we discuss:</p><ul><li>Learning in public and him live-streaming open-source development</li><li>Gatsby as a PWA generator and its potential to become the dominant force on the internet</li><li>MDX's power and its potential of replacing markdown as the default content type</li><li>Chris' project, MNTNR, and the assistance it'll provide to open-source maintainers.</li></ul><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/7874d9cd/transcript\">\"The Changes Gatsby and Mdx Are Making to the Internet - with Chris Biscardi\" Transcript</a></p><h3>Resources:</h3><ul><li><a href=\"https://twitter.com/mntnrsystems\">MNTNR Systems Twitter</a></li></ul><h3>Chris Biscardi:</h3><ul><li><a href=\"https://twitter.com/chrisbiscardi\">Twitter</a></li><li><a href=\"https://www.christopherbiscardi.com/\">christopherbiscardi.com</a></li></ul><h3>Joel Hooks</h3><ul><li><a href=\"https://twitter.com/jhooks\">Twitter</a></li><li><a href=\"https://joelhooks.com/\">Website</a></li></ul>",
    "duration": 1440,
    "episode_number": 37,
    "contributors": [
      "Joel Hooks"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/13vsy",
    "path": "/podcasts/the-changes-gatsby-and-mdx-are-making-to-the-internet-with-chris-biscardi",
    "published_at": "February 15th, 2019",
    "url": "https://egghead.io/api/v1/podcasts/the-changes-gatsby-and-mdx-are-making-to-the-internet-with-chris-biscardi",
    "edit_podcast_url": "https://egghead.io/podcasts/the-changes-gatsby-and-mdx-are-making-to-the-internet-with-chris-biscardi/edit"
  },
  {
    "id": "podcasts-00000000000000000081",
    "title": "Championing a11y and Being Authentic with Lindsey Kopacz  ",
    "summary": "In today's episode, Lindsey Kopacz discusses being authentic about your emotional state, blogging and the dev.to community, and the value of accessibility. ",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/d8235b3f-c22f-4522-a05e-c3cb7fc33555/ca364cc2_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/d8235b3f-c22f-4522-a05e-c3cb7fc33555/1549355601artwork.jpg",
    "simplecast_uid": "d8235b3f-c22f-4522-a05e-c3cb7fc33555",
    "transcript": "<p><strong>Joel Hooks:</strong>         Hi Lindsey.</p><p><strong>Lindsey Kopacz:</strong>     Hello Joel. How are you?</p><p><strong>Joel Hooks:</strong>         I'm doing really well. Thanks for taking the time out to chat with me today. I am interested in a lot of the things that you've been up to, specifically ... to start with, just to throw this out there ... is you talked a lot about ADHA and anxiety, and kind of dealing with that in the fast paced world of web technology. I was wondering do you think software is special in that regard? Do we have special place in the realm of high anxiety fields of study and work?</p><p><strong>Lindsey Kopacz:</strong>     I definitely do. Of course anxiety and ADHD is generally not ... it's not stuck with just tech, but it is exemplified I think with tech. So for example, with everything constantly changing it is ... I'm not the first person to say imposter syndrome exists in tech. Everybody knows that. But I think when you have an anxious go-getter mentality, especially with all of the indie hackers going on now wanting to keep up, and wanting to make sure that we're current, it's really hard to get caught up in that. So I think with other careers, like I don't want to say things don't change, like constantly change or anything because I think that's false, but I think with tech it's just like we're ... a lot of times we are feeling like we're thrown in the deep end. Even if we love that feeling, it's still a very anxious feeling as well, so.</p><p><strong>Joel Hooks:</strong>         It's almost like a magnet for folks that kind of lean that way, in a lot of ways, because on some levels you have to enjoy it, right? Like if you don't enjoy the constant change at some level, you're going to have a really, really hard time. And I'm sure that's true for some folks. To me, it almost seems like it's the bright light and we're anxious moths trying to get to the light.</p><p><strong>Lindsey Kopacz:</strong>     Right. I think it's kind of, as you said, it's sort of a double edge sword. If I didn't have that I think I'd be completely bored. I'd be so bored with that because I love that there is a lot of change, there's new things to learn. I'm currently earning D3, and it's one of those things that I almost feel like a new developer again, because there's so many things that I felt really solid on, but I'm feeling like a newb again and it's actually kind of great that way.<br />                    But it is anxiety evoking if you're not mentally prepared to deal with it, and deal with all that change, so I think for me, and something I always advise other people who are struggling with it, is just know that it's okay. It's okay to struggle with it.</p><p><strong>Joel Hooks:</strong>         You tend to be pretty open about it. I've seen you speak and write about your own personal experiences with ADHD and should we be more open and be more willing to talk about these things in public space? Or how does that help you personally I guess is really the question?</p><p><strong>Lindsey Kopacz:</strong>     Well I think when it comes down to it, one of the best assets that I add to the community and to my employers and whatnot is my authenticity. So I try to be very open about it mostly because one, being authentic lowers the pressure a little bit, because I don't feel like ... if I am struggling with something, I can kind of take step away and not feel as self-conscious about it. Usually because I don't feel self-conscious, it doesn't manifest into this whole snowball of ridiculousness in my head. Because if you suffer from both ADHA and anxiety, it feeds off a lot on each other, so you'll get distracted and then you get anxious about the fact that you're distracted and you're like, \"Oh wait, what was I working on? Oh wait, I'm a highly productive person and I'm not able to focus.\"<br />                    And I'm not even go further than that, but let's just say it snowballs. It can go downhill really quickly. But I just have to be mentally prepared to deal with that. And now I'm feeling a little self-conscious because I have ADHD and I'm like, \"Did I even answer his question? I don't even know.\"</p><p><strong>Joel Hooks:</strong>         No I think you are answering my question. Like to me, how does it personally help to be open, and like the opposite to that is to squish it down into a little ball inside, right? Like when you take all these feelings that you're truly feeling, and disguising your true nature or whatever in the hopes that other people won't be offended or won't be shocked what's occurring. And I think, especially since it is so prevalent in our field, that maybe people do understand. And also you're in a situation where folks don't understand and aren't equipped to help you or be understanding about that, then it's probably not the right place to be at the end of the day.</p><p><strong>Lindsey Kopacz:</strong>     I think one of the best moments I had in my career, which sounds kind of weird in retrospect, is ... I guess it was about three years ago ... I actually had a complete meltdown at work because I was suppressing so much of it. One of my co-workers, who was my friend, just went to my boss, who actually was very, very, very kind. I don't know why I was afraid to tell her, but she was like, \"Yo, Lindsey is struggling right now and we might need to give her a little bit more mentorship and support.\" And I look back and I realize that asking for help when you're struggling isn't a sign of weakness, and I had always thought it was.<br />                    I think I took that lesson and every single time I'm struggling with something, I ask something or ask the question that I need to. The fact is, usually people are way more willing to help. Nobody thinks you're stupid. People are just like, \"Oh yeah, this is a tricky thing.\" Or a lot of developers understand the rubber duck technique where you just like basically talk to yourself and figure out the answer. But still, getting it out there is such a calming thing, and it's probably one of the most important things I've learned as a technologist, let alone as a person.</p><p><strong>Joel Hooks:</strong>         Yeah. Has it ever backfired? Like being open, have you seen any negative side effects from being more open and presenting yourself in that way?</p><p><strong>Lindsey Kopacz:</strong>     Mostly no. In fact, I think I reap more benefits than negative consequences from it, but when I'm open about it online ... I remember I wrote something on Dev.2 and it wasn't ... one of the few things I didn't actually include in my personal blog, but I wrote about tips that I've learned working remotely, and one of them was like, \"If you need to step away and cry, just do it.\" Like that's one of the benefits, is you don't have to worry about people seeing you. You can just get it off your chest and then move on. And somebody basically told me like I need some serious professional help because I was recommending that to people. I mean, I thought that was really obnoxious.</p><p><strong>Joel Hooks:</strong>         Yeah, that's like a drive by internet analysis.</p><p><strong>Lindsey Kopacz:</strong>     Well the ironic part is I've gotten help. I've been in therapy probably on and off since I was 10 or something. My mother was a therapist, which probably helps a lot in understanding my perspective of things, but the good thing about my mom being a therapist is when things were bad, she sent my ass to the shrink. So it really helped that way. I think it's one of those things that we have this huge aversion to crying, but crying is very therapeutic. I found for myself if I suppress the crying I'm way more likely to cry for like hours versus me going and crying for like two minutes.</p><p><strong>Joel Hooks:</strong>         Yeah, it's like putting the pot on simmer all day versus just letting it out.</p><p><strong>Lindsey Kopacz:</strong>     Yeah, exactly. I just started a new job like a month ago. But at my old job if I was struggling, I'd tell my co-workers I'm like, \"Hey look, I'm not doing work right now because I'm just having a mental struggle right now. But I'm going to calm myself down and I'll come back to work in like an hour.\" It was a little easier to do because I was working remotely, but I felt the fact that I could be authentic was actually really respected. People were like, \"Wow, you take care of yourself. We care about you.\" And it felt good to do that, you know? I think most of the times people appreciate it because they know that you care about your work.<br />                    And something that irks me, the other podcast I was on about mental health does, is they talk about resources and how much money you can lose if you don't address these issues, because when it comes down to it, it's important. When we're suppressing it, we actually end up costing ourselves more money, so we might as well give the people who struggle the things they need. So that's why I actually went on their podcast, because I absolutely really care about that.</p><p><strong>Joel Hooks:</strong>         I wish more businesses would think about that in terms of ... You know, well what's the business value of being kind and giving the employee space to have a full range of emotions instead of just ultra productive and happy all the time, or trying to pretend to be those things. When you know if you do that for too long I think you end up crashing, right, like you can't sustain that and you end up leaving if it's a toxic workplace, and that kind of churn is you lose valuable people that way, which is definitely a business reason to have a calm place and give people space.</p><p><strong>Lindsey Kopacz:</strong>     Yeah, like that. And just like caring about your workers but like sometimes you have to present it originally with the monetary savings that you keep a business because it's just easy to get caught up in the numbers. But still, you know. You know how that goes.</p><p><strong>Joel Hooks:</strong>         So you talked about your blog, and that's a relatively new thing for you. Is that true?</p><p><strong>Lindsey Kopacz:</strong>     Yeah. I actually launched it on my birthday last year, so I wanted to add some poetry to it so it'd be like, \"Oh, my blog's birthday is on my birthday. How sweet.\" </p><p><strong>Joel Hooks:</strong>         Yeah, that is nice.</p><p><strong>Lindsey Kopacz:</strong>     Yeah and also I would always just remember that because it's my birthday, so I remember launching it on my birthday. But yeah, it is relatively new. I've been sticking to trying to blog once a week. In December things just got ridiculous so ... as they do ... so I had a little bit of a pause there, but now I'm back in the roll of things, so.</p><p><strong>Joel Hooks:</strong>         What's your motivation there? Why would you start a blog in 2018, I guess is my question?</p><p><strong>Lindsey Kopacz:</strong>     It was something I was toying around a lot with at the beginning of the year. I originally built it in [inaudible 00:10:10] because  that is what I knew. That's why it kind of got slowed down because I don't know if you know anything about [inaudible 00:10:17] hosting, but it's expensive. My motivation for blogging has a lot of folds. It's one, my own learning. Two, I actually do really like to write. Three, I love accessibility and something I've really noticed is that there's so many developers who want to learn about it and every time I've given a talk, I have people walk up to me and be like, \"You should write about this, because the way you present information makes it way less intimidating and scary.\"<br />                    So I just wanted to establish myself as like an empathetic subject matter expert on that. It's been a really interesting challenge. It's gained more traction than I thought it would. But yeah, just that and also I care about teaching a lot. I think when it comes down to it, that's really where my main Dev passion comes, is like with teaching, which is why I was really interested in becoming an Egghead [inaudible 00:11:15] instructor.</p><p><strong>Joel Hooks:</strong>         Yeah it kind of spreads it out a little more.</p><p><strong>Lindsey Kopacz:</strong>     Exactly.</p><p><strong>Joel Hooks:</strong>         So you have your blog, and that's up and running. You're doing ... You have quite a few posts. You kept a really great cadence actually, and I encourage you to keep it up, because what's interesting to me is you look at that and you've been doing this for months now, and keeping your cadence, but now you have this catalog and a resource that people can come to. And not only learn about accessibility, and the other things that you're teaching about, but then also learn about you. And you're really presenting your expertise which I think is, to me, one of the biggest advantages of having your own personal space, and having it in your own space. Because yours is ... what's the domain name? </p><p><strong>Lindsey Kopacz:</strong>     It's a11ywithLindsey.com. Just in case people don't know accessibility, that little abbreviation it's a-1-1-y. A lot of people actually don't know that. So now in retrospect I'm like, \"Maybe I should change the domain to be accessibility with Lindsey, but it's a11ywithLindsey.</p><p><strong>Joel Hooks:</strong>         You can always get that one and have a redect.</p><p><strong>Lindsey Kopacz:</strong>     That's true.</p><p><strong>Joel Hooks:</strong>         Like have a redirect back. We'll put a link in the bottom there for folks to click on. </p><p><strong>Lindsey Kopacz:</strong>     Awesome.</p><p><strong>Joel Hooks:</strong>         But now, so you're building your presence on the internet. You're not like some cog in the medium butcher shop, or whatever, I'm not a big fan. I love that you've started your own space and you're doing your thing on your terms. I think it's great. And then you also ... it looks like, so Dev.2 is a really great online community that allows you to post there as well and give like the canonical, like Google juice, back to yourself too I think. Is that how it works?</p><p><strong>Lindsey Kopacz:</strong>     Right. </p><p><strong>Joel Hooks:</strong>         Because I noticed that there's cross-posting going on.</p><p><strong>Lindsey Kopacz:</strong>     Yeah, yeah. They do allow the ... wait, I always mispronounce this ... canonical, did I say that right, Url. Yeah and plus the community's just way more specific than medium guy, I like that you know my audience is a little bit more targeted there. People can find accessibility, stuff like there's an a11y tag and so if they're looking for accessibility stuff they can click on that. My stuff will definitely appear in some of it. But I cross-posted most of my stuff there. I think I'm only ... I've only not cross-posted my most recent posts. I can go into why, but in order for brevity or whatever I can keep that off unless you want to know. I think that the thing with Dev.2 that's really nice for me is getting feedback too, because I haven't figured out comments yet on my own personal blog and I'm uncertain if I want to add them to begin with.</p><p><strong>Joel Hooks:</strong>         I removed mine. They're horrible.</p><p><strong>Lindsey Kopacz:</strong>     Yeah, part of me is like, \"Do I really want to go through that?\" I don't know.</p><p><strong>Joel Hooks:</strong>         You just have to moderate it at that point. But that's the thing. Like to me, I'm not into moderating it. And to have people go off and then arguments happen, and I've never had like a good quality conversation in blog comment space at all, like ever.</p><p><strong>Lindsey Kopacz:</strong>     I feel like it's comments in general.</p><p><strong>Joel Hooks:</strong>         Yeah, I mean you have comments on YouTube. They're alright on Egghead because we actually limit it to only people that are paying, and even then they go off the rail sometimes. It's like ugh. So I'm like, \"Hit me up on Twitter.\" Like that's my comments, right. Like If you want to talk about it you can email me, or hit me up on Twitter. Basically someplace where I can block people more easily. It's so ... and you know this kind of gets back to the just general anxiety and people expecting and feeling entitled to your time and presence. A lot of times I'm more than willing to give people that, but then people that demand it or are like 100% totally inappropriate, like I just don't have time for that.</p><p><strong>Lindsey Kopacz:</strong>     Right. Oh yeah, no I feel for bloggers that have been blogging for longer than I have, because I'm in that fortunate sweet spot where enough people know who I am, but not so many people know who I am. So I don't have my Twitter DMs clogged or anything yet, and people are demanding for me to give them free advice, which I am very mixed about which I can go into a little bit more detail if you'd like. The reason why I even paused with that is I have so many feelings about things that I could go on the longest tangent in that one respect. But your listener's time, your time, all that, but yeah. Comments in general are just, are good on Dev.2 because they do all the moderating for you first of all.<br />                    And second of all it's like so specific, like Dev community's only had a few fires, for all intents and purposes. My comments, like even the one who I said before who said that, he I think it might have been some sort of language barrier because he actually directly emailed me after his comment got removed and said he was so sorry. So I guess that was kind of a nice thing. But then there's one who was pretty much mansplaining extensively to me, and I'm like ...</p><p><strong>Joel Hooks:</strong>         And here's how it actually is, accessibility expert.</p><p><strong>Lindsey Kopacz:</strong>     Yeah, and then you know I had one of my friends who is blind was responding to him, and then he wasn't listening to her, and I'm like, \"Oh my God.\"</p><p><strong>Joel Hooks:</strong>         And it just goes circular. I think that's what interesting to me about Dev.2 is the community there that allows that cross-posting, and allows those conversations. It really to me is one of the most inviting spaces for developers on the internet right now. I try to pay attention to that stuff, and I think what they do is really quite fascinating and such a good, positive space to have, that we need. We desperately need these spaces where people can feel comfortable and can speak and share and help one another.</p><p><strong>Lindsey Kopacz:</strong>     Yeah, and I've learned a lot from other people's posts too, which is awesome. Sometimes when I'm stuck on a bug, sometimes I search Dev.2 first before I go on like Stack Overflow or any other that.</p><p><strong>Joel Hooks:</strong>         Yeah. So aside from that, what other ... are there other communities that you're involved with that their spaces that have maybe similar traits?</p><p><strong>Lindsey Kopacz:</strong>     Yes. I'm in the DC area, so I'm heavily involved with the women who code DC Group. I used to actually lead the front end night, or be one of them, there's three or four other leads at this time I think, but now I'm one of the leads for the Entrepreneurship group. So like kind of talking to people about site hustles, freelancing, start-ups, stuff like that and trying to kind of get a lot of interactivity, learning a little bit more about this business side of things. Even things that are kind of boring like accounting, I know that's like every entrepreneur's ... well, I don't want to make assumptions. I know a lot of entrepreneurs hate that. They're like, \"I just want to work on my thing.\" </p><p><strong>Joel Hooks:</strong>         I hate that stuff.</p><p><strong>Lindsey Kopacz:</strong>     Yeah, a lot of people do. But you know, helping people with that, understanding even just like how much money of my income ... or how money of my income do I put aside do I put aside? How many dollars?</p><p><strong>Joel Hooks:</strong>         Or how much do I put aside to pay a bookkeeper? And it's funny because people hate it, and I hate, and it's one of those things where you'll bury your head in the sand, but you desperately need to not bury your head in the sand, and face it right up front as quickly as possible otherwise it's gets really bad.</p><p><strong>Lindsey Kopacz:</strong>     Yeah, you don't want to screw yourself over.</p><p><strong>Joel Hooks:</strong>         That's a personal experience story folks.</p><p><strong>Lindsey Kopacz:</strong>     Not to scare anyone. Start your own thing, but don't ignore taxes.</p><p><strong>Joel Hooks:</strong>         That's an interesting concept. So you're saying in real life communities that you participate in. I'm just kidding, that sounds great. Like I think you know like getting out of the house and going and interacting with other people, so. Communities in that space is healthy.</p><p><strong>Lindsey Kopacz:</strong>     It's definitely different now, because I'm working in an office, but I was working remote and it is so hard to get myself motivated to go out, during the winter especially. Because you know, you're just like, \"Oh, I'm at home. Here's my cat. I wanna chill here.\" The next thing you know you're like you haven't been out of the apartment in like three days, and so it forces me to kind of get out. Interestingly enough, I am actually a pretty social person. It's just, like I can easily get in that habit too, so I'm not leaving my apartment when I'm working from home. So let that be a lesson to your listeners. Even if you're extroverted make sure you get out of the house when you work from home.</p><p><strong>Joel Hooks:</strong>         Yeah. So I had a question.</p><p><strong>Lindsey Kopacz:</strong>     Yeah?</p><p><strong>Joel Hooks:</strong>         Why should I care about accessibility? Like I don't need accessible websites, so why should I care about accessibility?</p><p><strong>Lindsey Kopacz:</strong>     I guess this is a little blurb from my upcoming next blog, but my next blog post is going to be why accessibility isn't an edge case. It's one of the few blog posts that I have that doesn't go deep into tech and it's more like an argument. But accessibility has ... there's three main things that I think of. One, business. You'd be shocked at how many E-commerce sites are inaccessible. So if, let's just say we're taking the American population, I believe the statistic is about one out of every five people suffers from some sort of disability, and granted that range is from a variety of things. But you're missing a huge chunk of pie, essentially, of the money pie, if you are leaving off your users from being able to straight up purchase something.<br />                    If you think about basic user experience, and if you make something difficult for a user, they're going to leave. They're not going to buy your products, they're not going to look at your ask. Like I guess that's more marketing speak, like you have an ask of your consumer. They're not going to go searching for that information if you make it difficult for them. The other one is legal. Very relevant now is Beyounce.com actually got sued for-</p><p><strong>Joel Hooks:</strong>         Yeah, I read about that.</p><p><strong>Lindsey Kopacz:</strong>     From a legal standpoint, like I think she was unable to access the menus with her keyboard, and this is a blind user. She was unable to purchase a hoodie, she was unable to learn about tour dates, and it's like, you think about that from a legal standpoint, it's almost like discrimination. You know? And the sad part about it is it's not intentional. Like people don't intend to do it, but it's just a blind spot a lot of us have. Even myself, like there are things I'm still learning, and I'm like, \"Wow, I didn't even realize I had that bias or made that assumption.\"<br />                    The last part is, it's just good practice. Even if you take the accessibility argument out of it, good HTML is inherently accessible, so using semantic HTML also saves the developer time. One of my blog posts was like three simple ways to improve keyboard accessibility. It was actually one of my most popular posts. But one of the tips is using semantic HTML. Like if you have a button, don't make it a div, make it a button. I mean you might have to override a few pieces of styling because you don't like the way the button looks, but you can access it with your keyboard.<br />                    You don't have to build it in JavaScript to make sure that it works with key presses. You can just, once you put a click event on it, it works. It works with your enter key and you're good to go. So it's good HTML and it makes it easier for a developer, especially when you start using JavaScript. It builds in a lot of that functionality for you. </p><p><strong>Joel Hooks:</strong>         I think a lot of times folks consider accessibility just in the perspective of folks with disabilities, right? And it is very important that we consider that and build our websites and web applications with those folks in mind. But accessibility really at the end of the day is for everybody. Like the more accessible your website is, the more inclusive it is and the more people can use it. The faster it is, the better it works. The easier it is for people to navigate and get around and find what they need ... that in and of itself presents, you know, you're casting a wider net and you're making your service more available, and ultimately more profitable and more useful and more valuable across the board.</p><p><strong>Lindsey Kopacz:</strong>     Right. The thing I personally struggle with is I always just want to be like, \"Why should you care about accessibility? Because you want to be a good person.\" Unfortunately that usually doesn't win over stakeholders because they have bosses and they need to have more compelling arguments, and you need to give them. Like a lot of times they actually agree with you, but they need to have something to tell their boss or like-</p><p><strong>Joel Hooks:</strong>         The business.</p><p><strong>Lindsey Kopacz:</strong>     Yeah, you know because even from a financial standpoint if you're like, \"Oh we could get sued,\" that raises eyebrows. But accessibility, like you said, it's good for everyone. I think about it now, I very, very rarely use my mouse to navigate through things on my Mac. Like I use the app switcher, I use keyboard shortcuts to go through all of my tabs, which is like right now, oh gosh, at least 20. </p><p><strong>Joel Hooks:</strong>         It's better for your hands, for one thing. Right? Like just long term using a computer, like keyboard navigation and that sort of thing. You know for some folks I think a mouse is probably the most appropriate device, but then for other people using the keyboard is the way to go. It's just more efficient. [inaudible 00:24:56]</p><p><strong>Lindsey Kopacz:</strong>     Exactly.</p><p><strong>Joel Hooks:</strong>         So talking about like the work situation, right, like you're in a job and my observation is that every time accessibility is a priority on a project, it's because somebody is being the champion and insisting that we focus on that and bringing it up in every meeting, and every sprint planning session there's a person in the back that's saying, \"Hey, how are we making this accessible? Are we focusing on keyboard navigation? What are we going to do for screen readers?\" And I was wondering if that's something you've experienced and if so, how ... and should we, you know as developers be individually championing the accessibility of our applications that we build? An accessibility champion.</p><p><strong>Lindsey Kopacz:</strong>     Do you want to be like an accessibly champion? Is that what you mean?</p><p><strong>Joel Hooks:</strong>         Mm-hmm (affirmative), yeah.</p><p><strong>Lindsey Kopacz:</strong>     Okay. So if you were like new to accessibility I think the best part for being an accessibility expert for me is I can always chime in and say, \"Hey, have we thought about this? Have we thought about that?\" Even if you're not an expert, you can start that right now. You can be like, \"Hey, this is ...\" For example, I'm doing a lot of D3 stuff right now at my new job, and you have to think about okay, so what are we going to do for the people who can't see these crafts? Like how are we going to give them the data? How are we going to give people the data, like if it's an interactive D3 visualization, if somebody cannot use their mouse how are they going to interact with that data? How are they going to see those data points?<br />                    Like sometimes you click on something and the little like a tool tip pops up or something, so making sure that we, at the very minimum, have a fallback for it, and we're thinking through those things. So even just thinking about like you know the senses right? Like if somebody cannot see, how are they going to interact with somebody? If somebody has difficulty moving, like how are they going to interact with that? And just thinking about even things like cognitive disorders, like what is going to stress people out? One of my favorite posts that I researched was actually one about dyslexia because it's one of the things that I never really thought about. Even as an accessibility expert. So it's very much a learning post for me.<br />                    So like I started thinking like how, if my content is overwhelming, what are the ways I can make my content better? And one of the things that I realized is having a fallback like letting people listen to my posts, which I think benefits a lot of people not just people who suffer from Dyslexia, but people who maybe want to like listen to it in the car, or whatever. So I've been using my friend Kyle's product that he's been building called Parler.io, so it's P-a-r-l-e-r.i-o. And it's really cool, like if you have a RSS feed you can just put it in for your blog and you can select whatever blog post you want to do, and it transcribes it for you and you can just pop it right in. It's really cool.</p><p><strong>Joel Hooks:</strong>         Oh that is neat.</p><p><strong>Lindsey Kopacz:</strong>     Yeah, I've been using it. I think I've sued it on all of my blog posts. So if not, I should probably do an audit and make sure it's on all of them.</p><p><strong>Joel Hooks:</strong>         Yeah, we have like the opposite problem on Egghead right? Because we have videos, and videos are inherently inaccessible. So for the longest time we didn't have transcripts, and then we got transcripts, and then those are okay. But now we're going back through and actually, well if somebody's just reading this how can it be ... how can they get the same amount of value out of that, and enhancing them to where they're more like a written tutorial with in line code and all that kind of stuff. Then last year we finally, finally got closed-captions in only English so far, but it's like a layer up process of how we can make this more useful to more people ad make the internet a better place for the most people possible, I think, is a pretty good goal.</p><p><strong>Lindsey Kopacz:</strong>     Right. And you know you also think about that too from, like my instinct is not only does that help from an accessibility standpoint, it also helps from your mission. Your goal is to help people learn, but some people learn better from video tutorials and some people learn better from like listening to things or reading things or whatever. So like it kind of helps with multiple different learning styles. So you know one of those things again is accessibility is beneficial to everyone. So, another selling point to that.</p><p><strong>Joel Hooks:</strong>         Yeah, I agree with that. Well Lindsey, it was really great talking to you, and just to close it out, where can people find you on the internet? Where are you at and hanging out in various communities?</p><p><strong>Lindsey Kopacz:</strong>     I'm on so many slacks. I'm on ... you know what, I can't even remember slacks. But the first thing I will always tell people is to interact with me on Twitter. My Twitter handle is LittleCode0903. I am fairly active on there. Sometimes I have quiet times, probably during the weekends but I really like interacting with people, talking about tech. It's a great space. I've actually learned to really develop a community there. And yeah, I'm trying to think. I'm on so many slacks. Like I'm on Dribble Slack, DCTech Slack.</p><p><strong>Joel Hooks:</strong>         Now you need to like do a blog post that lists all your favorite slacks. I think that's the next step. </p><p><strong>Lindsey Kopacz:</strong>     Yeah, yeah. There's a few also that I know I want to join, too, so like I think I'm a member of like 25 slacks, but I'm only active in maybe like five or six of them.</p><p><strong>Joel Hooks:</strong>         I've gone the opposite direction with slack. Where I was a member of about 25 of them and now I've reduced it down to one or two.</p><p><strong>Lindsey Kopacz:</strong>     Yeah, I mean it's overwhelming, so you kind of have to. </p><p><strong>Joel Hooks:</strong>         It's the notifications. They get me. And like I just ... I've been on a rampage of reducing notifications and all that [crosstalk 00:30:52].</p><p><strong>Lindsey Kopacz:</strong>     Yeah, luckily I'm pretty good at using the DND setting, so unless I like see the little one or whatever, the little message thing on slack, I avoid it.</p><p><strong>Joel Hooks:</strong>         Great, that's the way to go. All right Lindsey, it was great talking to you. Cheers.</p><p><strong>Lindsey Kopacz:</strong>     Cheers.</p>",
    "slug": "championing-a11y-and-being-authentic-with-lindsey-kopacz",
    "description": "<p>Lindsey Kopacz, web-developer and accessibility blogger, joins us today to discuss:</p><ul><li>The positives that being authentic and public with your emotional state provides.</li><li>Her blog and the excellent dev.to community</li><li>The business value of accessibility</li><li>Accessibility in a sense that isn't limited to people with physical disabilities</li></ul><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/ca364cc2/transcript\">\"Championing a11y and Being Authentic - with Lindsey Kopacz\" Transcript</a></p><h3>Resources:</h3><ul><li><a href=\"https://dev.to/\">dev.to</a></li></ul><h3>Lindsey Kopacz:</h3><ul><li><a href=\"https://twitter.com/littlekope0903\">Twitter</a></li><li><a href=\"https://www.a11ywithlindsey.com/\">a11ywithlindsey.com</a></li></ul><h3>Joel Hooks</h3><ul><li><a href=\"https://twitter.com/jhooks\">Twitter</a></li><li><a href=\"https://joelhooks.com/\">Website</a></li></ul>",
    "duration": 1872,
    "episode_number": 36,
    "contributors": [
      "Joel Hooks"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/24ysd",
    "path": "/podcasts/championing-a11y-and-being-authentic-with-lindsey-kopacz",
    "published_at": "February 5th, 2019",
    "url": "https://egghead.io/api/v1/podcasts/championing-a11y-and-being-authentic-with-lindsey-kopacz",
    "edit_podcast_url": "https://egghead.io/podcasts/championing-a11y-and-being-authentic-with-lindsey-kopacz/edit"
  },
  {
    "id": "podcasts-00000000000000000080",
    "title": "Learning to Code from Scratch on the Modern Web with Tae'lur Alexis",
    "summary": "Tae'lur Alexis joins us today to talk about her experience with learning to code from scratch and becoming a professional software developer in 2018.",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/9b21c94c-7ebb-4f3a-b032-a39f8e6a0a51/4ece8b44_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/9b21c94c-7ebb-4f3a-b032-a39f8e6a0a51/1548387520artwork.jpg",
    "simplecast_uid": "9b21c94c-7ebb-4f3a-b032-a39f8e6a0a51",
    "transcript": "<p><strong>Joel Hooks:</strong>         [inaudible 00:00:01].</p><p><strong>Taelur Alexis:</strong>      Hi Joel.</p><p><strong>Joel Hooks:</strong>         I wanted to talk to you about being a self-taught, self-directed programmer and get into programming from a life of working service jobs and doing this and that to transitioning into becoming a programmer. What was the initial motivation for you to switch out of what you were doing and become a coder, in terms of your professional life?</p><p><strong>Taelur Alexis:</strong>      I didn't have any prior exposure to computer science or programming as a child. In fact, I didn't even know what it was until I was about 20, 21. So I came across it last year, when I was trying to figure out what I wanted to do with my life because I was working in retail, customer service, fast food and whatnot and I really was unsatisfied with the treatment. I just didn't feel as if the work I was producing was fulfilling to me.<br />                    Basically, I looked up different jobs and whatnot that were out there and my mom actually ... you saw [inaudible 00:01:01] was really good with the computer and everything. But I mean, I think that's like a generational thing 'cause I was raised with the PC and everything from like a child, so I was always on it.<br />                    But I never did anything technical with it or whatever. I was just always Googling stuff and I love Wikipedia. I came across, okay, like IT and then, software development. I tried the whole IT route for a second and when I mean a second, I mean a whole second. I tried to learn computer networking and I was like, \"Oh, okay. Yeah, I didn't ...\" I wasn't interested in at all.<br />                    But then I came across Code Academy and I learned the basics of Python and then, I was like, \"Okay, this is interesting.\" But I didn't know what I was doing. I did not know why I had to learn variables and whatnot like that. So that was February or January of 2017 and then, I didn't revisit it until the Summer or Fall of 2017, really.<br />                    That's when I came across web development and that's when I was like, \"Oh, okay. Like I heard about Udemy, and Egghead and Medium and whatnot. Then I started to [inaudible 00:02:06] different resources and then I was like, \"Okay, I actually like this.\" I like the idea of building websites because I like the gratification that you get seeing your code transition into the browser and everything. I was like, \"Oh, okay, I really like this.\" So that's how I kinda stumbled into. It was a random chance meeting, I guess.</p><p><strong>Joel Hooks:</strong>         So you find Python and you hit variables and arrays and strings and all that fun stuff for the first time. Did that turn you off from programming for a minute?</p><p><strong>Taelur Alexis:</strong>      Only because I didn't know why I needed to learn it. I didn't understand the practicality of it. Yeah. 'Cause I mean on Code Academy it's just, you're filling in spots and you're reading the text and everything, but I'm not really understanding why and how you use this in an application, and how this would be appealing for me.</p><p><strong>Joel Hooks:</strong>         It feels like third grade when they're trying to get you to learn multiplication tables, I think a lot of times.</p><p><strong>Taelur Alexis:</strong>      Right? Yeah. Yeah, it's like, \"Why do I need to learn this?\"</p><p><strong>Joel Hooks:</strong>         Everybody's like, \"Math is really fun. You'll love it. Math is so much fun.\" And they're like, \"Okay, 12 times 12.\"</p><p><strong>Taelur Alexis:</strong>      That's true though.</p><p><strong>Joel Hooks:</strong>         Yeah, it is. I see it all the time. Programming, obviously, it's interesting. It's a puzzle. You can do all sorts of things. You can create wealth, you can make startups, you become a bazillionaire or whatever, but you have to learn what variables are and how to concatenate two strings and what an array does. It's just like a carton of eggs. It's all this stuff that you have to climb up before you get there. Then there's no visual representation. You don't get a lot out of that. They'll be like, \"Make a hangman game or something.\" Something silly that doesn't ... isn't a lot of fun.</p><p><strong>Taelur Alexis:</strong>      Right, exactly.</p><p><strong>Joel Hooks:</strong>         So at that point, you're in the summertime and you find front-end development basically, is what I'm hearing. Is that the case?</p><p><strong>Taelur Alexis:</strong>      Yes I did.</p><p><strong>Joel Hooks:</strong>         So what's the appeal with the front-end versus learning the other stuff? As a newcomer and for yourself, what was the appeal of front-end web development?</p><p><strong>Taelur Alexis:</strong>      When you're just coming in to the whole world of software development and whatnot, you don't really understand what the differences are. Running development and back-end and all that kind of stuff, but for me, what appealed me to front-end development was the fact that I was able to utilize my creativity and also, to be able to see what I was like creating 'cause I really do love that. It's grown into me wanting to get deeper into user experience.<br />                    But at the time, I just liked the idea of building landing pages. I thought it was like really fun. The way I would approach it, I was using a Udemy course at the time to learn web development. We were learning, of course, HTML CSS and Bootstrap.<br />                    So that's what I knew during that time in the Summer and I would just build up different landing pages that were just based off of little life startups that I had in my head of what I would want to build and everything.<br />                    Looking back. Yeah, I think I really loved programming because I wanted to build products, but I didn't understand that at that time. I loved the idea of designing a layout or a company that I had in mind. At the time, I was thinking of building a coffee house landing page or a music site and everything. Just stuff like that.</p><p><strong>Joel Hooks:</strong>         Yeah, I mean that's fun too because you get the instant feedback and you can come up with a creative idea and you can explore the future. But at the same time build something and learn how to code it up, while you're at it.</p><p><strong>Taelur Alexis:</strong>      And then show it to you're mom and stuff.</p><p><strong>Joel Hooks:</strong>         Yeah. It's like you can't show your mom your console logs. They're never perfect. Wow. You made some text go. Cool. So I saw you first on Twitter and I'm sure that's the case for a lot of folks. That you start to use the social network and Twitter, in general, seems like it really is associated with modern developers. That's where a lot of developers hang out. Right? That's where the community is. I was wondering how you use Twitter and how Twitter has played a part in your path to learn how to code and become a developer and look for employment and that kind of stuff?</p><p><strong>Taelur Alexis:</strong>      Social media is really essential for me. It really did not start off like that. If I can remember correctly, I only started tweeting last year because of the 100 days of code challenge. Before that, I was never a social person, where they're online or in real life. I didn't like Instagram because I didn't like the idea of having to constantly post pictures and usually selfies, right? And I'm not very consistent. Well, now I am a Twitter but at the time I really wasn't consistently, like social media.<br />                    I found a community of people who are really just encouraging. The whole 100 days of code community, as well as the code newbies community. They're just from all different kinds of backgrounds, all over the world and just super nice.<br />                    I really felt encouraged by people to consistently post updates on the projects I was fielding and what I was learning. It was also a way for me visually document progress. I believe that helps me gain, I guess, some visibility and it led to some companies reaching out and everything like that.<br />                    That didn't happen until July of this year. So it had been six or seven months or whatever that I was on there before I got many career opportunities. Before that I'd network with really cool people, like great friends and whatnot. People I can potentially work on projects. That helped me build up my confidence and my skill. I learned how to communicate better because people ask me questions about my code because I had my GitHub up and stuff and I'll post random little code stuff or whatever.<br />                    I think being able to communicate your code and everything to people in a way that they can understand, as well as showing your projects and what you built, that in a way is selling yourself and marketing who you are and what you can do and what you can produce. I think that's what a lot of employers look for.<br />                    But I know that's how I got the attention of a few companies who reached out in the Summer of 2018 and it led to that and it's still like that. I see people that post job [inaudible 00:07:50]. Even I've done it. It's pretty simple like, \"Hey, I'm Taelur Alexis. I'm a front-end developer who specializes in building assessable unit interfaces with React or whatever. I know this and that and here's the link to my GitHub and my Linkedin.\" Give me a job, basically. A lot of companies are on Twitter and they do notice and stuff. So yeah, that's how I got my first job actually.</p><p><strong>Joel Hooks:</strong>         It's unique in that regard too, Twitter. To me, you're not going on Instagram and getting coding jobs or Facebook or whatever. Facebook, maybe you have a family member, a distant friend or whatever. But Twitter has this ability that lets us as programmers develop our personal brand or whatever, for lack of a better word and put it out there. There's a lot of other folks like us watching.</p><p><strong>Taelur Alexis:</strong>      You're breaking down barriers between you as a developer and higher up people. I've been able to converse with people who are way more experienced, way more successful than me that have created different frameworks and whatnot. It kind of lessens that whole bubble and everything. You're able to really access different people that are potentially useful or knowledgeable and stuff like that.<br />                    I think that's really, really important because when you're a a developer in the industry, when you're newer, it often be scary to approach people like you. You know what I mean? You're the founder of Egghead and stuff but you're really cool. You'll comment on a code newbies Tweet or something. You're really relatable and approachable and stuff like that. But we don't know that 'cause we see your title and then a lot of us are like, \"Oh crap.\"</p><p><strong>Joel Hooks:</strong>         Yeah. I mean, social media in general, right? Across the board, but in terms of the development space, it can lead to comparing yourself to others and their success or they are going faster or they know more than you or whatever. I feel like that can be a problem. How do we avoid that and is it even healthy to sit there and compare ourselves to others all the time?</p><p><strong>Taelur Alexis:</strong>      It's not. It's not, but it's inevitable. A lot of people have the tendency to only tweet the good parts of the coding [inaudible 00:09:48]. There's a tendency to be like, \"Oh, I learned this in like a day and I built this and it looks super epic.\" And here you are not being able to send her a div in CSS. You know what I mean?</p><p><strong>Joel Hooks:</strong>         I spent six hours today finding a stray semi colon that was killing my whole program.</p><p><strong>Taelur Alexis:</strong>      Right. So I try to balance that and not just tweet the good things about the whole journey or the interview process. I also try to tweet failures and obstacles I've had to overcome because I think that provides a sense of balance and really trying hard and not to be on social media 24/7 helps.<br />                    Try not to compare yourself to others. It's a hard thing to do but it's definitely impossible, if you put certain barriers and also realize that your journey's different from other people. Just because this person got to the destination a little bit faster than you does not mean that it's going to stop you from getting there too or even further.<br />                    It's just looking at it like that and just being supportive of people. If you can turn you're, I don't want to say jealousy, but basically, jealousy or envy towards others into support and motivation. Instead of being sad that someone got a job before you, actually comment on their reply or something, on their tweet and be like, \"Hey, congratulations.\" You never know, you could gain a friend or a connection or possible breakfast to accompany. You know what I mean?</p><p><strong>Joel Hooks:</strong>         Yeah, it's like being on a team. If your teammates scores, you don't get sad about it. You should just congratulate them and move on and play your game, right?</p><p><strong>Taelur Alexis:</strong>      Exactly. It brings good karma.</p><p><strong>Joel Hooks:</strong>         Yeah, I agree with that. So I want to rewind a little bit and you've mentioned code newbies a couple times and then 100 days of code. I've been aware of what they are and I'm far removed, right? I've been programming for 10 years. I'm so interested in what it's like learning ... Like when I was learning, I didn't even ... we barely had stack overflow. I think it had just been founded and these days with like 100 days of code is awesome and code newbies is great and I was wondering what your experience is with those two groups of folks, which seemed to overlap a lot to me on Twitter [inaudible 00:11:43].</p><p><strong>Taelur Alexis:</strong>      Yeah, pretty positive. I often use the hashtags in mind [inaudible 00:11:49] when I was documenting my daily progress with learning how to code and all that kind of stuff. Code Newbies, I know they have a Q and A discussion. I don't always participate in them. Not for any particular reason. I just have ADD and always doing 10 billion different things.<br />                    I like that they ask questions that are pretty open-ended and I like to see the responses from people. I do love how inviting those communities really are and how everyone is very supportive. Every day, you'll see someone on Twitter saying, \"Hey, I'm going to make the public commitment and the pledge to try to code for at least an hour a day with the 100 days of code challenge and stuff.\" You'll see people retweet and like it and give feedback and you end up finding mentors. My experience with mentors is iffy. It's up and down.<br />                    My first mentor was great and I had met him off of that, actually. It's a great way to find mentors without even trying to find mentors, honestly. Feedback on your projects because that's really, really important especially when your self-taught and you're not in a coding bootcamp or in a computer science curriculum, where you have instructors and TA's that are able to review your work and grade it.<br />                    As a self-taught developer, you don't have that. You lack the structure and guidance and whatnot. You don't often have people grading your projects and so people will give you their opinions of it and stuff like that. That can be really, really helpful and can help your growth and everything. You end up learning from different people of different backgrounds. You'll get followers who are senior developers or engineering managers, but also people who are on your same level or probably a junior developer mid. Those communities really helped with that.</p><p><strong>Joel Hooks:</strong>         Yeah, I don't know. At first I thought, 100 days of code, this some sort of scheduled thing. But it's just people picking it up and using the hashtag. Is there even an organization or is it just an organic thing that exists on Twitter?</p><p><strong>Taelur Alexis:</strong>      I don't know.</p><p><strong>Joel Hooks:</strong>         Code Newbies is an organization.</p><p><strong>Taelur Alexis:</strong>      Yeah, that's an actual organization [inaudible 00:13:54].</p><p><strong>Joel Hooks:</strong>         They run a conference, it's great, in New York. My son went last year. It was amazing. So that's an organization. 100 days of code almost feels like this organic thing that's just kind of spared it up. I liked the Code Newbie questions too when they come through because a lot of times they're ... even as an experienced developer, it's like they're relevant to us and we can share answers too. So it's pretty fun and I like seeing social media used in that positive way too.</p><p><strong>Taelur Alexis:</strong>      Right. With the 100 days of code, I don't think it's an organization. I think it's more of just a challenge where you publicly make a pledge to code for at least an hour a day. It's just a challenge just to help keep you productive and active and help you attain your goals. But that's how I interpreted that to be.</p><p><strong>Joel Hooks:</strong>         Yeah, I think that's what it is. It's just an accountability and a little bit of instant community. You're right. If you're sitting there trying to learn something and you were in a vacuum and have nobody to talk to or give you any sort of feedback, it makes it way, way harder to learn anything, I think at any level.<br />                    It's great but it also has its drawback. So talking about learning resources, and I know you have to have a favorites, but do you have ... What's your favorite learning resources that you found, as somebody that's trying to start and break into web development? What would you recommend?</p><p><strong>Taelur Alexis:</strong>      What helped me the most was Udemy. 'Cause I had courses that would teach me web development from the front to the back-end and also how the web works and everything. In a way that was structured and helped me.</p><p><strong>Joel Hooks:</strong>         Is that Colt Steele?</p><p><strong>Taelur Alexis:</strong>      Yeah.</p><p><strong>Joel Hooks:</strong>         I hear that a lot though and I haven't taken his courses and I need to just ... I would like to watch them just 'cause people love it so much. But what is it about Colt's teaching style that really spoke to you and how is it useful?</p><p><strong>Taelur Alexis:</strong>      His instructor style is really on par. It's really, really good. He's able to break down concepts in a way that you can understand and he's really helpful. He'll review, before the next lesson or at the start of the next lesson, he'll review what you just learned and how that's going to help you learn this more advanced concept.<br />                    He also sprinkles in little projects along the way. For me, with the projects, he was having us build. In the beginning, yeah, they may seem basic little light to do apps or landing pages, but if you're creative, you can take those little projects and expand on them and make them more creative and use your imagination and everything like that.<br />                    Yeah, he's really, really good with that. He's really good with being able to take knowledge that at first sounds really hard to comprehend and just make it simple and easy for you to understand. But he doesn't try to talk to you in a way that you're like, \"Oh, you're dumb or something.\" You know?</p><p><strong>Joel Hooks:</strong>         Yeah. He's not talking down to you, but he's teaching and lifting you up versus, I don't know. If you're condescending about it then, that doesn't help anybody for sure.</p><p><strong>Taelur Alexis:</strong>      Right. Yeah, I was taking his web development or web developer bootcamp. That's what I was taking. That was my first Udemy course. I also have taken Andrei Neagoie. I don't know how to pronounce his name, but he has a course, it's Zero to Mastery, which is pretty similar actually to other bootcamp. But it also adds in technologies that are pretty in demand today, like React and Redux and stuff like that.<br />                    But I always say for people to start with a web developer boot camp. It's only $10 usually on sale on Udemy. But what I recommend to people who are just learning how to code, I don't necessarily recommend them to start off with paid content first. Try to learn the base of HTML and CSS. See if you even like it or learn the basics of Python, I guess, because people always recommend Python. For free content to start off with, I always say, \"Okay. Yeah, Free Code Camp.\"</p><p><strong>Joel Hooks:</strong>         Yeah, for sure.</p><p><strong>Taelur Alexis:</strong>      And Code Academy.</p><p><strong>Joel Hooks:</strong>         Free Code Camp is amazing. The HTML and CSS portion, I've really been impressed by, in terms of a way to to break in and just start learning that stuff, which is a pretty good starting point.</p><p><strong>Taelur Alexis:</strong>      Exactly. Yeah, I definitely agree. And then after you did a little bit of that you can start to expand and use other resources and whatnot. For me, in my journey, I used a lot of resources which can have its pros and cons and one way you're not bound to one way of learning or one instructor and everything.<br />                    On the other hand, you get into learning the same thing, over and over without even thinking about it or it can slow down your progress. So it's just, in one way, I encourage people to explore and find out what they like. Find out what courses or what websites are best for them and then go from there. Always keep medium. I Medium MDN as bookmarked and everything to reference</p><p><strong>Joel Hooks:</strong>         Now that's MDN in Mozilla. I think it's developer network or something.</p><p><strong>Taelur Alexis:</strong>      Yeah, Mozilla developer network. We're WT3C schools.</p><p><strong>Joel Hooks:</strong>         Yeah, I'm not a fan of them. I really like MDN.</p><p><strong>Taelur Alexis:</strong>      You're not a fan of them?</p><p><strong>Joel Hooks:</strong>         No. I don't know. Their search engine dominance is definitely ... They'd come up in the top result every time. They're really good at that, but I mean, I just prefer MDN, in terms of ... like that kind of documentation site about the browser APIs, basically. You can't not go to W3 schools because they like the top of every single result when you type in array push or array shift, for the 50,000th time to look up what re shift does. That's what's going to pop up for you.</p><p><strong>Taelur Alexis:</strong>      Do you find yourself still looking up array shift and everything like that? Or [inaudible 00:19:24] for something?</p><p><strong>Joel Hooks:</strong>         I've stopped using those in favor of low dash for many years, but I'm on the low dash documentation every time. I'm like, \"How do I add something to this array or how do I remove something or what's the low dash version of slice?\" Or if I have to use slice, I gotta look it up every single time. Yeah. You can't keep that in your head.<br />                    Overtime, you do absorb a lot of it. I can code sometimes for hours without having to look at documentation. But it's not a day goes by that's not some sort of Google search to figure out what's going on because that's far as the human brain works. You got to have room for other stuff too. There might be people that are like, have their array API memorized completely and know right off the top of their head exactly what unshift does. Because it gets weird because you also had to know, what's the return value and does this mutate your array and all that kind of stuff. All the side effects that occur with those things too. Which is why load dash is just generally superior, in my personal opinion. They should just merge.</p><p><strong>Taelur Alexis:</strong>      What is low dash?</p><p><strong>Joel Hooks:</strong>         Low dash is probably one of my favorite all time APIs. It's generally built to manipulate collections and objects and do things like add objects to array or get the first item from an array or get the last item from an array. You do it in a way that doesn't mutate the original, so it's immutable and then, you get a consistent return result.<br />                    Also, John David Dalton who writes it and works at Microsoft is a really, really competitive person. So he tries to write low dashes methods to be faster than the browser version of those methods. So it's like, map and reduce and filter and all these different array methods that have come over the last few years. He tries to write versions of those that are even faster or guaranteed to be as fast as whatever browser implementation you're doing.<br />                    It's a really wonderful library and worth the time to poke at and learn. Yeah, it's the first thing I install anytime I start a new project. After it's fired up, it's going to be yarn add, low dash.</p><p><strong>Taelur Alexis:</strong>      Does it have any tutorials on it?</p><p><strong>Joel Hooks:</strong>         We don't.</p><p><strong>Taelur Alexis:</strong>      Oh really?</p><p><strong>Joel Hooks:</strong>         We're holding out for JD to record for us and I talk to him a couple times a year. I even come visit Seattle and I go walk around the Microsoft campus with him and enjoy his company and hope that one day he'll have the time, I think really to record something for us. But then he's like, \"Oh, I wouldn't even record low dash. I would want to report how to build low dash.\" And I was like, \"Well, that would be better.\"</p><p><strong>Taelur Alexis:</strong>      Oh wow.</p><p><strong>Joel Hooks:</strong>         I should just [inaudible 00:21:44]. Yeah 'cause I could hear your hesitation, like I was asking you a trick question about your favorite resources. Egghead is not a great resource for beginners.</p><p><strong>Taelur Alexis:</strong>      I was trying to be as unbiased as possible. 'Cause I did not encounter Egghead until after I had already learned HTML, CSS and some Javascript.</p><p><strong>Joel Hooks:</strong>         Yeah. We cater to people that know all the basics, the generally. I send people to Treehouse. I send people to Free Code Camp. I should send more people to Colt Steele, Udemy as an organization bothers me, but Colts is an amazing person.</p><p><strong>Taelur Alexis:</strong>      Really? Oh crap. I kind of want to ask why.</p><p><strong>Joel Hooks:</strong>         No, no, no. They're just too loose, I think is the base of it. The sale that's always expiring in 11 hours kind of grinds my gears a little bit.</p><p><strong>Taelur Alexis:</strong>      Yeah, 'cause it's BS 'cause it's going to be up like the next day.</p><p><strong>Joel Hooks:</strong>         Yeah, it's just like ramping somebody's anxiety just for a sale and it's this dark gray pattern trick-</p><p><strong>Taelur Alexis:</strong>      And the instructors are only paid off ... they're only pay 50% off the $10 sale. Right?</p><p><strong>Joel Hooks:</strong>         Yeah. I don't even know if it's 50%. I don't know their deal. It's kind of more of a business objection then the content, 'cause there's a ton of great content on there and it's so accessible to folks. Especially people that are just getting started, like having inexpensive and free resource is important. Across the board, we need more of that and that's what the Internet should ... that's part of the reason it should exist, anyway.<br />                    One of the things that I think is interesting, you talked about it with your Twitter habits and your learning is, what are the habits that you have to build? How do you actually stick to this, whether it's 100 day of code or just in your personal day-to-day? How do you, one, make the time and two, be consistent and stick with it over the long haul?</p><p><strong>Taelur Alexis:</strong>      So I'm going to tell you how I did it wrong.</p><p><strong>Joel Hooks:</strong>         Yeah, that's great too.</p><p><strong>Taelur Alexis:</strong>      I mean, 'cause when I was learning how to code, I was dedicating eight hours to 10 hours a day, while I was working a full-time job and trying to balance a relationship and whatnot. I would go so hard because I was like, \"Oh well, I have to because I want to build this. I want to get this done. I want to learn this fast and duh, duh, duh, duh.\" So effective time management is really, really important.<br />                    Just making small goals helps you with your confidence and everything. Because if you try to set to learn 10 different things or to code for eight or 10 hours a day and you end up not accomplishing that then, you're gonna feel like as if you didn't progress. Setting small goals everyday really helps.<br />                    An hour a day, if you can. I can try my best to speak for other people but my situation, it's different in a way from someone that may be a parent. You know what I mean? Or taking care of their parents or something. For me, I don't have kids, so I have the freedom to do that or whatever. At least trying to set a goal for coding, like an hour day is really helpful.<br />                    Also, give yourself some kind of structure. I swear Joel, there are people who are trying to learn three different languages at the same time.</p><p><strong>Joel Hooks:</strong>         That's hard.</p><p><strong>Taelur Alexis:</strong>      Very hard. I'm not going to say it's impossible because I don't want people attacking me on Twitter, but setting realistic goals. I think that's my main answer for that question.</p><p><strong>Joel Hooks:</strong>         I've seen people trying to learn game development, just as an example and then putting a AAA super game as the target versus, I just want to make my little guy jump or I just want to make my little guy shoot a fireball. Some sort of like small attainable thing that you can do that actually makes progress to the bigger picture.</p><p><strong>Taelur Alexis:</strong>      Exactly.</p><p><strong>Joel Hooks:</strong>         Yeah and then consistency too. I think that's important. However much time you can carve out and carve it out and then, consistently stick with it over time. Because if you just stick with it, if you don't quit, it's pretty amazing, I think what we can do.</p><p><strong>Taelur Alexis:</strong>      Exactly. So do you have any advice for people that are trying to stay consistent and everything? [inaudible 00:25:35] burnout.</p><p><strong>Joel Hooks:</strong>         I think that comes, one, from not meeting goals or setting goals that are not attainable or just like straight up life happening and having too much and so much is going on and then, you're just doing too much for too long.<br />                    Honestly, when I was younger, I could do it more. I learned how to program on my own, self-directed at my house, after I got done working my day job. I was burning the midnight oil going all night, but at the same time, I had to do it. I felt compelled and I had to get there 'cause there was no way I could get out of my current career and jump into a new career so I could advance.<br />                    But I had to jump in at a level to where I could continue feeding my family, right? Like I couldn't come in and half my salary and just work through that. I had to figure out how to jump in and be, I'm using air quotes, the senior developer right out the gate.<br />                    But then at the same time, you do that for six months and it really will. You'll crash and so, you have to balance and you have to set a realistic schedule and your consistency has to include, consistently taking care of yourself and getting enough sleep.</p><p><strong>Taelur Alexis:</strong>      Self-care.</p><p><strong>Joel Hooks:</strong>         Eating properly and even simple stuff like staying hydrated, right? 'Cause you can sit there with the computer, I know when you're really into it and you're really going hard, you can forget about almost everything and zone out and not take care of yourself at that point. Which is, if you, if you don't do that long-term, then it depends on how you define success, but it can definitely be detrimental to your actual goals that you're trying to achieve.</p><p><strong>Taelur Alexis:</strong>      I think for me, because I was coding everyday for eight to 10 hours. It went to a point where I ... Yeah, I have burnout and then ultimately fall out of love with programming for a little bit. Not for too long. But yeah, so kind of adding to what you're saying, self-care is really important.<br />                    Especially, when you have found your passion, which maybe coding, like how it is for me. If you really do care about your growth and your progress with your potential career in tech and everything, then you have to prioritize self-care in the beginning and also, demand that in your everyday work life and actually do get a job as a developer.</p><p><strong>Joel Hooks:</strong>         Yeah and I mean, it's easy to forget, I think, for a lot of people too. It's absolutely essential 'cause if you want to do this for a long time, then you have to take care of yourself That's true with most anything, I think.</p><p><strong>Taelur Alexis:</strong>      I've taken a break from coding for a week now. I'm supposed to be learning Ruby on Rails in the next couple of days and messing with, I guess, Redux or something. But back then, I would not know that I would be actually comfortable and fine with saying that now. Back then, I was like, \"Oh I got to code every day, duh, duh, duh, duh and I have to code for like hours on end.\"<br />                    Now that I've learned the consequences of thinking that way, I'm able to be a bit more relaxed and it's actually made me love coding even more because I do it out of passion for it, not necessarily out of necessity because I need to.</p><p><strong>Joel Hooks:</strong>         Yeah. So beyond the code, right? You get past the first hurdle. But then, you figure it out and now you understand what a variable is, what an array is and beyond that, right? You're able to build things and you understand what's going on.<br />                    Then it's time to go out and actually try to get paid to do the thing. That means job interviews and talking to people and the job hunt in general. I was wondering what that interview process has been like for you and what have you learned? What have your takeaways been from the process of finding work and getting work in this field?</p><p><strong>Taelur Alexis:</strong>      When I was trying to find my first job, it was hard because yes, I had a portfolio site that was pretty good and I had some decent projects or whatever. I didn't have a network and I didn't really know what I was doing. I would just constantly apply to jobs and I would always get rejected.<br />                    The few times that I had interviews 'cause I only had maybe like three, three or four interviews before I actually got my first job. It was pretty challenging and I was also in a city that wasn't known for [inaudible 00:29:47] tech hub. I was in Orlando, Florida and Florida isn't always the best to tech jobs. I'm going to speak to me and personally, and also my best friend too.<br />                    Because I had a best friend and we were both looking for jobs and everything and it was like super hard because everybody wanted Java and C sharp and we were sending applications with our Javascript backgrounds and know JS and stuff like that.<br />                    So yeah, it was really, really hard. Now this time, actually with my second job search for my second job, it's been much better 'cause I've been presented with more opportunities because I utilize social media. Not to be a whole social media addict, but it really, really helps. I was able to gain references. I think what I've learned is that when you make some connections with people, you're able to get your application in the door and get better references and everything like that. That really, really helps when you're self-taught and you don't have a computer science degree.<br />                    This second job search, I haven't had to actually apply for a job. I've gotten interviews solely off of my GitHub and because of Twitter and stuff. That's really interesting with the whole GitHub thing. Companies actually review your code and none of them really cared too much about a portfolio site, which was ... that was interested.<br />                    For my first job that was ... I think it really helped me stand out. Especially as a front-end developer, they'll be able to see my actual work and everything. But this time for these companies, especially with things like higher salaries and everything, they really just look at your GitHub and everything and then they're like, \"Okay. All right, let's interview you.\" And I'm like, \"Okay.\" It's been different. I've had way more opportunities to interview and everything like that and learn from it.</p><p><strong>Joel Hooks:</strong>         So when you're in the interview process, are you getting the typical, like the coder interviews? Have you experienced any of the white board questions or technical questions while you were in these interviews?</p><p><strong>Taelur Alexis:</strong>      The majority of my interviews, this round, has consisted of take home projects, which I actually like. It may be too time consuming for other people that have a lot of commitments. But for me personally, I really liked the idea of doing that, over white boarding interviews because they're able to really see how I'm actually able to get things done and how I wish I showed my projects and everything. But it's been mainly like that. A lot of like technical phone screens.</p><p><strong>Joel Hooks:</strong>         They're asking you questions, just your over the phone or Skype or whatever and you're asking questions?</p><p><strong>Taelur Alexis:</strong>      Yeah, yeah. They'll ask me questions like ... Oh, and this actually leads to a great tip. But they'll as me questions about like, \"Oh, what does clean code mean to you?\" And other stuff like, \"What is your experience with performance testing, unit testing, accessibility and whatnot?\"<br />                    Oh, and then, a lot of problem solving questions. A lot of questions where they're on the phone or in person, have a lot to do with how you're able to solve problems. It seems like, even if you're not able to create the solution, if you're not able to create a functional solution and everything, so a problem that they're giving you. They more so care about how you're able to approach the problem.<br />                    Let's say for instance, they want you to build to-do app or whatever. They're like, \"Okay, so if we were to take away this, what would you do then? What if we were to add this or whatever?\" They're trying to see if you're able to be creative on the fly it seems like. Especially in in-person interviews and how you're able to think and everything.<br />                    If you're able to communicate your thought process. That's really, really important. I had an interview with Amazon, for instance. One of the things that they gave for me, was ... or that they told me that I should do or work on, is communicate my thoughts to the interviewer more. It's interesting.<br />                    You have to approach that as if like you're teaching someone how to solve a problem or how to do this or whatever. They give yourself [inaudible 00:33:42] head instructor, I guess. That's what a lot of my interviews have been, is really the technical phone screens or ask me my problem solving.<br />                    Then also, questions that you get, when you're in customer service, when you're interviewing for a retail job or something. Like how would you handle a conflict with a coworker? How do you work effectively in a team? What is your role in everything? And so I'm just like, \"Okay.\"</p><p><strong>Joel Hooks:</strong>         Do you find there's similarity between the interviews? Or a lot of overlap or are they pretty unique, in terms of what they're asking you to answer and what they want you to know?</p><p><strong>Taelur Alexis:</strong>      There's overlap in the way that they always ask about the problem solving, like how I'm able to approach problems. But the problems itself are pretty different. But okay, two of my take home projects involve me building a crud, as well as an onsite that I had, was also involved in building a crud and stuff like that.</p><p><strong>Joel Hooks:</strong>         Do they try to make it fun and not a to-do list or they just use a to-do list? [crosstalk 00:34:36] Because it's all a to-do list at the end of the day.</p><p><strong>Taelur Alexis:</strong>      One had me build a directory. You're able to add a user.</p><p><strong>Joel Hooks:</strong>         Yeah, like an address book.</p><p><strong>Taelur Alexis:</strong>      Yeah. Yeah, like an address book and stuff. So yeah, a couple of those have actually been like that same thing.</p><p><strong>Joel Hooks:</strong>         Lot of times our instructors on Egghead, they want to come up with novel examples, which is fine. Like come up with something clever, but I'm like, \"You just use a to-do list.\" And then they be like, \"Oh, I'll do an address book.\" I'm like, \"It's just a to-do list.\"</p><p><strong>Taelur Alexis:</strong>      Yeah, basically. Yeah. It's funny.</p><p><strong>Joel Hooks:</strong>         It's just a to-do list with people's pictures and their addresses and stuff. But it's literally the same thing. It's forums and lists.</p><p><strong>Taelur Alexis:</strong>      Forms. Yeah.</p><p><strong>Joel Hooks:</strong>         You were talking about questions. I was like, \"Well, can we add servers sinking to our to-do list? How would you solve that problem?\" That was what popped into my head, something like that. So if you're in this interview and they're asking you stuff and you're either stumped or you don't know, do you take notes? Or are you learning while you're in an interview at the same time? How do you use that to go home and know what to study or add to your list of things that you're trying to learn?</p><p><strong>Taelur Alexis:</strong>      I'm screaming right now. You have to take notes. I strongly recommend that and actually, interviewers in person, 'cause I've had a lot of interviews in this round. Every time, I brought a notebook and a pen and they actually like that because you're showing that you're willing to learn on the spot and that you're able to get feedback and everything.<br />                    Yeah, it's really, really important. So I take notes because you're able to find similarities. In the questions that I was asked about the clean code accessibility, blah, blah, blah, like TDD and stuff like that. I would take notes of that and then, I would write it down and then, I would try to study a bit more. So then for the next interviewer, at least we prep for that in case they were to ask.<br />                    But then also, I would use those notes and then I'll come with my own questions because ... For the next interview and ask them about it. Like, \"Oh, do you guys perform unit tests and this.\" A job that I actually interviewed for recently, I asked some questions that I was asking in previous interviews and he actually was like, \"We don't even use that.\" Like, \"I never thought about that.\" It can impress them a bit and then it's also ... just it's good to learn because you also really learn from your failures.<br />                    Even if you fail an interview, if you took notes in that interview and everything like that, you'll be better prepared for the next one and you'll grow.</p><p><strong>Joel Hooks:</strong>         To me, if you're on the job and I show up to a work meeting, you're not going to come without my notebook and my pen and not ready to take notes. To me it's your first work meeting, at the end of the day.</p><p><strong>Taelur Alexis:</strong>      Exactly.</p><p><strong>Joel Hooks:</strong>         All right, so I'm going to close it out with, so where do you see yourself in five years?</p><p><strong>Taelur Alexis:</strong>      So I really, really want to produce content and I want to teach people different web development concepts. I think that's where my passion actually was and building my own projects. Then also, helping share my knowledge with other people. So I see myself doing that. I see myself speaking at more conferences, organizing workshops and everything.<br />                    Then, I'm also building a platform called Code Everyday IO and that's where I'll be ... it's where I'll cure a bunch of web development resources that I like recommend and everything. Because a lot of people always ask me on Twitter like, \"How do I [inaudible 00:37:45] learn how to code? What resources do you recommend?\" Duh, duh, duh. I want to review content and everything as well as provide a community of people that are learning how to code and everything. I want to see that expand and grow because I want to be my own boss, really.</p><p><strong>Joel Hooks:</strong>         Yeah, I recommend it. It's good. It works for me, not having a boss. I don't know. Me and [inaudible 00:38:04], do what you want to do and help other people in the way that you want to help people is a pretty nice gig if you can build it.</p><p><strong>Taelur Alexis:</strong>      I admire what you're doing because at least you're able to ... you're able to profit of course, but then also, you're helping people and you're providing something that people need and stuff.</p><p><strong>Joel Hooks:</strong>         Yeah, you can feel good about it, right? At the end of the day, it's like, \"Oh yeah, I'm doing something and it's all right. I get to help myself and help others.\" You can't really ask for much more than that. So where else can people find you on the Internet?</p><p><strong>Taelur Alexis:</strong>      I live on Twitter.</p><p><strong>Joel Hooks:</strong>         Me too.</p><p><strong>Taelur Alexis:</strong>      So, find me on Twitter at Taelur Alexis. T-A-E-L-U-R A-L-E-X-I-S. That's where I'm mainly at for right now. I mean, yeah, all my social media is Taelur Alexis. So like Instagram, you can find me on there, even though I'm barely on there. Mainly on Twitter.</p><p><strong>Joel Hooks:</strong>         Sounds good. Thanks, Taelur.</p><p><strong>Taelur Alexis:</strong>      Thank you.</p><p><strong>Joel Hooks:</strong>         Bye-bye.</p>",
    "slug": "learning-to-code-from-scratch-on-the-modern-web-with-tae-lur-alexis",
    "description": "<p>Tae'lur Alexis, self taught programmer and founder of CodeEveryday, talks to us about:</p><ul><li>Figuring out that software was what she wanted to do</li><li>Learning to code from scratch on the modern web.</li><li>How front-end development was appealing as a beginner due to visual feedback and opportunity to be creative</li><li>How social media was key to her success in landing a job as a self-taught developer</li><li>The CodeNewbie and 100DaysOfCode communities on twitter and the roles they play in supporting developers</li><li>Setting up realistic habits and goals to prevent burnout</li><li>What the interview process was like for a new-commer to the industry</li></ul><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/4ece8b44/transcript\">\"Learning to Code from Scratch on the Modern Web with Tae'lur Alexis\" Transcript</a></p><h3>Resources:</h3><ul><li><a href=\"https://www.freecodecamp.org/\">freeCodeCamp</a></li><li><a href=\"https://www.udemy.com/user/coltsteele/\">Colt Steele on Udemy</a></li><li><a href=\"https://www.codenewbie.org/\">CodeNewbie</a></li><li><a href=\"https://www.100daysofcode.com/\">100DaysOfCode Challenge</a></li></ul><h3>Tae'lur Alexis:</h3><ul><li><a href=\"https://twitter.com/TaelurAlexis\">Twitter</a></li><li><a href=\"https://twitter.com/CodeEverydayio\">CodeEveryday Twitter</a></li></ul><h3>Joel Hooks</h3><ul><li><a href=\"https://twitter.com/jhooks\">Twitter</a></li><li><a href=\"https://joelhooks.com/\">Website</a></li></ul>",
    "duration": 2336,
    "episode_number": 35,
    "contributors": [
      "Joel Hooks"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/v7gzk",
    "path": "/podcasts/learning-to-code-from-scratch-on-the-modern-web-with-tae-lur-alexis",
    "published_at": "January 25th, 2019",
    "url": "https://egghead.io/api/v1/podcasts/learning-to-code-from-scratch-on-the-modern-web-with-tae-lur-alexis",
    "edit_podcast_url": "https://egghead.io/podcasts/learning-to-code-from-scratch-on-the-modern-web-with-tae-lur-alexis/edit"
  },
  {
    "id": "podcasts-00000000000000000079",
    "title": "Negotiating Your Salary and Advancing Your Career with Josh Doody",
    "summary": "Josh Doody, the author of Fearless Salary Negotiation, offers us advice on how to get promoted, fight information asymmetry, not lose out on job and salary opportunities, and how to stay ahead in the industry.",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/ace9d0ab-4922-45bf-ba9e-8e93bb2d316a/4bc93915_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/ace9d0ab-4922-45bf-ba9e-8e93bb2d316a/1546850794artwork.jpg",
    "simplecast_uid": "ace9d0ab-4922-45bf-ba9e-8e93bb2d316a",
    "transcript": "<p><strong>Joel Hooks:</strong>         Hey Josh. You know I've just heard a lot of people are looking for job, right. That's just generally in software development. People are changing jobs, people are trying to get ahead or get that first job and you wrote a book called Fearless Salary Negotiation and we've talked about it a little bit. I think I was actually at the table maybe when you named the book in Vegas with Josh Kaufman.</p><p><strong>Josh Doody:</strong>               Yep I think you were there. </p><p><strong>Joel Hooks:</strong>         I just think like it's an amazing resource and I think salary negotiation is something that a lot of folks don't have any experience with, and I was wondering is that something that you may have noticed as well?</p><p><strong>Josh Doody:</strong>               Oh yeah. I don't know if I could put a number on it but I would say the vast majority of people have zero experience negotiating salaries, especially when it comes to like changing jobs. I think maybe slightly more people would have at some point maybe asked for a raise or kind of like hinted to their boss that they would like to be paid more, and I guess you could consider that sort of like a very light form of salary negotiation. But in terms of like I got a job offer and I'm not gonna just accept it or decline I'm gonna ask for more. I'm gonna negotiate it. Very, very few people have experience doing that. </p><p><strong>Joel Hooks:</strong>         So are jobs a gift to us from employers?</p><p><strong>Josh Doody:</strong>               I love the way that you just phrased that. No they're not. I often say that jobs are not like magical gifts that flutter down from the heavens to us gifted by the gods at the employment office. No, they're not. It's an exchange of value, right. It's an opportunity for a company who needs some kind of work done, which presumably will either now or in the future add value to their organization. It's an opportunity for them to find a person who has the expertise that they can use to do that valuable work, and so in exchange the worker gets a paycheck, but the company gets a skillset or some activity or work that's done that's valuable to them. So it's not just something that's given to you and that you should be thankful for and just accept. It's a value exchange. It's a business exchange of value.</p><p><strong>Joel Hooks:</strong>         I mean for me a lot of times I feel like maybe I've gone into the job search and I haven't done my research or I don't really know where I even start and a lot of times it feels like the employer has the upper hand in that they know what they're looking for, they've don't their research, they know the candidate that they're looking for and it seems like the information flow might be a little unidirectional in that regard. And I'm kinda wondering if I'm looking for a new job or I'm looking for my first job, where do I even start? How do you start looking at companies understanding this isn't a gift but how do I apply leverage on my side to get the job?</p><p><strong>Josh Doody:</strong>               Yeah, so there's a tremendous amount of... what you described I call information asymmetry, which is it's not a term that I created but I use it a lot to kind of describe that difference between the sheer amount of information, the volume of information that any given employer or even set of employers might have. So like an employer might be Google or like a set of an employers might be like tech companies. And they just have huge vast amounts of information about employment rates and what people are paid, and they get salary surveys from other companies that are firms that just kind of provide them with market data and as close to real time as possible information, and they know all that kind of stuff. And they have the advantage of knowing where are we deficient right now, in other words, what do we need more of, where are we trying to grow, what can't we do enough of and we need more help there or whatever.<br />                    So they know exactly sort of what they need and they know how badly they need it. So maybe they're just hiring some developers because they just need more people to write code or do testing or Q&A, or maybe they're trying to hire somebody who is a machine learning expert because they've decided that they're gonna dip their toe into the autonomous vehicle market or something like that, or drones and they need somebody whose an expert in machine learning so that they can build a best in class type products. So they know what they need, how badly they need it, what they're willing to pay for it and you as an employ really don't know anything other than those companies exist and may or may not have job requisitions posted on their site.<br />                    So I think there are a number of ways to sort of find good opportunities. I think the best way, and this is frankly this is the way that worked for me, anytime I had a day job this is how I found it and that's just through your network. And some people just heard me say that and kind of rolled their eyes and said, \"I don't have a network\", and other people thought, \"Okay yeah but how's that work?\" And it really works by asking people questions. Pinging somebody in a Slack channel and saying, \"Hey do you know of anybody that's looking for a really great UX designer?\" Or tweeting, posting on Facebook, chances are if you have even a little bit of expertise in something like software development, you know other people who have that expertise too, because it's virtually impossible to learn that skill in a totally silent vacuum. You've interacted with people on Stack Overflow or in communities or whatever.<br />                    So I think the network is the best place to go. And you can also kind of look for companies that you think you might like to work for based on reputation and just look at their open job reqs. And once you start kind of tumbling down that rabbit hole you'll see job descriptions that looks like something you might want to do, or opportunities that seem interesting, and you'll start noticing maybe common words and job titles and things like that. And maybe then you can kind of start doing a broader search for that job title on a site like Glassdoor or Paysa.com., and places like that. So those are the kind of two ways that I would do it is one just networking, ask people if they know of companies that are looking for people who do stuff like you do, or two maybe go to a couple of company sites that you're interesting in working for and check out their job reqs and see what jumps out at you and start kind of taking notes and looking for other companies with similar reqs that are open.</p><p><strong>Joel Hooks:</strong>         Yeah that networks huge and I think that's one of the... I mean you know like what do you call it like your personal brand or whatever. You're out there and you're sharing your knowledge and trying to interact with folks in like a genuine way, right. 'Cause I think personal brand can feel skeezy to some folks, but at the same time that's really what it is, is building a network and building people that know you so you can reach out and communicate and have kind of that asynchronous. </p><p><strong>Josh Doody:</strong>               Yeah. Reputation, professional friendships is a great term. I don't think I've actually really heard somebody say that before but I like it. Its not like building a brand like internet markety [inaudible 00:06:09] type stuff its like you ask somebody for help and they help you and then maybe they need help and you help them, or you just like to talk about what you're working on and share screenshots of stuff that you're doing, or code snippets or whatever. And those are the people that you interact with a lot and over time you'll start kind of attracting more of those people as you continue to help people out and be helped. And it's good to kind of keep in contact with them and eventually maybe talk to them about what job openings they're aware of, or is their company hiring and that kind of thing.</p><p><strong>Joel Hooks:</strong>         Yeah I mean there's definitely some level of marketing that you can apply. You don't have to if you're content with just kind of getting by and using your traditional resume and doing it that way, I think you can, but also like the marketing tactics and even some of those that you're talking about like internet marketing style tactics actually work in a professional capacity. </p><p><strong>Josh Doody:</strong>               Sure. </p><p><strong>Joel Hooks:</strong>         In my experience anyway.</p><p><strong>Josh Doody:</strong>               I think they do work. I think they're not necessary, but I do think they would help. If you feel pretty comfortable with your network and you want to level up then I do think blogging or just being active on some social networks or answering questions on Quora or Hacker News or something. Those kind of quote unquote marketing tactics can be another way to augment what you're already doing to kind of expand your network and maybe build a little bit of visibility out there. For sure.</p><p><strong>Joel Hooks:</strong>         And to me like the best marketing tactics have always been and always will be in the stuff that I apply. Just simply putting out good content that has value and helps people is amazing in terms of like growing your brand and growing your personal network. If you're just out there helping people and sharing your problems, sharing solutions, doing that sort of stuff you kind of explode just by the nature of it. Like if you're providing that level of value and just being helpful. That's what people want. Like that's what a lot of employers want, outside of specific skill sets. They want somebody that is part of the community or willing to get in there and help and grow as a larger group.</p><p><strong>Josh Doody:</strong>               Yeah I totally agree with everything that you just said. That's a great summary of quote unquote marketing tactics but for building your own personal brand and building your network and expanding your network. Maybe giving yourself an opportunity at future opportunities that you may not have seen if you hadn't been more visible and more helpful in public. </p><p><strong>Joel Hooks:</strong>         Yeah. You mentioned information being asynch where the employer tends to have more information. They try to even stack that in almost every job opportunity I've ever been in and you hear this all time. Like the first or maybe third question is, \"So what's your salary now?\" And they want to know that information and I know that you have an opinion on that and I wanted to hear your thoughts and let people know what you think about the sharing of your salary as a part of the salary negotiation process.</p><p><strong>Josh Doody:</strong>               Yeah I think to say I have an opinion on that might be the most hyperbolic sort of understatement that you could make. Weirdly I think it's probably the single topic that I have the most opinion on and the most dogmatic opinion on, and that I've probably written the most about and talked the most about. And the reason is if you share during is... first of all I'll back up one step which is you know kind of how sneaky this is, which is typically when you're asked for this information they will often ask you if you have not disclosed it. You'll be asked for this information before you get some sort of a formal offer to consider. But usually when they want to ask for salary history or even salary expectations if you go work for that firm it'll be super early and maybe even like in what some people call the screening or pre-screen call.<br />                    Where you'll just be talking to like somebody in HR who is looking at your resume and they're really just trying to figure out like is this person even kind of possibly a good fit for this role. Do I want to engage hiring managers and other people in this company to spend time interviewing this person or kind I just kind of screen them out right now and assess if they're not a good fit. From the candidate's mindset, what they're thinking is, \"I need to get through this screening call, 'cause it's a screen. I need to get through it. And then I can start interviewing and really impress people.\"  And so they're in a very compliant mindset where they're thinking, \"I will just tell this HR recruiter person whatever they need to know so that I can get through this screening call and into actual interviews and maybe have a shot at this job.\"<br />                    And so in that context is when frequently the HR person or recruiter that you're talking to will ask you the question that you said, \"What are you making right now? If you don't mind me asking. And if you come work for us what are you hoping to make?\" And if you disclose that information early it causes a number of dominoes to start falling over but the big one is that you may have boxed yourself in to certain salary ranges that are really hard to negotiate out of later. But also by sharing current salary or salary expectations your potentially sort of preventing them from having an opportunity to learn about you because let's say that you say a number that's... this is what people like to say is, \"Well what if I just say a huge number? I'll say a big number and that way I don't cost myself any money.\" You could disqualify yourself right if you say, \"Well I was thinking like 200K\" and they're like, \"Oh shoot this is a 100K position. There's no way we can do that I guess we'll just find someone else.\"<br />                    Then maybe you miss an opportunity to interview in a case where they thought they were gonna spend 100K and then after five interviews and an onsite they might have thought, \"We cannot let this person get away from us. We've got to find a way to bring him onboard. Maybe it's not 200K cash. It's equity or sign-on bonus or some kind of flexible work arrangement where they work three days a week or whatever.\" But you may have missed that opportunity. And then the last thing I'll say on that is the reason I don't like the current salary question because it's basically like, you know, where are you now and what can we do to move you laterally or close to it to get you to come over. And that's not where you want to be. That's not the mindset you want them to be in.<br />                    And then the salary expectations question, \"What do you want to make?\" Is similarly restricting because basically you don't know anything, because tying this back to information asymmetry, you don't know how much their budget is, you don't know what they're looking to hire for necessarily. There's a lot of stuff that you don't know. And so the way that I like to frame that question when I'm kind of trying to convince people not to share that information is, the company's basically saying to you, \"We have a ton of information that you don't have. We know how badly we want to hire this person. We know what our budget is. We know how many people like that we're trying to hire. We know which part of the country this is gonna be and all this stuff but why don't you go ahead and just take a wild guess what we're willing to pay the person that we're gonna hire to do this job for our firm.\"<br />                    If you frame it that way then you think, \"Well I don't know. I don't know. I'm not the company. I don't know what their budget is.\" And so you're basically just taking a guess at a number that if you guess wrong will probably cost you money on either side. So that's like the shortest amount of time I can jump on the soapbox but it is not wise to share your current salary. It's illegal to do that in some places now, but even if it's not illegal don't share that information. And then if they're asking you what your expectations are just say, \"You know I really don't know. I don't have a number in mind right now. I'd like to think about the value that I can add to this firm and this team. I'm excited for this opportunity based on what I know about it. And I can't wait to learn more about it and continue talking to people in the interview process.\"<br />                    And just continue to move on and focus on impressing them in interviews so that whatever number they had in mind for a budget might increase as you continue to knock those interview questions out of the park. </p><p><strong>Joel Hooks:</strong>         So what's the pat answer that I should practice for my next job screening interview. </p><p><strong>Josh Doody:</strong>               Okay. </p><p><strong>Joel Hooks:</strong>         For the what you make now question. </p><p><strong>Josh Doody:</strong>               Yeah so it's usually a two parter. I'm gonna see if I can do this I don't have any notes up in front of me but I've said this a million times, so let's see if I get it right.</p><p><strong>Joel Hooks:</strong>         Alright.</p><p><strong>Josh Doody:</strong>               The two questions are: What's your current salary?, and what are your salary expectations if you come on board? They're usually asked either together or possibly independently. And the answer that I like to give is, \"You know I'm really not comfortable sharing my current salary and what my employer pays people that do the kind of work that I do, and I'd rather focus on the value that I can add in this position. And I'm really looking forward to this move being a big step forward for me in terms of both responsibility and compensation and I can't wait to talk about the position and the opportunity that's ahead of me.\" </p><p><strong>Joel Hooks:</strong>         Yeah 'cause one I think you've mentioned like saying, \"Oh well 200K.\" One like lying isn't a great way to start a relationship and that's really what you're doing at that point, which like for what it is it's also not honest, and like just being honest. No, I think the answer you gave is really an honest answer, like versus, \"Well it's none of your business\", which isn't great either. Like such a awkward question and they really do spring it to you at your most kind of vulnerable position in the entire thing and I'm sure it works really well. Because I feel like on the other end of the phone is somebody that does this for a living and negotiates salaries every single day. </p><p><strong>Josh Doody:</strong>               Yep.</p><p><strong>Joel Hooks:</strong>         And so we're at a disadvantage as employees and we come into that situation. You're dealing with somebody that's literally probably a professional negotiator on the other end, if you're at a bigger company, and that can change for smaller companies. </p><p><strong>Josh Doody:</strong>               Yeah and even scarier there is... I consider sort of quote unquote negotiation and salary negotiation to be two different things. Salary negotiation is sort of a very weird sort of subset of negotiation, because it's so boxed in, in terms of how it works and the process that everybody follows. And so you're not only talking to like a recruiter who might be a professional negotiator but they're a professional employee [inaudible 00:15:20] side salary negotiator. And you are a person who with any luck you've negotiated maybe three or four times for salary in your life. </p><p><strong>Joel Hooks:</strong>         Right.</p><p><strong>Josh Doody:</strong>               And they've done it probably literally three or four times that day. Right. And so if you're gonna go toe to toe with them and try and outsmart them by like you said, like lying about numbers, or guessing numbers and all that stuff like you're probably gonna lose if you want to play that game. You're playing against somebody who's just leaps and bounds ahead of youAlso,so one thing I want to grab onto for ten seconds is you mentioned like lying or bluffing. That is not at all apart of my strategy and I love the way that you framed it that it just isn't good to lie, to be dishonest, to start a relationship that way. If you get caught it's bad. If you don't get caught it's bad. And I just don't think that a productive relationship can begin with lying and I just don't think it's wise to lie.<br />                    There are too many above board ways that you can negotiate the fair value for your work that don't involve bluffing and lying. That's one thing I push real hard against with my clients and when I write is, there's no reason to lie about stuff. You can say things that are honest but also still productive and collaborative. </p><p><strong>Joel Hooks:</strong>         I feel like at the end of the day what you are entering into is a long-term collaboration with a company, and the negotiation is like the first step towards that collaboration. Like how do we work together? How do we solve problems? And this is a hard problem and a hard question that we have to come to grips with together to figure out what your compensation is, what value you can bring to the company and that sort of thing. Do you see that as the ultimate goal of negotiation process is to land someplace in a collaborative way? </p><p><strong>Josh Doody:</strong>               Yeah. Collaborate is the word that I use to describe my methods and my strategies. Everything that I do is collaborative. It's not deceptive, it's not aggressive necessarily, it's collaborative. The mental picture that I have of this is like... I think when people think of negotiating or salary negotiations they picture like you kick the door in at the HR persons office and you walk in there and you slam your fist on the desk and you say, \"I demand more money and vacation time\", or something. And that is not a productive way to negotiate a salary or most things, but it's also not collaborative.<br />                    And what I prefer is to say, \"Listen, you need somebody to do this job. I'm somebody who can do that job. Let me describe to you how well I can do that job and how well I understand what your needs are. And then we can talk about what's the appropriate price for you to pay me to do that job. And we can collaborate to find something that we both feel is good. You feel it's a good wage for me and still allows your business to do whatever profitable or revenue generating activities it needs to do. And I feel comfortable providing that service under the parameters about even do I work remotely or in the office or where do I work and all those kinds of things. The kind of work that I do. I feel good about all that stuff for the price that you're paying. And now we've collaborated on this and now we finished that stage of the collaboration and we can actually start collaborating on doing the work that you're hiring me to do.\"<br />                    But I do think that it starts off as a collaboration and a business conversation. And that's the best way to begin that relationship. </p><p><strong>Joel Hooks:</strong>         Yeah I mean hopefully you're negotiating on your long-term relationship anyway. So if you start it any other way I think you're just kind of starting it on the foot, ultimately.</p><p><strong>Josh Doody:</strong>               Totally agree.</p><p><strong>Joel Hooks:</strong>         Even if you're not looking for a job I feel like there's some ways you can start thinking you know like maybe you even love your job but in the future you want to have that open in the idea that at some point I'm probably gonna change this and I'll need to negotiate my next job. So I was kind of thinking like in-between gigs or while I'm in a gig currently I should probably be thinking, \"What's the future like?\", and \"What do I want to do?\", and how do I enter my next salary negotiation?\" Whether it's for a raise or whether it's for my next job. And just generally how do we prepare ourselves and think ahead.<br />                    Because I think the worst time to really need to get into this is when you absolutely need to get into this. Right, if I don't know anything about salary negotiation and I'm in the middle of a job hunt then I'm in kind of a sad and desperate situation maybe, versus if I'm planning ahead and kind of controlling my own destiny. Do you have any experience with that like in terms of advice for folks that are fine with their job now but know it's not gonna be the end job for them. </p><p><strong>Josh Doody:</strong>               Yeah I think there's sort of a proactive sort of pruning approach that I take to this sort of thing especially when I'm coaching folks on career moves and getting raises and things like that. And what I mean is like you want a focus in your negotiations but also sort of in your career progress. And what I mean by focus is, where is it that first of all I'm interested in going with my skill set and my career, and second of all, what's needed out there. This is something that I've noticed [inaudible 00:20:06] is really good at, which is what's a new technology and is it valuable and how might it help somebody on their next project. Of course there's a new framework, a new technology, every day but the question is which ones are gonna be kind of durable and which ones look like maybe they're the kind of thing that you could use at your current job or on a side project, or at the next job that you go to.<br />                    Maybe a big picture way of doing this would be to kind of keep an eye on the big tech companies if that's where you aspire to be. And say, \"Well what are the frameworks are they using? What kind of work are they doing? How do they design software and am I comfortable with that design process?\", and those sorts of things. And begin to learn how to do those things. You mentioned side projects. I mean that's a great way to do this, especially when you're talking about learning a new technology, whether it's software or anything else. Identifying those things. You'll notice I mean it's usually pretty easy I think to spot kind of the new hotness. It's a little bit harder I think to sort of filter out which things are maybe a flash in the pan and which ones are gonna be more durable, but I think that with a discerning eye you can say, \"You know this looks like something I might want to learn.\"<br />                    And I think also if your internal at your company it's not just about technology, it's about what is it that makes your company tick, where is their focus. I think it's important to kind of keep an eye on conversations with your manager and what they're saying to you and what they seem to be indicating is maybe a new direction that the company might go, or way that it might expand. The more tactically you can look at... if you're a junior dev and you want to find your way to a senior dev position for example, that you look at the job description and the job req's in your company and say, \"What's the difference between junior dev and senior dev at this company? What's the gap?\" And say well, \"There's these three skills. Maybe there's some leadership that they would like to see from senior dev's or proficiency and certain tools or methodologies\", and that sort of thing. Outside of just sort of numbers of years experience and that sort of thing.<br />                    You can identify what those things are that the company that you're at now wants a senior dev to be doing and you can start looking for opportunities to flex those muscles. To kind of get better at those things by taking that leadership training or asking your manager if maybe you can run lead on a project or two, and that sort of thing. And so a lot of promotions in particular happen not because of the potential that the candidate has but because they were already basically doing the job that they are gonna be promoted to and it's time to just make that official.<br />                    I said a lot there but I think looking at the industry and figuring out like what are people using, what are the frameworks that they're using, of those things what am I interesting in and what do I think will be durable, and how can I find a way to get some reps with that maybe in a side project or something like that, or maybe like a side consulting engagement. And then internally just looking at the more senior positions or leadership positions that you might aspire to, and identifying what those require that your current role doesn't require, and start getting opportunities to actually do those things before you're promoted into that role so that you can eventually go to your manager and say, \"Hey I've been looking at the senior deposition for awhile. I know that these three things are kind of unique to that position in terms of responsibilities and I'd like to start getting some experience with those responsibilities, so that I can get more experience and start leading toward that senior dep position eventually. Can you help me with that?\" So that's how I would do it.</p><p><strong>Joel Hooks:</strong>         Yeah. It's interesting, I discovered this maybe just a few months ago and I'll post a link to this compilation of engineering ladders. So across the industry big companies and small companies publish what they refer to as an engineering ladder, which is the step by step sequence of seniority or job positions within the company and the detailed requirements for each position. Which I thought, well that's a really interesting way to look at it or think about where you want to be in the future. Because that's what you need to be working on now instead of you know you're in a job that's using some old technology, you're doing the same kind of thing all the time, you're not growing. It's really gonna be hard to take that next step up in your career.<br />                    And I think we as developers have to think about that consciously and work towards whatever the next one is, unless you're just content, and you're happy pulling the same lever for the next five years until the day comes where it's like, \"Hey we're not doing that anymore. Your lever is gone. Best of luck and good luck in your future endeavors\" kind of situation.           </p><p><strong>Josh Doody:</strong>               Yeah if I can I'm gonna butcher this analogy and I don't know anything about hockey, but I think I don't know Gretzky or somebody [crosstalk 00:24:35].</p><p><strong>Joel Hooks:</strong>         The Gretzky quote?</p><p><strong>Josh Doody:</strong>               Yeah, \"Skate to where the puck is going.\" Right. </p><p><strong>Joel Hooks:</strong>         Yeah for sure.</p><p><strong>Josh Doody:</strong>               Yeah. I think that's the way to do it. And that's how you get ahead right. Like if you're always chasing, there's somebody that's always gonna be a little bit more proactive than you are and you're gonna start having that feeling like, \"Man I keep getting passed over for promotions.\" And it might be because you're just trying to become really good at what you actually do in your current job. You're trying to become proficient at a thing you're already paid to do. When the reality is you need to become proficient in the thing that you aspire to be paid to do. And it's a subtle difference but an important one, especially you know as a former manager I know you managed a team. Like that's what you're looking for is somebody who can come to you and say, \"Hey I've already been doing this for a while. I don't know if you noticed but I have been. Here's the work that I've been doing. Any chance we could talk about making this official with a promotion?\"<br />                    And then that's a really productive conversation that you can have with that person. As opposed to, \"One day I'd like to be a senior developer. Can you promote me so I can show you what I'm made of?\" And you're like, \"Well it's kind of a big risk for me to take. Show me what you got.\" </p><p><strong>Joel Hooks:</strong>         It's like waiting for somebody to hold your hand too. That's you're ask at that point it's like, \"Hey can you guide me into this?\" And it's fine to come in and have mentors and have folks that are teaching you and pushing you forward. But at the same time I know that people in hiring positions are also looking for self-motivated individuals that do the thing on their own, not because somebody told them to or asked them to, or is guiding them in that direction. But because they're driven to and they must do that and they do the thing just because it's what needs to be done. That's another aspect of that I would think. </p><p><strong>Josh Doody:</strong>               Yeah for some reason I just flashed back. I quit my last day job a little over three years ago, but my favorite part of that job was I had led a team of three people and while I was managing them only for like 15 months all of them were promoted. And most of the reason they were promoted is I got really lucky and had a team of three people who were extremely proactive, and I just found that every time I turned around, and was asking for status reports and all this stuff, that they had done more than I thought they needed to do. And it was usually very productive. And I was like, \"Man these people are really killing it and I want to make sure they get recognized for that.\" And so, we were able to get all three of them promoted independently. It wasn't some sort of a group effort or anything.<br />                    But it was because as a manager they'd made my life easier by finding things to do. And it was really refreshing that if we ever had hard conversations it was not like, \"Hey why didn't you do this assignment well?\", or \"Why didn't you finish this work?\" It was, \"We've got this weird situation going on with a customer. Let's talk about the situation and see if we can resolve it together.\" And so we got to work almost exclusively on edge cases together, which for me was a good sign that they had the day job stuff just down pat. They were really good at it. And even better than they needed to be for their kind of junior level position.<br />                    So we would talk about a promotion. I would say, \"Yeah you're helping make me a better manager and giving me the ability to manage upward and to do more work for the firm. And so I think you should be promoted because you're carrying more weight than we thought you would when we hired you.\" Managers like that. They want to look for people that are like, \"Man this person is really just taking a lot of responsibility that I'm not asking them to do. I would like to recognize them for that.\"</p><p><strong>Joel Hooks:</strong>         Yeah. So getting back to salary negotiation when we're looking for jobs. I wanted to know if you have seen a difference in process or approach if somebody is looking through... going to Google and Facebook that's one thing, but then these days there's a lot of startups out there that are coming up. Maybe they have their round of funding, maybe they don't. And what's the big differences in terms of mindset going into a salary negotiation with a small startup type situation versus a big conglomerate type situation. </p><p><strong>Josh Doody:</strong>               Yeah. It is surprising how different they are. I'll start with the kind of big tech companies. They're kind of ironically quite a bit more straight forward and kind of easier to negotiate with. Because they know what they want, they know what their budget is, they know how badly they want to hire you, and they know where they're flexible. Back to our kind of how many reps is your recruiter getting, I mean at these firms they're just hiring so many candidates all the time that they have a playbook that they follow. Part of the playbook is if this person is really valuable, and they ask for a lot more than we offered them, we have a very specific approval process that we can induce.<br />                    They're pretty straight forward because it's important to know going in what your value is, but a lot of times the offer they give you you'll kind of look at and go, \"Yeah that's a pretty good offer. Let's see how much better we can make it.\" And then you can start negotiating more salary or signing bonus, or equity. And of course the equity is nice because you can go look at you know finance and see what the current trading price is and get a sense of it, and maybe account for how much volatility you can take. But it's all pretty straight forward. It's not easy, but it's easy to navigate because you all are kind of on the same page in terms of what are we doing here, how do we think about money and value to the firm and growth.<br />                    Whereas the process for like an earlier stage startup who might have funding or even is just maybe billion dollar evaluation but pre-IPO [inaudible 00:29:54] is trickier because they say a lot of things and do a lot of things in the negotiation that make it hard to figure out like are they just trying to get a good deal here or are they really cash constrained. Right. So, \"Well we can only pay you 120,000 because of reasons x, y, z. And we just raised funding and our burn rate is too high.\" It's hard to know how hard you can push. Also they'll offer you a lot of different kind of flavors of equity, which can be kind of hard to untangle. And that equity itself, even if you sort of understand what the structure is of the equity and how likely you are to get any value from it whatsoever, can be really challenging because they'll put evaluation on it and it's private. And so they're basically just guessing at how much it's worth. Maybe they're incorporating their last raise. And so it can be really challenging.<br />                    So I think my take aways from those two things are if you want to make good money in sort of a stable, predictable place, the big tech companies are the place to be right now in my opinion. If you want a shot at getting a ton of experience, wearing a lot of hats, working really hard and understanding how the sausage is made then working for like one of those earlier stage startups may be better. But the trade of there is that you may not make as much money. You may be really heavy on some equity that I usually will call Monopoly money, because you just don't know if it's ever going to be worth anything, or how long it'll take. So it's much more of sort of a gamble, but the gamble can pay off in terms of you can learn a lot.<br />                    You're getting thrown into the fire, so you can learn a lot really quickly working for pre-IPO or early stage startup where they need somebody to do a lot of things. And who knows you may stumble into like a completely different career direction that you didn't think. Maybe all of a sudden you realize that dev ops is you're thing and you wouldn't have gotten to do that at Google, because they don't hire generalists. Right. So those are kind of my thoughts. There's definitely a trade off there. They're different negotiating processes that you use. And I think it's important to know going in at one of these early stage startup, I'm probably not gonna make the kind of money that I would get if I went to Google or Facebook or Apple right now. And the reason I'm okay with that is I want this sort of experience or I like the lifestyle that startups offer. Some people just really like the grind. So I think you just need to go in with eyes wide open that there are trade offs there. </p><p><strong>Joel Hooks:</strong>         Yeah I mean at the end of the day, like in terms of compensation, is salary really the king? Like in your opinion of what you're negotiating on and ultimately what you're looking for is the salary that works for you.</p><p><strong>Josh Doody:</strong>               Yeah. Well are you. Let me get clarification on the question. Are you saying like within the negotiation itself is the salary the most valuable thing? Or are you saying, when you're negotiating, is the only thing that you care about salary, and you kind of discard other things?</p><p><strong>Joel Hooks:</strong>         I was thinking in terms of like the primary thing, like what you're going in there. I was also wondering, beyond salary what else are we negotiating for? But you know is salary ultimately what's going to be the most significant over time for the average employee I guess? </p><p><strong>Josh Doody:</strong>               Yeah it depends. Again most of my clients that I coach are going to these big tech companies and the answer is no, salary is usually not the biggest component. And in fact, I've found let's say in 2018 salary can be often like let's say like a significant or maybe the majority of their comp in any given year but these companies are throwing huge amounts of equity around. And the interesting thing as sort of the more senior you get or niche you get... so if you're doing something like you're a senior software developer whose got machine learning experience, your comp package is gonna look relatively light on salary. Because they get to a certain salary range like it's usually I would say kind of like centered around 150K or so, and then the salary starts slowing way down and the equity starts ramping way up.<br />                    Amazon does this explicitly. They cap their salary, and so if you're getting like a senior dev type offer your salary's gonna be capped at... I don't know what it is like today but 165 or 175, and then they start piling on equity. So at those companies for more senior people I will always start with salary in the negotiation but typically what I'm looking for is how soft are they on equity, and the best way for me to find that out is to start with salary. And I'll see how they respond with equity. And so it can be, whereas if you go to a startup or something like that I almost tell people just totally discard the equity that you're getting thrown at you and look at only the salary, and ask yourself if you can live on that. Because chances are you're not gonna see that equity anytime soon or maybe ever. </p><p><strong>Joel Hooks:</strong>         It's a lottery ticket.</p><p><strong>Josh Doody:</strong>               It is a lottery ticket. In that case, if I'm going to like a pre-IPO company and I would say even like... I don't Uber hasn't IPO'd yet, have they? I don't think they have.</p><p><strong>Joel Hooks:</strong>         I don't think so.</p><p><strong>Josh Doody:</strong>               So I've negotiated with a couple of people who were going to Uber and Uber was trying to throw a lot of equity at them and got really kind of angry when we said, \"We appreciate the equity but I don't know what that's worth. I don't know when it's gonna be worth anything. Let's talk about the salary.\" And they didn't want to talk about salary. They wanted to talk about equity. But I pushed my clients and discouraged them from allowing that equity number, or whatever the estimates are that are being thrown at you, to dissuade you from taking a living wage and a good salary, because it's somewhere like a startup. That's all you're gonna get for sure.<br />                    Whereas somewhere like Google or Apple, yes there's market risk, right like yes the economy could tank and you could lose a lot of equity value, but if that happened you're probably not getting your salary either. You're unemployed. So at the big companies I think equity and sign-on bonuses are often gonna be at least half of your focus, whereas like a pre-IPO or private company or something like that then you might want to focus on the salary. Especially for early stage places because that's the only thing that you know for sure that you're gonna get. And it can be I think a rude awakening if you negotiate a huge amount of quote unquote equity and then a year in you're getting this small paycheck and just kind of waiting for the lotto ticket to pay off.</p><p><strong>Joel Hooks:</strong>         Which may never come. And it really depends on your position in life too. If your young and don't have any responsibilities or old and don't have a bunch of dependents then it's a different story. So we really have to come in, and I think understand what's the minimum that we can accept as an offer and what are we willing to do and what are the risks involved. </p><p><strong>Josh Doody:</strong>               Yeah and that's I mean, so you said what's the minimum, and I called this concept that you're eluding to, I think, the minimum acceptable salary. And early on when I wrote my book this is one of the things that I'm happiest with is that it's such a catch all. Because at the end of the day it doesn't matter if it's an early stage startup, if it's a small mom and pop company, if it's a little five person web deb shop, or if it's Google. Before you get the offer, hopefully, I think it's really important to sit down and say, \"Okay, what do I need to say yes to this? What does it have to look like?\" And this is a great way to be objective about it. 'Cause you can get blinded by numbers that they'll throw at you.<br />                    And so it's much better I think to say, \"Okay if I get this offer from this company, the minimum base salary I need is 80,000 dollars to live in the city that I live in if it's a remote job. Gotta have 80,000 dollars. I would also like to have this much of a signing bonus because I'm gonna have to forgo some vesting equity at my current firm\" and these things. And then you can kind of put that on paper. And you may not be able to negotiate all of those things the way that you sort of design them on paper, but at least you know kind of what your target is, and you might be able to kind of flex on some things and say, \"Well I was hoping for a bigger bonus, but they were actually more flexible on salary than I thought\" or something.<br />                    And it also gives you more power in the negotiation because you can then kind of have your walk away number and say, \"No. I appreciate you working with me, but I've gotta have 80,000 dollars salary to take this job, or I can't take it. I can't afford to take the job.\" And so I think that regardless of what kind of company you're going for having your number for that company will really help. And it may be different for each company. Right. </p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Josh Doody:</strong>               So like I said at Google your minimum might be 80,000 dollars 'cause you know you're getting a bunch of equity vesting, whereas at a startup it might be, \"I'm willing to forgo this equity because I don't know if it'll ever pay off but I've gotta have 120,000 base to make sure that I can live, or pay my bills, or take care of my family\" or whatever you need to do. So that's a really good way to make sure that you set yourself up for a successful negotiation. That you win either way. Either you get what you had to have in your minimum or you don't get it and you can walk away and say, \"It's okay that I didn't get that. It's a bummer, but they weren't gonna meet my minimum and I know that that couldn't work because I decided that objectively before I even saw their offer.\" </p><p><strong>Joel Hooks:</strong>         Yeah I know in the Bay area, you know the Facebook's and Netflix's and Google's will throw pretty what I would consider a really large salary. Like in the 250, 300,000 salary, and at the same time like for my family, I have five children to move to the Bay area would if I'm comparing that to basically any other region outside of New York in the United States that really affects that compensation level. If they're gonna force you to move there, not force you but require that you move there as a condition of the job.</p><p><strong>Josh Doody:</strong>               Yeah. You're 100 percent right. And that's another thing I like about this concept is, you should fold that kind of thing in, right. Like there's a big difference between 100,000 dollar salary lets say in Gainesville, Florida where I live, that goes a long way. Whereas if you take 100,000 dollars to the Bay I mean you might not even be able to pay rent. Right. And have money left over for groceries. So you have to incorporate all of those things. What's my student debt payment load? What's my mortgage? What's the cost of living where I live? What's my family's financial situation? And all these different things. And even stuff like, how much do I like this job? You know I actually, this job, this team they seem to be such a great team, everybody I've talked to they seem to love working for this company, it seems to be super low stress, great work-life balance, so I'm actually willing to give up a little bit of salary there.<br />                    I'll go 20K less on this than I would if I were going to a higher pressure place. And you can incorporate a lot into that minimum number. And of course if you do it early you can do it kind of objectively, with a clear head, before they throw a total comp number at you and you go, \"Woe.\" And have to start thinking differently about it. </p><p><strong>Joel Hooks:</strong>         Yeah. So does negotiation stop once you're hired?</p><p><strong>Josh Doody:</strong>               Ooh that's a good question. I would say yes and no. I mean there's sort of the job offer negotiation and that does more or less kind of quit when you are hired. It's very discreet, typically you're negotiating with like a recruiter or HR person, sometimes you might even be negotiating with your hiring manager. And then once you start working there that phase of your time with the company is kind of over, and now you begin a new relationship with a hiring manager or team or whatever. But a new negotiation sort of begins or at least the foundation for one, which is I tell people as soon as you start working at a new company you should be thinking about like, \"Okay how am I gonna get my first raise? And when is it gonna happen?\" And I think about six months into your time at the company is when you should start planning for that raise and planting seeds.<br />                    And a year in is when you should say, \"Okay I've been here for a year. You've had a chance to see what I can do. Here's how I'm over delivering. Let's talk about this. And what my compensation should do to reflect that.\" But in that sense the negotiation does start anew for your promotions and raises kind of once you've actually begun working at the company because now you're inside. And you can do the things like I mentioned earlier, you can look at the delta between your current position and the next one up the career ladder, or you can start looking for opportunities where you can save the company money, or help drive more revenue, or reduce time to shipping products and that sort of thing. To start adding value in ways that weren't anticipated when you were hired to kind of lay the groundwork that you can then leverage later on to negotiate a raise or to negotiate a promotion. </p><p><strong>Joel Hooks:</strong>         So I would think people aren't gonna... like the company might not necessarily track that for you. Do you have any recommendations of how people track their work or track their value, or keep some sort of log I don't know? I've never really done that I was just thinking about it. I get in there, I know I want a raise in a year, and how do I start planning for that circumstance when it does come up? </p><p><strong>Josh Doody:</strong>               Yeah I think really I kind of lean low tech here. So even like I'm a big fan of like I have a ton of notes I used to use when I was a Windows user I had just a bunch of notepad documents everywhere. And then now its notes on Mac or occasionally I'll go into like Evernote or something. But as you work on a project, I think, just kind of keeping a general idea of what's going on and where you're adding value. And especially if you finish a project. 'Cause it's really strange how like you can work on a really hard project and you're sprinting and you're just trying to get through it and you work on it for three months, and then you finish it in April and then if I came to you in October and said, \"Hey you remember that project that you were killing yourself to get through in April? What was your biggest take away from that project?\" And you would kind of look at me and go, \"Man I can't believe that was six months ago. I don't remember that at all.\"<br />                    And so just taking notes kind of as you go, and you don't have to keep necessarily like a point by point diary or anything like that, but just a record of well I did this project, here were the anticipated results, here are the results that we got, here's how they were valuable to the business, and then file that away. That's good. And also I think its important to keep track of... so those are like what I would call your accomplishments. Like what have you done and what's the value of the thing that you've done, but then accolades as well. So if you get an award or you get an email from a client who says, \"Just wanted to say you really crushed it on this project that we worked on\", internal or external client, \"You really blew me away with this prototype that you built for us last month.\"<br />                    Keep that filed away because that's part of your research too and it's a way for you to demonstrate to your manager if they didn't happen to know about that, \"Well you didn't see the work I did on this project but look what this other manager said about my work.\" So I think just tracking it. You can use if you have the labels in Gmail. If you've got a folder on your desktop or you've got Evernote or something. Just keeping some notes so that you can kind of remember that stuff later on, I think, is the best way to go because if you add too much process on top of it then most of us, I certainly will, I'll fall down under that process and just stop doing it.</p><p><strong>Joel Hooks:</strong>         Yeah. The idea also to me would be, you know, you're talking about the past and really, you know, well that's what we pay you for, good work. Do we need to project into the future or talk about what's next or why we need to get that raise in terms of the future actions that we're going to perform with the company? Does that provide any value to that step in the process?</p><p><strong>Josh Doody:</strong>               I think that's a lot trickier. That goes back to the sort of results versus potential concept that I think I alluded to briefly earlier. Most of the time the fast way to get a promotion or a raise is to say, \"Look what I did.\" </p><p><strong>Joel Hooks:</strong>         It's not to find a new job?</p><p><strong>Josh Doody:</strong>               Well it could be. It depends. I think you know, wow that's a whole different topic. But yeah it could be. </p><p><strong>Joel Hooks:</strong>         Yeah it is.</p><p><strong>Josh Doody:</strong>               If you want to make a whole bunch of money you probably should consider leaving your company. But in terms of being forward or backward looking for your own performance, I think that the more compelling way to present a case is to go to your manager and say, \"Here's what I've done. Here's the value of what I've done. How can we compensate for me for that?\" Whether it's for the more senior title, higher pay, or both. And I think for you personally it's good to have goals and if you don't know where to start with goals, a great way to do that is if you aspire to be promoted to like a more senior level. Like I said, to look at those job descriptions and say, \"What do those job descriptions describe that I don't currently have to do for my job? And how can I start doing those things?\"<br />                    And so rather than telling your manager, \"Here's what I aspire to do this year.\"I think a good manager would say, \"That's really great news. Let's put a goal plan together and find a way to help you accomplish those things, or find you some mentorship, or find you opportunities to do those things.\" And that might be a step in performing above and beyond. But generally I think the story you're telling when you're asking for a raise, in particular negotiating for more salary is, when you hired me like you said that's the past, \"We agreed to a certain salary for a certain set of work, now what I'd like to demonstrate to you is that I've done additional work that added unanticipated value that was not rolled into the salary that we agreed to when I came to work here. And because of that additional value that I'm adding, I'd like to talk about increasing my salary.\"<br />                    So that's the way I prefer to do it is to look backward. You know you're looking forward in terms of planning for yourself, but you're looking backwards in terms of demonstrating that it's time for you to get that raise or promotion. </p><p><strong>Joel Hooks:</strong>         Yeah so the forward stuff isn't so much about like the current raise that you're asking for, that's based on what you've proven that you can do, but then having a good plan when you're sitting down and if you get a review or you are just kind of initiating your own review if you don't get one is to show your motivation and what you want to do next and grow the company, which would give you nice talking points for the following year.</p><p><strong>Josh Doody:</strong>               Yeah. If anything it's a planning mechanism. And I think it also does demonstrate foresight. That if you're telling your manager, \"Yeah I'm doing my current job but here's the stuff that I'm gonna try, and tackle this coming year.\" Then I think at least your manager will be primed to think, \"This person appears to moving to a place where they're going to be doing more than we're paying them for, or acknowledging them for with a title right now. So maybe I need to be ready to consider a pay increase or a title increase.\"</p><p><strong>Joel Hooks:</strong>         So like during the course of the year is there you know if like I do get accolade, is it too self or grandizing to like share those? Or how do you approach that just to keep you know the idea that I'm doing a good job, I'm worth what you're paying me for, and then also you don't have to be as much of a reminder at the end of the year so much as just kind of a mutual recollection of the awesome work that you do. Is that something that we should be doing during the course of the process? Or should we just wait till other people recognize our hard work?</p><p><strong>Josh Doody:</strong>               That's a good question. I think the easy ones are when people have already recognized what you're doing. At least file that away and it'll come in handy when you go to ask for a raise. So even if you don't kind of repeat it in the moment, realtime, at least having it available in some kind of a file or somewhere you can refer to it later is nice. I think, gosh, I feel like the answer to this is almost based on like what's the company culture. You know I'd like to believe that managers are looking for opportunities to give people accolades. They're looking for wins that they can tell other people about. Just to lead by example. But a lot of managers... my first manager ever, basically told me, \"No news is good news with you. Nobody's picked up the phone and called me so you must be doing a good job.\"<br />                    Which is extremely discouraging, it's why I quit that job. So I think it's kind of cultural. I would like to believe that a good manager is looking for opportunities like that and may even ask people to give other people accolades or like a spot award and that kind of thing. I think those feel kind of cheesy but I think they're a great way to say, \"Hey I noticed this person did a great thing and I'd like to make sure it's sort of publicly known.\" I also think like if you have regular one-on-one's with your manager it might be nice to tell them, \"Hey here's what's going on. I finished that project last week and here's the feedback that I got on it.\" And just kind of make sure it's on their radar. But I feel like there's not like a good canned answer for that. How it's received is gonna depend on how the culture perceives that sort of thing. And unfortunately I think some companies are very kind of keep it to yourself. And it may not be received well. </p><p><strong>Joel Hooks:</strong>         Yeah it's weird. I mean you know 'cause personally I'm all about like marketing myself. I don't think anybody's gonna praise me. I think the person that needs to do that is me. And relying on somebody to be the quote good manager is asking a lot and at the end of the day if you're not... and I'm not talking like in some sort of gross way but just it's really gets back to the marketing and personal brand. Like how do you elevate your accomplishments and share them while doing it in a way that hopefully helps others and doesn't come off as some sort of bragger. That would be the danger there I guess right.</p><p><strong>Josh Doody:</strong>               Yeah. I think also to zoom out a level I really think the solution to this that makes it easier for everybody, because some people just aren't comfortable marketing. I really wasn't comfortable marketing myself until it became literally the way I make my living. Even as an employee I wasn't great. But I was really good at building a culture where I recognized my team for what they did. I recognized my peers for what they did. And I took every opportunity to say, \"Hey before we get this call started I just wanted to say that Frank had a huge win last week and did a great job. I thought that everybody should know. Frank why don't you tell us a little bit about that situation? Give us two minutes on it.\" </p><p><strong>Joel Hooks:</strong>         Oh nice.</p><p><strong>Josh Doody:</strong>               Again that's a cultural thing. It's me driven where I also have also tended to use the word we a lot. If there's a success I'm looking for a we, not an I. </p><p><strong>Joel Hooks:</strong>         Oh for sure.</p><p><strong>Josh Doody:</strong>               But that's all personal stuff. Right. So I think that you just have to be cautious with that and kind of look for how it's gonna be received. And sort of play to that. I do think you need to market yourself, but its also really important to kind of know your audience and how it's gonna be received.</p><p><strong>Joel Hooks:</strong>         That's like almost straight out of How To Win Friends and Influence People, right? </p><p><strong>Josh Doody:</strong>               Yeah. </p><p><strong>Joel Hooks:</strong>         Which if you're listening and haven't read that book, you should buy a copy, because it's amazing. </p><p><strong>Josh Doody:</strong>               You should read it right now. </p><p><strong>Joel Hooks:</strong>         Yeah. It's like don't use I all the time. Talk about we. Like these are all... its funny to me 'cause it's all copywriting and that's been my primary focus for the last couple of years is trying to be a good copywriter, which is really hard. But that's like rule number one. Nobody cares about you. People care about themselves, and you can frame that like if you want to talk about yourself, you talk about them and how you may make their lives easier or how you're going to help them or what you've done for them. And people really enjoy that versus talking about me, me, me, which nobody wants to hear about. </p><p><strong>Josh Doody:</strong>               Yeah and I think there's an opportunity... so unfortunately I think we've kind of established there's not really like a super easy way to make sure that like your managers are aware of the good things that you do, because there are some times when it's just gonna be perceived as being braggadocios. But one thing that you can do sort of like as a long-term play is you can start to actually be that person who does that for other people. And maybe that will catch on. So maybe you're not saying, \"Look at what I did.\" Maybe you finished a project and you got really great accolades for your work on the project and instead of telling your manager like, \"Look at this great work I did\" you would tell them like, \"Hey we finished the project and I was working on this project with Tina and she really crushed it. I mean hears this thing that she did and I just thought you should know about it.\" And then maybe nothing happens or maybe Tina says, \"Oh yeah Josh was awesome too. Heres what he did.\" And now your manager knows about both of you and neither of you were the one to tell them.<br />                    That kind of stuff can be really contagious I've found. People will get more and more comfortable with it. And they'll realize like, \"Oh I can be just a nice person and brag on my peers, and they like that, and they're nicer to me and I can be nicer to them.\" That may not always work but it could be a way to kind of actually start to change the culture so that other people are bragging on you so you don't even have to do it. </p><p><strong>Joel Hooks:</strong>         It's such a good human practice. Talk about building your network and stuff, if you're the person at the office that is always giving credit where credit is due and like taking responsibility for problems and focusing on other folks, and lifting other people up, I think long-term or like over the course of your career that particular practice is going to pay in spades. Both in terms of your salary but just in terms of your life and your relationships and your attitude about work. It's such a great, great piece of advice I think. </p><p><strong>Josh Doody:</strong>               Oh for sure. Going back to... this loops all the way back to the first thing we talked about I think which is how do you find jobs, through your network. And if you think about like in that context, a lot of what we're describing is pretty self-serving because I know if I've worked with someone... and in fact gosh I think like my last four actually I don't know if I ever had a day job that I didn't get because somebody recommended me for it. </p><p><strong>Joel Hooks:</strong>         Yeah I haven't.</p><p><strong>Josh Doody:</strong>               And so if you build a reputation like that. I've found that like for my last several day jobs, three or four of them, it was just like people that we all knew each other from like one or two companies a long time ago and we just kind of kept following each other around. Because we all work that way. We would brag on each other. We would help each other out. I would work longer hours to help out a peer and I knew they would do the same for me. And then when I go to a new company I'm sitting there and I'm thinking, \"You know what I'm missing right now. I'm missing the kind of help that I used to get at my old company. I wonder what they're doing?\" People do that for you too. Whereas like even if you do really, really good work and you write great code but you're totally siloed or you're not interacting in that way people may not think about bringing you along unless they just happen to need a really good individual contributor coder who can knock this project out.<br />                    But if they're looking for somebody to work with and to build a career with they're gonna think about you, because you were giving them kudos when they did good work and that is gonna stand out to them. You made sure that they got recognized when they worked hard, or they worked late, or if they did extra or whatever it was. And that will come back around eventually, if nothing else in the form of that person gets promoted to senior director of blah, blah, blah at some company and they're like, \"You know who I'd like on my team? I'd like Josh on my team. He was really great to work with.\" </p><p><strong>Joel Hooks:</strong>         Yeah I've recommended folks for jobs and made connections and just when you think about how somebody was when you worked with them previously and you hear of a great opportunity that comes up and you know it's not for you but you're like, \"Oh wait. Tina was really awesome at my last gig and would be a perfect fit for this and I want to recommend them for the job.\" And making those connections is fun just like for me personally I love connecting good folks together but that's another product of your network. You're passing that along and helping people along as a group kind of community effort in terms of your network. </p><p><strong>Josh Doody:</strong>               Yeah. Well which could result in more jobs but also more negotiating leverage right. Like you have a tremendous amount of leverage if you're sitting in front of the hiring manager because someone on their team that they respect said that you were the person for the job and recommended you heartily. Then it's gonna be a lot easier for you to say, \"I'm pretty happy at my current job. You've probably heard that I'm doing pretty well over there. I'd like to be on your team but I'm gonna need a little bit more to make that happy. Can we find some kind of compromise here?\" </p><p><strong>Joel Hooks:</strong>         In every negotiation I've ever been in its been the nicest when I didn't really need the thing that I was negotiating for. </p><p><strong>Josh Doody:</strong>               Yeah. Oh yeah for sure. If you're like, what can I do to make this interesting enough for me to think about it? </p><p><strong>Joel Hooks:</strong>         You might want it but if you don't need it. That's when it's really hard as a job searcher. If I don't really need the job its one thing but if you like you're staring down a mortgage and need the job like your leverage kind of disappears in a lot of ways.</p><p><strong>Josh Doody:</strong>               Yeah I have a client right now who's gonna be in that position. I think he's gonna sign on here pretty soon. As soon as he gets an offer from Google. But I know it's gonna be challenging working with him because he is gonna really want to just take the job and he's in a situation where he's not quite desperate yet but he's to the point where if this thing with Google works out it's gonna be life changing. And so it's gonna be really hard, and of course that's why he's gonna hire me is I'm gonna tell them, \"Listen I need to talk you down on this. It's okay. I know how this process works. You can ask for this and it's gonna be okay.\" And he'll end up better off for it but it's gonna be a lot harder than for other people who are like, \"Eh I got an offer from three of the five big tech companies. I just want to see how interesting they can get and figure out if I want to leave my current gig to go to one of those or not.\" Those are much easier engagements.</p><p><strong>Joel Hooks:</strong>         So this is my last question, I want to go out with as software developers should we negotiate for every job that we take? </p><p><strong>Josh Doody:</strong>               Yes. </p><p><strong>Joel Hooks:</strong>         I would agree with that. And Josh I also, you have a lot of great resources. A lot of them are freely available. I was looking at your list of podcasts, you've been on a bunch of them. This definitely isn't your first rodeo. Where could people go to find out more about what you do and what's your top resources that you would recommend that you've made for folks to peruse? </p><p><strong>Josh Doody:</strong>               Yeah the best place to go, especially for that free content that you mentioned is fearlesssalarynegotiation.com. I put as much useful free stuff out there as I can do. And there's just a treasure trove of really useful stuff so if anything that you heard us talking about today was like, \"Huh I'd like to learn more about that.\" If you go to fearlesssalarynegotiation.com you'll be able to find it. I'm also active on Twitter @JoshDuty. Like to answer questions so just shoot me a question on Twitter. I'm happy to reply. Those are the two best places to find me and the easiest places to find me.</p><p><strong>Joel Hooks:</strong>         You also offer some services. One of them that I think is really interesting if folks are in the middle of a job hunt and your negotiating salaries, you have some services that you offer. Can you describe those?</p><p><strong>Josh Doody:</strong>               Yeah sure. That's my primary business is salary negotiation coaching for experienced software developers. So most of the time it's experienced developer whose changing companies and going to typically a big tech company, but often smaller tech companies or maybe they're not necessarily in tech. But what I'll do is they'll come to me and say, \"Hey I have this job offer. It looks pretty good but I feel like I should negotiate it. Can you help?\" And I'll say, \"Yes.\" And then I'll basically negotiate for them behind the scenes. So I'm writing emails that they're sending to recruiters, figuring out what they should counter offer, helping them decide where to focus in the negotiation, if they have multiple offers I work with them to not only negotiate each offer independently but to get them to the best that they can be and then compare them, help them decide which one is best for them if any of them. And so I'm sort of a full service salary negotiation coach, just helping software developers make sure that when they make those moves that they get the best job offer possible so that when they start there on day one they may have to worry about their I-9 and all that other stuff but they don't have to worry about whether their paycheck is as big as it can be.</p><p><strong>Joel Hooks:</strong>         I've seen your fees and its very reasonable compared to what I would guess would be tens of thousands of dollars probably on average per year of salary that you can get from a well negotiated offer versus just going in there and being like, \"Yeah I make 10,000 dollars or 100,000 dollars\" and they'll just barely beat that so you'll come in. I think that's something that folks should look at. I think it's really cool what you do. I'm sure there's competition out there for you but I really love your approach and I love your philosophy and think that folks need to think about this. And because we don't have as much expertise or experience negotiating salaries as developers, if we can hire a expert to help us do the thing then we're going to be in a much better place. If I was looking for a job right now I would definitely be hitting you up to get some of that help.</p><p><strong>Josh Doody:</strong>               Awesome. Thanks. Yeah I think the last you said is those are the kind of clients that I like to work with the most is they're an expert developer and I'm an expert at salary negotiation and so they know they're about to be paid well to do the thing they're an expert in and they know that they can hire an expert to help them be paid even better. </p><p><strong>Joel Hooks:</strong>         Yep. </p><p><strong>Josh Doody:</strong>               And so they just they say, \"You know I could read books and I could do it myself but I'd rather you'd just do this for me, and teach me how to do it.\" Most of the time the developers can't help but want to know how the sausage is made and so I'm really open with that. But I think it's a really good match because it allows them to just focus on being really great software developers and getting paid well for it. Outsource the salary negotiation piece to me. </p><p><strong>Joel Hooks:</strong>         Yeah unless you're really interested in salary negotiation personally as a skill set, outsourcing and specialization I'm a big fan. A huge fan.</p><p><strong>Josh Doody:</strong>               Oh yeah. I totally agree. </p><p><strong>Joel Hooks:</strong>         Alright Josh. Thank you so much for coming on today and talking with me about this stuff. I really appreciate it. </p><p><strong>Josh Doody:</strong>               Yeah thanks for having me Joel. It was a lot of fun.</p><p><strong>Joel Hooks:</strong>         Cheers. </p>",
    "slug": "negotiating-your-salary-and-advancing-your-career-with-josh-doody",
    "description": "<p>Josh Doody, the author of Fearless Salary Negotiation, joins us today to discuss:</p><ul><li>What you need to look out for to stay ahead in the industry</li><li>How to find leverage despite the information asymmetry between the employer and the job candidate</li><li>Why questions on what your current salary is or what you'd like it to be boxes you out of opportunities</li><li>The best way to put in the work towards a promotion.</li><li>Tradeoffs of working for a startup versus a big tech company</li><li>Equity in the salary negotiation, and how it weighs in.</li></ul><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/4bc93915/transcript\">\"Negotiating Your Salary and Advancing Your Career with Josh Doody\" Transcript</a></p><h3>Resources:</h3><ul><li><a href=\"https://fearlesssalarynegotiation.com/coach/\">Fearless Salary Negotiation Coaching</a></li><li><a href=\"https://fearlesssalarynegotiation.com/get-started/\">Fearless Salary Negotiation Book</a> </li><li><a href=\"https://fearlesssalarynegotiation.com/the-dreaded-salary-question/\">The Dreaded Salary Question</a></li><li><a href=\"https://fearlesssalarynegotiation.com/software-developers-how-to-get-a-raise/\">Software Developers: How to get a Raise</a></li><li><a href=\"https://fearlesssalarynegotiation.com/salary-negotiation-guide/\">Salary Negotiation Guide</a></li></ul><h3>Josh Doody:</h3><ul><li><a href=\"https://twitter.com/JoshDoody\">Twitter</a></li><li><a href=\"https://www.linkedin.com/in/joshdoody/\">LinkedIn</a></li><li><a href=\"https://www.joshdoody.com\">Website</a></li></ul><h3>Joel Hooks</h3><ul><li><a href=\"https://twitter.com/jhooks\">Twitter</a></li><li><a href=\"https://joelhooks.com/\">Website</a></li></ul>",
    "duration": 3597,
    "episode_number": 34,
    "contributors": [
      "Joel Hooks"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/2cqyd",
    "path": "/podcasts/negotiating-your-salary-and-advancing-your-career-with-josh-doody",
    "published_at": "January 7th, 2019",
    "url": "https://egghead.io/api/v1/podcasts/negotiating-your-salary-and-advancing-your-career-with-josh-doody",
    "edit_podcast_url": "https://egghead.io/podcasts/negotiating-your-salary-and-advancing-your-career-with-josh-doody/edit"
  },
  {
    "id": "podcasts-00000000000000000078",
    "title": "Switching Careers and Learning in Public with Tania Rascia",
    "summary": "Tania Rascia joins us today to talk about her experiences in transitioning from a professional chef to a web developer and the tools she used to get there. ",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/b17a591d-6672-4da0-9021-178642629d61/6c13d862_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/b17a591d-6672-4da0-9021-178642629d61/1544622204artwork.jpg",
    "simplecast_uid": "b17a591d-6672-4da0-9021-178642629d61",
    "transcript": "<p><strong>Joel Hooks:</strong>         I wanted to talk to you because somebody shared your website with me, and it was really awesome. But one of the things I noticed on there, before we get into like talking about technical stuff and blogging and all that fun business was, that you say at the top that you were a professional chef prior to getting into the world of technology, and I was just wondering, how that was and what it was like for you switching out of that world and into being a software developer?</p><p><strong>Tania Rascia:</strong>       Yeah, I mean the life of working as a chef is definitely extremely different from working as a software developer. But, you mentioned that you also worked as a line cook at some point, didnt you?</p><p><strong>Joel Hooks:</strong>         I did. I even sometimes still like think of it kind of fondly, maybe with rose colored glasses and forget some of the drawbacks of working in the kitchen and the hours and all that fun stuff. But I really enjoyed it, I worked as a line cook for probably five or six years, and almost went that way with my career, but got into computers instead.</p><p><strong>Tania Rascia:</strong>       Yeah, mine is interesting because most of my childhood I spent on computers and on the internet and making websites, so it actually didn't really make that much sense that I went into culinary school and ended up being a chef for eight years following, but that is pretty much what happened with my life. And yeah, like you said, the hours and the high pressure and everything, it's fun when you're really young, kind of, but it's not good for having a work, life, balance. And most of all, it wasn't really my passion. So, trying to do something for 70, 80, hours a week on your feet all day long, or you don't even have a passion for what you're doing, it just didn't make sense to me.</p><p><strong>Tania Rascia:</strong>       So after a while, I just kind of thought about it and well, I realized with a culinary degree, there was nothing else I could do but work in the restaurant industry, so I kind of had to start over from scratch. So I know, going from a chef to software development doesn't seem like the most natural transition, but surprisingly I've met a lot of other people who've emailed me that they've done the same thing, so I think it's pretty common that people realize that the industry is not really sustainable.</p><p><strong>Joel Hooks:</strong>         Yeah. It feels like, I mean the ultimate goal is to like have your own restaurant and then the actual reality of owning a restaurant is, especially as you get to learn like what's going into it, is a super daunting, to me anyway. And I still daydream about it, but I don't think I'll ever actually make the leap into that.</p><p><strong>Tania Rascia:</strong>       Yeah. It kind of makes sense it's a dream, but actually living out that reality is a lot of stress and you have to wear a lot of hats.</p><p><strong>Joel Hooks:</strong>         Yeah. And so, it made me think too, like what are the similarities that you've seen as you stepped into software development, from like lessons learned in your time in the kitchen?</p><p><strong>Tania Rascia:</strong>       I mean, if you can pass anything over from working in the restaurant industry to working in the tech industry, it's mostly just soft skills. Like, you have to do a lot of time management when you're working on the line, you have to prep certain things, you have to be cooking your tickets at the same time, and just when you're actually coding something you just have to prioritize, so soft skills like that kind of transferred over. But obviously, anything actually coding related is totally separate.</p><p><strong>Joel Hooks:</strong>         It was just funny, because if you read object oriented programming, the metaphor is always the kitchen, right? That one comes up a lot, like you're the chef in a kitchen and this is how we're going to describe object oriented programming.</p><p><strong>Tania Rascia:</strong>       That's true. I've often seen functions kind of a described as recipes, and so on.</p><p><strong>Joel Hooks:</strong>         Yeah. Yeah. And that's kind of a stretch though, to say you carry that over from kitchen scales.</p><p><strong>Tania Rascia:</strong>       Yeah.</p><p><strong>Joel Hooks:</strong>         So, I came across your website, somebody pointed it out to me, and I was so impressed just by the layout and the presentation, because you know, like you see a lot of people and they'll do it and it's either scattered or everything, and how I described it, and I tweeted about it, was that it was probably the best developer resume that I've ever seen, like in terms of a modern resume as we transition out of the paper resume age into something where it's really showing people what you can do. And I was just wondering, did you have any particular design philosophy when you approached this, or what was your thought process when you were creating your site?</p><p><strong>Tania Rascia:</strong>       Yeah well, first of all, thanks so much for that compliment. I actually did put a lot of thought into it, and I've made a lot of different designs over the years. I think that's my, technically, fourth major version, but if you look at the number of commits on my theme, it's over a thousand at this point. But for me, like the major thing was just simplicity. I wanted the content to be the first and foremost important thing, and everything else would kind of follow, so there wasn't going to be animations, or things that are just in there for the sake of the sign. If it didn't have a clear purpose, it wasn't going to be part of it. So, the site is pretty plain if you look at it, but all the content that I wanted to be there, from the different types of articles to things about me such as the timeline and what kind of programs I use and everything else, is all laid out very simply, easy to find.</p><p><strong>Tania Rascia:</strong>       I didn't want there to be like a hamburger menu, so you'd have to go through a long list of links. I just wanted it to be the absolute most important stuff. So I went through a lot of iterations and sent a lot of stuff out to my friends to take a look at it, what should I change? And if I had to say that there was like another website I've seen that kind of helped inspire that, it would be Derek [Cyber's 00:05:42] website, which is also extremely simple though a little bit less design oriented, even than mine. It's almost kind of just plain sans-serif, or plain serif text, and nothing else. But the fact is you can go through his site for hours and just look at all the different things he's written and just have a really great time on it, and that's kind of what I wanted people to have with my site as well.</p><p><strong>Joel Hooks:</strong>         Yeah, I love his site as well. And for the content, right? Like I don't go there to explore it as a design resource, I go there to read and learn and I think that's a really good approach and philosophy to building a personal space on the internet.</p><p><strong>Tania Rascia:</strong>       I agree.</p><p><strong>Joel Hooks:</strong>         You host your blog and your space, on your own domain, and these days I see everybody venturing to platforms like Medium or other kind of hosted, almost walled garden spaces, and I was wondering what made you choose to maintain your own site, versus one of these WYSIWYG sites, that's offered for, and I'm using the air quotes, \"free use\"?</p><p><strong>Tania Rascia:</strong>       To be honest, I really just don't like a lot of those sites. Like, I know a lot of people are posting on Medium and and different kind of blog aggregation sites like that, and I just like having complete control over the design, over the content and what is displayed. Like I personally don't have any ads or sponsored posts on my site, or popups, or is there something in the middle of the post, it's trying to get you to click on something, or affiliate link. Like all that kind of stuff is going to show up if you use another service, you can't control that. But if it's on my own site, my own domain, I even control the comments, because it's WordPress, I'm not using a third party service for that. So everything is mine, I can take it with me anywhere I go, and I just kind of liked having that freedom.</p><p><strong>Joel Hooks:</strong>         Yeah, because you're kind of an ownership. And I also thought, because you state that and I think the idea to avoid ads and affiliate posts and sponsorships and partnerships, that's something that we do at Egghead too, and we'll always do. I don't even ... like, we were making a lot of money, actually with Facebook ads, but quit doing it just because, and I was wondering, what's the motivation behind that? Is it just a purity, or do you have some other philosophy that has you avoiding that kind of stuff on your site?</p><p><strong>Tania Rascia:</strong>       I mean, there's a lot of different reasons for it. I think the absolute, like the biggest one, is just that I don't like looking at ads. I don't like having ads injected into my brain, and all day long, everywhere you go, you just see ads. I want there to be at least a place you can go where it's not happening. Where you can go, you get to see the content you're looking for, and nothing else is competing for any space or cluttering up your mind, kind of.</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Tania Rascia:</strong>       And the fact that I don't have any, for example, sponsored posts means I'm completely true to myself. I'm not putting something out there in hopes that someone will click on it. I'm putting something out there because I believe in it.</p><p><strong>Joel Hooks:</strong>         Yeah, I think it kind of skews incentives and motivation too, when you start going down that route. And like people always ask for it, you know, hey, we want affiliates, and I'm like, well, then you totally lose control, like you said, you don't have any control about how people are enticing you into your site, or what people are presenting, and that sort of stuff really ... like it makes you think, you have to start thinking about it, and is this right? Is this somebody I want to be associated with? And what's going on, that sort of thing.</p><p><strong>Tania Rascia:</strong>       Yeah, I totally agree. And sometimes it's been like, have I shot myself in the foot? Like, you know, I'm not going to be able to make any money on ads, and I can go back and change my philosophy now. But I'm glad that that's the way I've gone with it because it gives me the opportunity and the desire to push myself further to find other ways to make money, put some content out there that someone actually wants to pay for and make money that way, instead of just be ads.</p><p><strong>Joel Hooks:</strong>         Yeah, I like that a lot too. Because you're kind of like helping people and you know, there's probably some argument that ads help some [inaudible 00:09:28], but I think that's kind of a tough position to take.</p><p><strong>Tania Rascia:</strong>       Yeah.</p><p><strong>Joel Hooks:</strong>         So, I noticed just generally, and looking back to 2015 is when you started blogging, and I was wondering what the timeline was in terms of your transition from being a professional chef into a software developer, and does your blog posts track that kind of transition or did that come later in your development career?</p><p><strong>Tania Rascia:</strong>       Yeah, I would say it's at the very end of 2014 that I kind of, in the back of my mind, was thinking, what do I want to do? What am I going to be? How can I transfer over these culinary skills and do something else? And the reality was, I couldn't, I just had to do something totally different. But I started off just going on Craigslist, trying to see if I can make a little one pager website for someone, or do some graphic design, because at that time I still wasn't sure if I was going to do design or development or anything else.</p><p><strong>Tania Rascia:</strong>       But the end of 2014 is when I started, and then a actually a bartender at one of the places I worked at, had his own little WordPress company, and I asked if I can intern for him, and he said sure. So, I was interning for him in the morning for a few months while working at a, it was actually this NAMCO, Pac-Man, themed restaurant at night. So I quit my full time chef management job and just became a line cook at night while I was interning in the morning, and that was how I did my transition. While I was at that internship, I applied for a job which was, Let Us Entertain You, which is a Chicago restaurant group, as a web designer. Got that job, and I've been working in the industry ever since.</p><p><strong>Joel Hooks:</strong>         That's cool. Has that process of, I like to call it learning in public, my friend Sean Wang kind of coined that, for me anyway, that's where I first heard it, and just the idea of solving problems and then posting them to your space as you learn and grow, has that helped you? Or how do you think that's helped you, in terms of your new career as a software developer?</p><p><strong>Tania Rascia:</strong>       Absolutely, I think I've helped me. I think it's probably one of the most important things I've ever done as far as transitioning my career. And I strongly suggest to anyone who wants to become a developer that they do it as well. I mean, it's really easy to see all the work that's out there, and all the things that are left to learn, and think that it's just way beyond you. But when you write it down, you have a place that you can go back to, and not only have I been able to help other people with my blog posts, but I help myself. I'm constantly Googling something and getting my own website in response, and like, oh yeah, I remember I did that before.</p><p><strong>Tania Rascia:</strong>       So, it's kind of like documentation for myself, that other people benefit from as well. And if it's something that I can find useful, then someone else will probably find it useful as well. So I think people, they can be too scared to put themselves out there. And I've definitely had people commenting on my blog post that I'm wrong about something, but at the end of the day, I learne from that and I improve my article, and fix whatever I did wrong and I learn. If I didn't put myself out there I would just keep doing it wrong.</p><p><strong>Joel Hooks:</strong>         Yeah, I think people talk about the idea of imposter syndrome, and I noticed on your Twitter stream you've talked about that too, where they just hold off and they won't do anything like that, they won't put themselves out there. And I'm wondering, what's your experience with that, and any advice you'd give to people that might be feeling the same kind of feelings?</p><p><strong>Tania Rascia:</strong>       Yeah, I think everybody gets imposter syndrome. It's impossible not to with this whole information delusion that we have, where you can go anywhere and someone else has 300000 followers and they have so many projects on GitHub with thousands of stars, how could you ever compete with that? And you look at their projects, you don't understand a single thing that's going on. But I mean, I look back three years ago, I didn't even know what a variable, a string, a simple data type was, and I work today as a React developer, so it's not like it's outside the realm of possibility or something that you can't teach yourself. It's just, you have to take it slow. If you get hung up on the fact that you don't know everything, then you'll never be able to accomplish the beginning steps that you need to get there.</p><p><strong>Joel Hooks:</strong>         Yeah. One of the objections that I hear quite a bit is that folks are worried that it's already been covered, right? Like I hear, oh, I'm not going to make a blog post because everything I would want to say, has already been covered. Is that something that you've noticed, or you think people might be kind of holding back, unnecessarily on?</p><p><strong>Tania Rascia:</strong>       I do think that they're holding back into unnecessarily because I think, probably everything I've ever blogged about, has been covered before. For example, my most popular posts, lately it might be one of the React ones, but for a long time it was how to create a WordPress theme from scratch, something that there's all sorts of articles on there on how to do it, but no one really laid it out in a clear, easy to follow manner, and I couldn't find it. I sat there with like 20 Stack Overflow tabs open, trying to do it over and over again when I didn't really know any PHP.</p><p><strong>Tania Rascia:</strong>       I didn't really know any development, I was trying to figure it out as I went along. So once I was able to figure it out, I laid it out step by step, and now if you look that up, my link comes up before the WordPress official documentation itself, because in that specific instance, I did it better than what was there before. So, yeah, there's always going to be someone who's done it before you, most likely you're not going to be the first, but that doesn't mean you could do it better or it doesn't mean you can't get something new out of it that someone else hasn't done before.</p><p><strong>Joel Hooks:</strong>         My personal experience when I do that, and when anytime I end up on multiple Stack Overflow posts or have many tabs open when I'm trying to learn something, I think, wow, this is probably really a great teaching opportunity or learning opportunity for me, because the writing itself helps solidify my knowledge, and then being able to share that with the public is kind of a cherry on top of benefit. That's how I've viewed it.</p><p><strong>Tania Rascia:</strong>       Yeah, I agree completely.</p><p><strong>Joel Hooks:</strong>         So, speaking of React, I think your getting started with the React posts, if it's not your most popular posts, it probably will be soon because, one, it's awesome, and it's just really an interesting way to see something clearly explained, in a way that to be honest, like goes beyond the docs, like you said, with the WordPress theme building. I think that that post does the same thing. And is that a process of you learning React, is that where that came from?</p><p><strong>Tania Rascia:</strong>       Yeah, that's another thing, like I wrote that post as I was learning React. And it's funny that you mentioned that because it's actually in the official React documentation as the article to read for complete beginners. And I think the fact that I was a complete beginner as I was writing it, and I was writing as I was learning, means that I know exactly where beginners are going to get tripped up and what they're not going to understand. If you have a complete, full knowledge of it already and you're trying to put that out there for someone who's never seen it before, it's possible that you might have the curse of knowledge and you might not even know what they don't know. Which I think is a big problem overall with development tutorials and resources, that people just have too much knowledge and they assume that the new developer already has some knowledge that they think is innate, which is actually something that they just learned long ago, and forgotten that it might be something that someone will be struggling with.</p><p><strong>Joel Hooks:</strong>         Yeah. Once you're like a decade into your programming career, all of the beginning knowledge just kind of seems to fade away, and it's using the air quotes again, it's \"just simple\" or \"easy\" and why don't you understand this already? Which isn't a good attitude I think, for people educating in general.</p><p><strong>Tania Rascia:</strong>       Yeah, which is why I'm glad that I write these things as I'm learning them, because possibly if I tried to go back in a couple of years I wouldn't be able to write an article that as helpful for new people.</p><p><strong>Joel Hooks:</strong>         Yeah. It's really hard to gain that beginner's mindset once it's passed, and I know people that do, but I think that's a real ... like they're kind of the exception versus the rule, to that.</p><p><strong>Tania Rascia:</strong>       Yeah.</p><p><strong>Joel Hooks:</strong>         So, while we're on the subject of React, it's going through a lot of changes and I noticed that you've written a little about some of the new stuff that's coming out, and I was wondering just what you thought was exciting that's coming out with React and the new 16 six, and 16 seven, which you're introducing things like hooks and a Suspense and all that fun stuff, and what you were thinking about and where the future of React is for you, in your head?</p><p><strong>Tania Rascia:</strong>       Yeah, it's really interesting. I haven't had too much experience with Suspense, I've only heard of it, but hooks I saw when that came out and I just wanted to play around with it. And so I created a little CRUD out with it, and it ended up using a lot less code, I think, just in general than it would have if it used class components. And it was easier to write and I think, probably for a brand new person, it would probably even be easier to understand, if they had never used classes before.</p><p><strong>Tania Rascia:</strong>       And not to mention that classes are just kind of an abstraction in JavaScript and it's not actually classes, but they have to learn that it's a wrap over prototypes, which adds more confusion to the whole situation, which React, to begin with, is extremely confusing. I struggled a lot with it while I was learning. So I think in one way it's hard because now new people see, okay there's classes, there's hooks, what do I do? But if they just choose hooks and maybe go with that, I think it has the potential to be easier for new people to understand, and easier to maintain for experienced developers.</p><p><strong>Joel Hooks:</strong>         Yeah, I think that's a good way to look at it. And it is hard. And one of the struggles for me, is that folks are going to be out there opening the tabs and have Stack Overflow open and they'll probably see three or four different ways to do a thing. So like the deciding which is the best of the best practices is probably going to be a challenge for a lot of folks.</p><p><strong>Tania Rascia:</strong>       Yeah, I think that's already a problem if you're looking at how to do something in React, if you see a post from 2015 versus 2018, it's written completely differently. They didn't have a lot of those ES6 features that they do now, so everything is a lot more verbose. And again, if you're new, it's just confusing.</p><p><strong>Joel Hooks:</strong>         So, I guess along the line of you learning, just like think about the timeline, the ES6 kind of landed almost in the middle of that. Is that about right?</p><p><strong>Tania Rascia:</strong>       Yeah, I would say so.</p><p><strong>Joel Hooks:</strong>         Would you say the overall experience, was that confusing at all? And I just debate this all the time, that's why I'm asking, like do you show just straight up old school 2015 or ... excuse me, ES5, or do you jump forward to ES6 in like an educational capacity, and for people that are learning, or doing examples and teaching?</p><p><strong>Tania Rascia:</strong>       Yeah, I mean, I understand how that might be difficult because I first started teaching ... I've only read a couple of programming books. Usually I just jump in and try to do something. But the very first programming book I read was one on JavaScript, it's called, \"A smarter way to learn JavaScript\", and I thought it was absolutely great for someone who had never done any programming before. And it was completely written in older ES5 and below code. So it gave you more of the fundamentals, because a lot of ES6, while it's great once you know what you're doing, it's just making things easier for concepts that already exists. And for example, if you're learning what a variable is, now you have to learn, let, var and const.</p><p><strong>Joel Hooks:</strong>         Right.</p><p><strong>Tania Rascia:</strong>       That's a lot to take in for a beginner, when learning variable itself is hard enough. So I mean I kind of understand just learning ES5 first, and doing ES6 on top of that, but also nowadays, everywhere you go you're going to find ES6 code, so I can see how that one is a little tricky.</p><p><strong>Joel Hooks:</strong>         It's so hard. And that's a great book, \"The smarter way to learn JavaScript\", actually I have that one on my shelf too. I put it up there with Kyle Simpson's, \"you don't Know JavaScript\", which I feel comes after that because he takes a real deep dive, but the idea that you should understand fundamentally what's going on under the hood, like with this or whatever, and then move on to the nice decorations they put around it so you can stop thinking about it. But if you don't know what's going on, that makes it really challenging too, on some level.</p><p><strong>Tania Rascia:</strong>       Yeah, I agree completely. And I think Kyle Simpson's book, like you said, it's good once you already know the fundamentals, but if someone's suggesting that is a first look at programming in JavaScript, it's going to be difficult.</p><p><strong>Joel Hooks:</strong>         So on that note, what is your advice for somebody that's just starting out and is totally raw, doesn't know much, or any programming, like where do you even start to become a well rounded developer, in this day and age?</p><p><strong>Tania Rascia:</strong>       I mean, I'm always going to go with the fundamentals on that, and I think that's pretty hard because anywhere you go on line, any tutorial, they're going to say, NPM install these 30 dependencies, and then use this thing that already exist to do it for you. But I'm actually a big proponent of reinventing the wheel. I think you learn a lot doing things that way. It doesn't matter if it's practical for anyone else to use, you're learning. So I mean, something I did last year was I didn't really understand MVC, or classes, or any of that kind of stuff, so I built my own MVC framework in PHP.</p><p><strong>Tania Rascia:</strong>       And I didn't know what I was doing while I was doing it, but in the end, like I had all sorts of authentication, routing, everything I did on my own that now I feel comfortable using some framework or library to do it for me, because I've done it myself and I know what's going on, and I understand the concepts behind it. And taking it a little further when it comes to web development, HTML and CSS have to come first. You have to have some sort of basis in how HTML and CSS work on a simple level before you can start bringing in programming, in my opinion.</p><p><strong>Joel Hooks:</strong>         Yeah, that makes a lot of sense. So, one of my absolute favorite genres of books or articles or tutorials, is kind of the build your own X, you know whether it's build your own Rails, or build your own React, or build your own Redux, whatever. Like, I've always loved that idea in terms of building a thing, and I noticed your general stack of the open source projects that you present have that kind of vibe to them, like you wanted to learn something soo you built it, and then released it to the world. Is that about correct with those, like your PHP MVC framework?</p><p><strong>Tania Rascia:</strong>       Yeah, absolutely. I mean, before I made the, the MVC framework, and before I knew any programming, I only knew HTML and CSS and I saw Bootstrap, and that was kind of the first thing that confused me, like I didn't understand responsive design, because I hadn't made websites since the nineties practically, and a lot of things had changed over that time. So, once I figured out how to use Bootstrap, I realized if I didn't have the crutch of Bootstrap, I wouldn't know how to make a responsive website. So I decided to make my own CSS framework, using SAS as the language that would compile to the framework that you could use.</p><p><strong>Tania Rascia:</strong>       And it wasn't just a project that I created to say I could do it. I was working at the time, at Let Us Entertain You, designing websites, and that was the framework I used for all of the websites I designed, which each had custom designs. So like, I tested it by creating things with it and by the end of that, I felt like I could make any sort of navigation, you know, full canvas navigation, full screen navigation, responsive, all that kind of stuff. I did it from scratch, myself, and I used it.</p><p><strong>Joel Hooks:</strong>         Yeah, so I mean it takes that idea of learning in public even a step further to me, because now your not only writing about things but you're building a framework and using it in practice. So you're learning on like four different levels, basically, and you're really cementing the concepts into your brain.</p><p><strong>Tania Rascia:</strong>       Yeah, exactly. I feel like that kind of stuff, everybody should do when they're learning, at least once. At least try to do it once before you use Bootstrap or Foundation or Semantic or anything else. Or same thing with Laravel I haven't used Laravel, the PHP MVC framework yet, because I wanted to make my own first. Now that I have, I feel like I can go into doing that. And I think if you do things that way, you're going to become a much more well rounded developer in the end.</p><p><strong>Joel Hooks:</strong>         Yeah. I mean, it's all a black box, right? Like you said with NPM install, we just [inaudible 00:24:58], well, just install these 20 libraries and go to town. But what you're really doing is creating a very complex system without knowing what's going on inside of that black box. And that, it feels easy, but at the same time you're almost doing yourself a disservice if you don't really know what's going on. I'm not to say you shouldn't do that, just because I NPM install stuff, I don't understand all the time, but at the same time, when you really want to have a core understanding, like take a step back and think about what you're actually doing.</p><p><strong>Tania Rascia:</strong>       Yeah. I mean, I'd rather spend time developing something than fixing dependency errors, to be honest.</p><p><strong>Joel Hooks:</strong>         Yeah. And I could really stand to build my own CSS framework to learn it better. That's one of my often neglected skills. I'm getting better at it, but I'm like a decade in and still I'm kind of a noob at layout.</p><p><strong>Tania Rascia:</strong>       I mean these days I do CSS less and less, I get more interested by the programming problems, so when something's CSS comes up it kind of bores me these days. But I'm glad I did it anyway.</p><p><strong>Joel Hooks:</strong>         Yeah, I love that, that's my favorite thing about code is it's like a constant, ever evolving, Rubik's cube of wonderful knowledge. It just doesn't quit.</p><p><strong>Tania Rascia:</strong>       Yeah, which is why I think web development in particular is such a great career, because while people do complain about the fact that there's JavaScript framework, never ending, is it Knockout jazz, is it React, is it Angular? But there's always something new to learn and if you're sick of one aspect of it, you can go into another, you could do frontend, you could do backend, you could do system administration. I mean, the possibilities in this career are endless.</p><p><strong>Joel Hooks:</strong>         Yeah, it's really fantastic. So, that said, what are you going to focus on in 2019? What do you see coming up, in terms of your learning research schedule?</p><p><strong>Tania Rascia:</strong>       I mean, as far as web development itself, I would like to learn Node more because, like I said, if there's a dependency error, I don't even know what's going on. I'm just Googling the error and trying to fix it and get it over with. But if I could do more stuff on what I refer to as the back of the frontend, which would be like the Webpack aspect of the frontend, or just the backend of Node.js, I'd like to learn more about that. Webpack and Redux, I've never used Redux or any sort of state management in the React, which is kind of surprising considering I actually work with React on a daily basis, but I just haven't used it. And then in addition to that, I think I'd like to learn some lower level languages like C, just to kind of see a completely different way of going about programming and what that could be used for. So, that's kind of what's on my radar for 2019.</p><p><strong>Joel Hooks:</strong>         Yeah, I keep looking at REST, because it's a really interesting language, solves some of the problems that C has, but still gives you that kind of low level access. That has me fairly excited lately.</p><p><strong>Tania Rascia:</strong>       I don't know too much about it, but I've heard nothing but good things. Like I hear people really love that language, so that's another thing to look into.</p><p><strong>Joel Hooks:</strong>         Yeah, there's like this direct correlation, where they have a really nice path from REST into WebAssembly, which is also very interesting just for getting core libs up and running that defy the browser limitations. So that's been on my list too. I kind of skipped C, and c++ and all that stuff as well, and jumped right into web development, so-</p><p><strong>Tania Rascia:</strong>       Yeah, I mean, that makes sense. You'll either do one or the other. But yeah, WebAssembly is another thing to look into, in the future years, because I think that's going to get a lot bigger.</p><p><strong>Joel Hooks:</strong>         So much cool stuff. Well, Tania, it was great to talk to you today and thank you for taking the time out to chat with me about web development. I look forward to seeing and following along with what you're learning over the next years. And I think you make a great role model for anybody looking to jump into web development, and be kind of a constant learner and learn in public. I think it's a great, great model to follow.</p><p><strong>Tania Rascia:</strong>       Yeah. Thank you so much for having me. It was great.</p>",
    "slug": "switching-careers-and-learning-in-public-with-tania-rascia",
    "description": "<p>Tania Rascia works as a web developer full time. However, just a few years ago she was working as a professional chef. How and why did she make such a dramatic career switch? It isn't uncommon for culinary professionals to realize that they don't want to spend the rest of their life doing it. It is a very demanding job and isn't sustainable if passion isn't there.</p><p>So, having always been interested in computers and making websites, Tania decided to make the transition into programming as a profession. Starting with one-off small odd jobs on Craigslist, then an internship, and then a full-time web developer! There were a lot of skills and concepts that had to be learned in those three years, especially starting from near zero.</p><p>Sharing what she learned publically played an essential role in Tania's development. It's like writing documentation for herself, but everyone who read her posts got to benefit from it too. Tania also places a lot of importance in creating your own version of something to fully understand it. For instance, she didn't understand how bootstrap worked, so she experimented and worked on creating her own dynamic CSS grid framework to achieve that more in-depth understanding.</p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/6c13d862/transcript\">\"Switching Careers and Learning in Public with Tania Rascia\" Transcript</a></p><h3>Resources:</h3><p><a href=\"https://www.taniarascia.com/getting-started-with-react/\">Getting Started with React</a><br /><a href=\"https://sivers.org/\">Derek Sivers</a><br /><a href=\"https://www.amazon.com/Smarter-Way-Learn-JavaScript-technology-ebook/dp/B00H1W9I6C\">A Smarter Way to Learn JavaScript</a><br /><a href=\"https://github.com/getify/You-Dont-Know-JS\">You Don't Know JavaScript</a></p><h3>Tania Rascia:</h3><p><a href=\"https://twitter.com/taniarascia\">Twitter</a><br /><a href=\"https://www.taniarascia.com/\">Website</a><br /><a href=\"https://github.com/taniarascia\">Github</a></p><h3>Joel Hooks:</h3><p><a href=\"https://twitter.com/jhooks\">Twitter</a><br /><a href=\"https://joelhooks.com/\">Website</a></p>",
    "duration": 1723,
    "episode_number": 33,
    "contributors": [
      "Joel Hooks"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/1g2mr",
    "path": "/podcasts/switching-careers-and-learning-in-public-with-tania-rascia",
    "published_at": "December 12th, 2018",
    "url": "https://egghead.io/api/v1/podcasts/switching-careers-and-learning-in-public-with-tania-rascia",
    "edit_podcast_url": "https://egghead.io/podcasts/switching-careers-and-learning-in-public-with-tania-rascia/edit"
  },
  {
    "id": "podcasts-00000000000000000077",
    "title": "Incorporating Testers with Every Development Phase with Angie Jones",
    "summary": "Angie Jones, master inventor and automated testing engineer, joins us to talk about bridging the gap between the testing team and the rest of the development process, the challenges and limitations of automated testing, and some of the new and state of the art technologies in testing.",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/cb84823f-8d49-431d-b151-bcc1eabacca6/9109e509_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/cb84823f-8d49-431d-b151-bcc1eabacca6/1544237022artwork.jpg",
    "simplecast_uid": "cb84823f-8d49-431d-b151-bcc1eabacca6",
    "transcript": "<p><strong>Joel Hooks:</strong>         Hi Angie. </p><p><strong>Angie Jones:</strong>        Hi Joel, how are you? </p><p><strong>Joel Hooks:</strong>         I'm doing great. How are you doing today? </p><p><strong>Angie Jones:</strong>        Wonderful. </p><p><strong>Joel Hooks:</strong>         I'm super excited to talk to you and I want to mainly focus on your expertise in the software testing and automation field, because it's fascinating to me and I think not enough people probably focus on it, and it's something that really helps develop software at scale.<br />                    But I was reading your bio and I had a question before we get started in testing automation. You describe yourself as a master inventor, and I wanted to know what a master inventor is. </p><p><strong>Angie Jones:</strong>        Sure, so it's a distinguishment that's provided by IBM. So I used to work at IBM for several years, and for people who contribute significantly to IBM's patent portfolio and have inventions that are valuable to the company as well as help them evaluate potential inventions and mentor others who want to be inventors, this is a distinguished honor that they provide.<br />                    So it's not something I made up, it's actually a real thing. </p><p><strong>Joel Hooks:</strong>         Yeah. Makes sense. So basically is this software patents then? </p><p><strong>Angie Jones:</strong>        Right. Yes. </p><p><strong>Joel Hooks:</strong>         So my question was, and I've been a software developer for ten years and I don't have any patents, but I've never worked for a company for IBM that actually looks for that sort of thing, but I'm wondering how to you discover, what's the process in terms of discovery when it comes to these sorts of things and when you're identifying new inventions? </p><p><strong>Angie Jones:</strong>        Yeah so that was a question I had as well. So when I worked at IBM, the culture there was one that was very innovative and people prided themselves on this sort of thing, and there was a woman I saw who had this plaque on her wall in her office about a patent, and I was like, \"What is this and how do I get involved?\"<br />                    So she pretty much took me under her wing, and it's really just a slight adjustment in your mindset as someone who's already a techie. So for me, I was working in test automation at the time, and the way that I viewed things is I look for problems, and so patenting is pretty much the same way. You're looking for problems or you're looking for holes in a certain product or a technology space, and you simply come up with how do you fill that gap? How do you fill this hole?<br />                    And it's a lot of times comes from annoyance. So anytime that I feel slightly annoyed, like I think a product should do this, or I wish that I could some other thing, then I just take a moment, instead of griping about it, I say, why can't I do this?<br />                    And I think about it and say, \"Okay, how could I go about doing this? What's missing here?\" And I invent it. </p><p><strong>Joel Hooks:</strong>         That's really cool, and I'm wondering, do people outside of a large corporation like IBM, like it kind of makes sense in that context, but as independents, is it something that we can do or can we pursue acquiring patents and creating inventions ourselves in the software space? </p><p><strong>Angie Jones:</strong>        Yeah, you can, but it's, in my opinion, just so much easier to do it through a company. For one, there's a huge financial investment involved in doing so. So for example, just applying for the patent, it can vary based on what country you're in and that sort of thing, but there's, like when I submitted mine, it was like $25,000 just to have them review, and that doesn't guarantee that it's going to be granted. So that could be $25,000 you're spending, you get a \"No\" back from the patent office.<br />                    And then there's fees for legal costs and to have someone draft it up, so I write down my idea in my terms and then turn it over to a patent attorney who can write all of the legal mumbo jumbo, so of course there's costs with that, and all sorts of things.<br />                    So in my opinion, I would recommend going through a company, and every company I've worked at pretty much has offered some type of program. It's not always been as widely used as at IBM, but other companies have offered it as well, where they give you like an award so you get money for, some of them will give you money even for submitting an idea to them internally, like \"Hey I have this idea.\" And that might be a check.<br />                    And then you get some more money if they actually file it and more money if it's issued and more money if it's involved in licensing and all of this, so yeah. </p><p><strong>Joel Hooks:</strong>         Yeah that's pretty cool though. I've never seen anybody that had that or heard much about that process, because I haven't been familiar with it, so it's kind of cool.<br />                    So we'll get into test automation though because this is where you've had your focus for the last 15 years of your career, and automation in general to me is such a powerful tool that we have at our disposal. And I'm wondering what specifically is test automation and how do you define test automation?</p><p><strong>Angie Jones:</strong>        Yeah so test automation, it's interesting. A lot of people think of it as a replacement for testing, like manual testing, which it very much so is not. There's still definitely a need for manual testing, but what test automation is is it's essentially another software development project that's focused on the regression test of your production application. </p><p><strong>Joel Hooks:</strong>         Right so does that include the whole scope of what like Martin Fowler would call the testing pyramid where we have unit and integration and end to end testing and then the automation that kind of glues all that together? </p><p><strong>Angie Jones:</strong>        I look at that pyramid as examples of test automation. So each one of those layers in the pyramid represents a subset of an entire test automation strategy if you will. </p><p><strong>Joel Hooks:</strong>         Right. Yeah because they're all different, right? Every layer of the test is really there to serve different needs and for different purposes. </p><p><strong>Angie Jones:</strong>        Yeah. I think it was Mike Comb's pyramid, actually, but yeah Martin wrote about it too. </p><p><strong>Joel Hooks:</strong>         So as a test automation engineer then, what's the area of responsibility that one would find themselves in as an automation engineer? </p><p><strong>Angie Jones:</strong>        So if you're really good at this, you look at the entire automation strategy and determine which test cases we should even automate. Once you determine what we should automate then looking at, \"Okay, where's the best layer to target that? Should this be something that's done at the unit test layer?\" And that might be something that the developers can tackle, and you kind of assist in the identification of that.<br />                    As well as if, \"Hey, I thought of all of these tests after the code was already done, but they would probably be better suited at the unit test later,\" contributing them there, that's fine as well.<br />                    Then doing the whole, \"Okay, I want to test this feature, but how do I automate against this?\" And so looking at that, sometimes if we test it, we'll test it manually by going to the UI and clicking on all the buttons and verifying the outcomes and everything, but in automation you have to look at this from a lot of different angles, so UI automation is a lot of times it's brittle.<br />                    It's much slower than automating at these other layers of the pyramid. So you look at that and say, \"Okay. This is what I'm actually trying to test. There's probably some set up here. There's a lot of different things that I need to do to get it in the state that I want it to be in,\" and a lot of them might be able to be done at like API layer for example or call in some business logic and then doing whatever you need to do at the UI.<br />                    So it's such a interesting space. I've been in it for quite a while and always learning something new. And any project I go to, there's going to be these different interesting challenges to overcome, so I really love it. </p><p><strong>Joel Hooks:</strong>         It's kind of like a holistic look at the entire system and how we're going to test that and make guarantees and click testing's always going to be there, but how are we going to make it easier and where we can focus on harder problems and eliminate a whole class of stuff that robots can do for us. </p><p><strong>Angie Jones:</strong>        Exactly. Yep. </p><p><strong>Joel Hooks:</strong>         So I've had a pretty decent run in the enterprise software space, which seems like where I've worked most with dedicated QA or test teams, and to me in almost every case it felt like it was siloed where there was test and there was development, and there was this tension between test and development, versus some sort of integrated team strategy, and I was wondering what your experience was with test and dev and how you think that that should be on a software project. </p><p><strong>Angie Jones:</strong>        Yeah I've had the same experiences where they were siloed groups, and neither understood what the other was really doing, and we saw that a lot when we were doing development in the waterfall method, where dev would do their thing and kind of toss it over to test and then they would do their thing. And as we're moving more towards agile and dev ops and trying to release a whole lot quicker, everyone is realizing, okay that's not going to work. This whole staged approach is not going to work and we have to collaborate to be able to do things quicker.<br />                    So as far as testing in general, I always encourage testers to be involved in every phase, whether it be planning or design, and I've seen amazing testers that can go into like a design meeting and be able to poke holes in a design and tell them, \"Okay this is not going to work because of X Y and Z, or this is not aligned with the rest of the way that we built the product,\" and be able to identify that stuff before any code is ever written, and it's just so amazing. It saves so much time.<br />                    As far as automation engineer, I love to work with developers early on, especially let's say we're working in a two week sprint. So a developer has to write the code, let's say they're not done until a week and a half of that sprint. Well now, I need to write all of this automation code, and remember this is a software development project in and of itself, and sometimes, I tell people, sometimes your automation engineers are writing more code than your developers are. Your developers write this much code for the feature, whereas your automation engineers have to write all of these tests for that feature, so they need time as well.<br />                    And I've come up with strategies to be able to collaborate with development so that we can both write code in parallel. So some of that might be, \"Let's get together. Let's mock out what this UI is going to look like, so we both have a clear vision in our head. Let's go ahead and talk about how do we make this UI testable? So what IDs and locators do we need for the different elements so that I can begin writing my automation?\"<br />                    And so if I leave the meeting with that information in hand, I could go ahead and start writing my automation code before dev begins their coding, and that way we get done a lot quicker. </p><p><strong>Joel Hooks:</strong>         Yeah, I mean parallel makes so much sense. I always had a real problem with the idea that development and test was this separate thing that we're doing, and the reality of it should and can be that this is a collaboration and we're working together, and test isn't there, they're not out to get you, developer. They're here to help you and make a good product for the end user. </p><p><strong>Angie Jones:</strong>        Yeah, exactly. </p><p><strong>Joel Hooks:</strong>         Because sometimes as a developer when your tester's like, \"Oh this is all broken,\" and you're just like \"NO!\" Like that kind of, but it's not [inaudible 00:12:47], it's broken, so we have to fix it. </p><p><strong>Angie Jones:</strong>        Right. I mean it's your work, we're all sensitive about our stuff, but yeah it hurts a whole lot less if you have your testers involved a lot earlier and so they're catching things where you're like, \"Oh yeah. Of course I made this mistake. I'm not really even done but yet, but yeah I'll go ahead and fix that right now,\" as opposed to you put your blood, sweat and tears in it, you think that it's beautiful and then people rip it to shreds. </p><p><strong>Joel Hooks:</strong>         Yeah it's not your baby. It's not a child. It's code or whatever, like a feature. We got to step back a little bit. </p><p><strong>Angie Jones:</strong>        Exactly. </p><p><strong>Joel Hooks:</strong>         The end goal for everybody is to deliver a killer experience, then we're on the same page I think at the end of the day. </p><p><strong>Angie Jones:</strong>        Yep. </p><p><strong>Joel Hooks:</strong>         So one of the things that I kind of noticed, just in looking at test automation is that in a lot of ways it is like a developer position, but it's more focused on testing, but it feels to me like especially when you look at the automation part of that job description, it really does have a lot of crossover with what a developer would typically do, because you're writing software, just software to test other software. Is that a good way to look at it? </p><p><strong>Angie Jones:</strong>        Yeah that's exactly right. So I actually worked as a developer for a couple years. So I did automation and I did automation straight out of college, so then I kind of viewed it as this hierarchy where it was development was more superior to automation, just like, \"Oh I want to be a developer.\" And so I got into development for a couple years and Joel, I hated it.<br />                    Yes we were both still writing code, but like I talked about with automation, I get to do so much. I get to exercise so many more development muscles, and during the architecture, and I have this complete autonomy over it. I have a larger view of the system and what we're trying to do here versus in development it would be like, \"Oh I have to create this little widget or something like that.\" And so my view was just so scoped in development, whereas automation it was just much broader.<br />                    But yeah, we're all writing code. It has to be clean, all of these concepts are still applicable to test automation. We have to maintain it. We go through code reviews. All of that. So it's very similar, yeah. </p><p><strong>Joel Hooks:</strong>         How do you think people listening to this, just Egghead's audience in general is mostly developers, but should developers be picking up more of a test automation mindset and doing some more crossover work in that regard in general? </p><p><strong>Angie Jones:</strong>        You know, Joel, I wrote this controversial piece that says \"Why developers should not lead your test automation projects.\" And a bunch of developers jumped on me as if I was saying that they can't do it. And it was funny because I've worked at quite a few places. I've done consulting. I've not met a whole bunch of developers that even want to do this, but me challenging them and them interpreting it as they could not do it, just got them all up in arms. So it was really funny.<br />                    Now, here's my thought on this. I think that a lot of times we have leadership that's trying to push everybody to do all the things, and I just think that sounds cute in theory, but when we're looking at everything that we have to do, it's just so much and one person can't do it all. So I think that it's fine to have everyone collaborate, but I do think that you should have someone designated to focus on test automation.<br />                    And like I said in the piece, the developers, they're focused on their craft. They have this huge task where they need to actually build something, and they're constantly trying to update their skills in their area. I find that it's unfair to ask them to also stay on top of all the latest and greatest things and test automation as well, because that's a whole 'nother niche there. There's design patterns there. There's all of these strategies and models and things, so it's only so much a given person can focus on. </p><p><strong>Joel Hooks:</strong>         Yeah for sure. </p><p><strong>Angie Jones:</strong>        So yeah I think that they should let someone lead it who is focused on this space, but they can always contribute to that based on the guidance they get from that leader. </p><p><strong>Joel Hooks:</strong>         What should developers be doing then to help us build more testable apps that flow better, I think is probably the question. </p><p><strong>Angie Jones:</strong>        Yeah that's a great question. Okay so I think that unit tests are really important. Those are going to be your fastest, most reliable test, so if developers take up the bulk of the unit test, that is extremely helpful. And I also think that it's probably better if a developer tries to write one or two more longer form automation tests so that they can really get a feel of how to make this more testable.<br />                    So there's a lot of, I worked at Twitter up until a couple of months ago, and a lot of the engineers that I worked with there were new grads. And so they were great developers, but they didn't teach anything about testability and stuff like that in the courses that they took.<br />                    And so while they were making a nice app, it's like, \"Oh guys, I can't automate against this, or I could do it, because I'm a magician at this, right, but it's making my job a lot harder,\" and so it was just something that they didn't know on, \"Okay. I need to put in locators and hooks and things like this and provide scenes and APIs and stuff so that our app is more automate-able and more testable.\"<br />                    And just explaining that to them and showing it to them, it's like, \"Wow. Okay yeah sure I can do that.\" Or in some cases, well I'm using this Java Script library, so I'm not even developing this widget, I don't have access to put a locator on it. And so we would just communicate and figure out how could we go about adding what we needed at some point in the application? </p><p><strong>Joel Hooks:</strong>         Yeah. I mean that kind of circles back to the idea of during a spring or during a development cycle, we're all collaborating, and we're not just waiting til the end and being like, \"Hey, here's what I developed. Now good luck testing it.\" </p><p><strong>Angie Jones:</strong>        Right. Right. Exactly. </p><p><strong>Joel Hooks:</strong>         So we can't test everything, right? We want to have a well tested app and there was this Google testing blog post that talked about Testivus, have you ever seen that one? I'll forward it to you and link it in the show notes, but it's just this hilarious, if you are into testing jokes, parable where you have Testivus and he sits on the mountain and the first developer comes up to him and he's like, \"They say that we need this much coverage.\" And he's like, \"Well just write a test and that will be fine.\"<br />                    The punchline is like my boss says I need 100 percent coverage, and he was like, \"Write as many tests as you want, because that's what you'll do anyway.\" I told it poorly, but it's just a testing joke, and the idea to me, that I took away is that this concept of complete test coverage is something that you hear about and people talk about, but it's just like the wrong idea, and that we should, so what in your experience is the scope of the most bang for the buck as far as testing automation goes? </p><p><strong>Angie Jones:</strong>        I think that it boils down to risk, and especially when we get into test automation. So test automation is just so expensive to create and to maintain. And a lot of times we start the projects and it's like, \"Oh let's automate all the tests, because we don't have time to do manual regression.\" And that's the wrong frame of thought. You'll quickly find out that automating all the tests is not getting you what you want. You have all of this noise and your built, heaven forbid you use them as blockers for like continuous integration or something like that, so now your build is failing because of something that is really low risk in value.<br />                    You don't even really care about the test.<br />                    So I put together this matrix, and I've talked about it. It's called, \"Which test should we automate?\" It's out on YouTube and stuff like that, but it's essentially like a way that you can score your tests, so here are all the tests that I had, and you can go through this model that looks at risk-value, cost efficiency and the historical failures around that feature area, and be able to assign a score to any test, that way you can then sort your test by scores and you can say, \"Okay, maybe the top 25 percent's definitely things that we should automate. Maybe the bottom 25 percent, just throw that out. Don't even worry about automating it.\" And then everything in the middle you can use your judgment or whatever. Contextual metrics that you have that says, \"Okay we should or should not automate this.\"<br />                    But the beautiful thing about that is that it's all sorted by score, and so you know what we should automate next, and what's our highest priority? So it's really all based on risk and value. </p><p><strong>Joel Hooks:</strong>         Yeah really quantifying the priorities of what we should focus on. </p><p><strong>Angie Jones:</strong>        Yep. Yep. </p><p><strong>Joel Hooks:</strong>         So one of my questions, and something that comes up, people talk about tests and testing and to me, it directly affects user experience, and I was wondering what your philosophy was on that. Is testing part of the UX of an application? </p><p><strong>Angie Jones:</strong>        Yeah, definitely. So we can have functional apps that are not usable or the user experience is horrible and we've all seen cases where that product doesn't succeed because of that. And development was tight, but the user experience just was not. I've just started working at applitude that focuses on visual validation. And I'm seeing as I'm learning in this role, I'm seeing a lot of cases where in test automation, you might have automated some tests and functionally, the test passes.<br />                    For example, I was in Raleigh last week, and I wanted to make reservations for a large party because I used to live there, and so I wanted to meet with some friends, and so I went on Open Table to make a reservation for a large party. And you know how they show you the times available, and so I went to click on one of the times, and there was a modal that popped up. All I could see was two buttons that said Select and they were poorly aligned and I couldn't see any text that went with those buttons.<br />                    So I had to dig in the dom. I was in chrome dev tools trying to figure out what do these buttons correspond to? And eventually I found the labels way off in the upper right corner or whatever. And so I was like, \"Oh this horrible.\" But I could totally see where if I automated that test, that test would pass. That would be green in the bill because the buttons technically are there. The labels are there.l and so everything works, but as a human being, I wasn't able to use that without digging in dev tools, which most people are not going to do.<br />                    So the user experience, the usability was it failed, and that would have been missed with test automation. </p><p><strong>Joel Hooks:</strong>         Yeah that's interesting too, and it's like the other side of it, right? We can automate all we want, but perfection's probably not going to be something we achieve. </p><p><strong>Angie Jones:</strong>        Yeah. </p><p><strong>Joel Hooks:</strong>         So you've been in this for a long time. You've been doing test automation for 15 years. The web, in the past 15 years, if we go back to the early 2000s compared to now has changed so much. We got View and Angular and these kind of thicker client-side UIs, and I'm wondering how has that affected your job as a test automation engineer? </p><p><strong>Angie Jones:</strong>        Yeah oh my God. Yeah. It definitely has. So before I called it the simple web, where we had a page for every state and so it was much easier to be able to get to what you needed to get to, but now we have single page applications, and we have all this dynamic content and so it makes it much more interesting in the automation space, so there's a lot more coding that's needed. We have to do things like wait intelligently for things to appear and disappear in the dom, and so there's a lot of new tools that are coming up that kind of build a lot of that stuff in, so that we don't have to worry about it.<br />                    Also, we used to preach to dev, \"Oh put IDs on all of your elements so that I can automate against it,\" and a lot of times I'm seeing cases now where with these new fancy, I call them the fancy UIs now, the new fancy UI's, that's not even enough having a ID.<br />                    So as an automation engineer, you really had to level up and be able to work with CSS selectives and X path selectives and be able to write an X path query that basically says \"This exists in the dom, but it's not really visible on the screen, and so how do I craft a selector that says that?\" </p><p><strong>Joel Hooks:</strong>         Plus not only are you doing that, but you're dealing with a extremely a-synchronous UI that can be changing by the second. </p><p><strong>Angie Jones:</strong>        Exactly. So it makes it interesting. </p><p><strong>Joel Hooks:</strong>         Yeah I mean it's job security too. If everything stayed the same, we'd just automate everything and we'd all be out of a job. </p><p><strong>Angie Jones:</strong>        Yeah, but that goes back to what you were saying about how automation engineering is very much so software development, like think of that challenge and having to be able to write a test that needs to be repetitive and work across different environments and take all of that into consideration. </p><p><strong>Joel Hooks:</strong>         Mm-hmm (affirmative). That's what I was saying. To automate this stuff, you have to kind of be a cross systems expert, really, and you have to understand the whole scope of the project, and what everybody's doing and all the systems or how they all work together, in the front end and the back end and [inaudible 00:27:54] and thick clients and the whole thing is a real challenge, really. </p><p><strong>Angie Jones:</strong>        Yep. Yep. Exactly right. </p><p><strong>Joel Hooks:</strong>         So what's the current state of the art in test automation? </p><p><strong>Angie Jones:</strong>        So selenium web driver is like the king of UI automation. There's been a lot of talk lately though of Cyprus. So Cyprus IEOs, Java Script. So a lot of Java Script folks are looking into this. Developers seem to actually like it and want to write tests with Cyprus, which I find fascinating.<br />                    There's also a huge demand for API automation, so getting away from the UI. We have a lot of people that are developing web services and going from monolithic apps to microservices and things like that, so they're looking for people who can automate against that. That's a totally different scale and being able to thoroughly test a web service, so that's something that's on the rise as well.<br />                    People are also looking at things like visual validation, so like that UX thing I talked about earlier, being able to put eyes on your automation to be able to actually do the UX piece of this. So a lot of interesting things.<br />                    There's also a lot of people that are looking into AI and testing and how that might be able to help us in these automation efforts. So some of the challenge is like the locators changing and all of this as the application is continuously being developed upon. Using AI to be able to still find elements even though the locator has changed, or helping with test data strategies and things like this, so it's also something I'm looking at AI to be able to identify, \"Oh, this is a shopping cart page. I don't care what application this is. I'm able to determine that this is a shopping cart page. So here are some out of the box automated tests that you could run against that.\"<br />                    So it's really- yeah real interesting. </p><p><strong>Joel Hooks:</strong>         Yeah. So I want to close it out, I saw, I think it was a talk that you were giving or are going to give that describes testing as a game and I thought that was really intriguing, and I was wondering if you could kind of expand on that, and tell me what that means. </p><p><strong>Angie Jones:</strong>        Yeah so I did that as a key note at Selenium conference a couple of weeks ago. It was called \"Level up. Playing the game of test automation.\" And I actually studied game design. I developed a web app that's a game, and I talked about how having this game designer mindset, how it helps me to view some of the challenges within test automation, and how to navigate those.<br />                    So some of the things I talked about is like how if I design a game, a game has to have a goal. A lot of times we get into test automation. The first thing someone says is, \"Oh let's build a proof of concept.\" Without even thinking about, \"What's the goal of this?\" So you wouldn't start a game without knowing what's the goal and what's the objective? If you do, you're just aimlessly wandering around. You don't know which place to make. Same thing in test automation.<br />                    And I talked about different rules, how do you define rules? How do you navigate those? Game flow and strategy. And then I talked about Richard Bartle's taxonomy of player types. So this was a huge hit at the talk where I talked about he defined all the players that come into the game, he's able to categorize them into four different categories, and so I talked about how people can identify with these and what they are doing and what they should do and proof.<br />                    So it was a really good talk. Really interesting. People seemed to like it. </p><p><strong>Joel Hooks:</strong>         Yeah people have to check that out. Is it available online? </p><p><strong>Angie Jones:</strong>        Yeah it should be on YouTube by the end of the week. </p><p><strong>Joel Hooks:</strong>         Cool. Well we'll look out for that and we'll add a link to it.<br />                    And I had one other question. I was curious about the test bash and the ministry of testing, and I've seen you've been involved with them for a while, and I was wondering if you could tell us what that's about, and I know that there's a conference upcoming if you wanted to mention that and it might be actually before this comes out, but at least give people some awareness that it exists. </p><p><strong>Angie Jones:</strong>        Yeah so Ministry of Testing is an organization. They throw these conferences, as well as other things, it's pretty much like a community, so they have testing courses and blogs and things like that, but in addition to that, they also do these conferences around the world. And for the very first time this year, it's coming to San Francisco, so I'm helping them organize that and bring that to San Francisco November 8th and 9th.<br />                    And I put together the program. It's an amazing program. So being in San Francisco, I wanted some high tech type of talks, so some really interesting things, things that we don't talk about enough in testing. Some cutting edge stuff, so things like testing server-less cloud apps, AB testing, testing voice first apps like Alexa, there's even a developer who's coming to speak and talking about how the testers have gotten into his so much so that when he's writing his code, he can essentially hear the things that they're going to say and it helps him to develop better.<br />                    So yeah, it's going to be great. I love this conference. I speak all over the world, at so many conferences, and I have to say that test badge is my favorite, just because of the community feel there. You just get to meet so many wonderful, supportive people. </p><p><strong>Joel Hooks:</strong>         Yeah. I know Rosie Sherry and she's always been really, just the whole idea of Community First, and I've never worked as a test automation engineer, but just the community around it and just the love that that group of folks shares is really amazing and inspiring to me in terms of community development. So it's cool. </p><p><strong>Angie Jones:</strong>        Yeah yeah. She's amazing. </p><p><strong>Joel Hooks:</strong>         Yeah. Well Angie, thank you so much for taking time out of your day to talk to me. I really, really appreciate it. I think that this stuff is important and I think developers should be more aware of what the test team is doing and I think that it shouldn't be developers and testing. I think we should all just be one team and we should build great apps that are well tested to deliver to our users.<br />                    So thank you so much. </p><p><strong>Angie Jones:</strong>        Thanks for having me, Joel. </p><p><strong>Joel Hooks:</strong>         Cheers. </p><p><strong>Angie Jones:</strong>        All right. Bye. </p>",
    "slug": "incorporating-testers-with-every-development-phase-with-angie-jones",
    "description": "<p>Today Angie Jones, a master inventor and automated testing engineer, speaks with us about what a master inventor is and what it took to receive that title, what testing automation is, having parallel between testers and developers, what developers can be doing to build more testable apps, and finally how modern web development has complicated automated testing.</p><p>Angie talks about some common problems when it comes to testing. The test team is often separate from the developer team, and it leads to communication problems. Testers should be working in parallel with the dev team to ensure that from the get-go they are writing a testable app!</p><p>Another common problem is that 100% test coverage gets pushed. However, that's the wrong idea. Automated testing is expensive to implement, so Angie talks about how she figures out what'll give the most \"bang for your buck\" when deciding what tests get automated.</p><p>Apps aren't as simple as they used to be, and thicker client-side UIs have made it much harder to implement automated tests. Automated Engineer is a fully fledged development position requiring skill across platforms, which is why Angie says that developers shouldn't be leading automated testing. There is a lot that automated testers have to do and separate skills that they need to develop. There's only so much a person can keep up on at once.</p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/9109e509/transcript\">\"Incorporating Testers with Every Development Phase with Angie Jones\" Transcript</a></p><h3>Resources:</h3><ul><li><a href=\"https://www.youtube.com/watch?v=mYrC3lLlwTM&t=0s&list=PLH36PGKycBeLQk4KAshSjYOSlOqHlvs9u&index=2\">Level up: playing the automation game</a></li><li><a href=\"https://en.wikipedia.org/wiki/Bartle_taxonomy_of_player_types\">Bartle taxonomy of player types</a></li><li><a href=\"http://angiejones.tech/why-developers-should-not-lead-your-automation-efforts/\">Why Developers Should Not Lead Your Automation Efforts</a></li><li><a href=\"https://www.youtube.com/watch?v=VL-_pnICmGY\">Which Tests Should We Automate</a></li></ul><h3>Angie Jones:</h3><ul><li><a href=\"https://twitter.com/techgirl1908\">Twitter</a></li><li><a href=\"https://github.com/angiejones\">Github</a></li><li><a href=\"http://angiejones.tech/\">Website</a></li><li><a href=\"https://www.youtube.com/playlist?list=PLH36PGKycBeLQk4KAshSjYOSlOqHlvs9u\">YouTube</a></li></ul><h3>Joel Hooks</h3><ul><li><a href=\"https://twitter.com/jhooks\">Twitter</a></li><li><a href=\"https://joelhooks.com/\">Website</a></li></ul>",
    "duration": 2091,
    "episode_number": 32,
    "contributors": [
      "Joel Hooks"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/r33wk",
    "path": "/podcasts/incorporating-testers-with-every-development-phase-with-angie-jones",
    "published_at": "December 7th, 2018",
    "url": "https://egghead.io/api/v1/podcasts/incorporating-testers-with-every-development-phase-with-angie-jones",
    "edit_podcast_url": "https://egghead.io/podcasts/incorporating-testers-with-every-development-phase-with-angie-jones/edit"
  },
  {
    "id": "podcasts-00000000000000000075",
    "title": "Exploring Concepts and Teaching Using Focused Zines with Julia Evans",
    "summary": "Today Julia Evans talks to us about her zine empire, the advantages of monetizing over staying free, how keeping the topic focused can be a better entry-level lesson than a high-level overview, and how she decides a zine's subject. ",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/0c9850ec-b366-4f96-ac63-4b0477b50049/c201ca9e_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/0c9850ec-b366-4f96-ac63-4b0477b50049/1542677486artwork.jpg",
    "simplecast_uid": "0c9850ec-b366-4f96-ac63-4b0477b50049",
    "transcript": "<p><strong>Joel Hooks:</strong>         Hi, Julia.</p><p><strong>Julia Evans:</strong>        Hi, how are you?</p><p><strong>Joel Hooks:</strong>         I'm doing well. It's really great to talk to you, I'm a huge fan of your zines and just you're general education approach that you've taken on the internet, I think it's fantastic. I like reading the zines and you started charging for them this year, which I was really, really, really happy about, because I like to send money to people that are good at creating cool things on the internet. So thank you for charging me to get access to your zines, I appreciate that.</p><p><strong>Julia Evans:</strong>        Anytime.</p><p><strong>Joel Hooks:</strong>         Did that change how you approach anything when you started charging? We kind of live in everything is free, open source culture I feel like sometimes, and I was wondering, when you start charging how does that actually affect your delivery or the public perception of the thing that you're creating?</p><p><strong>Julia Evans:</strong>        So it changed a few things. I feel like people started taking them a little more seriously after I started charging for them. I don't really know if that's true. But, for example, one thing that happened is someone made one of my zines a required text in their college course, and I was like “really?”. Wow!</p><p><strong>Joel Hooks:</strong>         That's crazy though, that's cool.</p><p><strong>Julia Evans:</strong>        It was really cool. And it was alongside, quote, unquote, real books. I thought that was really cool. What else has happened that's been different? It's easier to spend money on them. I was always hiring illustrators, but it's easier to do that now. And I don't really worry about it, right? I'm not like, \"Oh, this is so expensive\" like, it's not a big deal. What else? I feel like I can spend more time on making them really good. And it's easier to just like, justify the time that I spend on them.</p><p><strong>Joel Hooks:</strong>         Regardless, it feels like it's a labor of love for you, it's something you enjoy doing. If you can charge for them and then invest, I suppose, back into them that's a pretty awesome opportunity as well. </p><p><strong>Julia Evans:</strong>        Yeah. Exactly. I'm definitely not out to, I don't know, become a millionaire. </p><p><strong>Joel Hooks:</strong>         Do you think there is someone that is a zine millionaire?</p><p><strong>Julia Evans:</strong>        Maybe, I'm not sure. </p><p><strong>Joel Hooks:</strong>         It seems like that might be a stretch. I don't know. We deliver videos, that's what egghead io does. And we really try to be aggressively free, I love giving people free stuff, but at the same time we also like eating. And in the US we have to worry about health care so we like to be able to provide that sorta stuff. Balancing the charging folks with the idea that we want to get the information out there has always been a challenge. Has that been something that's occurred since you started charging?</p><p><strong>Julia Evans:</strong>        It's something I worried about a lot. My current theory about this ... because I give away a lot of stuff for free, right? I mean, a, I post almost everything in my zines on Twitter in the first place. So if you want to read the whole thing you can just sort of scroll through my timeline and it's there [inaudible 00:03:12]. It's not that complicated. Also, I write on my blog all the time. But I think the thing that I sorta found, I don't know if this is true or not, but the way I felt was I'd write these zines and I'd put them on my website, and I kind of felt like people were not reading them, if that makes sense? I felt like their reach wasn't actually that big. And I don't have the sense that selling them has reduced my reach that much. I don't feel like it's ten times less people are reading them because I'm selling them. Does that make sense?</p><p><strong>Joel Hooks:</strong>         Yeah, I think your blog post said the downloads for a freezing was 5000 versus 3000 people that have actually paid you for a different zine. The numbers aren't so far apart that it's like \"now nobody's looking at it anymore.\"</p><p><strong>Julia Evans:</strong>        Yeah, and also I would assume that people sort of pay more attention to things that aren't free. Maybe the total amount of information transmitted is higher, right?</p><p><strong>Joel Hooks:</strong>         Straight up, I've been reading your zines for a while and the free ones I would click through the pdf and scroll through it quickly, and I've actually, since I've bought them, I've printed out every single one that you've charged for. I have the print out and it sits around my house versus being  a digital artifact stuffed on my hard drive somewhere.</p><p><strong>Julia Evans:</strong>        [inaudible 00:04:24] happy, because I want people to print them. That's the whole point. </p><p><strong>Joel Hooks:</strong>         Yeah, to me the physical artifact, I have vinyl records, and I like books and actual physical things, so having the artifact to me is really cool. Sit down, look at it, and feel it and read it and do that sorta thing. </p><p><strong>Julia Evans:</strong>        Yeah the first zine I made I actually refused to make a version that you could read online. I was like \"I'm going to put this in a format which is impossible to read online and you have to print it.\"<br />                    [inaudible 00:04:56] I backed away from, eventually. But I still kind of stand by it. That's how they're supposed to be. They have a [inaudible 00:05:07] of four pages for a reason. It's because you can print them.</p><p><strong>Joel Hooks:</strong>         Yeah, there's a zine tradition, this isn't something new that you've invented. It's kind of a long running ... there's an origin story to the zine.<br />                    Getting back to it, I just jumped right in. We started talking about charging people money for zines, but your zines are kind of around specific topic areas and for somebody that's not familiar with Julia Evans's zines and what you create, how would you describe the zines that you create?</p><p><strong>Julia Evans:</strong>        Most of them are around systems topics, specifically I would say around things that as a normal developer, you might not ever learn. So, the first zine I wrote was about strace, and the reason I wrote about strace ... strace is this tool for tracing system calls ... that I learned about sort of after I'd been programming for 10 years. And I was kind of angry when I learned about it, in a way, because I was like \"This is a really useful tool, why did nobody tell me?\"<br />                    Right? Anytime in the last 10 years you could have told me that this tool existed. And I didn't know about it. And that's the reason that I started writing these zines, is I wanted to get the information out there. These are useful tools and these are things that people need to know about. And especially in systems, things like operating systems, there's I think this culture of having information verbally passed down, it's like you have the ancient graveyard [inaudible 00:06:36] who teaches you the stuff, right?</p><p><strong>Joel Hooks:</strong>         [inaudible 00:06:39] </p><p><strong>Julia Evans:</strong>        Exactly, but these are computers. There's no reason that it needs to be an oral tradition. So I wanted to be able to write it down. </p><p><strong>Joel Hooks:</strong>         And you don't have an \"Understanding the Linux operating system\" zine, that's not something you do. You tend to focus on very specific, something that you can consume in a sitting instead of a month of reading a thick book. </p><p><strong>Julia Evans:</strong>        Yeah, so I really don't like high level overviews. There's this thing about lightening talks. So lightening talks are the best kind of talk. They're 10 minutes, and there's two ways to give a lightening talk, the right way and the wrong way. The wrong way is you're sort of like \"oh I'm going to talk about this topic\" I don't know, quantum computing or something, and you give a really high level overview, that's from 30 000 feet in the air. And I think this is really the wrong way to approach subjects. I really like to say \"Okay, let's zoom in to one small interesting, useful thing about this topic, and let's start there\" and I feel like that often gives people a much better view, and a much better understanding of the topic than sort of starting really zoomed out. Does that make sense?</p><p><strong>Joel Hooks:</strong>         It makes total sense. Egghead, our videos, we've always called them \"bite sized.\" We kind of try to get away from that.<br />                    What we do is we make these videos that are two to four minutes long versus if you go on YouTube you can find people just drawing on forever about something, and repeating themselves, and having to explain everything in the world. And we're like \"People are smart\" what if we just talk about the exact concept that they're here to learn about and stop wasting their time. Which is why I don't like video. I don't even like watching video to learn, I like reading, because I can do it so much faster and can skip and do whatever I need to do. </p><p><strong>Julia Evans:</strong>        Yeah, exactly. And the zines are sort of the same thing. Instead of having these 300 page books where you're like \"What, when am I going to find the time to read this 300 page book.\"<br />                    Even if it's great, right? It's just not going to happen. So I'm like \"What do people need to know? What are the most important things?\" Having something that's only 20 pages really forces you to focus on what's actually important and interesting. </p><p><strong>Joel Hooks:</strong>         It's not like the point of a zine is to get a master's degree in systems, it's more like \"Well here's some vocabulary and the barrier to entry, and now you can go forth and learn more.\"</p><p><strong>Julia Evans:</strong>        Yeah, exactly. It's more about, I feel like, showing people that this thing exists, and getting an idea of what it might be for. I feel like it's a little bit more about exposure than about teaching someone everything. </p><p><strong>Joel Hooks:</strong>         Yeah. We got a lot of people that want to follow along and code along to the videos, and it's like, put down your keyboard and stop and just watch the thing and absorb what we're talking about and then go forth and do the thing. </p><p><strong>Julia Evans:</strong>        Yeah.</p><p><strong>Joel Hooks:</strong>         I heard you mention, and I think it's interesting and also holds true when you read the zines, is you basically completely avoid metaphors in any of your writing, which I think is interesting to me in the fact that this industry is so full of bad metaphors. [inaudible 00:10:03]</p><p><strong>Julia Evans:</strong>        Yeah, I think I don't understand metaphors most of the time when people use them. They'll be like \"Oh, this is like this,\" so for example, sometimes people will say, \"Oh a container's like a virtual machine,\" which is not, I mean, it's sort of like a virtual machine. But it's not a virtual machine and I think it can be very confusing. Because when someone says, \"X is like Y\" you're like \"Well in what way? What do you mean?\" And so I try to explain most things directly and be like \"A container is ...\" Maybe I shouldn't explain what a container is. But maybe try to say \"it's a group of processes on your computer.\" Which is a very different statement from \"A container is a virtual machine.\"</p><p><strong>Joel Hooks:</strong>         Yeah. It definitely is. And then you'll explain it, you'll diagram it too. [inaudible 00:10:56] You'll have the diagram and the stuff interacting with each other and the anthropomorphism is one of my favorites when I [inaudible 00:11:04] explaining things to you. </p><p><strong>Julia Evans:</strong>        And often I try to come up with these true statements that are short. For example a pipe is like two file descriptors, right? Which is true and very not obvious. I find it really satisfying to come up with sentences that are sort of very short and accurate and useful.</p><p><strong>Joel Hooks:</strong>         Like the concise truth of the thing?</p><p><strong>Julia Evans:</strong>        Yeah, exactly. It's not like \"A pipe is like a pipe in your house.\" It is actually a lot like that, right? That's not what it is, it is two file descriptors, right?</p><p><strong>Joel Hooks:</strong>         So most of your zines are systems tools and kind of almost Linux command line focused. \"Help I have a manager\" really stood out to me, one, because it's awesome, it's a really good read and helped me as a manager and a person that has been managed in the past, I read that and I was like \"Wow, okay, well here's how I should be having one on one's and I should be having them more often.\" I thought it was really helpful and interesting, and I'm wondering do you plan on branching out and doing more of the people skills zines and exploring those more as you proceed?</p><p><strong>Julia Evans:</strong>        I find the question of what to write about pretty hard ... so the reason I wrote \"Help I have a manager\" is really that in the past, like when I started working with managers, I did not know what I was doing. And I think of all of my zines, and maybe, probably most of my work, as just a letter to my past self, right? Because nobody told me how to work with my manager, and I was so confused for so long. And it caused a lot of problems, right?<br />                    I kind of think of that zine as sort of the same in some way, as the strace zine, because nobody told me what to do. </p><p><strong>Joel Hooks:</strong>         Yeah, nobody put you in school for your one on one's with your manager. That's not something they even discuss. </p><p><strong>Julia Evans:</strong>        Yeah, I feel like they don't tell you what ... well what I want to sort of demonstrate there is what a positive and healthy relationship with your manager could look like, right? It's not about how to deal with a bad manager, but in the last couple of years I've been working with a manager who I work really well together with, and I'm like \"Oh, this is how it can work.\"<br />                    This is what is looks like when it works well, and that's what I wanted to explain.</p><p><strong>Joel Hooks:</strong>         Yeah there's some actually [inaudible 00:13:35]. Yeah there's some really interesting management culture going on over there that I've been paying attention to on the sideline. And it's cool to see it kind of manifest itself in your zine. Because the bad manager was just a sad face, I think, in your ...</p><p><strong>Julia Evans:</strong>        Yeah, it was like, that sucks but that's not what ... [inaudible 00:13:59]</p><p><strong>Joel Hooks:</strong>         So I have your wizard programmer skills, I think it was the recompiler that sent it out ... I'm pretty sure [inaudible 00:14:06] that it was a poster, because I have the poster and we hung it on the wall in our house. </p><p><strong>Julia Evans:</strong>        Amazing.</p><p><strong>Joel Hooks:</strong>         Yeah, just cause it's awesome. And I was wondering, you talk about wizard programming skills, and then in some of your writing I was reading about creating cartoons and creating zines, you talk about your research techniques, and I was wondering what the overlap is between being a wizard programmer and being a maker of cool, helpful comics, and if that was something that kind of overlaps and do those skills collide at all?</p><p><strong>Julia Evans:</strong>        Interesting. This wizard thing is really interesting right, because I don't really know ... I say that a lot ... it's like why do I say that? What is being a wizard about?</p><p><strong>Joel Hooks:</strong>         I think it's the perception of magic, not that you're conjuring magic, and every time I've read you or watched you, you go into it. It's like you instantly go into how to do the work, right? [inaudible 00:15:04] we are going to do actual work now. </p><p><strong>Julia Evans:</strong>        I feel like sometimes when you see other people do things that seem really hard, or really complicated, you're like \"Oh no\" it kind of seems like magic may be happening. And then it's like, well what is the work that you actually have to do to get there, to do things that perhaps seem hard.</p><p><strong>Joel Hooks:</strong>         So what prompted the question was the discussion of research and asking good questions and doing these kind of things. They seem like, as a programmer it's important and if I wanted to explain concepts, whether in comics or other mediums, these same kind of life skills or just tools would [inaudible 00:15:49].</p><p><strong>Julia Evans:</strong>        Right, I think that's right. The thing that makes me good at my job is my ability to identify what's hard about something a lot of the time. Maybe I'll be working on a project that's really hard and it's like \"What's the fundamental reason that this project is hard?\" And how can we make it maybe, less hard? And then that's also true in teaching. I spend a lot of time thinking about what is at the middle of this in any situation. </p><p><strong>Joel Hooks:</strong>         Yeah, because there is stuff that is now easy to you that was once difficult, and then there's the world of things that are still difficult or even seemingly impossible to understand, and how do we move a piece of the top down to the [inaudible 00:16:40].</p><p><strong>Julia Evans:</strong>        And many things that seem difficult are actually easy, and so figuring out which things those are is really useful. </p><p><strong>Joel Hooks:</strong>         Yeah and then I guess understanding why the perception of difficulty exists at all.</p><p><strong>Julia Evans:</strong>        Yeah, right. And then also many things that seems difficult are actually difficult. That's also true. Not all things that seem difficult are actually easy. But in computers, and especially in systems, there's a lot of jargon and so that makes things seem difficult but it's not difficult. </p><p><strong>Joel Hooks:</strong>         Yeah, if you're a new programmer, and you're just getting into it, the sheer wall of vocabulary that you have to climb to start to even begin to understand is a huge portion of the battle.</p><p><strong>Julia Evans:</strong>        Yeah, exactly.</p><p><strong>Joel Hooks:</strong>         As a wizard programmer, meaning somebody that researches, identifies problems, asks good questions, does that sort of thing, that approach to your own development career is kind of where the nuggets come to produce your comics and zines.</p><p><strong>Julia Evans:</strong>        Yeah, exactly. The only reason I have anything to say is because of the work that I do, right?</p><p><strong>Joel Hooks:</strong>         Yeah because you're condensing it into a 12 page thing, but the sheer volume of research and thought and understanding that goes into making something like that is pretty obvious, anyway, to me. </p><p><strong>Julia Evans:</strong>        Yeah, it takes a lot of time. It's interesting. I wrote this comic about grip and it was kind of fun to write. Because I was like what is every graphic command line argument I've ever used. And I was like \"Well I've been using Grip for 15 years at this point, I guess.\" And I looked at it and I was like \"I only use six of these,\" maybe 10, and those can fit in half a page. And I was like \"Oh wow, there's not a lot to know about this.\" </p><p><strong>Joel Hooks:</strong>         Yeah I've stared at Grip, people talk about it a lot and I'm like \"Oh, this is useful,\" and literally I was like \"Oh, this is just too complex I can't [inaudible 00:18:38]\" and then I look at how you're using it and you keep talking about \"Well, I use these two things, and it's super useful, and you don't have to understand the entire manpage to make this useful.\"</p><p><strong>Julia Evans:</strong>        Yeah, exactly. </p><p><strong>Joel Hooks:</strong>         Because I've been using Photoshop since I was 15, so 30 ... a long time, I've been using Photoshop for a long time, almost 30 years. And I still just basically use the same five tools. [inaudible 00:19:03] tons in there and I'm just like I do these five things, and that's all I ever need to use Photoshop for. </p><p><strong>Julia Evans:</strong>        Yeah, and that's the information I want to get across to people. The people who actually know how to use all of this stuff, usually only do like five things. And just like, what are the five things?</p><p><strong>Joel Hooks:</strong>         Yeah, because that's easy to learn. And that's what you're saying. The whole thing is hard. Understanding the whole thing and memorizing the entire tool is hard, but the two useful things you can get out of this, it's like the 99 percentile of what you would use it for. That's the easy part. That's not hard. You can do this.</p><p><strong>Julia Evans:</strong>        Yeah, and the hard thing that you're imagining is something that literally no person has ever done. I mean maybe someone has memorized the grab man page.</p><p><strong>Joel Hooks:</strong>         Oh somebody has.</p><p><strong>Julia Evans:</strong>        There would be no point.</p><p><strong>Joel Hooks:</strong>         No, they are an interesting individual whomever that may be, on some level I'm sure.<br />                    So another thing that's cool and it seems like it is more since you started, you said you've worked with illustrators, but \"Oh Shit Git!\" is actually a collaborating with another developer to produce a zine. Is that something new and something you plan on expanding on and exploring more? </p><p><strong>Julia Evans:</strong>        Yeah, it's definitely new, I'd never done it before. It was really fun. I think I would like to do it again. I have this idea that maybe I want to do something about Postgres. Because I don't know almost anything about Postgres and it seems really useful. Maybe I could get someone to teach me and write a zine about it. But it's pretty far out because I have a lot of ideas. </p><p><strong>Joel Hooks:</strong>         I know the feeling, Julia. It was interesting to me to, you're doing this collaboration, you're releasing them, they're, I would assume, profitable, and provide a wage. But at the same time I also get the feeling you don't plan on going full time with the zine business. You like being a systems engineer and doing what you do. Do you want to keep expanding this or are you happy with the pace of it and seeing how it evolves and not making any sort of big plans for the future in terms of your zine empire.</p><p><strong>Julia Evans:</strong>        Right now the zine ... I have a lot of ideas about the zine empire which makes it hard. Because I'm sort of like \"Well, programming books are sort of bad\" right? They're much too long. And so maybe the world does need a zine empire. But at the same time a lot of what I write about is, like we talked about, from the work, right? So maybe I spend 15 years learning about command line tools and then I write a zine about command line tools. But you can't spend 10 years learning about something every time you write another zine. I worry a lot. It's like \"How many more zines can I write or would it be interesting to write?\" I've written 11, if I write 11 more will I feel bored by it after that? I don't know.</p><p><strong>Joel Hooks:</strong>         That's a really good question. I feel like the subject, the topic spectrum, is relatively infinite. In terms of our human lifespan you can probably zine forever and not run out of topics. You haven't even brushed against JavaScript.</p><p><strong>Julia Evans:</strong>        I really want to do statistics, that's the thing. That's kinda like further out, but anyway.</p><p><strong>Joel Hooks:</strong>         Yeah I mean I would love that. You have a math background, and I have a two year unaccredited associates degree from an arts school, that's how I got my start. And my regret is that I didn't listen to my junior high math teacher and apply myself. So those would be fascinating and then you're machine learning stuff, and there's so much that I would like to see personally in zines, that would be potential topics. </p><p><strong>Julia Evans:</strong>        Yeah. There's a lot to say. I think like with anything that one does that's successful, is the question of just, \"How do you make sure it stays interesting to you?\" I don't know.</p><p><strong>Joel Hooks:</strong>         Yeah and I don't think I've ever worked a job longer than five years. And that's even a long stretch. And at some point it's just like, you're doing the thing and if you turned zines into a full time job, how fast does it fade away to just being work? And just being a job, just the pressures of any gig, I guess.</p><p><strong>Julia Evans:</strong>        It's currently pretty fun to do on the side. </p><p><strong>Joel Hooks:</strong>         Yeah and it's great. I really like Stripe as a company, we're big fans and customers and that seems like a great place to work just from the folk that I know there. Patrick McKenzie and Will Larson was actually one of my first programming friends ever.</p><p><strong>Julia Evans:</strong>        Oh wow! He helped me so much, I can't even explain.</p><p><strong>Joel Hooks:</strong>         He's actually literally the first person I followed on Twitter and we were friends and just did projects when I was just learning how to program. And it's funny just to track both of our career growths and see ... [inaudible 00:24:24] it's awesome. </p><p><strong>Julia Evans:</strong>        Yeah. He taught me how to make organizational change. Which was, anyway, it's a huge deal.</p><p><strong>Joel Hooks:</strong>         And [inaudible 00:24:37] its amazing. His blog posts and his advocacy, and his take on management, and just his thoughtful nature in that space is really a breath of fresh air.<br />                    So you make zines and amazing comics, you are on Twitter. Where can people find you and where can they get information about you?</p><p><strong>Julia Evans:</strong>        I'm on Twitter, I have a blog. My Twitter is @b0rk and my website is ... I don't know ... if you Google \"Julia Evans\" you find it. </p><p><strong>Joel Hooks:</strong>         Yeah Julia Evans zines. And that's b0rk with a zero right?</p><p><strong>Julia Evans:</strong>        Yeah, I have this zines page which is really just a sub page on my website. It's not ... a super fancy, flashy thing.</p><p><strong>Joel Hooks:</strong>         It's more than adequate. Whenever I want to go buy one of your zines it works pretty good for me. </p><p><strong>Julia Evans:</strong>        Yeah, yeah, exactly. I'm a big fan of the MVP.</p><p><strong>Joel Hooks:</strong>         Your dedication to your blog is really fantastic, Julia. I never read a lot of your posts but I went through and I was going through and it's super interesting. And I really appreciate the way you share and write and just your tone. I really like it. And I love so much what you're doing on the internet, and I hope more people get inspired to follow in your footsteps and think about these things at a different level. Just the idea that we can teach and share our knowledge is so important, and thank you so much for being a participant in that and making the internet a better place for us all. </p><p><strong>Julia Evans:</strong>        I've learned so much by doing it. It's not entirely 100% selfless. If I write about stuff on the internet, I'll be like \"Hey, here's what I learned\" and then I often get back so much more information than what I put out.<br />                    People will be like \"Did you know this extremely important thing that you didn't mention?\" And I'll be like \"No, I didn't know that, thank you.\"</p><p><strong>Joel Hooks:</strong>         Well, thank you so much, I really appreciate you taking the time to talk to me. </p><p><strong>Julia Evans:</strong>        Thank you, this was great. </p><p><strong>Joel Hooks:</strong>         Cheers.</p>",
    "slug": "exploring-concepts-and-teaching-using-focused-zines-with-julia-evans",
    "description": "<p>Julia Evans, is a  zine author and software engineer at Stripe. She joins us to talk about teaching specifics as opposed to high-level overviews, using zines to show that things that sound hard aren't hard in practice, the longevity of Julia's zine empire, and the impact that monetizing her zines had on her audience and the way she approaches working on them.</p><p>Julia writes zines, short tutorials in comic form for software developers. She recently starting monetizing them, it had an impact on her audience but not as much as you would think. Monetizing even had the unforeseen side effect of her zines getting taken more seriously, a college professor even made then required reading in his class.</p><p>She tries to keep the zines focused, with the topics breaking down something very particular. High levels talks often have the problem of not imparting anything useful. The specificity respects people's time and also can give greater context than a high-level overview. It's also much easier to be motivated to start a twenty-page zine as opposed to a three-hundred-page book.</p><p>Julia has many ideas for her zine empire. She wants to continue to collaborate with other developers so she can deliver content that isn't entirely in her wheelhouse. She also wants to start getting into some non-programming concepts, statistics in particular at some point. The possibilities with the medium are pretty much endless.</p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/c201ca9e/transcript\">\"Exploring Concepts and Teaching Using Focused Zines with Julia Evans\" Transcript</a></p><h3>Resources:</h3><ul><li><a href=\"https://wizardzines.com/\">Wizard Zines</a></li></ul><h3>Julia Evans:</h3><ul><li><a href=\"https://twitter.com/b0rk\">Twitter</a></li><li><a href=\"https://github.com/jvns\">Github</a></li><li><a href=\"https://jvns.ca/\">Website</a></li></ul><h3>Joel Hooks</h3><ul><li><a href=\"https://twitter.com/jhooks\">Twitter</a></li><li><a href=\"https://joelhooks.com/\">Website</a></li></ul>",
    "duration": 1594,
    "episode_number": 31,
    "contributors": [
      "Joel Hooks"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/5wqa9",
    "path": "/podcasts/exploring-concepts-and-teaching-using-focused-zines-with-julia-evans",
    "published_at": "November 19th, 2018",
    "url": "https://egghead.io/api/v1/podcasts/exploring-concepts-and-teaching-using-focused-zines-with-julia-evans",
    "edit_podcast_url": "https://egghead.io/podcasts/exploring-concepts-and-teaching-using-focused-zines-with-julia-evans/edit"
  },
  {
    "id": "podcasts-00000000000000000076",
    "title": "Opening Programming's Gates to Women's Communities with Diana Rodriguez",
    "summary": "Today Diana Rodriguez talks to us about her experiences with fostering women's programming communities all over the world, as well as her own experiences with growing as a developer.",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/11b03afd-ed00-48ef-84aa-6d145a3dabfd/61bbaf69_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/11b03afd-ed00-48ef-84aa-6d145a3dabfd/1542665817artwork.jpg",
    "simplecast_uid": "11b03afd-ed00-48ef-84aa-6d145a3dabfd",
    "transcript": "<p><strong>Joel Hooks:</strong>         My guest today is Diana. So, Diana would you like to go ahead and introduce yourself?</p><p><strong>Diana Rodriguez:</strong>    Sure. I'm Diana Rodriguez. I am a DevOps, and Full Stack developer. Also the worldwide community organizer for Vue Vixens. I also work at This Dot, and I'm a nerd by heart. </p><p><strong>Joel Hooks:</strong>         Yeah, nerds are awesome. Speaking of that I saw on your profile that your spare time you like video games and TaeKwonDo. So the first question has to be what is your current favorite video game? Because a lot of people will essentially judge you by which game you choose. </p><p><strong>Diana Rodriguez:</strong>    Well, I'm a big fan or retro games like N.E.S and Super N.E.S., but lately I've had an addiction, I'm confessing myself, coming out-</p><p><strong>Joel Hooks:</strong>         Uh-oh, here it is.</p><p><strong>Diana Rodriguez:</strong>    Yeah. I'm a World of Warcraft fan, and I've been trying to get off, but I can't. It's like I'll uninstall it, and come back to it again. </p><p><strong>Joel Hooks:</strong>         Yeah?</p><p><strong>Diana Rodriguez:</strong>    Yeah. I get withdrawals, and I even know the choreographies and everything. They have some little dances, some of the characters.</p><p><strong>Joel Hooks:</strong>         Nice. I've heard the Battle of Azeroth is super good. </p><p><strong>Diana Rodriguez:</strong>    Yes! </p><p><strong>Joel Hooks:</strong>         I was just gonna say I have a Rocket League addiction right now. That's my thing I waste way too much time on, is hitting a little ball around with rocket powered cars. So to each their own. That's my thing.</p><p><strong>Diana Rodriguez:</strong>    It's funny how something so silly can take so much time of you, and even if it's your profession it's like \"Well, I'm trying to get away from the computer and kind of have a bit of a life\", but then there's the Blizzard thing blinking and calling my name, and going like \"Diana! We need you to raid!\" </p><p><strong>Joel Hooks:</strong>         And it's fun, so ...</p><p><strong>Diana Rodriguez:</strong>    Definitely. </p><p><strong>Joel Hooks:</strong>         So dev questions, what got you into development initially? Was there some sort of thing you saw, or a friend, or what started you on this path? </p><p><strong>Diana Rodriguez:</strong>    Well, you know what, that's an interesting question. I was a bit of a nuisance, being in the Spectrum. Spectrum high-five to everybody [inaudible 00:02:17] My mom just wanted to keep me quiet, and she said \"Hey, this a computer, and that over there is a Commodore 64. We can make games, and you could try and code new games or just try to play with it and make something wonderful.\" So my first project was the ... You know the Fly? The Assembler Fly? </p><p><strong>Joel Hooks:</strong>         I'm not familiar with it, but ...</p><p><strong>Diana Rodriguez:</strong>    Well, yeah, you know, some low level language from a long time ago. I must've been seven or eight years old when I was first introduced to the idea of-</p><p><strong>Joel Hooks:</strong>         Oh, that's awesome.</p><p><strong>Diana Rodriguez:</strong>    ... coding, and it was so relaxing for me. So I followed through the evolution of computers, and then when internet came I was 12 years old, so I started fiddling around with HTML. Then I wanted something heavier, and I went in the Java Woods, got trapped in there and got abducted. Never made it out. I'm still part of the Ugly Java Orcs, that dark society. </p><p><strong>Joel Hooks:</strong>         Once they get 'ya, they don't let you go, that's for sure. </p><p><strong>Diana Rodriguez:</strong>    Yeah, and you know what? Back then it was so secretive, so exclusive that it was actually cool to be part of something where people were passing information to me because it was so hard to get. The only way to actually learn was through expensive books, or an old friend who were willing to give you some info. So I was a privileged one.</p><p><strong>Joel Hooks:</strong>         My thought on that ... Sorry to interrupt. </p><p><strong>Diana Rodriguez:</strong>    Go ahead.</p><p><strong>Joel Hooks:</strong>         You mentioned writing books. Before Twitter even came along I think our thought leaders, the quote/unquote thought leader, they were the people who wrote books, and if you hadn't written that book you had no say in anything. I almost worshiped the people who wrote books. I'm like \"Wow, they must know everything about everything ever made.\" It's funny how that's transitioned to just people on Twitter who haven't put that effort into writing a big book or something. </p><p><strong>Diana Rodriguez:</strong>    I know! </p><p><strong>Joel Hooks:</strong>         Anyway, sorry, that's a tangent. Go ahead.</p><p><strong>Diana Rodriguez:</strong>    No, no, no. You're totally right! Well yeah, I did manage to get my parents to buy me books. My dad would say \"Diana, you never ask for anything. You never ask for money, you never ask for treats, but when you do ask, why do you make us buy you these expensive books?\"</p><p><strong>Joel Hooks:</strong>         They're like 80 bucks or something, 20 years ago, or whenever that was, right?</p><p><strong>Diana Rodriguez:</strong>    Yeah. I wanted expensive things. I remember my first domain name was 70 dollars. It was like superdiana82.com, and my mother was like \"You did what?\" But yeah, I started to get more acquainted with the web, and from the very beginning, even though I liked front end I was more on the back end side. I identified with Java and Python, and infrastructures. So say when I was 17 I was already taking informal gigs, building racks, and I even did a small server at home where we stored everything. We had backups for everything, pictures, websites, archives, whatever you could think of. My mom was very surprised. I took a different turn in terms of my career.</p><p><strong>Joel Hooks:</strong>         Did she expect you to do something else, or ... were you going to school for something else?</p><p><strong>Diana Rodriguez:</strong>    I did. I'm just going to disclose one thing I went for because the second one, it's like I don't want to know anything about it, because it's one of those professions that when you tell someone ... I don't know, it's like saying \"Well, are you a doctor?\" Then you say \"Yes\", and they're like \"Okay, you know what? I have this weird thing, this weird spot in my arm.\" So that's why I don't talk about it, but I did study something else apart from my other profession. I did study music. I started since the age of four, and I was part of the National System of Youth Orchestras in Venezuela. By the way, I wanted it mentioned that actually I am from Venezuela and my first language is actually Spanish. I come from a very awesome and mixed background, but I guess another high five to the Spectrum, I speak 12 languages, and-</p><p><strong>Joel Hooks:</strong>         Wow!</p><p><strong>Diana Rodriguez:</strong>    ... it's easy for me 'cause I think if I have this talent for languages I think that's how it worked with programming as well, it's like learning a new language every time. </p><p><strong>Joel Hooks:</strong>         Yeah. Wow! I'm blown away by that. That's okay. What instrument did you play in the ... You said the orchestra? </p><p><strong>Diana Rodriguez:</strong>    Yeah, I played double bass. I still love it. I'm planning on going to New Orleans for my birthday and just find a place to start jamming. If they lent me a double bass that would be amazing.</p><p><strong>Joel Hooks:</strong>         Did you play Jazz at all? </p><p><strong>Diana Rodriguez:</strong>    Yes. My favorite. I sing too. </p><p><strong>Joel Hooks:</strong>         Nice. I sing and do guitar. So we'll have to start a band sometime. </p><p><strong>Diana Rodriguez:</strong>    Definitely!</p><p><strong>Joel Hooks:</strong>         We just need a drummer.</p><p><strong>Diana Rodriguez:</strong>    [inaudible 00:07:56] orchestra. </p><p><strong>Joel Hooks:</strong>         Oh, that'd be amazing. </p><p><strong>Diana Rodriguez:</strong>    So yeah, well, answering your question, that's how it started. Then at the beginning of the year 2000 I was already out there taking gigs for programming for some websites, and for infrastructure. Then six years ago I decided that I was gonna make this a full-time occupation. I worked since 2001, but decided that I was gonna make it full-time six years ago, and it's been amazing. It's been great. </p><p><strong>Joel Hooks:</strong>         Just to clarify, did you write code on a Commodore 64?</p><p><strong>Diana Rodriguez:</strong>    I did. </p><p><strong>Joel Hooks:</strong>         You did. Okay. I remember typing the star 187, or whatever it was to login to games. I never actually coded anything. That never crossed my mind.</p><p><strong>Diana Rodriguez:</strong>    It was so difficult! It took us two hours to make a game, my mom and I. Then I shut it down 'cause we had not floppies, well, no ... the bigger ones, five and one-fourth? </p><p><strong>Joel Hooks:</strong>         Oh, yeah. </p><p><strong>Diana Rodriguez:</strong>    The big one? We didn't have any backup.</p><p><strong>Joel Hooks:</strong>         [inaudible 00:09:05]</p><p><strong>Diana Rodriguez:</strong>    So I decided to shut it down and my mom was like \"No! What have you done? We have to start from scratch again!\" It was never the same.</p><p><strong>Joel Hooks:</strong>         Right. The concept of saving was still new.</p><p><strong>Diana Rodriguez:</strong>    Yeah.</p><p><strong>Joel Hooks:</strong>         That's a hard lesson to learn. </p><p><strong>Diana Rodriguez:</strong>    Yeah.</p><p><strong>Joel Hooks:</strong>         What sort of stuff are you working on now after this fun little journey?</p><p><strong>Diana Rodriguez:</strong>    Well, I fell in love with France, last year I came across Vue, and it was so easy. I was a bit jaded of doing the same old with Java and Python, and don't get me wrong, it's wonderful, but sometimes you just get a bit bored and you wanna try something else, something new. I came across the Vue community, and they were so nice to me! So I started attending the meetups, and taking projects as I learned. I was very [crosstalk 00:10:01], and then one day I came to this meetup where we nailed an awesome sponsor. We had free beer for everyone. I was wasted that night, and I said \"Well, what is this? There's only three women with me? We outta do something about it.\" One of our organizers, by the way this was in Argentina, said \"Well, why don't you ping this woman, Jen Looper just started something called Vue Vixens. You should try to get something working down here.\" And that's how it all started. So, I've been with Vue Vixens for eight months now? </p><p><strong>Joel Hooks:</strong>         Awesome. </p><p><strong>Diana Rodriguez:</strong>    Yeah, it's been amazing. We're doing a lot of good things, trying to get women and those who identify as such empowered, and the idea is not to isolate ourselves, or segregate ourselves from the developer community, but on the contrary insert all these people in a global ecosystem so we don't have to make a defense with anyone else. </p><p><strong>Joel Hooks:</strong>         What's the best way for someone if they're listening to this to get in contact with Vue Vixens and get involved with that?</p><p><strong>Diana Rodriguez:</strong>    Oh, easy. Twitter. At Vue Vixens. We have many chapters, so if you wanna get in touch with a specific chapter, worldwide, check our website. It's vuevixens.org. Very easy.</p><p><strong>Joel Hooks:</strong>         Sweet. I know you go to conferences. Are you just doing a conference every month now? Is that part of what you're doing with Vue Vixens, to get it out there? </p><p><strong>Diana Rodriguez:</strong>    We're doing a lot of community work, locally. We just had a lot of events from our Mexican chapter. We also had events in Argentina. We're having our chapter leaders take over the community events, and some conferences locally. As for us, the big team, Jen Looper, Natalia Tepluhina, and myself, we've been attending a few conferences. I just did five events back-to-back, and I'm exhausted. I don't want see anyone anymore! No. No, I'm joking. </p><p><strong>Joel Hooks:</strong>         I find any of that stuff exhausting. Any conference, I need a week off after a two-day conference. </p><p><strong>Diana Rodriguez:</strong>    We had good response, Joel you know what? People approach and say they want to be part of it, and that's why we have a new chapter leader in North Carolina, in Raleigh. We will have one in even places like Kentucky. I'm joking! </p><p><strong>Joel Hooks:</strong>         Well, I used to be surprised where developers lived, but they just keep on ... shops in Wisconsin and whatnot. Like \"Wow, that's ... There's a budding developer scene in Wisconsin. Okay.\" It's great! </p><p><strong>Diana Rodriguez:</strong>    We're approached by someone in Minnesota, they said \"Why don't you come here?\" I'm like \"Wow. That's cold.\" Bless them.</p><p><strong>Joel Hooks:</strong>         Yeah, it never crossed my mind, but yeah, developers are everywhere. Everyone's a developer, right? </p><p><strong>Diana Rodriguez:</strong>    That's true. That's what we're trying to portray with Vue.js, and I know I sound like a missionary just going like \"Do you have a minute to talk about our lord and savior Vue.js?\" It's so easy to learn. It's just easy, and I think it's a good way to enter the technology world with instant reward.</p><p><strong>Joel Hooks:</strong>         Yeah, I always find when I'm helping someone learn something the sooner they can see some visual, or a noise, or just something, the sooner they get from typing something to something showing up the easier you kind of hook 'em, and hook them in a good way as in hook their learning sense. Like their excitement to build something. </p><p><strong>Diana Rodriguez:</strong>    Yeah, definitely. That's the spirit with what we're doing. Even our workshops may seem a bit too simple, but the idea is to send these women home with an application they made on their own. Even though they do a little bit of copy and paste, we explain very well and it's self-paced. So you have no rush and no pressure, and we're there to answer any questions, but it is important that when you're learning something new you see you have a product at the end of the workshop, even at a breakfast skulk. Skulk is a name, it's like a pack of wolves. A skulk of vixens. That's how we [inaudible 00:14:42] skulks. </p><p><strong>Joel Hooks:</strong>         Oh, wow. </p><p><strong>Diana Rodriguez:</strong>    We had a woman, she was a bit older, in Raleigh, in All Things Open, say to one of our mentors \"Oh, so this is what programming is like. So, this is ... Wow! So now this is my application. I can post this on gethug, and this is mine! I did this!\" It was exciting to read this. To read? To hear this. I read lips don't you know? </p><p><strong>Joel Hooks:</strong>         Well no, that's a really interesting way to think about that. That they don't realize that something can become theirs. That they seem so disconnected from that application, or that product, because they have no experience with it, but once they make that one little thing, even if it's built heavily upon what you're showing them, like you said, they still feel that ownership. That's a cool feeling, like \"I own this. This is something I made. I'm maker.\" That's really cool.</p><p><strong>Diana Rodriguez:</strong>    Yeah. Like I always say, \"Hey well, I'm not an oracle. I'm very far from being one.\" I still get nervous and make lots of mistakes. I break things, but you know what? Things have changed so much, nowadays everyone is capable of doing it. I've amazing people, amazing ladies, shout out to women who code at Atlanta. Someone like Alicia Karr, after 50 years old she got into boot camp and she's coding like a boss. </p><p><strong>Joel Hooks:</strong>         That's awesome, yeah.</p><p><strong>Diana Rodriguez:</strong>    The idea is to take that message to everyone and say \"Hey, if you really want to do this, there are all these tools and this amazing community to support you and help you, and there's a lot of information out there, so there's no excuse. If you wanna do it, you can do it.\" It's like [\"foreign language 00:16:34]. \"Yes we can.\"</p><p><strong>Joel Hooks:</strong>         Okay, yeah. Awesome! Are you in Argentina right now?</p><p><strong>Diana Rodriguez:</strong>    I'm actually in Miami at the moment. </p><p><strong>Joel Hooks:</strong>         Okay. Are you Raleigh, or do you live in Argentina? I got quite confused by the map. </p><p><strong>Diana Rodriguez:</strong>    Oh no, it's all good. </p><p><strong>Joel Hooks:</strong>         Of where you ended up. </p><p><strong>Diana Rodriguez:</strong>    I was actually in Uruguay before coming here, so I've been bouncing between Argentina-</p><p><strong>Joel Hooks:</strong>         That's just more confusing. </p><p><strong>Diana Rodriguez:</strong>    Yeah. ... Argentina, Uruguay, and Brazil, but three lives I lived in Argentina, and the scene there is amazing. The community is huge! It's huge, amazing. It's growing like crazy. </p><p><strong>Joel Hooks:</strong>         Yeah, I think sometimes I'm guilty of thinking development and coding is an American thing. Us Americans are stupid, and we forget about the rest of the world sometimes, that there's amazing things being built and made throughout the world. Argentina, I've never been. I've done my Europe trips, but I've never made it south.</p><p><strong>Diana Rodriguez:</strong>    You should come. </p><p><strong>Joel Hooks:</strong>         Yeah, I think I need to. I think I need to. Is there someplace you've been where you've been really surprised by the dev scenes there?</p><p><strong>Diana Rodriguez:</strong>    Well, that's a good question. I don't know, I can't stop being surprised every place I go. We have a community in Mauritius at the moment. That's far in Africa, and that's a place where we want to go. A continent where Vue Vixens wants to have a presence, and we have some good plans for that. As for South America, every country we visit, or every country I've visited, people are so diverse, and technology is growing and places like Argentina, Brazil, China-Peru, Uruguay, even Columbia, have solid communities where they contribute to each other. They have amazing events, and you can even ask Jen Looper, when I brought her to Argentina and I thought she's gonna be in a meetup where she would be speaking I had to turn the meetup into a one-day mini conference, and I had to split it in two, because we didn't have enough room to host everybody who wanted to attend. I got a lot of angry emails of people who couldn't make it, who were on the waiting list, and couldn't get it.</p><p><strong>Joel Hooks:</strong>         Oh no!</p><p><strong>Diana Rodriguez:</strong>    But seriously, we crammed so many people. It was all the community, development community in Argentina. People ranging from 13 to 72 years old. A 15 year old boy who was a developer who ran a PHP community even gave us some swag. We had two licenses for something to raffle, and Jen was, she was overwhelmed, because these girls at the end, even the people who came, it was difficult to get them out. The girls in the afternoon, they wouldn't stop. They wouldn't leave. Then it was funny, 'cause we looked at each other and we were like crying in awe. So excited and so happy to have had-</p><p><strong>Joel Hooks:</strong>         That's amazing.</p><p><strong>Diana Rodriguez:</strong>    ... so much success. Yeah. So if anyone out there is listening and want to expand, they should think of South America, and right now Argentina is growing, it's huge.</p><p><strong>Joel Hooks:</strong>         Awesome. Well cool. Thank you so much for your time today. I think that was eye-opening for me. Taking that worldwide view, thinking more about where we can focus our attention, and not being so wrapped up in what's going on locally.</p><p><strong>Diana Rodriguez:</strong>    Well you have some followers from those corners of the world, and a lot of people who think very highly of you. So think about it. You have a positive impact in so many people. I know that, and I know they'll be willing to receive you in Argentina, arms wide open, for sure. </p><p><strong>Joel Hooks:</strong>         That sounds great. Thank you. Any closing things you want to say before we sign off here? </p><p><strong>Diana Rodriguez:</strong>    Oh, yes. People, Vue Vixens is real. We're not a pink coral, we need all the help we can get. What we want to do is empower these women, those who identify as such, an underrepresented minority, and I'm not saying this in an annoying way, I'm not a social justice worker, or anything, I'm a developer like you. I think the best way to help us be more inclusive, and to stop with any difference between men and women in tech, even pay gaps, or whatever crack you wanna talk about, is help us, be mentors. Understand that when we say women only, it's not because we're excluding you, but because we want to include those women in places where we can all work shoulder-to-shoulder. So our idea is not to exclude anyone, but to work with the weakest link in this chain and strengthen it, and making it part of our big developer acquiescence.<br />                    So any help you can give to us will be appreciated. We also want to keep this a mansplaining-free environment, and not toxic at all. So if you know about us, reach out. If you don't, check our website. We'll be happy to talk with you, and even more happy if you help us educate the other fellas out there who probably don't really understand what this is all about. At the end of the day, which one. We just want everyone to be equally rewarded, to have good working conditions, and to help people learn. That's all we do. </p><p><strong>Joel Hooks:</strong>         Thank you. Thank you so much, Diana.</p><p><strong>Diana Rodriguez:</strong>    Thank you. </p><p><strong>Joel Hooks:</strong>         Have a good one. </p><p><strong>Diana Rodriguez:</strong>    You too. </p>",
    "slug": "opening-programming-s-gates-to-women-s-communities-with-diana-rodriguez",
    "description": "<p>Diana Rodriguez, Worldwide Community Organizer for the Vue Vixens Initiative, joins us today to talk about her early experiences with development as a child, her transition into a becoming a full-time professional and her work with getting women from communities all over the world involved with programming!</p><p>In the days of yore, gathering programming knowledge wasn't easy, the community was exclusive, and the books were expensive. The only ways to learn were through college, expensive books, or a cool friend willing to give you some information. Despite these difficulties Diana managed to be involved with the Java community, she also had the support of her parents who bought her books. Eventually, Diana's skills grew, and she would put herself out there taking programming gigs. However, it wasn't until six years ago that she decided to go full time.</p><p>Eventually, she became jaded with backend work and was craving something new, that's when she discovered Vue and its excellent and welcoming community. This community was much unlike the Java community back in the day, and Diana is working to be a part of that push for inclusivity full-force through Vue Vixens. Diana works to open and grow chapters all over the world.</p><p>Diana talks about her recent work in South America and how the dev community was exploding, it was almost overwhelming! There were women from ages 13-72 at the meetup that the Vue Vixens organized in Argentina, the event even had to be split up over two days because there were so many people. Being careful of tunnel vision and thinking about these communities of people from foreign countries, women, and other underrepresented people in the tech and welcoming them can have a substantial positive impact.</p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/61bbaf69/transcript\">\"Opening Programming's Gates to Women's Communities with Diana Rodriguez\" Transcript</a></p><h3>Resources:</h3><ul><li><a href=\"https://vuevixens.org/\">Vue Vixens</a></li></ul><h3>Diana Rodriguez:</h3><ul><li><a href=\"https://twitter.com/cotufa82\">Twitter</a></li><li><a href=\"https://beingadev.rocks\">Website</a></li></ul><h3>Joel Hooks</h3><ul><li><a href=\"https://twitter.com/jhooks\">Twitter</a></li><li><a href=\"https://joelhooks.com/\">Website</a></li></ul>",
    "duration": 1361,
    "episode_number": 30,
    "contributors": [
      "John Lindquist"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/279mw",
    "path": "/podcasts/opening-programming-s-gates-to-women-s-communities-with-diana-rodriguez",
    "published_at": "November 30th, 2018",
    "url": "https://egghead.io/api/v1/podcasts/opening-programming-s-gates-to-women-s-communities-with-diana-rodriguez",
    "edit_podcast_url": "https://egghead.io/podcasts/opening-programming-s-gates-to-women-s-communities-with-diana-rodriguez/edit"
  },
  {
    "id": "podcasts-00000000000000000074",
    "title": "Math and Functional Programming Aren't Exclusive to Wizards with Brian Lonsdorf",
    "summary": "Join Brian Lonsdorf in a discussion on the purity of math and how it could be used to advance the greater software community, dispelling the myth that you need to be a wizard to use math and functional programming to do anything, how we can make dry topics more approachable and fun, the daunting wall of jargon, and finally some practical advice on including functional paradigms in your day to day work.  ",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/ce5d6c4f-3f8c-47d7-b6eb-8f952038e5c9/6d66e9e6_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/ce5d6c4f-3f8c-47d7-b6eb-8f952038e5c9/1541152460artwork.jpg",
    "simplecast_uid": "ce5d6c4f-3f8c-47d7-b6eb-8f952038e5c9",
    "transcript": "<p><strong>Joel:</strong>               So, are you sick of talking about functional programming yet?</p><p><strong>Brian:</strong>              You know honestly, it has been kind of something that I wanted to avoid being that guy. I'm doing other things and trying to get into mathematics and trying to get into machine learning and AI and all that so hopefully I'll be able to kind of step out of that role, but so far that's what's define me.</p><p><strong>Joel:</strong>               Yeah, I mean I was gonna ask you because we're talking about functional programming if you're a mathematician, if that's your background. Math.</p><p><strong>Brian:</strong>              Yeah, no certainly not, certainly not. I always kind of put...it's funny because you see all of these Mathematicians and they come over and they're the best functional programmers or just the best programmers and they're like, \"Oh yeah, I can solve that in one line if you know these theories,\" but yeah, no not at all. I just end up watching a lot of YouTube's about topology and whatnot. Trying to catch up and it's something I enjoy that I found out after I started functional programming that I was like, \"Oh this is cool. I'm gonna try to get into this.\" And so far I'm still really bad, but it's a lot of fun.</p><p><strong>Joel:</strong>               Yeah I have this theory that like all these frameworks and languages are really kinda just trying to abstract math away from the masses right like so but it's still even difficult and people will like approach math like it's this impossible thing. You have to be basically a wizard to even approach it which is interesting to me and it seems like something that you actively try to fight against. With an attitude right. Like you have to be some sort of magician to even be able to do anything in this space.</p><p><strong>Brian:</strong>              Yeah no I would think it would be great if...I mean I guess my perspective is if you took every...like if we had one...we'd try to take every language in every community and we tried to progress the industry forward and said, \"Okay, now Pythonistas and Jsers and Rubyists and whatever Java people, let's all sit down and decide what's the best way to solve these problems? It would be like that scene in Lord of the Rings or the Hobbit when everybody...a big battle happens and people are just tearing each other apart and their like, \"No, this is the way to do it. No, this is the way to do it!\" and I feel like math would be like the one thing we could probably agree on and just use to further the industry. So that's been my...I was like you know what if I can learn this I'm sure anybody else can and if we can all talk about it together, instead of making this impossible barrier maybe we can shift the industry onto a track we all agree upon.</p><p><strong>Joel:</strong>               Yeah it seems like a lot, I mean the purity of math right when you get down to, is this truth. Like you can get there with math, you are not going to get the truth with react for instance. With math we are able to do that, but then is it like a systemic problem? Like starting way back when kids start learning in school? I don't know...I'm curious about that sort of thing. Obviously I haven't found any solutions but...</p><p><strong>Brian:</strong>              Right. I don't know. I know that it's powerful enough to describe everything. And we might not be right. Math might not be the ultimate way to describe facts and hold onto them. But it's probably the best thing we have so we should just go with it. (laughter)</p><p><strong>Brian:</strong>              I was just helping my daughter Vera with her homework and she was...she's doing negative division and like oh god this is terrible! This is just so not fun at all! And you get into set theory which is a lot of fun, so there's a lot of like...you kinda just ruin math for everyone from the start.</p><p><strong>Joel:</strong>               So we recently switched in our house to the Life of Fred books. Have you seen those?</p><p><strong>Brian:</strong>              No, I haven't. What's that?</p><p><strong>Joel:</strong>               So it's a whole series and it starts from Pre-K all the way through basically undergraduate degree in college mathematics.</p><p><strong>Brian:</strong>              Wow</p><p><strong>Joel:</strong>               But it does this story driven approach and there's no fact practice. There's no...everything is like a story and it gets into it and it starts getting into set theory and different things like that in a very young age. And it's probably my favorite approach so far. Unfortunately, we just found it and we've been homeschooling for 20 years. But you know, better late than never. (laughter)</p><p><strong>Brian:</strong>              Wow the older kids would be like \"Hell, you know we missed out on Life of Fred for me.\"</p><p><strong>Joel:</strong>               I bought all of them and put them on a shelf and offered them to all of them so they still have the opportunity it's just their responsibility at this point.</p><p><strong>Brian:</strong>              (laughter) Right on that's awesome.</p><p><strong>Joel:</strong>               So talk about learning and teaching more importantly, so it's been 3.5 years almost since Professor Frisby's Most Adequate Guide to Functional Programming was first posted on GitHub. I looked that up.</p><p><strong>Brian:</strong>              (laughter)</p><p><strong>Joel:</strong>               And is it finished?</p><p><strong>Brian:</strong>              You know, I just added a couple of chapters last winter about a year ago because I just felt like it didn't provide the entire toolkit. It got you really close, but then you hit these problems like nested types that aren't necessarily flattenable or joinable. So I added a couple, but I think I'm done. I'm over it. (laughter)</p><p><strong>Joel:</strong>               You knew that at some point right?</p><p><strong>Brian:</strong>              Yeah, I don't know if we merged it. I never finished the exercises so I think they are still in a PR...</p><p><strong>Joel:</strong>               I think it's friendliest presentations in terms of giving somebody a link and saying \"Oh, you want to learn more about functional programming.\" I think it's really amazing and approachable and it has kind of a almost light feel when you get started to some very heavy material as you wrap it up. I assume that's on purpose?</p><p><strong>Brian:</strong>              (laughter) Yeah, thanks for saying so. It was kind of a weird, the way I started it was I had been struggling myself for quite a while and I think this happens to a lot of people who learn functional programming, is they're like \"Wow, that was hard, if only I could help others.\" And you get another monad tutorial right?</p><p><strong>Brian:</strong>              I think the book turned out to be something that I had written a couple of blog posts and had a few conversations with people and I was like boy, if you know...this is really great stuff and I want to share it out and I want to do it in a way that the things that resonated with me as I tried to figure out the surface area of what was going on. I wanted to make it a clear path and really hit those points that open my eyes as I went along.</p><p><strong>Joel:</strong>               I mean you got feedback over the years I assume. And what sort of impact do you think or have you people expressed to you that's had on them in terms of their learning functional programming?</p><p><strong>Brian:</strong>              I mean most of the feedback I got was I consistently wrote \"it\" apostrophe \"s\" when it should have been \"its.\" (laughter) Seriously, there are so many people that contributed to that and I really hear a lot of great stories from people who said they were able to learn because of that book and that really meant a lot. There's a lot of translations which was pretty cool. I feel like it's really done a good job of guiding someone into the paradigm without having to teach them Haskell or something like that.</p><p><strong>Joel:</strong>               And then from there every time, so this is one of my favorite things to tell people because I'll have people be like \"Oh well, that might not be egghead style\" and I always point them to Professor Frisby Introduces Composable Functional JavaScript where you take the Professor Frisby character and you stop motion animation hedgehogs to explain difficult programming concepts which to me is amazing and a lot of people like it as well.</p><p><strong>Brian:</strong>              I still get the surly \"That voice is too high!\" And I'm angry about it. But that was a lot of fun to make and actually kinda fell out of the process of...well first of all, there's a lot of definitions of functional programming. A lot of stuff you have to explain and it's pretty dry and it takes a long time. Something with that many definitions instead of just hit the ground running and here's some code and let's actually make stuff.</p><p><strong>Brian:</strong>              It always blew my mind with something like ballet when someone would have try to learn all the moves for years before they can even dance. With guitar, it was like, here's a power cord have fun. And you can actually enjoy it while you learn whereas something like ballet or functional programming, not that you can compare the two, but we have to cover a lot of ground before you can start to move forward. In a pure sense at least. And there's a lot of dry stuff so I thought that would spice it up and I taught the course in person so having students talk to me in the class that kinda capture their questions and were able to recreate that setting. [crosstalk 00:09:39]</p><p><strong>Brian:</strong>              I would take off my giant plush suit...</p><p><strong>Joel:</strong>               [crosstalk 00:09:46] Yeah yeah, there's a full party for a functional...like that would be amazing. I would totally buy a ticket to that Brian. I would support that.</p><p><strong>Brian:</strong>              Excellent (laughter)</p><p><strong>Brian:</strong>              You get a lot of pushback from people...they are like \"Oh...I'm mad at you! I've wanted to do it this way and that way is not the way I want to do it and now I'm mad.\" And you get those questions and a lot of skepticism so having the fake character students ask those questions to try to address some of those is kind of the motivation there so you can kinda clear the air on some things that [crosstalk 00:10:19]</p><p><strong>Joel:</strong>               Like a rap battle right, where you just kinda filler out your own disses first...</p><p><strong>Brian:</strong>              (laughter) There you go I love it.</p><p><strong>Joel:</strong>               I was actually amazed cuz most...I saw all the feedback from that...course when it first came out it was like this weird polarizing...most of the feedback's really positive, but then some people just get super mad that you would do that thing so outrageous as to use puppets and [inaudible 00:10:41] serious topics.</p><p><strong>Brian:</strong>              Right right. And you know I was a little...I work a lot with accessibility and I was just totally...there's just like this tension between creativity and art and actually being accessible. And I think I dropped the ball on the accessibility side for that so if there's something I can do to help the people who have a hard time english as a second language whatever. Or other things that make it less accessible I'd like to address that.</p><p><strong>Joel:</strong>               That was on us too though. Egghead didn't have transcripts, well we had transcripts, we did not have that was...I got charged a little actually for those transcripts by the way. There's a flag if anymore cartoon hedgehog voices come through [crosstalk 00:11:26] on our transcript.</p><p><strong>Joel:</strong>               They were angry with me about this of course, but so we had transcripts we didn't have subtitles which we've since...I'm guilty of ignoring accessibility. We are building the business and I use that as an excuse and I feel like actually now I feel like it's a really bad excuse and I'm glad accessibility is really getting more playtime. But now we have subtitles so people can read along, which I think helps out quite a bit.</p><p><strong>Brian:</strong>              That's great. I was just watching Mighty Boosh the other day and I was like I need subtitles for some of this. (laughter)</p><p><strong>Joel:</strong>               I watch everything in 2x speed these days and [inaudible 00:12:00] that's amazing, because I can't really watch 2x without subtitles but you turn subtitles on and you can really...</p><p><strong>Brian:</strong>              Nice...that's pretty great. I should learn that trick. I've been watching 1.5 for that reason.</p><p><strong>Joel:</strong>               I started there and I bumped it up recently.</p><p><strong>Brian:</strong>              Nice.</p><p><strong>Joel:</strong>               Just to get back to...I'm curious in general and I've noticed that programming itself has a jargon barrier...put terms around it where like you almost have to have a glossary or use flashcards or something. To me, it gets back to even like math facts practice right, to learn math we need memorize all the timetables. And I'm wondering is that true? Do we have to? And what other ways can people approach this? Cuz functional programming is really hard and I think it's a good paradigm, but it's really hard to get people to adopt it so I'm curious to how to get past that and make it more interesting.</p><p><strong>Brian:</strong>              THere's always 2 sides to this and it's a battle that I've seen come up again and again and it's weird because there is a jargon problem. Math has a jargon problem for sure. And on the other hand, english is just...it just fails us like everyday right? And you think that you go into a code base and if it's not use a term like monad it's like \"Oh I have a fetcher and my fetcher it gets flows and the flows store process connectors and...\" you know, like, what the hell are you talking about. (laughter)</p><p><strong>Joel:</strong>               [crosstalk 00:13:30]</p><p><strong>Brian:</strong>              Yeah like this is so easy why don't you understand it?? And it just comes down to I'm familiar with this domain, I made all these things up. We all collectively decided on these terms and you get down to what...if you have a name for something and everybody knows it and it describes that thing, then there's no problem. But, we haven't really agreed that we can do that. I think the bizarre names actually help define something very distinct. Whereas people say \"Oh it shouldn't be functors, it should be mappable,\" oh that's great, but you miss tons of defining features that something that may be mappable would miss. And something like a functor has very precise definition. Well, I say that and you go to reason and they are all like \"Here's a functor, it's not what you think it is.\" (laughter)</p><p><strong>Joel:</strong>               Was it Smoosh?</p><p><strong>Brian:</strong>              Yeah, you know one of those.</p><p><strong>Joel:</strong>               And it's interesting to me too because this isn't a functional programming problem if you look at the objective oriented side, we've had these design patterns that are well defined. And then every 3 or 4 years somebody wants to rename one of these design patterns and present the same thing. As a business owner, being in the business of helping people solve the confusion it's good for business, but at the same time it's frustrating as a developer. You see it all over I think.</p><p><strong>Brian:</strong>              Right. It's kinda force us on a great job of naming things and we all agree with that right?</p><p><strong>Brian:</strong>              I don't think that anybody is going to solve naming. My favorite thing is that Boolean is named after some guy, some mathematician and everyone's like \"What do you mean, it's just a Boolean.\" (laughter)</p><p><strong>Brian:</strong>              So...whatever.</p><p><strong>Joel:</strong>               It's really what people are trying to do is try to find a better way to describe, a better way that makes more sense in their head. I'm not like subvert the Gang of Four system, you know, stick it to the Gang of Four man or whatever. If people are really trying to understand and explain it with terminology that they think is better.</p><p><strong>Brian:</strong>              Yeah, and that terminology is all subjective and you have stuff like bounded context cuz like the terminology changes with each context.</p><p><strong>Joel:</strong>               So when you personally, whether is math or any other complex topic or new hobby, what's your approach to learning in general? How do you...when you tackle something that's difficult, how do you approach it?</p><p><strong>Brian:</strong>              Sure...well I turn on egghead and I get right into it. No, so I'm trying to learn machine learning right now. I'm a machine learning learner. I'm realizing what my process is by going through this again and being a fresh learner and I think the idea is I go and buy a book and I'm like I'm going to read this book, and I'll know what I'm doing. And then I read a couple of chapters and inevitably stop. I don't know what happens, but every time I get...something happens where I stop reading the book.</p><p><strong>Joel:</strong>               It's the chapter four wall.</p><p><strong>Brian:</strong>              Yeah, I don't know if I need an alarm every day or what. But I'll stop reading the book, but inevitably what I end up doing is kinda covering as much surface area as I can across blog posts and just try to absorb the material. Not by really learning it and getting deep into it, but kinda scanning over the surface until I see things again and again. Those things are important, you know, they keep coming up. And I start to feel more comfortable. Maybe copy some tutorials and get them to run and change it a little bit for your stuff and see if you can get it to work. Eventually, before you know it, you can do it.</p><p><strong>Joel:</strong>               Something like machine learning...cuz I've dabbled in that...I always hit the...for me, one I buy all the 5 star books, not just the one book I have all of them put them in a nice stack next to my desk and just hope.</p><p><strong>Brian:</strong>              (laughter)</p><p><strong>Joel:</strong>               Just light a candle then turn to Google and do basically the same thing you describe. It's weird with programming especially something like machine learning. I end up at the limit of my math skills. When I really get to what I want to do...oh yeah...</p><p><strong>Brian:</strong>              And then you do the same thing for the math right? Buy a book, read the book...(laughter). It turns out just muddling through the things and trying things and playing around really getting deep into it is the only way I learn. I found out the hard way through many things that if you just read from afar and you don't actually do it, you're not going to learn.</p><p><strong>Joel:</strong>               For me, starting a business or learning how to code. For code, I ended up for me I got into frameworks and the framework was able to allow me to actually do something and then I was able to work back from doing that into understanding what's actually going on. Right? Like that was...</p><p><strong>Brian:</strong>              Exactly yeah. The high level...that's huge...just for me using rails to start, by the end I was mad and thought rails was dumb, but it gave me a whole career basically. And taught me how to program in that exact way.</p><p><strong>Joel:</strong>               I see people say \"Oh, you can't do that. You can't start with frameworks, you have to learn core Java Scripts\" I'm like that's boring. It's hard and boring. And if you don't understand, you can't really build anything. Where with rails, or something like Gatsby lately for Java Scripts specifically you can fire this up and all of a sudden you have a website. You can start tinkering.</p><p><strong>Brian:</strong>              That's probably the best way. You get a little bit more and a little bit more and in fact I think that's a good general rule. For machine learning, at least for me, I'm starting with Keras and working my way back to PyTorch and TensorFlow JS. And you kinda start with the higher level stuff until you get comfortable and go a little bit further and a little bit further.</p><p><strong>Joel:</strong>               The onion right?</p><p><strong>Brian:</strong>              Exactly. Get down to the beautiful, delicious core.</p><p><strong>Joel:</strong>               The big onion.</p><p><strong>Brian:</strong>              (laughter) Yeah, exactly.</p><p><strong>Joel:</strong>               There's a book I love that kinda talks about this Apprenticeship Patterns. Have you seen this book? It's by Dave Hoover and it goes into this idea one of the chapters is called the Breakable Toy. It's a great book altogether, but this is the one that stuck out to me most. It's this idea that when you are learning something complex and it's specifically target to programming you need something, right, you need something that's yours. Nobody else cares about that you can break and build. Whether it's your blog or some sort of fitness tracker what have you, just something that you can stand up and when you are learning, it's something you can apply what you are learning to. And that's always stuck with me it's just an important concept. Like the idea of tinkering and being able to play and build at the same time. I think it gets the core of how we learn complex things in a lot of ways.</p><p><strong>Brian:</strong>              Yeah exactly. I think my favorite thing was in that old book, that classic \"Don't Make Me Think!\" where people don't want to learn how to do something. They just muddle their way through until it works for them. They have people who...I can't remember the exact description, but they would google the term to get to the google page and then click on the page even though they...there's long path people they are able to watch people do that they've learned it that way so they would do that way. Like they will google a website...</p><p><strong>Joel:</strong>               Google the dot com and then get into the website that they are actually going?</p><p><strong>Brian:</strong>              Exactly. And it works for them and then they will find a better way later on. But at least they got started and muddle their way to success. Fake it till you make it.</p><p><strong>Joel:</strong>               This idea that when...people are always trying to make learning fun. Learn to me has always been almost like an effort and frustration and you start getting at the definition of fun and what is fun. It turns out that it's actually we want to be challenged, we want things to be difficult, we want to be a little bit frustrated but then overcome it and see the end. It's like the outcomes are what is fun, it's not the actual learning that is fun.</p><p><strong>Joel:</strong>               It's not true universally. Some people really enjoy it, think learning is fun fun fun. But in my experience, it's not really the case.</p><p><strong>Brian:</strong>              I read in Psychology Today magazine or something you are happiest when you have a goal and you make a big step toward that goal. It's one of the most fulfilling things. Some philosophy talks about how it gets down to the core meaning of life. You start with nothing and you learn and you grow and you improve and you...this is something that is tied to our being...is actually growth and sharing. It's kinda cool.</p><p><strong>Joel:</strong>               Yeah it is cool.</p><p><strong>Joel:</strong>               SO in a practical sense, I'm a programmer and I've been interested in dabbling in functional programming whether it's through Lodash or what have you, for the last several years. But I want to go deeper, but I'm on a big project and how do I learn enough functional programming, how do I start changing the paradigm that I'm using in my day to day if I'm using rails or I'm using something similar. How do I get in there and really go deeper with functional programming? Where do I even start?</p><p><strong>Brian:</strong>              Right on. Well that's a good question. For me, I guess there's a bunch of different paths. But I would start understanding that the core of functional programming is centered around composition and data flow and if you can just compose a data flow without just mutating in line and jumping around in your data flow. If you can just really really work on data flow from beginning to end, I think that would be a great way to start.</p><p><strong>Brian:</strong>              So of course you can make things immutable. That's a pretty easy thing to start with. And then you can work on your composition functions which works on...even if you have methods and objects, just separate your actions, dots and text is still composition. And that's what the practically are the Professor Frisby's \"Introduces Composable Java scripts\" all does...dots and text composition. Just anytime you hit a block, you can use either actual flows from Lodash or compose, but just try to compose and then when you actually hit a block just try to learn the solution to the thing that's preventing you from composing. And that's really why you end up with all these big fancy abstractions is you're like well I have two different inputs now and I want to compose those. Or I have two different async calls and I want to compose those...and you find out here's the tool to compose it. It always comes down to composition.</p><p><strong>Brian:</strong>              It's much different from object oriented where you are like \"Oh I have this problem to solve and I want to figure out what pattern is used to solve that problem.\" It's always composition. And now it's just the problem becomes how do I compose this.</p><p><strong>Joel:</strong>               You just kinda composing objects at that point. Is that...</p><p><strong>Brian:</strong>              Yeah [crosstalk 00:25:07]</p><p><strong>Joel:</strong>               I think there's a big separation mostly in naming things and we're actually going to call this what we perceive it in this physical world, but then conceptually there's a lot of the same things going on under the hood. We're just abstracting that away. And something.</p><p><strong>Brian:</strong>              Exactly. I think the biggest thing my team has adopted is just using either InTasc to compose control flows for if-else and async really made the biggest difference. And now we're doing stuff like point-free compositions, which presents some extra challenges and then you're looking into lenses and it becomes this path to end up at Haskell I guess. Either way, those are probably the biggest wins. Everybody kinda gets sold on the fact that wow I can actually follow data from beginning to end and just read this code instead of having to know the whole application to understand what's happening. And that's the biggest advantage, is the composition.</p><p><strong>Joel:</strong>               That's interesting because with a typical object oriented, you have all these connections right? To follow the data flow there's a lot, for me, in JavaScript and in full text searches and that sort of thing, to follow it around. But in this paradigm, I'm able to just look at a slice of the data and understand where it's going and how it's being transformed and what's going on. Is that...</p><p><strong>Brian:</strong>              Exactly, and action. And that's where you end up with the 2 camps right? The pure FP people and the people that aren't pure. But if you are going to subscribe to the composition story, then you end up returning a task typically or an IO or something when you do an action. And that composes. So everything kinda keeps...you can keep following this control flow even though one of them is just write to the screen and you're like well what happens next, well follow where that IO got sent or where that task got sent. So it's pretty interesting to be able to compose the world and follow that. And it really tackles the 2 hardest problems right is control flow and state and directly hits those nerves which is why it's been so successful, but also probably much more challenging to actually fight those then it is to mutate inline and change things inline. Because it's harder people tend to want to resist it and say no this is harder to write right now so I don't want to do that. But if you actually try and work with it, it makes everything a lot easier to read later.</p><p><strong>Joel:</strong>               So you said, either InTasc...what's the next step after...and I'm not going to get into what those are. We will try to maybe link to some explanations or something, but what's the next step past Lodash? I can't go all in. I can't be pure. I can't use pure script or jump right into Haskell, just wouldn't work. Where do I go to get one step past Lodash or whatever it is that we are currently using.</p><p><strong>Brian:</strong>              I recommend, so monoids tend to be probably the most useful pattern across the board...the single greatest thing that I've discovered and it's just these cascading layered monoids that allow you to build up really really complex workflows into one big concatenation. I would really spend some time looking at how to apply monoids in your code because they are fairly easy to understand. And they have an incredibly best use case. So maybe introduce some monoids and then once you have those in place and you are kinda describing your [inaudible 00:28:47] control flows with those, you start hit other challenges and start to go higher up in the ladder of functional programming to compose other things in the same way as monoids. Definitely a shout out to monoids.</p><p><strong>Joel:</strong>               Yeah shout out to monoids. I'm going to have to look that up when we are done, but I'm really...I have these...I have specific problems that I think this stuff will be useful for right now. That are just difficult state problems that are hard to get my head around in terms of object orientation so this is long term goal of mine personally, been trying to solve.</p><p><strong>Brian:</strong>              Right now. I definitely think state is difficult and if you can cheat with a closure...you know, I wouldn't say cheat, I would say if your problems easily expressed with a closure, just do that. Then you don't need to bring in state monad that always makes it really complex really fast. Then you have to deal with monad transformers and it's just...I think there's this balance that you can get ton of benefit for following a lot of these rules and then once you're really really comfortable and you want to go all the way and start modeling things with semirings and what not. Then you bring in the heavy lifting stuff. That stuff is..I think part of the reason people get turned off by functional programming is you keep going, you start to hit another barrier and that barrier is kinda ridiculous and the benefit isn't as obvious and immediate.</p><p><strong>Joel:</strong>               Ian Hofmann-Hicks has a really state monad and JavaScript course that we published it's a free community resource. And it's neat because the title's all saying monad in them but he doesn't even use the word monad a single time in the entire course.</p><p><strong>Brian:</strong>              (laughter) That's awesome.</p><p><strong>Joel:</strong>               And he kinda has a joyful approach to all this. Feels like you guys should hang out actually.</p><p><strong>Brian:</strong>              I'm familiar and I love his crocks library.</p><p><strong>Joel:</strong>               Yeah, crocks is amazing and he just...he's actually lives in the same town as me. We get to hang out. He's a great great human.</p><p><strong>Brian:</strong>              That's nice.</p><p><strong>Joel:</strong>               Anyway, it was great to talk to you Brian.</p><p><strong>Brian:</strong>              Yeah, right back at you.</p><p><strong>Joel:</strong>               Learn more from you in the future and I'll talk to you soon.</p><p><strong>Brian:</strong>              Alright, see ya.</p>",
    "slug": "math-and-functional-programming-aren-t-exclusive-to-wizards-with-brian-lonsdorf",
    "description": "<p>Joel and Brian Lonsdorf discuss the pain and growth of learning, math as a source of truth, dispelling that idea that you need to be a wizard to enter the functional programming space, and finally how you can start including functional concepts in your day to day work.</p><p>There's a reason that mathematicians tend to be the best functional programmers. The theories and patterns directly apply, it has truth and purity. It's powerful, almost powerful enough to describe everything, so what makes people turn away from it?</p><p>Traditionally, math gets taught in a dry manner from a young age, tables are memorized, and facts get drilled. It isn't until much later that interesting concepts like set theory get introduced, and at that point, it's too late for many people.</p><p>Material that's \"dry\" doesn't have to be taught that way. It's been three and a half years since Brian first put Professor's Frisby's guide up on Github and it brought light and friendly perspective to heavy material. It showed that the functional programming paradigm was learnable without requiring a deep dive into Haskell.</p><p>The deep dive doesn't work for everyone. There's merit in starting with something like Gatsby and just getting something out there that you can play with immediately, and then later learn the fundamentals of Javascript. The same thing applies to learning functional programming. You can start composing with Lodash and ease into the deeper patterns and concepts.</p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/6d66e9e6/transcript\">\"Math and Functional Programming Aren't Exclusive to Wizards with Brian Lonsdorf\" Transcript</a></p><h3>Resources:</h3><ul><li><a href=\"https://drboolean.gitbooks.io/mostly-adequate-guide-old/content/\">Professor Frisby's Mostly Adequate Guide to Functional Programming</a></li><li><a href=\"https://egghead.io/courses/professor-frisby-introduces-composable-functional-javascript\">Professor Frisby Introduces Composable Functional JavaScript</a></li><li><a href=\"https://hackernoon.com/function-composition-with-lodash-d30eb50153d1\">Functional Composition with Lodash</a></li><li><a href=\"https://egghead.io/courses/state-monad-in-javascript\">State Monad in JavaScript</a></li></ul><h3>Brian Lonsdorf:</h3><ul><li><a href=\"https://github.com/DrBoolean\">Github</a></li><li><a href=\"https://twitter.com/drboolean?lang=en\">Twitter</a></li><li><a href=\"https://medium.com/@drboolean\">Medium</a></li></ul><h3>Joel Hooks:</h3><ul><li><a href=\"https://twitter.com/jhooks\">Twitter</a></li><li><a href=\"https://joelhooks.com/\">Website</a></li></ul>",
    "duration": 1852,
    "episode_number": 29,
    "contributors": [
      "Joel Hooks"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/10226",
    "path": "/podcasts/math-and-functional-programming-aren-t-exclusive-to-wizards-with-brian-lonsdorf",
    "published_at": "November 2nd, 2018",
    "url": "https://egghead.io/api/v1/podcasts/math-and-functional-programming-aren-t-exclusive-to-wizards-with-brian-lonsdorf",
    "edit_podcast_url": "https://egghead.io/podcasts/math-and-functional-programming-aren-t-exclusive-to-wizards-with-brian-lonsdorf/edit"
  },
  {
    "id": "podcasts-00000000000000000073",
    "title": "Being a Passionate and Deliberate Engineer with Jem Young",
    "summary": "Jem Young talks to us today about being a passionate developer, how the software you write is an extension of you, being deliberate in the libraries you include in your codebase, and trusting engineers to know what they are doing.",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/adc45505-bbaa-47a3-8468-6eabaa78060d/63505a4a_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/adc45505-bbaa-47a3-8468-6eabaa78060d/1542649742artwork.jpg",
    "simplecast_uid": "adc45505-bbaa-47a3-8468-6eabaa78060d",
    "transcript": "<p><strong>John Lindquist:</strong>     All right. Today's guest is Jem Young. So Jem, you want to go ahead and introduce yourself.</p><p><strong>Jem Young:</strong>          Yeah, thanks John. Like John said, my name is Jem Young. I am a senior software engineer at Netflix. And a fun fact about me, I am very tall. I am much taller than I look in all my pictures.</p><p><strong>John Lindquist:</strong>     You are.</p><p><strong>Jem Young:</strong>          And you're also tall, John. I don't think people know that either. When we stand next to each other, I don't feel uncomfortable because we're about the same height.</p><p><strong>John Lindquist:</strong>     We do. We've got a nice little eye level thing going on.</p><p><strong>Jem Young:</strong>          It's really nice. The Twitter avatar's don't do the height justice. We could use each other for a scale, but that wouldn't help at all because we're both tall. So maybe like, they're both average height guys.</p><p><strong>John Lindquist:</strong>     Exactly, exactly. So the topic of today I wanted to talk to you about is you work on a lot of sites that kind of avoid frameworks and avoid libraries due to performance being like the number one concern, right?</p><p><strong>Jem Young:</strong>          I wouldn't say a lot of sites. It is one of my mantras, and the team I work on with Netflix is something we believe in.</p><p><strong>John Lindquist:</strong>     Right. Yeah. So performance above all, first paint and all that, above all. So what do you see when on your projects that are like that, what are the requirements of a typical site like that? What requirements come your way, like, \"Okay, this, we need to avoid all the extras, all the fluff\"?</p><p><strong>Jem Young:</strong>          To back up a bit, we have the benefit of being able to AB test something. So we just don't roll things out and say like, \"Oh, I hope this is work. I hope this gets the right metrics.\" We can AB test it. So I can say, \"Hey, I want to use ... I want to build one experience with this library or a slightly bigger payload or something like that. And I want to build another experience with a smaller payload and no library.\" And we can see which is actually the better experience in terms of metrics and in terms of any sort of like user conversion. Or any other real world metrics that we care about.</p><p><strong>Jem Young:</strong>          But generally, thankfully, my teams pretty well-informed about adding ons bufferless libraries. It's so tempting to just yarn and install, our MPM install, or yarn add, should I say, some libraries, that solves your problem. But, I always preach this, is just being cautious about what you're adding in. And do you actually need it? Do you understand what the library's doing? Can you do without the library? I don't know. I think that's something that everybody should keep in mind these days.</p><p><strong>John Lindquist:</strong>     Right, right. So do you find on the projects you have, are you ... How often are you actually able to remove a library? Do you have some sort of benchmark or quota or whatever that comes your way, where you're like, \"I need to get this much faster or this much smaller\"? Or you have to start finding things and removing and writing it yourself?</p><p><strong>Jem Young:</strong>          Thankfully, we have real time performance metrics. So it'll tell us thing like time to render. And I can break that out into different devices. So I say, \"Oh, this site on my $3,000 MAC book, it renders in under a second. But on this low-end Android phone, it takes 10 seconds. That's unacceptable. So, at that point, I take a look at what is causing the lag. Is it something we can fix. Is it a product of our ... the experience we built. Almost generally, it's due to usually a slow API requests or just the size of the libraries too large. Or oftentimes, it's just something blocking rendering. But you would be surprised how often it's just bad measurement as well. That's a totally different episode we could do. But yeah, knowing that your measurements are accurate is kind of the first step in understanding, should I remove the library, should I not?</p><p><strong>Jem Young:</strong>          Because there is a cost to developer productivity by say, I don't know, taking out React or something like that. It's easy for you and I to say, like, \"Oh, just use less libraries. But in reality we're developers. We get paid to build things within a certain timeframe, and we can't just remove everything. So taking a more holistic view of your application and kind of the bottlenecks and whether or not you need to remove a library, something that has to be done on a case-by-case basis.</p><p><strong>John Lindquist:</strong>     Right. You do need to ship something. You can't just ship code that will do that something in the future. It needs to actually deliver a product.</p><p><strong>Jem Young:</strong>          Exactly.</p><p><strong>John Lindquist:</strong>     So do you see a lot of new features coming your way, where you have to do those ... Where you push back on a feature saying, listen, that would require this much JavaScript and you try and think of file sizes? Or do you see changing requirements or things where we have to sit at meetings and fight over file size, before it even gets to writing code?</p><p><strong>Jem Young:</strong>          A bit of both. So, tiny bit of history before those who don't know, a colleague on my team, Tony Edwards had this radical idea of not shipping down React to the clients on our homepage. So if you're not logged into Netflix, when you come to Netflix.com. He said, \"Hey, let's not send React down to the client. Any sort of interaction I need, any sort of JavaScript [inaudible 00:05:06] handling things like that, I'll just write those of Vanilla JavaScripts and not React.\" So we still use React on the server for server side rendering, and it renders the entire page, and it's awesome. And React definitely, it makes us more productive because we can share components and things like that. There's know patterns, things like that.</p><p><strong>Jem Young:</strong>          So we still use on the server. And you know I've taken a look at the homepage. And I've noticed that most of the features in React, we just don't need, and I can write those out in Vanilla JavaScript. So that's what he did. And it turned out that it made Netflix.com or at least [inaudible 00:05:37] Interactive, it made it 50% faster, which is massive. If I can get my page 5% faster, that's a good month for me. So pretty much Tony set the benchmark for what out TTI needs to be. And if I'm building a new feature that's gonna involve the new homepage, or say I'm refactoring something like that, it needs to be the previous version of the homepage, which is the lite version, which is the one with minimal libraries and minimal JS.</p><p><strong>Jem Young:</strong>          And that's kind of where any time I'm asked to build any feature, that's what I benchmark against. But in meetings, I definitely push back. That's the great thing about kind of where I work, and this is not a ... I know it sounds bad, and it sounds like I'm a shell for Netflix, but at Netflix, when we sit down to design a project or building a project, I sit down with [inaudible 00:06:23] and I know what this people, the day scientists, the product manager, the designers, the localization time, a bunch of other people. There's a lot of people to build something.</p><p><strong>Jem Young:</strong>          And the great thing is my input counts as much as anybody else's. It doesn't matter if, I don't know, the CEO is in the room. My input counts exactly the same. So if someone says, \"Hey, I wanna build this feature. It gonna be awesome. It's gonna do all these things. It's gonna jump across the browser. It's gonna be viral,\" I don't know. Never build anything that was viral. That's be great. No. They say I wanna build those things, as the engineer in the room, I have to say, \"Well, yeah. But we're probably gonna have to use this library, and it's gonna cost us this in terms of payload size and low-end devices. In terms of rendering performance, we're gonna take a hit here.\"</p><p><strong>Jem Young:</strong>          So I have the full kind of freedom to push back. If I say, \"This isn't technically feasible, or it is feasible, but here's the cost,\" that's how I approach every project that I do.</p><p><strong>John Lindquist:</strong>     Yeah. I've heard you say a few times a code that's never written never has bugs. So I mean, it sounds like you have the power to say no a lot. Do you find that's the case that ... Throughout my career, I've been been on the receiving end of just a stack of, well, I guess PDF, so not a stack of paper, but a stack of PDFs, whatever you call a group of PDFs, and [inaudible 00:07:46] implement this. And I didn't have a lot of freedom to say no because I was a consultant or I was an employee, and I was on there getting paid to do what they told me to do. I had a little bit of leeway in I can't do that before next Friday. This is gonna take six months, not two weeks after you deliver the proof concept, and then they think that you're done. You've been there before.</p><p><strong>John Lindquist:</strong>     But it sounds like you've been emboldened, I guess, with the power to say no. Do you find that to be true or-</p><p><strong>Jem Young:</strong>          Yeah. That's absolutely true, and I-</p><p><strong>John Lindquist:</strong>     It's awesome.</p><p><strong>Jem Young:</strong>          I have else been on that side where it's kind of unilateral. It comes down. Product is looked at, designers looked at it, all the relevant people have looked on it. And as the engineer, you're kind of the last wrong in the ladder that it falls down to, they're like, \"Hey, build this thing.\" And I feel like in a lot of organization, that's how it is. But no, I'm absolutely emboldened to say no. I disagree with people often. In fact, that's not one of our core values, but it is value to disagree with somebody, have an opinion but don't be opinionated because I think one of the worst things for engineer or one of the worst things for senior engineer is to not have an opinion on things because you've made it this career. You definitely need that hard learned.</p><p><strong>John Lindquist:</strong>     Preach it. Yeah.</p><p><strong>Jem Young:</strong>          Well, sorry.</p><p><strong>John Lindquist:</strong>     I'm saying, preach it. Keep it going. Hallelujah.</p><p><strong>Jem Young:</strong>          There are expensive lessons that you and I have learned, John, once that we probably won't care to pick because they're so embarrassing. But I've broken production before, not Netflix.</p><p><strong>John Lindquist:</strong>     Through rite of passage.</p><p><strong>Jem Young:</strong>          It is. What do they call it, the ... It's called the 23rd hour mistake or something like that. Because your senior enough to not make a rookie mistake. So when you screw up, it's big time.</p><p><strong>John Lindquist:</strong>     It's [inaudible 00:09:51].</p><p><strong>Jem Young:</strong>          Like the [inaudible 00:09:54] database or something like that, which I've never done either. But I've worked in production. I've made a lot of bugs.</p><p><strong>John Lindquist:</strong>     I mean, we haven't the Western incoming missiles to Hawaii like that one. I haven't done that level, so I feel okay with myself.</p><p><strong>Jem Young:</strong>          I felt bad for whoever did that because at software engineer, there's a lot of unintended consequences that we just don't know, don't align. And it's impossible to think through all of them. And sometimes it's just bad luck, sometimes just bad design. But-</p><p><strong>John Lindquist:</strong>     I try to feel sympathy or empathy for pretty much every website or piece of software or video game or anything. Right now, there's some developer, maybe not the most experienced in their role trying to get by, trying to learn on the job, trying to ship through requirements, and then people complain about the bugs, and they tear it apart, and they rip everything, and it was their best effort. They put their heart and soul into it, and they did their best, and then you got online, and people just tear into pieces.</p><p><strong>Jem Young:</strong>          Oh, come on. Yeah.</p><p><strong>John Lindquist:</strong>     I hope they tried. I'm pretty sure they tried.</p><p><strong>Jem Young:</strong>          So I will say this. Not everybody cares the same amount that you and I do. There are lots of lazy developers there or developers that just try to get the thing done and then walk away, whereas ... You and I have spent time together. So I can say confidently if there's a bug or some lingering thing, we're not gonna go home and be like, \"Oh,\" just turn on TV and hang out. We're probably gonna go fix it because it bothers us at a deep level that our code represents who we are. And I'm not just gonna this outstanding bug that I know about.</p><p><strong>Jem Young:</strong>          But not everybody is like that. Not everybody thinks that way. I would love everybody to think that way. But it's just the way the world ... I mean, I'm ...</p><p><strong>John Lindquist:</strong>     I'm sure that's true across all career fields. I've had people come out to me just throughout my life and say, \"Hey, I'm looking for a job. Do you know of any?\" I'm like, \"Well, do you have a particular interest?\" Like, \"Well, I'm interested in making money.\" Like, \"Well, that's not a good start. Weird choice.\" Because I think some people are just in it for the paycheck. And whatever career you're in, if that's what you're in it for, then you're not gonna be happy, and you're not gonna find that joy in it, so.</p><p><strong>Jem Young:</strong>          Preach it, John. Preach it. We can do another episode on these in ... This is gonna sound mean, but it's not against coding boot camps. There are a lot of good ones out there. And there are people that work in Netflix that graduate from coding boot camp, don't have CS degrees. That's perfectly fine. I think, and this is definitely my personal opinion, there are boot camps out there or schools or for-profit universities that say like, \"Hey, become a software developer in under whatever time, and you'll get paid a six-figure paycheck or $80,000, or whatever it is. And people were like, \"Oh, yeah. It's kind of a get-rick quick scheme.\" But like you said, without the passion, you can be a software engineer, but you're never gonna be good at it because it's those little things, those nagging bugs that kind of like haunt you all weekend.</p><p><strong>Jem Young:</strong>          And like, \"No, I'm not gonna relax until I fix this.\" Or, \"Oh, 1:00 AM.\" Sometimes you wake up out of bed and say, \"I figured it out. I know it's a [inaudible 00:13:31] problem,\" then you go code it out. That is one of the differentiators between a software engineer and a great software engineer. Not saying you need to kill yourself working overtime. But I see it in some people, and I don't see it in others. And years later, it tends to play out exactly how I think it plays out. Those people that push a little harder, that have that passion, tend to rise to the top.</p><p><strong>John Lindquist:</strong>     Yeah. I think what's fascinating to me is that's pretty evident from early on in the learning process. The first project they pick up, whether they're trying to make a circle move across the screen or trying to make a button click, submit a form or whatever, they are in it to figure it out. And they will not let anything get in their way. Obviously, a lot of it is the brute force approach, where you try every single option, and you know that every failure is just a stepping in the right direction to finding the solution, and you're just pounding a way at it. And there's just self-taught programmers out there who have learned that way, and they're wonderful programmers now because they are not afraid to fail, and they want to do it.</p><p><strong>Jem Young:</strong>          Exactly, John. Exactly. You could argue there are no failures when you're learning because you learn something. And to circle way back sort of earlier, point is that's the level of people that I work with. So I don't have to say, \"Hey, you build this feature, and you added the library. There's an extra 2 megabytes or something like that.\" I don't have to worry about that because the people that I work with are thoughtful, and they know better. And that goes back to if someone asked me to build a project, I can say no because I have years of experience.</p><p><strong>Jem Young:</strong>          And not like I have user experience working at a company, but experience in those after-hours learnings and mistakes that I've made and talks that I've watched and classes that I've taken and just random, boring, silly things that I've build that have no purpose whatsoever rather than just me building something. From all that, I have all that experience. So when I say no, it means something. It's not just I'm lazy or I don't wanna build it. There's no I'd say no for a reason.</p><p><strong>John Lindquist:</strong>     Yeah. I've tried that. I know that that's not gonna work because I tried it on some stupid project on a weekend one day when I was interested in looking, yeah, at a blog post, and I tried it, okay. You're contrasted me that it's not gonna work.</p><p><strong>Jem Young:</strong>          Exactly. I always say, for organizations that are not like that, that they say, \"Well, you know what, John, I disagree. I think you can build it. Go ahead and try.\" And that happens quite a bit. From just talking to people around the world, that's kind of how software engineering is done in a lot of places. So those people, I say, like, \"Well, why did you hire me then if you know better than I do? You hired some of the best in the world, right?\" And they say, \"Yeah.\" Well, why not trust them to make their own judgements on these things like this?</p><p><strong>Jem Young:</strong>          My fiancee, she's a data scientist. She could run circles with me on SQL queries or just complex math that I can't even begin to understand. So it's not my place to be like, \"Oh, you're doing that wrong.\" That wouldn't make sense. And so same way if someone's like, \"Yeah, that's a good opinion, Jem. But I think you should go and build it anyways despite your reservations.\" To me, it's the same principle. And I don't understand that way of thinking because why did you hire these people if you're just gonna not listen to what they say or give them the freedom and latitude to build how they wanna build within reason, obviously.</p><p><strong>John Lindquist:</strong>     Yeah. One of my notes from one of your slides is believing people, not ideas. I think that kind of ring is true is that the people are the source of the ideas, where they're the ones with the experience, they're the ones who've come up with the possible solutions, and you have to trust when you put the people first that their energy and their focus is in the right spot, and the idea is they come up with the proper support behind are the right ones even if it's the idea you don't agree with. I don't know if all managers have learned that lesson yet. But people are like idea machines or solution machines.</p><p><strong>Jem Young:</strong>          Yeah. Exactly. There's nothing more powerful than a passionate software engineer. I've had the privilege of working with a lot of smart people over the years. And I just see the look in their eye when they're like, \"Oh, I had this idea.\" They may come back a week. It could a month. It could be a few months later. I built this thing. And a lot of times, it's just revolutionary. Sometimes it's silly. But they learn something. But that passion is kind of what pushes us forward. And it keeps us ... Companies that empower those people tend to stay ahead of other companies. They tend to be the leaders and not the followers because ... It's like if you had the chance to, I don't know, hire a great artist. You had the chance to hire [inaudible 00:18:50] or something back in the day. You're not gonna tell him how to create something. And you just have to kind of sit back and let him do his thing, and brilliance will come out of it.</p><p><strong>Jem Young:</strong>          And it's the same way between ... Actually, I'll put this to you. Would you say software engineering is more of an art, or is it more of a science?</p><p><strong>John Lindquist:</strong>     Yeah. So I've thought about that one a lot kind of over the years. I think it falls under creative problem-solving that every problem we're presented with is a puzzle. And I think that software is an art inasmuch as the final, a puzzle, once you put all the pieces together is a piece of art. So my wife is actually amazing at puzzles. So it's one of those things that come up to my brain. So yeah. It's like the puzzle, once assembled and put up on the wall is art. But all the pieces lying there on the table before it's created, you're not necessarily painting art. You're assembling art. That may be a bit too out there to make any sense.</p><p><strong>Jem Young:</strong>          No. The puzzle analogy is perfect because that's a lot of what we do is we put together pieces. Sometimes we have to write the glue. But individually, the pieces are nothing. They're like, \"Oh, yeah, that's pretty puzzle piece of flower,\" something like that, cool. But I wanna tell it doesn't mean anything. But we put it all together. So yeah, I agree. I think creative problem-solving is a good way of putting it.</p><p><strong>John Lindquist:</strong>     Well, I also think ... I mean, we spend so much time with interfaces and APIs and putting pieces together that once you've finally assembled your final project, you can still have a feeling of, \"Ah, something is not right in the way things connect together, like with the way we're making our backend request.\" It's not art yet. There's some sort of imperfection in there that you can see as a ... From your experience, you can see the imperfection in the system. And they're like, \"Well, we got to ship it.\" I know it's not beautiful. It's a product. It's not perfect, but it's out there, and then you can refine it and turn it into more of a nice beautiful piece of art later on.</p><p><strong>Jem Young:</strong>          No. Exactly. The code you write represents you. It is a part of you. I know we're going really philosophical at this. And some people, we've probably already lost [crosstalk 00:21:29]-</p><p><strong>John Lindquist:</strong>     Our podcast, we talk [inaudible 00:21:31]-</p><p><strong>Jem Young:</strong>          Yeah. What's the point in having your own podcast if you can't do whatever you want. But no, I always say I wanna be righteous in my code. And not at any sort of religious connotation, but just in a ... If I did something, there is a reason why I did that way. So anybody can go to any line of code that I wrote and say like, \"Jem, why did you do this? This doesn't make sense.\" Or, \"I'm confused.\" I'll be like, \"Oh, I did it because this, this, and this. Because I wanna be thoughtful in my approach.\" And even if I'm wrong, I wanna have a good reason behind why I did it, not just, \"Oh, I happen to do it.\" Because every line of code I write to a large degree represents who I am, just like an artist would say that painting or that that drawing or that statue is a part of who they are or a poet is sharing part of kind of their soul, their experience.</p><p><strong>Jem Young:</strong>          And I know, it seems kind of strange to think of programing in that sort of sense. And that's definitely not in my head every day when I'm writing code. But to a large degree, I mean, we're still focused on individual lines that we lose the big picture quite often.</p><p><strong>John Lindquist:</strong>     Exactly.</p><p><strong>Jem Young:</strong>          Yeah. But I agree with you. I think software can be beautiful. I think systems can be beautiful. Designing a big complex system, that just is doing all these things, and it's just few minutes can't even comprehend the level of data complexity is going into it. No. I think that's beautiful. I know it sounds silly, but that's the way I think of good software.</p><p><strong>John Lindquist:</strong>     I agree. I have to share one story about trusting people, and I guess don't stop me if you've heard it because well, people might wanna hear it. So it's either UPS or some big delivery system where they have conveyor belts. And at the end of conveyor belts, it the boxes were too light, it meant they're packed improperly, and they shouldn't be loaded onto the van. And it was causing a huge loss in revenue and sales or whatever because they were putting incorrect boxes onto the tracks and going out for deliveries. And so they invested this huge effort into researching new ways of building conveyor belts so they could weigh the boxes and put the appropriate ones on the track.</p><p><strong>John Lindquist:</strong>     So they spent millions and millions of dollars on inventing a new conveyor belt. And so the people who were loading the boxes are under the track. They installed the new conveyor belt, and they're loading the boxes under the track, and everything is just fine. And one day, the new million dollar weight system break stone but they realized that the people working at the end of conveyor belt who dealt with the system every single day realized what they were trying to do. And so all they did was they kept things going by putting a giant fan at the end of the conveyor belt to blow off the light boxes so that only the heavier ones made it onto the tracks.</p><p><strong>John Lindquist:</strong>     And so when the people, like the senior managers and the CEO, when everyone came down to investigate what was going on, they saw a giant $20 fan solved the same problem that they invested million of dollars into solving. And I think that's that wonderful story of, you know what, there are people who deal with the thing, and you don't try and solve that problem for them if they understand the problem better than you do, anyway.</p><p><strong>Jem Young:</strong>          No.</p><p><strong>John Lindquist:</strong>     I'm sure I got a lot of details wrong in that. But hopefully, the moral came across.</p><p><strong>Jem Young:</strong>          No. That's a great story. That's a great analogy because that's so true. That's 100% true.</p><p><strong>John Lindquist:</strong>     I like that.</p><p><strong>Jem Young:</strong>          And that goes back to our original topic of shipping down less JavaScripts. It's-</p><p><strong>John Lindquist:</strong>     Bring it to full circle. Let's hear it.</p><p><strong>Jem Young:</strong>          It's easy to like, \"Oh, this noted library out there came up with this package, and it'll solve all of our problems.\" And we just installed, and we spend most time in integration and things like that when the actual solution could have been much simpler if you put a bit more effort into it, and you ask the people who are directly involved, \"Hey, is there a better solution?\" I forget who said it. But the famous saying that perfection isn't achieved when there's nothing left to add but when there's nothing left to take away. And I feel the same way with software is when it's down to its core, it's bare minimum that it needs, but also extensible. So it's not just highly coupled and does this one thing well.</p><p><strong>Jem Young:</strong>          But nothing else needs to be taken away. That's where I'm happy. Because if something goes wrong, I understand the entire system because I'm like, \"Okay, there's not much to it.\" It's really simple that the less code there is, the less chances of bug. It's simple, but no one ever thinks of it in that terms.</p><p><strong>John Lindquist:</strong>     I like. I think we'll end the podcast right now.</p><p><strong>Jem Young:</strong>          Okay. It's a lot of philosophy.</p><p><strong>John Lindquist:</strong>     That was great. I loved it. All right. I'm gonna stop recording.</p><p><strong>Jem Young:</strong>          Okay.</p><p><strong>John Lindquist:</strong>     See you, Jem.</p><p><strong>Jem Young:</strong>          See you, John.</p>",
    "slug": "being-a-passionate-and-deliberate-engineer-with-jem-young",
    "description": "<p>Today we are joined by Jem Young, a senior software engineer over at Netflix. Jem is here to discuss his programming philosophy and how it is an extension of himself, how engineers should have the freedom to have ideas and veto things, the difference passion makes, and being informed about the libraries that you include in your code and if they are actually needed.</p><p>Netflix's homepage got 50% faster when Today Edwards had the idea of <i>not</i> shipping React to the client. All event handling was done with vanilla javascript and React remained on the server side. Finding this balance of developer productivity and performance is important. Jem talks about how you should really examine the reasons why you are including a library in your codebase, and to ask yourself if it could be implemented in a simpler way with what you already have.</p><p>Jem discusses what it means to love the work you do and to have a real passion for creating software. Passion makes a difference in a developer's career path, the devs who are just looking to make a paycheck and don't really care don't end up in the same place that those who really care about their work do. Jem is curious, he experiments with software on his weekends, he'll sometimes wake up at 1am with the solution to a bug he's been thinking about all day, software is an integral part of his life beyond it just being how he puts food on the table.</p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/63505a4a/transcript\">\"Being a Passionate and Deliberate Engineer with Jem Young\" Transcript</a></p><h3>Topics:</h3><ul><li>Trusting your engineers to know what they are doing</li><li>Weighing the performance costs of included libraries</li><li>The difference that real passion for software makes</li><li>How programming is like solving a puzzle</li><li>How the code you write represents you</li></ul><h3>Jem Young:</h3><ul><li><a href=\"https://github.com/young\">Github</a></li><li><a href=\"https://twitter.com/jemyoung?lang=en\">Twitter</a></li><li><a href=\"https://jemyoung.com/about/\">Website</a></li></ul><h3>John Lindquist:</h3><ul><li><a href=\"https://twitter.com/johnlindquist?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor\">Twitter</a></li><li><a href=\"https://johnlindquist.com/\">Website</a></li></ul>",
    "duration": 1600,
    "episode_number": 28,
    "contributors": [
      "John Lindquist"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/22br4",
    "path": "/podcasts/being-a-passionate-and-deliberate-engineer-with-jem-young",
    "published_at": "October 19th, 2018",
    "url": "https://egghead.io/api/v1/podcasts/being-a-passionate-and-deliberate-engineer-with-jem-young",
    "edit_podcast_url": "https://egghead.io/podcasts/being-a-passionate-and-deliberate-engineer-with-jem-young/edit"
  },
  {
    "id": "podcasts-00000000000000000141",
    "title": "Learning and Experimenting with Physical and Digital Mediums with Keith Peters",
    "summary": "Today Keith Peters walks us through his experiences with getting books published, experimenting with code and math for the last two decades, and his time spent working in physical mediums like woodworking and blacksmithing. ",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/4d753431-9b5e-4ede-8675-f28cb9306ae0/3737ee32_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/4d753431-9b5e-4ede-8675-f28cb9306ae0/1538717402artwork.jpg",
    "simplecast_uid": "4d753431-9b5e-4ede-8675-f28cb9306ae0",
    "transcript": "<p><strong>John Lindquist:</strong>     My guest today is Keith Peters, you may know him as bit101. If you Google Bit-101, you'll find all of his stuff. He's written nine books that I could find on Amazon. Maybe more?</p><p><strong>Keith Peters:</strong>       Yeah. I think it's probably up around 15, but sure.</p><p><strong>John Lindquist:</strong>     15, yeah. Which blows my mind. I've made it through one chapter of my own book and then gave up. So, 15 books, yeah.</p><p><strong>John Lindquist:</strong>     He created Gif Loop Coder, has a video series on coding math on YouTube. He's created lessons with us on Egghead, and has created many wonderful experiments throughout the years.</p><p><strong>John Lindquist:</strong>     So, Keith, thanks for being here.</p><p><strong>Keith Peters:</strong>       Yeah, thanks for having me.</p><p><strong>John Lindquist:</strong>     I just have to throw out my opening question, what is a multi-trochoid?</p><p><strong>Keith Peters:</strong>       Yeah, I guess I had mentioned that on Twitter the other day. A trochoid is basically if you take a circle and roll it around something and, well, you've played with a Spirograph before, right?</p><p><strong>John Lindquist:</strong>     Yeah, yeah, yeah.</p><p><strong>Keith Peters:</strong>       That's basically a trochoid. You take a circle and roll it around another circle and trace the path it makes and you get all these kind of weird spirals. And then you have to insert the other circle. It can be inside the larger circle or outside. So you get epitrochoids, your hypotrochoids and you could have circles around circles, around circles. That'd be a multi-trochoid.</p><p><strong>John Lindquist:</strong>     Yeah, the shapes you make on those little videos you post, they look incredible. They're just fun to sit there and watch.</p><p><strong>Keith Peters:</strong>       Yeah. Yeah I'm hoping on making a interactive version soon.</p><p><strong>John Lindquist:</strong>     Oh, cool.</p><p><strong>Keith Peters:</strong>       Where you can actually program it and change the sizes, and speeds and shapes and stuff.</p><p><strong>John Lindquist:</strong>     Did you see a real-world machine that inspired you to do that? Or did it just come, where'd you get the idea?</p><p><strong>Keith Peters:</strong>       Back in the early Flash days, there was a site called soda play. Soda, like, soda pop. And it basically had stuff like that that you could hook up these various engines. I forget what exactly it did. But it left an impression. I've always wanted to do something like that. And it just kind of came out in the last couple of weeks.</p><p><strong>John Lindquist:</strong>     I couldn't quite piece together, I saw you were talking about porting it to a Java Script, or are you working with this stuff in Go? Or Java Script?</p><p><strong>Keith Peters:</strong>       Yeah. I'd originally written it in Go, Go language, using Kyrographics, which is a 2D drawing API C library that you can link to from Go. And just using that to make the series of still images that I would convert into an animated gif. I realize it'd be a lot funner if it were an interactive piece on the web. So, I poured it all over to Java Script.</p><p><strong>John Lindquist:</strong>     Are you working with Go in your day-to-day job? What part about the [crosstalk 00:03:09]-?</p><p><strong>Keith Peters:</strong>       No. We're not working at Go on my job. As you know, I got started back in the late '90s in Flash, had a nice, long run on that. When Flash kind of went it's way, I switched over to Java Script for the most part, Canvas, HTML5. Done that for quite a few years. And I was just looking for something different. When you're creating graphics and animations in Java Script, it's great if you want them to be like, live on the web, interactive kind of things. But if you want to save them as images or animations, you get the whole browser you're working through and it can be a big pain in the neck. So I was looking for other languages that you could compile and run stuff locally on your machine. It could save a file directly to the machine. It could run other tools if it needs to do that.</p><p><strong>John Lindquist:</strong>     Got you.</p><p><strong>Keith Peters:</strong>       I played with Rust a little bit. I played with Python. And then I got into Go and just really started liking it.</p><p><strong>John Lindquist:</strong>     Cool.</p><p><strong>John Lindquist:</strong>     You mentioned that you started in the late '90s. Now, if I had to guess, I'd say you're probably the person who has the most experiments on the web, in the world. I tried to look back through the history of BIT-101 and I think it went back 17 years or something. For a long time you were doing daily little experiments, and balls bouncing around in physics, and triangles spinning. And I think we've all been through the arrow phase, when arrows would follow things or whatever.</p><p><strong>Keith Peters:</strong>       Mouse chasers.</p><p><strong>John Lindquist:</strong>     Yeah. Mouse chasers, and on and on and on.</p><p><strong>John Lindquist:</strong>     How do you keep coming up with all these ideas? How do you keep that kind of passion alive to keep on experimenting? I think there's quite a few people like myself who used to play and kind of lost the drive or motivation to play and have a humdrum, doldrum life now. I don't know.</p><p><strong>Keith Peters:</strong>       Yeah. I definitely have had slumps throughout the years. Particularly, like I said, when Flash ended and I switched over to Java Script, and was doing things in Canvas. And then, I realized that everything I was doing, I was just recreating stuff that I had done in Flash years ago, and kind of went through a slump from that for a while. But, I'm always looking at other people's work. A lot of what I do, too, is I just kind of troll Wikipedia, or Wolfram, the math site, and you know, look at different formulas, and shapes, and curves and stuff. And you say, \"Wow. That looks really cool. I wonder if I could implement that formula in code\". And then, usually it's pretty doable.</p><p><strong>Keith Peters:</strong>       A lot of it's like combining different techniques for me. You know, you have a Perlin noise flow or something, and then ... Okay, well everyone is done drawing a bunch of lines based on the Perlin noise flows. That's kind of boring, or circle packing. So there's all these canned techniques. But if you start taking a little bit of this and combining with a little bit of that, you wind up doing something that maybe nobody else has ever done before. The results can be really surprising. Sometimes that just kicks off a whole chain of ideas that keeps me going for a few weeks.</p><p><strong>John Lindquist:</strong>     It's funny how concepts like even sine and cosine are boring. But once you start moving a dot along it and it's animated, and things start spinning along it, you're like, \"Hey, this is visually interesting, and even educational sometimes\".</p><p><strong>John Lindquist:</strong>     So, you mentioned there's a few people out there who you follow. Is there anyone you can recommend?</p><p><strong>Keith Peters:</strong>       I don't know. I have a list. I started using Twitter lists, and I have this generative art list that I use. I don't even know how to say some of the names. But, Matt Des ... something.</p><p><strong>John Lindquist:</strong>     Do you know the name of the list, by chance?</p><p><strong>Keith Peters:</strong>       I just call it Gen Art. It's my own list.</p><p><strong>John Lindquist:</strong>     Okay. So, under your account?</p><p><strong>Keith Peters:</strong>       I can give you a link later if you want to throw it up there.</p><p><strong>John Lindquist:</strong>     Yeah, cool. We'll put it in the ...</p><p><strong>Keith Peters:</strong>       You know, Mario Klingemann, Matt DesLauriers, that's who it is, bunch of other people, though.</p><p><strong>John Lindquist:</strong>     Yeah. And they're making careers out of some of this stuff, right?</p><p><strong>Keith Peters:</strong>       Yeah. I don't know. I've never gotten into it so deeply where I start doing shows and stuff like that.</p><p><strong>John Lindquist:</strong>     Right.</p><p><strong>John Lindquist:</strong>     Have you put stuff to music before, like some of these others have?</p><p><strong>Keith Peters:</strong>       A little bit. I've experimented with that. Nothing that I've really put out there, though.</p><p><strong>John Lindquist:</strong>     I see you sharing your work on Mastodon. Is that a fairly recent transition? I don't know whether that was over the fidelity or quality differences of what you could share?</p><p><strong>Keith Peters:</strong>       I don't know what happened. I guess something happened. There was like some kind of protest or quick Twitter day or something, a few weeks back.</p><p><strong>John Lindquist:</strong>     Oh, yeah, yeah, yeah. Right, right, right.</p><p><strong>Keith Peters:</strong>       I wasn't really aware of it, but I noticed suddenly, everyone started jumping back on the Mastodon wagon. Which, I had signed up for a year or two ago, or whatever, and forgotten about. But yeah, I kind of had a lot of people seemed to be more active on there. So I started checking that out as well. Yeah, they do better on the quality. If you post a gif on twitter, they compress the hell out of it.</p><p><strong>John Lindquist:</strong>     Right.</p><p><strong>John Lindquist:</strong>     I know you've been into knife making and woodworking. I know Joel has bought some of your knives before. Is that something you're still doing? Can you help us geeks who have hobbies of coding. We work and we do code, and our hobbies are code, how do we get into these other non-coding hobbies?</p><p><strong>Keith Peters:</strong>       Yeah. I'm not actively doing that, but I do have all the stuff. And I'm sure I'll get back into it at some point. Actually, the way that all started was, I wanted to make an arcade machine ... you know, like the old retro arcades, and I had no idea how to do that so I started learning some woodworking stuff. And I bought some power tools and stuff, and wasn't really feeling that. Then I learned about hand tool woodworking which is just like hand planes and hand saws, no electricity or anything and that really intrigued me.</p><p><strong>Keith Peters:</strong>       So I started buying all these old tools off flea markets and Ebay and stuff like that. It's really cool, collecting these things and restoring them. One of the pieces, I needed a little metal blade on this particular plane that was missing. So, I realized that I could buy a piece of steel and grind it, file it into the right shape. And then, I learned how to harden it by heating it up and then quenching it. And that was pretty cool. Then I said, \"Wow. These are all the steps you need to make a knife\". I bought a couple books, learned how to make knives, and did that for a year, year and a half. That was really fun.</p><p><strong>John Lindquist:</strong>     That's fascinating.</p><p><strong>Keith Peters:</strong>       Then I got into blacksmithing for a little while. I took some courses on that. That was a blast.</p><p><strong>John Lindquist:</strong>     Did you make any swords, or morning stars? What did you ...?</p><p><strong>Keith Peters:</strong>       No. That was just for decorative stuff. I think one of the coolest things I made was these bottle openers. It's a dragon, his mouth is the bottle opener. Those were really fun to make and they look cool.</p><p><strong>John Lindquist:</strong>     Oh, cool.</p><p><strong>Keith Peters:</strong>       I made a bunch of them and gave them away as Christmas gifts a couple years ago.</p><p><strong>John Lindquist:</strong>     Did you ever get around to that arcade, finishing that?</p><p><strong>Keith Peters:</strong>       I never did. It sits unfulfilled.</p><p><strong>John Lindquist:</strong>     Yeah. I guess it's job was to inspire you to do something different.</p><p><strong>Keith Peters:</strong>       Exactly.</p><p><strong>John Lindquist:</strong>     Kind of like, I went to college for an English degree and that inspired me to not do that.</p><p><strong>John Lindquist:</strong>     Have you found any crossover between working with your hands and building things, and building things in code?</p><p><strong>Keith Peters:</strong>       Oh, totally, yeah. It's something I thought about a lot. Just learning skills and the realization that anything is basically learnable. Everything's a technology, like cutting a piece of wood, or shaping a piece of wood, or shaping a piece of metal. People have figured out how to do that and there's a technology for that. And you can learn that, and you can do it. The same way with code, if you want to build something, people have figured out how to build particular things in these, our design patterns or our libraries, and stuff like that. People know how to do this, and you can learn how to do that.</p><p><strong>Keith Peters:</strong>       The one thing I think that's really different, I think the starkest different is, when you're working physical materials is no undo button, or version control. If you screw something up, or cut too much off, or whatever, you got to start over.</p><p><strong>John Lindquist:</strong>     I could definitely use an undo button in the kitchen. A lot of coders I know, they talk about how cooking is a therapeutic thing for them. But I get in there, it just stresses me out. Because I know I can't undo it.</p><p><strong>John Lindquist:</strong>     Anything else you're working on right now that we should look forward to?</p><p><strong>Keith Peters:</strong>       I've got two, at least a couple books that I'm thinking about doing.</p><p><strong>John Lindquist:</strong>     Oh, really?</p><p><strong>Keith Peters:</strong>       Yeah. A few years ago, I self-published a book on coding fractals, and strange attractors, and stuff, in Java Script.</p><p><strong>John Lindquist:</strong>     Where can someone buy that if they're interested?</p><p><strong>Keith Peters:</strong>       It's on Amazon. It's called, Playing With Chaos. It's a Amazon Kindle book, but it's also on Gumroad.</p><p><strong>John Lindquist:</strong>     Yeah.</p><p><strong>Keith Peters:</strong>       If you buy it on Gumroad, you get three versions, DRM-free. I think it's cheaper too, so that's what I would go for. Also, the website actually has all this, playingwithchaos.net .</p><p><strong>John Lindquist:</strong>     Okay. Cool.</p><p><strong>Keith Peters:</strong>       But I had some other ideas for doing curves. Actually, getting back to the trochoids, bringing it back full circle, as it were. There's all these ...</p><p><strong>John Lindquist:</strong>     You can't just drop that level of pun and keep going.</p><p><strong>Keith Peters:</strong>       Sorry.</p><p><strong>John Lindquist:</strong>     That was incredible. I am bowing down right now to that pun.</p><p><strong>Keith Peters:</strong>       I did not intend that.</p><p><strong>John Lindquist:</strong>     That was, wow. I am like, reeling here. That was amazing.</p><p><strong>Keith Peters:</strong>       I thought that was good. Sometimes the universe just works out.</p><p><strong>Keith Peters:</strong>       Anyway, there's all these different curves and spirals, and sine waves. I just started cataloging all these cool curves you can create with code. There's a whole bunch and they're really fun to code. I probably started this project about four times. So maybe someday I'll actually get a book out the door on it.</p><p><strong>John Lindquist:</strong>     Do you have any advice for someone who's looking to write a book? You have the experience, I know. Many people have tried, and few have succeeded.</p><p><strong>Keith Peters:</strong>       Yeah. A little while ago I would have said self-publishing is the way to go. When I first started writing, that wasn't a real option. You really needed a publisher to get your stuff out there. And now with E-books, and Kindle, and everything else, so many different publishing platforms, the business of self-publishing is really easy. But actually getting a book done by yourself, with no one emailing you every other day saying, \"Where's chapter three? You're late\", that's really hard. And plus, you get the editor, and the copy reviews, and the code reviews, and the art work, and the layout and all that stuff.</p><p><strong>Keith Peters:</strong>       So, if you can get a publisher to work with you ... People like to complain about publishers, but they do provide a lot, the marketing and all that, getting it out there, pushing it and getting the sales.</p><p><strong>John Lindquist:</strong>     So is that the key? Take the advance, and then you got the pressure?</p><p><strong>Keith Peters:</strong>       Yeah. Exactly.</p><p><strong>Keith Peters:</strong>       I mean, you know, if you think you can do it and you're willing to wear all those hats, self-publishing is great, as well. But, I wouldn't throw away the publisher idea because publishers are evil or something. They actually provide a lot of value.</p><p><strong>John Lindquist:</strong>     Right. Yeah, I have a few friends who want to work on their own projects and they hire a coach, for lack of a better term. And that coach tells them what they already know, but they give them that pressure. Like, \"I'm paying this person to make me do things\". I'm like, \"I guess that makes sense\".</p><p><strong>Keith Peters:</strong>       Yeah. Now, Playing With Chaos book, I did hire a copy editor just to double check. I think my grammar's pretty good. So I hired a person and she went through, fair amount of stuff that I wouldn't have caught. So it was worth it.</p><p><strong>John Lindquist:</strong>     Cool.</p><p><strong>John Lindquist:</strong>     All right. Well, I think we can wrap it up there. That was a wonderful conversation.</p><p><strong>Keith Peters:</strong>       Great.</p><p><strong>John Lindquist:</strong>     Thanks for your time today, Keith.</p>",
    "slug": "learning-and-experimenting-with-physical-and-digital-mediums-with-keith-peters",
    "description": "<p>Keith Peters joins us today to talk about his experiences with experimenting with code and math, the transition from Flash to Go, woodworking and blacksmithing, and getting books published.</p><p>Keith talks to us a bit about multi trochoids; they're what happens when you take a circle and roll it around something, like a spirograph. He was inspired to do this project by Sodaplay, a site back in the flash days that had stuff you could hook up to various engines.</p><p>What language did Keith use to write his multi trochoid experiments? Initially, Keith wrote it in Go, but he wanted to put it out on the web and make it interactive, so he ported it to Javascript.</p><p>Back in the 90s Keith worked with Flash, when Flash left he moved over to Javascript and using the html5 canvas. Javascript is great if you want it live on the web but for still images and animations it was a pain in the neck, so Keith tried out Rust, Python, and finally settling on Go.</p><p>Keith is into some non-coding hobbies like woodworking and knife making, Joel has even bought some of his knives. It started when Keith wanted to build an arcade cabinet, he bought tools and got into learning how to use them. Keith has found a lot of crossover with working with his hands and building things with code, both of them can be boiled down to learning a technology to create things and solve problems.</p><p>Finally, Keith explains the pros and cons of going through a publisher to get your book out. He says that self-publishing is easier than ever, but a publisher provides you with a lot of assistance with editing, marketing, artwork, and a healthy dose of pressure.</p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/3737ee32/transcript\">\"Learning and Experimenting with Physical and Digital Mediums with Keith Peters\" Transcript</a></p><h3>Resources:</h3><ul><li><a href=\"https://bit101.github.io/lab/dailies/170117.html\">Trochoid Experiments</a></li><li><a href=\"http://www.playingwithchaos.net/\">playingwithchaos.net</a></li></ul><h3>Keith Peters:</h3><ul><li><a href=\"https://twitter.com/bit101\">Twitter</a></li><li><a href=\"https://github.com/bit101\">Github</a></li><li><a href=\"https://www.bit-101.com/blog/\">Website</a></li></ul><h3>John Lindquist:</h3><ul><li><a href=\"https://twitter.com/johnlindquist?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor\">Twitter</a></li><li><a href=\"https://johnlindquist.com/\">Website</a></li></ul>",
    "duration": 996,
    "episode_number": 27,
    "contributors": [
      "John Lindquist"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/3w2xp",
    "path": "/podcasts/learning-and-experimenting-with-physical-and-digital-mediums-with-keith-peters",
    "published_at": "October 5th, 2018",
    "url": "https://egghead.io/api/v1/podcasts/learning-and-experimenting-with-physical-and-digital-mediums-with-keith-peters",
    "edit_podcast_url": "https://egghead.io/podcasts/learning-and-experimenting-with-physical-and-digital-mediums-with-keith-peters/edit"
  },
  {
    "id": "podcasts-00000000000000000071",
    "title": "Success and Failure in the Interview Process with Dave Smith",
    "summary": "Dave Smith is on the Alexa Team at Amazon. \r\nTune in today to hear about interviewing skills, what Dave looks for in candidates, and some obvious things to avoid when interviewing.",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/26307329-8f05-47c9-834b-58d7aed1be23/38ee6ad6_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/26307329-8f05-47c9-834b-58d7aed1be23/1537563178artwork.jpg",
    "simplecast_uid": "26307329-8f05-47c9-834b-58d7aed1be23",
    "transcript": "<p><strong>John Lindquist:</strong>     My guest today is Dave Smith, he is on the Alexa team at Amazon, he runs the Soft Skills Podcast with Jamison Dance which you can check out. Where's the best place to find it? I found it on iTunes, is that your preferred method?</p><p><strong>Dave Smith:</strong>         Yeah, if you search any podcasting app for Soft Skills we usually come up pretty close to the top. The full name of the show is Soft Skills Engineering.</p><p><strong>John Lindquist:</strong>     And also he runs the UtahJS conference which is happening in a few days or will have happened in the past, since this will probably be published afterwards.</p><p><strong>Dave Smith:</strong>         Yes, I think it'll be happening in negative 10 days or so from now if you're hearing this.</p><p><strong>John Lindquist:</strong>     It was a wild success.</p><p><strong>Dave Smith:</strong>         It was so great!</p><p><strong>John Lindquist:</strong>     Everything was amazing. Best conference ever.</p><p><strong>Dave Smith:</strong>         It's the best conference I have ever yet to attend.</p><p><strong>John Lindquist:</strong>     Alright, so I asked Dave to come on and talking about interviewing, and he tweeted recently an interview question which I wanted to talk about. He asked the general Twitterverse, on a scale of 1-10, where a 1 is easy and 10 is hard, how would you rate the task of writing a function that iterates through a list of strings and returns the top 10 most frequent strings in the list?</p><p><strong>John Lindquist:</strong>     So, just a question to you, what made you ask that question? And what did you think of some of the responses you got?</p><p><strong>Dave Smith:</strong>         So the main reason I asked that question was 'case I was in job interview and someone asked me that, and I just quickly wanted to get an answer. Just kidding.</p><p><strong>John Lindquist:</strong>     No, I mean in Canada. Get it? Yeah, pull your phone out and ... outsource your interview, it's great.</p><p><strong>Dave Smith:</strong>         Yeah, I'm like, hold on. I'll tell you in just a minute. And Twitter did not disappoint, I got some great some great submissions.</p><p><strong>John Lindquist:</strong>     I have to run to the restroom. One sec.</p><p><strong>Dave Smith:</strong>         Don't forget that's a good technique though, really.</p><p><strong>John Lindquist:</strong>     Yeah. Really is.</p><p><strong>Dave Smith:</strong>         Bathroom inspiration. What inspired it was ... this question is in the spirit of questions that I like to ask when I'm interviewing candidates. I've been interviewing candidates for probably about 15 years for software engineering positions and it seems like every once in a while you get a string of candidates, they really struggle to answer the question. I start to question, are my questions too hard? This happened recently so I pose it out there and I don't know, I was really surprised by what people said as their answer.</p><p><strong>John Lindquist:</strong>     What was your thoughts on it before you got feedback?</p><p><strong>Dave Smith:</strong>         Well, this is the kind of question that can be as easy or as hard as you want. And that's one of the things that I really like about it is that a candidate who is just starting out, they should be able to answer this question. But there's really like three or four answers depending on whether you wanna go for a really fast runtime or if you wanna just whip it out in a couple of lines of code which you can do in some languages. And do I like that you can go in a lot of directions with it, and what I also like is every level of candidate can be successful with this question. They can achieve some degree of success and actually get a working solution. And then there's always more room to dig, I can say, well what about this, what about that, and we can take the question in new directions. But usually most candidates can achieve a baseline solution.</p><p><strong>John Lindquist:</strong>     So, would you have ranked it where like a 5 or something, before you asked the Twitterverse?</p><p><strong>Dave Smith:</strong>         I don't think I could say because I've seen this question hundreds of times now, so at this point my baseline is just completely off. I would hope that a trivial solution to this problem, people would consider it a 2 or a 3 on the hardness scale. You could probably take it up to 6, 7, or 8, depending on what direction you wanna go with the problem.</p><p><strong>John Lindquist:</strong>     So, what about some of the responses? I think it's funny when you throw a question like that out there how your first intuition ... I feel like I need to solve this rather than give you what you're looking for. I need to prove to you that I can solve this and code golf with it and see how short I can make it or whatever.</p><p><strong>Dave Smith:</strong>         We did get some of those.</p><p><strong>John Lindquist:</strong>     Right. And I saw some of those and I was tempted myself to throw out an answer, then I realized I have other actual work to do. Anyway, so what did you think of some of the feedback? Were you surprised by what people said?</p><p><strong>Dave Smith:</strong>         First of all, I did not come right out and say, this is in the context of an interview when I tweeted. I just wanted to know, here's a problem. I think most people have solved a problem like this. I just wanted to know, how hard do people consider this? And some people just gave an answer, a lot of people said 2, maybe 3, maybe 4. Nobody really went over 5. And then some people started saying, now wait a minute, am I in a job interview? And I'm like, well let's say you are, and they were like, it's a 10. I was like, well, that changes everything for people.</p><p><strong>John Lindquist:</strong>     On the spot pressure.</p><p><strong>Dave Smith:</strong>         Yeah, there's pressure. And I said what if you're standing at a whiteboard, you have no reference material and you have a grumpy looking interviewer across the desk. And everyone is like, oh, instant 10. So that changes it a lot. And I think what's really-</p><p><strong>John Lindquist:</strong>     If there's only 10 strings in the list, I could do that one.</p><p><strong>Dave Smith:</strong>         You could do it by hand, right?</p><p><strong>John Lindquist:</strong>     Yeah.</p><p><strong>Dave Smith:</strong>         Just ask, what are the strings? I'll just do it right here on the whiteboard.</p><p><strong>John Lindquist:</strong>     I got this. Step back.</p><p><strong>Dave Smith:</strong>         What I think surprised me the most is that people said outside of an interview context, people said 2, 3, or 4. So lower 50% of the scale. And then inside of an interview context, people said 6-10. The upper end of the scale. So I think that just goes to show that you can take a simple problem and introduce some of these external factors, like anxiety over an interview, pressure, take away your tools, and suddenly a simple problem becomes not so easy.</p><p><strong>John Lindquist:</strong>     Right. I was surprised to how, one, I thought some of the solutions people went for were pretty interesting. But also do I want to be performance? Like you mentioned, the imperative vs. using every single array method out there. It's a very simple problem with, like you said, a billion solutions. And I think if you don't what know the interviewer is looking for, like are they looking for me to do this? Sometimes I think the whole interview process can be uncomfortable. So trying to-</p><p><strong>Dave Smith:</strong>         Oh, you think? Just a little but uncomfortable?</p><p><strong>John Lindquist:</strong>     Just guessing, I don't know.</p><p><strong>Dave Smith:</strong>         I know, it's awful.</p><p><strong>John Lindquist:</strong>     Do you have a memorable interview where someone just kinda broke down trying to answer a problem like this?</p><p><strong>Dave Smith:</strong>         No, because I would never put someone in a situation where they would feel so much pressure that that would happen. In fact, whenever I ask a candidate an interview question, especially one that has a solution involving writing code together, I always couch it as look, I'm not gonna sit back here and just spectate while you produce some wonderful code. No, this is actually a vehicle for discussion so what I'd rather do is talk through some different options and what the trade-offs are before we do anything. And then I say by the end of our time here, I want to have some code written with you, but right now I just wanna focus on discussing what are some of the options and the pros and cons of those options. And that sets the tone that look, this is not gonna be like a anxiety, well there's still gonna be anxiety, there's just a base level of anxiety for every interview. But it's not gonna be over the top, where I just sit here and break your spirits while you try to write on the whiteboard.</p><p><strong>John Lindquist:</strong>     Yeah, I guess if you wanted to make it worse you could solve the problem and put something wrong in there and correct my answer.</p><p><strong>Dave Smith:</strong>         Find the bug.</p><p><strong>John Lindquist:</strong>     Yeah, find the bug. Tell me why I'm dumb.</p><p><strong>Dave Smith:</strong>         I've hidden a bug deeply inside.</p><p><strong>John Lindquist:</strong>     That'd be amazing.</p><p><strong>Dave Smith:</strong>         You can find a map to the bug on the back of the Declaration of Independence.</p><p><strong>John Lindquist:</strong>     Just watched that movie with my kids. Their first exposure to Nick Cage, it was wonderful.</p><p><strong>Dave Smith:</strong>         Oh yeah, great. At least it wasn't Raising Arizona.</p><p><strong>John Lindquist:</strong>     True. So in the interviews you've given, you actually wrote a wonderful blog post or medium post, whatever they're called these days. I think it was a few years back, about the interview process, questions for engineers, and how a developer could potentially interview the company that they are looking to work for. And you asked them to say, are you profitable? Do you have continuous integration? What do you think of unit testing? Those sorts of things. Do you see the candidate come in and ask those sorts of questions? Is that something you ever see?</p><p><strong>Dave Smith:</strong>         It's extremely rare. I think it's very rare, not only do candidates not tend do ask questions like that, but I think most interview setups these days that I've participated in, they don't really allow for that. They're set up to extract information from the candidate, and then invariably the interviewer will say, I'll give you five minutes at the end. And then of course, you never use those five minutes because you go over time or whatever. SO it's pretty rare. I think the smaller the company, the more likely it is that you can have those kinds of conversations.</p><p><strong>John Lindquist:</strong>     Can you remember the best candidate interview you've ever had where someone just came in and just blew you away? Was it personality, or was it the technical skills? Was there some sort of interview that stands out to you as, wow that was incredible we should hire them on the spot?</p><p><strong>Dave Smith:</strong>         Oh yeah, yeah.</p><p><strong>John Lindquist:</strong>     Or at least some trends or some things you've noticed, some more advice?</p><p><strong>Dave Smith:</strong>         Well, I can't really give advice on this because I don't know what makes these candidates the way they are but I definitely could think of a few situtations where candidates come and it's just so good. And maybe three times in my career of interviewing, I've probably interviewed five hundred candidates. Maybe three for four times, I've has candidates come in and I feel so good about the interview that I'm like yeah, we should definitely make this person an offer right away. And then they actually turn out to also be awesome on the job. And in those times, I think what impresses me the most is how effortlessly they're able to answer my questions and how it's almost like second nature to them.</p><p><strong>Dave Smith:</strong>         And I don't just mean like programming puzzles, But I'll be like, tell me something about your project you're working on and they go into it and I dive into it with them and start asking questions that I think are hard, and they just have the answers right away. They're ready to go. They clearly demonstrate they were at the front of this project and not just trying to stay afloat. And I think what impresses me the most, and I haven't really been introspective about this, so I haven't thought about this much but-</p><p><strong>John Lindquist:</strong>     Well here's your moment.</p><p><strong>Dave Smith:</strong>         I know, live. I think what impresses me the most is how calm and collected and effortless they make the whole thing look. And as I say that out loud I think that's probably a false metric to use because what that means is that people who are naturally nervous, and expectedly so, are disadvantaged in my mind. So maybe I need to rid myself of that.</p><p><strong>John Lindquist:</strong>     Yeah. I guess it kind of is a skill that you can learn, you can read the How to Win Friends and Influence People, or something. But the confidence in the conversationalist, that's a hard skill to acquire.</p><p><strong>Dave Smith:</strong>         It's not so much that they're good at conversing, it's that when I ask them questions that I think are gonna be hard, it feels like the answer is just effortless to them to give. And it's not so much that they're good at small talk, or good at asking good questions of me. It's just more like when I say here's a problem, how would you solve it? They say well there's three ways to do it, this way will have these results, this way will have these results, and I'm like oh, yeah, that's all I had. You went as deep as I could have gone.</p><p><strong>John Lindquist:</strong>     Those are the exact things we work on here. I think that's what I've liked in interviews, is when I get a chance to talk about something I'm working on. It's something I'm actually passionate about instead of something that the interviewer wants. Instead of digging into questions for me, trying to extract information from me. Just asking me about something that I'm working on, let's talk about ... 'cause I love programming, I love to talk about it, but I would get super nervous in a lot of the situations as well.</p><p><strong>Dave Smith:</strong>         I'll give you an example, I had a candidate come in and I asked him about a project he had been working on at his company and it was a distributed system that involved work cues and this worker code that would pull jobs off of a cue and preform tasks, I think it involved video or something or audio normalization. I can't remember the details, but I said what were some of the challenges you bumped up against? And he was very clearly able to articulate some of the bottlenecks they had and how it impacted their customers. And then he was able to talk through the solution that he designed to fix the problem, and it was not a trivial problem.</p><p><strong>Dave Smith:</strong>         It was even the kind of situation that I think he had inherited the system, he understood it fully, understood the impact to his customers, and was able to propose and then lead a team to build a corrected solution that would actually not have any of those issues and then was able to discuss empirically the impact to his customers. And I was like wow, this is exactly the kind of engineer I wanna work with. He was not blind sighted, I guess he kind of was because he inherited this problem. But he was able to understand all the details, the full breath of the problem, and solve it. And it was not trivial problem. And then on top of all of that, he was able to articulate clearly to me what the problem was and what his solution was. And I was just super, super impressed with that.</p><p><strong>John Lindquist:</strong>     Yeah, that's almost accredit to his previous team and managers it sounds like. That if he knew the impact he was having on clients, that there was a good communication going on there. He came from a good working environment.</p><p><strong>Dave Smith:</strong>         That's a good point, yeah. Some of that I guess he couldn't really take credit for. But I have him credit anyway.</p><p><strong>John Lindquist:</strong>     To his credit, he was paying attention and taking notes and listening. A lot of ... I don't know how to put that delicately, but a lot of developers don't pay too much attention to the non-text side of software development. They can kind of tune out during meetings, and turn out during client talks. They just wanna focus on the problem, solve puzzles.</p><p><strong>Dave Smith:</strong>         Yeah, sure.</p><p><strong>John Lindquist:</strong>     So, do you have any stories you could share or of something to avoid?</p><p><strong>Dave Smith:</strong>         Like in a interview context?</p><p><strong>John Lindquist:</strong>     In a interview context? Yeah. Obviously don't name any names.</p><p><strong>Dave Smith:</strong>         Let's see ... I think refusing to answer a question is a really big red flag. If someone asks you a question, obviously there are appropriate times to refuse to answer a question. If an interviewer crosses a line and is harassing you and asking questions, then of course you don't have to answer those. But if an interviewer says something like, tell me about something that was challenging, and you're like, can't think of anything that was challenging. It's like, okay this interviewer is trying to get a data point, and you're saying I'm not gonna give a data point. And this happens, it doesn't happen every candidate but probably 1 out of 50 candidates will just be kind of unwilling to share. And even if you don't have an answer to a question, you can at least ask follow-up questions and try to explore what it is the interview is looking for to try to get what they're going after. But if you just kind of put up a front and say nope, I got nothing. I think that's a big red flag.</p><p><strong>John Lindquist:</strong>     Yeah, I think the candidate needs to have a bit of humility going in knowing that yes, they are trying to pry into your development life, and they do need to know if you have the skills to work there and know the onus is not on them to research you before you get there. They shouldn't have to contact your previous coworkers and go through all the effort. You're there to present yourself, and you're there to win them over. So present yourself in the best light. If I can throw in a personal story, the best job interview I ever had went along the lines of when I wanted to be a developer advocate with JetBrains. I sent a letter to one of their managers. A letter, an email ... Letters ...</p><p><strong>Dave Smith:</strong>         Priority mail, stamped.</p><p><strong>John Lindquist:</strong>     Yeah [inaudible 00:16:02] email. So, I sent an email to one of their managers explaining to him why I would be a good fit, how much I love their product, and why I think they needed me as a developer advocate even though there wasn't a job position there. I just loved their service that much, I just love JetBrains tools that much. And they brought me in for an interview that way, and they made the job for me.</p><p><strong>Dave Smith:</strong>         Oh, really?</p><p><strong>John Lindquist:</strong>     I know that's atypical, of course. But if you really, truly love some sort of open source project or some tool you have to pay for, what ever it is, feel free to contact someone. Put yourself out there and take that risk. I had a job when I sent that email out there I'm like hey, might as well. I'd love to work with these people. I might was well shoot them an email.</p><p><strong>Dave Smith:</strong>         What was the outcome of the interview? You got the job, I'm assuming.</p><p><strong>John Lindquist:</strong>     Yeah, I got the job and I worked with JetBrains for a few years before starting before starting [ACA 00:16:57]</p><p><strong>Dave Smith:</strong>         And was there anything about the interview experience that made it really positive for you once you actually got there and talked to them?</p><p><strong>John Lindquist:</strong>     Well, it was still all remote. So it was still phone calls and emails, but other than that it was defining what my job would be, which is probably the best position you could be in. As you advance in your career, I think 10+ years into your career you get a bit more power in your own job, defining what your job is. And you go into an interview and say, I want to work on this, I know you guys have these sorts of problems, I'd like to work on solving these. This is what interests me. This is where my expertise is, This is what I want to study. I think you do experience kinda gives you the power there, that's a personal opinion but I think you kind of earn your ... what do you call that, earn your wings? Earn your ...</p><p><strong>Dave Smith:</strong>         Your stripes?</p><p><strong>John Lindquist:</strong>     I don't know. Stripes, stripes. There it is. I think it's an army thing. Earn your stripes.</p><p><strong>Dave Smith:</strong>         So I thought of another experience that was not exactly in an interview, but it was a mock interview that you might find interesting.</p><p><strong>John Lindquist:</strong>     Yeah, please share.</p><p><strong>Dave Smith:</strong>         So I taught a class, an interview prep class for a software engineering student a few years ago. And these are people who were experienced folks from other profession who were crossing over into software engineering. And in order to prepare them for the interview process, I decided that in front of the class I would have individual students come up, and I would interview them right in front of the class. And the reason I set it up that way was to put a little bit of pressure on them so they could feel what it feels like to respond in an interview with that kind of pressure. So one student volunteered, came up, sat down.</p><p><strong>Dave Smith:</strong>         I started asking a question and one of the questions I asked was a basic JavaScript question about what is a closure, and the candidate starts answering, and kind of rattles on for about a minute. And after about a minute, I could tell he did not know the answer to this question. But he kept talking, so I said I'm gonna stop you right there and I turned to him and I said okay, do you know the answer to this question? And he says no, I don't know. And I said okay, what ever you do in a real interview, don't make up answers to questions that you don't know the answer to.</p><p><strong>John Lindquist:</strong>     That's wonderful advice</p><p><strong>Dave Smith:</strong>         Yeah, don't make it up. I'm like, people will see through it instantly. I said you can talk about how to find answers to questions and the process you use, and how you've found answers to previous hard questions and [inaudible 00:19:19] but don't make them up. And he goes okay, and I said alright, let's resume the interview. So I asked him another question, and again he starts making up an answer. And I stopped him a little bit quicker this time and I said okay, are you making up this answer? And he said yes, and he buried his head in his hands. I said I really don't recommend you do this for the reasons I have him a minute ago and then he looks up and he goes, I'm so sorry ... my old career was in public relations. And we all just laughed so hard and he goes look, in PR you always have an answer. And I'm like oh, man you're gonna have to unlearn that, buddy.</p><p><strong>John Lindquist:</strong>     Wow. I'm sure that happens, anyway. You feel that pressure and I have to at least take a stab at it. Maybe I'm right.</p><p><strong>Dave Smith:</strong>         Yeah but it's like, oh, man, what a gamble. Right? You're rolling the dice.</p><p><strong>John Lindquist:</strong>     Maybe it closures the last item of an array?</p><p><strong>Dave Smith:</strong>         It's the thing that closes the array.</p><p><strong>John Lindquist:</strong>     Right, yeah. Just say it with confidence.</p><p><strong>Dave Smith:</strong>         You imagine how many sides of a die that you're rolling when you do that. In the universe of possible answers to this question, there's probably a million, I'm just gonna pick one. Don't do it.</p><p><strong>John Lindquist:</strong>     Yeah, that's really good advice. I can't remember what the exact question was, it was about event bubbling, and I remember really struggling to communicate ... it was something about preventing events from bubbling to something. They wanted specific answer, and I remember kind of fumbling through it, I'm like I know what I know about this, is what I know about this what they wanna hear about this? So I said something which I think was English, and then everyone kind of looked at each other in the room like, was that good? They're like, we'll move on the text question.</p><p><strong>Dave Smith:</strong>         You're like oh, I got my answer.</p><p><strong>John Lindquist:</strong>     I should have asked them to rephrase the question, I should have said my understanding from this angle as this, there's million things I should have said to clarify or to dig into it, but instead I took that stab in the dark.</p><p><strong>Dave Smith:</strong>         And it stabbed you back.</p><p><strong>John Lindquist:</strong>     It stabbed me back. Yeah, that was an interview across multiple jobs so I got a different one before that one even got back to me. Everything turned out fine.</p><p><strong>Dave Smith:</strong>         Having said this, I'm not a fan of trivia questions during interviews, I don't think they tell you much about the candidate, like the value you get out of the answers they give is not that high. All you learn is whether or not they knew that one fact. I would rather explore their understanding through solving a problem together, which I think works a lot better. But when I find myself in a situation where I'm answering interview questions like that and I'm not quite sure what they're going after, the last thing that you wanna do is spend two minutes monologuing before you get any feedback from them to see if you're on the right track. Like what you just said, I'll usually ask, is this where you wanna go with this? Are you talking about this subject here? I wanna make sure I understand where you're going. Good interviewers will be happy to walk you down with guardrails down the path that they're looking to explore, and there's nothing worse than when you ask an interviewer that kind of follow up question or clarification question and they're like, I can't tell you. You're like, oh boy.</p><p><strong>John Lindquist:</strong>     Answer the question, please. Yes or no.</p><p><strong>Dave Smith:</strong>         That's the worst.</p><p><strong>John Lindquist:</strong>     Yeah, I really enjoy the ... What was the most disappointing thing that happened on a project? 'Cause I have a great story there, what's the proudest achievement I've had in development, I got a great story there. Those sorts of stories where it turns into the happy story time.</p><p><strong>Dave Smith:</strong>         It just makes it much more of a conversation. I love talking about big project thing I was working on and I had to rush and work late nights, I loved it so I was fine working the late nights on it to get it ready for the deadline, but then the client canceled it and didn't ship it anyway. I was so devastated, I love sharing that just because it's emotional baggage, I guess.</p><p><strong>John Lindquist:</strong>     You're like, I'm gonna use this as a therapy session. Frankly, I'm still processing this.</p><p><strong>Dave Smith:</strong>         That's what an interview should be. People should see my work.</p><p><strong>John Lindquist:</strong>     There's nothing worse than working really hard on something and getting it canceled.</p><p><strong>Dave Smith:</strong>         Oh, for sure. I suck at those questions where the interviewer is like, tell me about your proudest achievement. I'm just like ... tugging my collar a little bit, I don't know. It's hard for me, I don't know why. I should prepare but those are the kinds of things where I wake up the next morning in a cold sweat and I'm like, oh, I should have told them this!</p><p><strong>John Lindquist:</strong>     I wonder if you could give them like ... here's 10 potential questions, you pick five of them you want to answer.</p><p><strong>Dave Smith:</strong>         I've prepared the following list of answers.</p><p><strong>John Lindquist:</strong>     Alright, let's go ahead to wrap up, anything you wanna announce, anything you'd like to plug as far as the life of Dave Smith?</p><p><strong>Dave Smith:</strong>         Sure, come check us out at the Soft Skills Engineering podcast, I imagine some of your audience has probably heard of it.</p><p><strong>John Lindquist:</strong>     I'm they do.</p><p><strong>Dave Smith:</strong>         My co-host, Jamison Dance, incredibly wise. He is so thoughtful, and has so much good stuff to share. And I am a really good laugh track, so if you like that combination of wisdom and hearing me laugh in the background, then you should definitely check it out.</p><p><strong>John Lindquist:</strong>     I love his intros and then you just sit there and laugh.</p><p><strong>Dave Smith:</strong>         It's uncontrollable, I just ... it's ridiculous. It's easy to make me laugh and Jamison is really, really good at it, so it's kind of out of control. Anyway, go to our website at softskills.audio, you can subscribe there or you can fins us in pretty much any podcasting app if you just start searching \"Soft Skills\", it'll usually autocomplete. The full podcast name is Soft Skills Engineering.</p><p><strong>John Lindquist:</strong>     Sweet. Alright, great. Thanks Dave, have a wonderful day.</p>",
    "slug": "success-and-failure-in-the-interview-process-with-dave-smith",
    "description": "<p>Dave Smith is on the Alexa Team at Amazon, he hosts the Soft Skills Engineering podcast and headed up the recent Utah JS Conference.</p><p>Recently Dave asked on Twitter \"on a scale of 1 - 10 in difficulty how would you rate the task of writing a function that iterates over a list of strings and returns the top 10?\" This sparked up a lot of good, and most people rated it a 2-3 until people started asking \"wait, is this question in an interview context? In that case, it's a solid 10.\" Dave talks about how the external stresses of an interview can turn even a \"simple\" question into a very stressful and challenging experience.</p><p>The topic of interview \"red flags\" comes up, and Dave explains how the biggest one is refusing to answer a question. He says that even if you don't have an answer to something try to follow up with more questions and have humility, you are there to present yourself. Dave also says not to make up or guess at something if you don't know the answer, try to ask them to rephrase the question and give the angle of your own understanding.</p><p>Dave has his own excellent podcast with his co-host Jamison Dance called Soft Skills Engineering, check it out in the link below.</p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/38ee6ad6/transcript\">\"Success and Failure in the Interview Process with Dave Smith\" Transcript</a></p><h3>Resources:</h3><ul><li><a href=\"https://softskills.audio/\">Soft Skills Engineering Podcast</a></li><li><a href=\"https://conf.utahjs.com/\">Utah JS Conference</a></li></ul><h3>Dave Smith:</h3><ul><li><a href=\"https://www.linkedin.com/in/dave-smith-8895461/\">LinkedIn</a></li><li><a href=\"https://github.com/djsmith\">Github</a></li><li><a href=\"https://twitter.com/djsmith42\">Twitter</a></li><li><a href=\"https://medium.com/@djsmith42\">Medium</a></li></ul><h3>John Lindquist:</h3><ul><li><a href=\"https://twitter.com/johnlindquist?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor\">Twitter</a></li><li><a href=\"https://johnlindquist.com/\">Website</a></li></ul>",
    "duration": 1510,
    "episode_number": 26,
    "contributors": [
      "John Lindquist"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/21sgf",
    "path": "/podcasts/success-and-failure-in-the-interview-process-with-dave-smith",
    "published_at": "September 28th, 2018",
    "url": "https://egghead.io/api/v1/podcasts/success-and-failure-in-the-interview-process-with-dave-smith",
    "edit_podcast_url": "https://egghead.io/podcasts/success-and-failure-in-the-interview-process-with-dave-smith/edit"
  },
  {
    "id": "podcasts-00000000000000000070",
    "title": "Eve Porcello on GraphQL",
    "summary": "Eve Porcello joins us today to talk about speaking at conferences, GraphQL, starting a project to learn something with, and web-accessibility with the High Fives Foundation. ",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/0e28b303-5ae5-4c93-8f1a-95ccd885e8b7/a3df6162_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/0e28b303-5ae5-4c93-8f1a-95ccd885e8b7/1537472482artwork.jpg",
    "simplecast_uid": "0e28b303-5ae5-4c93-8f1a-95ccd885e8b7",
    "transcript": "<p><strong>Joel Hooks:</strong>         Hi, Eve.</p><p><strong>Eve Porcello:</strong>       Hey, Joel. What's up?</p><p><strong>Joel Hooks:</strong>         Oh, you know, just getting by. I saw one of your recent conference presentations. It was at ReactRally in 2018. It was actually amazing. I really enjoyed it and was thoroughly entertained. Frankly, blew my mind because I've given ... My presentations are boring, but yours was amazing and not boring.</p><p><strong>Eve Porcello:</strong>       I'm sure that's not true about yours, but thank you. I had a lot of fun doing that. Yeah, I think when I first put together that talk, I'd never really went to conferences before last year. When I did, I was watching the fluent keynotes. I was thinking like, \"Oh, this is a show.\" I understand what this is. I have a background in theater and sketch comedy and improv and stuff and I was like, \"I've done all these shows.\" I've been to a million shows. I've In a ton of bad shows. I've been in a ton of good ones. I just approached it from that angle, like theater techniques. I want people to learn something. I want them to have fun, but I also want them to remember it. That's why I was crashing scooters and doing that thing.</p><p><strong>Joel Hooks:</strong>         Well, I mean when you're live coding was amazing. You're typing and live coding on stage, which, by itself, is like it no small feat, but then you start audience participation. You actually have people come on stage with you, which, at that point, I'm just like ... The mind blowing, mean going in my head because not only was it informative, right? We're learning about GraphQL and we're seeing how it works in an amazing way on stage, with presence. What I'm thinking the whole time I'm watching this, I'm like, \"What's the process? How do you even start to come up with a presentation like that. We'll get into more technical stuff, but I really wanna chat with you about the like your conference talks and how you approach that sort of thing. Given your background in theater and improv and that sort of thing, what can we do? If we don't have that background, what are some approaches that you think people might take to give a presentation that engages the audience at that level?</p><p><strong>Eve Porcello:</strong>       Yeah, totally. I would say I had helped Alex, my husband and co worker. I plotted out what we wanted to cover. I knew we had 30 minutes. I wanted to just have ... My main goals were having people learn something, making something approachable. Then, we tried to figure out what to do for the live demo. I thought if we could use this idea of collaboration ... it started as something we have tried to do in our classes is like, how do we get people in this classroom environment, which is sometimes a little awkward to start interacting with other people. How do we get them to engage? That's where the idea of the demo came from. Then we just heightened that to the extreme of trying to host it over a free Heroku dyno and have all this stuff that could potentially go wrong. But it was a lot of work behind the scenes for. That's a workout.</p><p><strong>Eve Porcello:</strong>       Then I just practiced it a lot. I hesitated from doing that at the beginning. But two weeks out, I was just running through that thing over and over again. It was horrible many of the times. I was stressed out every day. It just came from a lot of preparation, boiling everything down to what I wanted to cover. Then just making sure that I was down to having the perfect notes about what I was supposed to cover in each minute. It was a lot.</p><p><strong>Joel Hooks:</strong>         You can tell. When I'm watching, you make it look easy on stage. The practice and preparation, and that sort of thing; that has a lot to do with that I would assume.</p><p><strong>Eve Porcello:</strong>       Yeah, totally. It does. I definitely had run through the live coding bit of it quite a bit. I think with live coding, there can be a tendency to overcomplicate things and to have hundreds of lines of code on the screen. You'll notice in that, that I never had more than like 20 in every file. Having less to look at, it made it such that there was a lot less room for error. If I had added on any complexity or had anything there that could have gotten in my way, then I would have started making mistakes. Keeping those files super small was critical to crashing and burning up there.</p><p><strong>Joel Hooks:</strong>         That reminds me of our videos on [inaudible 00:04:41], right? The idea is to keep it short. We want people to see the code. Once you have 200 lines of code, it's really you can't parse that visually, watch and understand what's going on. Especially if it's a new concept that you're literally trying to learn on the spot.</p><p><strong>Eve Porcello:</strong>       Yeah, absolutely. If I was just scrolling up and down, then people would feel like it's hard. They can't go do it. I thought if I do this and I have a simple example, then maybe some people pay attention in the audience, first of all, look up from slack. Then they'll think, \"Hey, maybe this weird person can do it so maybe I'll go work with Apollo server on Monday.\" Tat was the goal.</p><p><strong>Joel Hooks:</strong>         Yeah, you had because there's obviously there was also some pre-built stuff, right? You had, under the hood, some components and styles and all that stuff setup, which they're not germane to the topic at hand of demonstrating GraphQL and how that works. We jumped from nothing into a full demo of how it works. It really good though, Eve. I really, really enjoyed it a lot. It was about GraphQL. That's what this talk was about. You've just released a book with O'Reilly titled ... what's the ... Is it Learning GraphQL?</p><p><strong>Eve Porcello:</strong>       Learning GraphQL, yeah.</p><p><strong>Joel Hooks:</strong>         Learning GraphQL. It's very, very specific and on-point title. GraphQL just lately has blown up. It's been around for several years. But in the last, even a year, it's just really seems like it's picking up traction. Why? Why is everybody talking about GraphQL now?</p><p><strong>Eve Porcello:</strong>       A couple of reasons. I think people are finding that they have a lot of clients that they have to load with data. We need to make sure that our requests for this information are as simple as possible and are small as possible. With GraphQL, we're just getting one response with all the data that we need versus all these extra fields and making things slower on our phones. We also see that the tooling has come a long way in the last couple years. GraphQL was only open sourced in 2015. All these tools are starting to emerge, but we're still at the really early stages of this. I feel like there's so much potential for GraphQL. I feel like any situation where you're trying to get some data to a client quickly, GraphQL, it's just better. It's just going to do this more quickly for you.</p><p><strong>Joel Hooks:</strong>         When you say better, I assume we're talking about better than our traditional, RESTful, REST, REST API's that we might all be used to using.</p><p><strong>Eve Porcello:</strong>       Yeah, exactly. Ultimately, we're talking about the same thing. We're talking about with REST and GraphQL, and HTTP requests and a response. We're going to get a lot of efficiency if we work with GraphQL, because another nice thing is we can put a lot of the sorting, the filtering, the connecting of data. You can move a lot of that work to your GraphQL server. It's just something that you can't do with REST.</p><p><strong>Joel Hooks:</strong>         Both of these things; we have REST on one side and GraphQL on the other. They're both specifications versus people will think, \"Oh, GraphQL,\" we're talking about Apollo or some specific client relay or whatever. But really, we're discussing like a specification. To me, in my observation, REST has a specification that was very academic. The specification itself has been debated endlessly on the internet causing intense and never-ending confusion, right? People are just like, \"What's this? How do we do it?\" Hypermedia, RPC, what are we doing with the REST? What's real REST? What's RESTful? What's a REST like? I don't see that same debate going on with GraphQL. Is that something you've observed as well?</p><p><strong>Eve Porcello:</strong>       Yeah, I think so. The GraphQL spec is pretty, pretty clear about what it defines. It defines how you should write a schema. It defines how you should write a query. It gives an overview of what a GraphQL server should look like. Then it leaves it at that. The ideas in there are fairly simple. You can look at the spec. I encourage you to do so because it's pretty cool. Yeah, the spec is fairly minimal. Then Apollo and Prisma, and Relay and other folks who are creating tools around that, they agree on that. I don't know if that's just because the spec is good, which it is, but it could be something that maybe people start fighting about that down the road. For now, people seem pretty aligned on it.</p><p><strong>Joel Hooks:</strong>         I noticed that it's cool with the different clients that exists. They all same and feel similar but have just opinionated approaches or slightly different API surfaces for you to work with. There's like a continuity that flows through them. That's interesting to me.</p><p><strong>Eve Porcello:</strong>       Yeah, exactly. I think, again, the ideas and the spec are pretty, pretty good. People seemed to follow that pretty closely when they're designing their own solutions around it.</p><p><strong>Joel Hooks:</strong>         I should be ripping our REST API out and switching to GraphQL. Is that the short story?</p><p><strong>Eve Porcello:</strong>       Yeah, I would do it today for sure. I would say, yeah, you're gonna get a lot of great benefits from it. You can also stand up. This is how a lot of people move to GraphQL is they stand up a GraphQL gateway in between all of their REST API's and the clients. You can use GraphQL to fetch from REST endpoints. That's a great way to get started because that can use all of the setup that you already have, but then you can get some organization from the gateway.</p><p><strong>Joel Hooks:</strong>         Yeah, I was kidding. We already started doing that. [crosstalk 00:10:12] For us, it's been really great. Just like you say, we're using ... We have Rails, and there's a really nice GraphQL Pro Plugin for Rails that we purchased. You start setting it up. Now, not only can we use existing endpoints, but we can also start adding different data sources and just this amalgamation of data in the background. We're augmenting right now. We didn't have to go full bore into GraphQL and did REST altogether because frankly, I still like REST for some things. It was amazing for other things. I can see a world, where we're all on GraphQL. Right now, we're able to use it and leverage this power but we aren't having to go full on into. It's either one or the other, black and white situation.</p><p><strong>Eve Porcello:</strong>       Totally. I like to make jokes about burning it all down, but there are a lot of great things with maybe somebody has a great REST API setup for authentication. They don't wanna rebuild it. You can use that in conjunction with a GraphQL service as well. You can get a lot of benefits without having to burn it all down.</p><p><strong>Joel Hooks:</strong>         Have you use Gatsby much at all?</p><p><strong>Eve Porcello:</strong>       I've played around with it a little bit. I'm excited to learn more about it, but I know that people are really loving that. The GraphQL angle makes it even better.</p><p><strong>Joel Hooks:</strong>         Gatsby's a platform for building static websites. In my view, it has this potential to really eat into WordPress, which I'm honestly a little stoked about. The cool thing to me is that the whole thing is it's really GraphQL forward, right? They've embraced it fully, and they built this platform and this tool that we can use it's open source and free to use. You can actually take and then build a new blog, a static blog, but then also use your existing WordPress as an API and bring that in through GraphQL and grabbed from all the different data sources to build your static website up, which I think is pretty fascinating.</p><p><strong>Eve Porcello:</strong>       Yeah, totally. I think there's gonna be tons of new tools like that. That if they put GraphQL first, will be particularly interesting because we have Apollo, we have Prima, we have Gatsby. There's a lot of room for others to start doing things in a GraphQL way as well. It'll be fun to see where it goes.</p><p><strong>Joel Hooks:</strong>         Yeah, I see that a lot. It's across different platforms too. We're mostly I think, in our conversation, talking about Node and that related ecosystem. People embracing the spec across different languages and different back ends and that sort of thing. I'm really pumped on the future of GraphQL and the whole ecosystem. I think it's gonna be something that we're gonna see a lot more of. Now's a good time to start learning GraphQL.</p><p><strong>Eve Porcello:</strong>       Absolutely.</p><p><strong>Joel Hooks:</strong>         Talk about learning a little bit. We're talking about this new thing, right? We have this hot new thing on the internet. We have GraphQL. Behind that, we have React which everybody's excited about. It continues to be phenomenon. Not to mention, you also have a book Learning React. Is that the title?</p><p><strong>Eve Porcello:</strong>       That's right, yep. Learning React, Learning GraphQL, very creative.</p><p><strong>Joel Hooks:</strong>         I mean, they're great, right? If I want to learn those things, it's going to come up well on Google, which is [crosstalk 00:13:14]. Then, it also suggested this is a thing that's more focused on somebody that's just starting. That's a pattern with both of your books, right? You're focused on entry level or beginners or somebody that's new to these concepts learning. Is that an intentional approach that you've used?</p><p><strong>Eve Porcello:</strong>       Yeah, I think so. I think if you have the fundamentals right, you should be able to do everything else. A lot of folks wanna dive into the most advanced thing first. Then they get overwhelmed, and then they bail out on the whole thing. GraphQL, in particular, is so new that if I can teach the fundamentals well, then people are gonna have what they need to go build the next great GraphQL tool or build their own projects using GraphQL. It's a little too early to say that this is the right way, but we're focused a lot on the spec, and on the current tooling. Just getting people in the door should make them be more able to survive in the sea as it gets more crowded with options. That's what we go for. I think fundamentals are the way to get advanced. If you see code that's written really well, that's really simple, that's a dream. The person who wrote it probably knew the fundamentals pretty well.</p><p><strong>Joel Hooks:</strong>         When you're approaching something, it has a new camera, right? It feels you approach a lot of different technologies, and you're a lifelong learner. Somebody that likes to learn things and figure them out. What's your own process when you're approaching something complex that you want to learn more about, and perhaps eventually teach or use professionally?</p><p><strong>Eve Porcello:</strong>       Yeah, I like to follow the video tutorials a lot. Then I try to read the source material. When I was learning GraphQL, I looked at the spec and the React docs is where I started with that stuff too. Then, from there, I'll try to just build something. I think when I started in my career into web development, I would take a tutorial. I build the activity that was part of the tutorial, but I wouldn't really take it beyond that. Now, I feel until I can really build something with it, I probably can't answer the questions that our students will ask. That's what I tried to do. Because we're teaching so much, we can build all sorts of ideas and just we can continue to practice things out. Figure out what are really the things that developers need to be able to do with this thing. Hopefully, I can save people time when I go teach them in person or in a book.</p><p><strong>Joel Hooks:</strong>         One of the struggles for me especially when I was a newcomer and even now, it's the idea of, \"What should I build? I don't have anything interesting to build.\" I wondered, \"Do you have any approaches to fighting that?\" Are good ideas raining constantly down in your living room when you're Alex or ideating?</p><p><strong>Eve Porcello:</strong>       Yeah, just a constant storm of ideas. Not really, but we do have little ideas, just things that would make our lives a little bit easier. The thing we built for a React class was, it sounds very stupid, but a ski days counter. Alex and I are obsessed with skiing. We just wanted an app to track our ski days so that we could brag about them over the summer and stuff. We put that together. Just small ideas that we can use to test out what we've learned and figure out where the gaps are.</p><p><strong>Joel Hooks:</strong>         Yeah, I think people, a lot of times when they're starting, the ideas are too big. Instead, if we can narrow that down into something that's just useful, or even goofy and silly, or mildly entertaining. I think this is another way to look at stuff.</p><p><strong>Eve Porcello:</strong>       Yeah, I always go for mild entertainment.</p><p><strong>Joel Hooks:</strong>         Well, I see my kids. They wanna make a game. Their ideas basically a triple-A rated mega game versus the, \"Hey, let's focus on a single mechanic.\" This one little nugget of something that's cool. At the end of the day, a lot of examples end up being to-do lists, which I actually think is about the perfect example because it covers a lot of ground, but people get bored. It's not fun and entertaining.</p><p><strong>Eve Porcello:</strong>       Yeah, totally. Well, ski day counter is basically a to-do app. It's super simple, but yeah, still manageable enough to put together that you feel you did something, but not something that you have to quit your job to do.</p><p><strong>Joel Hooks:</strong>         Right. Honestly, to me, professional web development is mostly lists and forms.</p><p><strong>Eve Porcello:</strong>       It is, yeah.</p><p><strong>Joel Hooks:</strong>         What do I mean by that? I mean there's a lot of other stuff that goes on to. At the end of the day, it's, \"Okay, you're gonna make a list. You're gonna make forms. You're gonna update those lists with these forms. Then check things off when they're done.\"</p><p><strong>Eve Porcello:</strong>       Yeah, totally. That's so funny.</p><p><strong>Joel Hooks:</strong>         Modern internet and all these frameworks are built to create fancy to-do applications.</p><p><strong>Eve Porcello:</strong>       There's a lot of to-do's. Then the one over sockets is chat. It's all to-do list in chat app. [crosstalk 00:18:12].</p><p><strong>Joel Hooks:</strong>         Those are another good ones. Yeah, for sure. What are you learning? What's next? You have React and GraphQL. I'm sure those are gonna continue for years. I'm personally confident of that and probably going to be great in terms of business. What else is on the horizon? What have you been looking at lately that's interesting?</p><p><strong>Eve Porcello:</strong>       Yeah, just staying on top of all those GraphQL and React things. Then we've been getting into a lot of server lists stuff lately, which came about because we're working on this volunteer project for a nonprofit organization. It's called the High Fives Foundation, which supports people who are injured in Tahoe doing extreme sports. They have this website that isn't very accessible. They have a form to collects all the details about the injury and to vet people for getting grants. Nobody can really use the form. We're trying to figure out how do we get all these people together to build this project using all of the latest stuff. We're trying to use serverless. We're trying to push accessibility. I'm learning a lot about that. Also, how do you manage an open source project with people all over the place? There's definitely a learning curve to that, but we wanna support people as they get into open source and support people to learn new things so that they can slap a GraphQL API on their resume to get a better job.</p><p><strong>Joel Hooks:</strong>         Yeah, I love that. I love that approach. One I really like the idea of the extreme sports thing. People might be like, \"Oh, well, people are out there doing extreme sports.\" But these are folks that they don't have a lot of money and they're out there trying to do a thing. When they get hurt, they can get severely hurt, and they don't have a support network. That actually just sounds a great project to work on.</p><p><strong>Eve Porcello:</strong>       Absolutely. High Fives is really cool. I think people in that industry are constantly, they have to do something bigger. They have to do a bigger trick each and every time. Then, once they get injured, there's not a lot of support for them. That's really scary. Anything we can do to help people out, the better. It's not just for people who make their living doing that. It's for people who are skiers or snowboarders or mountain bikers, who just get into a bad situation.</p><p><strong>Joel Hooks:</strong>         It's even you break two ribs. It's amazing how long that'll ... I mean that's non trivial. There's nothing you can really do. You just miss work and all the medical bills, stuff like that.</p><p><strong>Eve Porcello:</strong>       Yeah, totally.</p><p><strong>Joel Hooks:</strong>         I also really like, and I've been hearing that a lot lately, it just seems it's getting a lot more focus. The focus on accessibility in terms of building websites has really been getting a lot of air time lately. I'm so stoked on that. I think it's one, a great career path. To niche down on accessibility is probably a good idea for a lot more people. Then just what it means in terms of building web pages because I haven't been hearing a lot about that until recently, it feels like.</p><p><strong>Eve Porcello:</strong>       Yeah, me too. I think it's something that has been of interest to me for a long time. It's something that is such an important thing. Until I really saw High Fives athletes trying to click through this form, that really personalizes it for me. It makes me want to learn more about how I can make these experiences better for people. One of the cool opportunities that we've been able to have and will continue to have is that our focus group for that site is injured athletes. They tell us that they can't use the forum, and then we see them not be able to. They give us great ideas of how to be better at our jobs. It's one-on-one feedback that is so valuable.</p><p><strong>Joel Hooks:</strong>         Being fully able is something a lot of us probably take for granted. Seeing somebody that's actually, physically not able to use your web form has to be startling.</p><p><strong>Eve Porcello:</strong>       Yeah, it's very startling. People will tell you exactly how bad it is for them. That's just the best feedback that you can get. It helps you. I'm sure that will help me throughout the rest of my career just thinking about that first.</p><p><strong>Joel Hooks:</strong>         Especially, seeing it and getting that depth. That's awesome. That sounds a great project and a great way. I think also another thing to think about, when people are learning. Projects like that are such awesome way to one have a fulfilling thing that you're doing and helping others. But also, like you mentioned, you can build your resume and work in open source and learn a lot of skills in a way that is approachable and useful in professional capacity down the road as well.</p><p><strong>Eve Porcello:</strong>       Yeah, absolutely. Not to be too much of a salesman, but you can contribute to the projects doing anything. Documentation, we've had project managers help out. It's been exciting to see people make their first git commit at the hackathon and stuff. All sorts of different people are coming together to build something cool, which is awesome.</p><p><strong>Joel Hooks:</strong>         I built my career writing documentation for open source. That's how I initially broke into web development in general was writing documentation on open source projects. I can't discount that approach enough. You'll need to do it, right? If you can write, if you can correct typos, if you can add images or update things to be more current, that stuff is all a great way to get started too, I think.</p><p><strong>Eve Porcello:</strong>       Totally. I posted something on Twitter about a friend of mine who is looking to get into contributing documentation and the internet exploded with people asking for help. There are tons of projects. They are getting involved in any capacity. That was pretty cool.</p><p><strong>Joel Hooks:</strong>         I get confused with the low-level code often on these open source projects. Documentation is often the level that I feel I can contribute the most traditionally. Especially as I started out, but still there's limits to my programming capacity. I think there's something for everybody. It takes a village to build an open source projects if thinking about it. [crosstalk 00:24:16] Big opportunity out there. What do you have going on? You have your Moon Highway. You do training, and you have your books. Where can folks find out more about what Eve has going on professionally?</p><p><strong>Eve Porcello:</strong>       You can follow me on twitter, @eveporcello. Our company, Moon Highway, does corporate training for JavaScript, Node, React, and GraphQL. Then, we also have new thing, GraphQL workshop, which is a two-day workshop that teaches basically everything you need to know to get started with GraphQL with Apollo server and Apollo client in React. We are on a constant road trip doing those classes in various places around the country. You can check that out too.</p><p><strong>Joel Hooks:</strong>         Awesome. Thanks so much, Eve.</p><p><strong>Eve Porcello:</strong>       Yeah, thank you. It's great.</p>",
    "slug": "eve-porcello-on-graphql",
    "description": "<p>Today we are joined by Eve Porcello, who teaches Javascript, React, and GraphQL with Moon Highway. She is also the author of the books Learning React and Learning GraphQL.</p><p>Eve explains her process in preparing her conference presentations and how she uses techniques she learned in her theatre and improv background to really bring something professional and engaging to the stage.</p><p>Why is GraphQL blowing up recently? Eve says she believes it's because people realize that are a lot of clients that need data and they only need to load the smallest amount of data that's necessary.</p><p>Everyone always says to have a project app to learn something new but what do you even build if you have \"no good ideas\"? Eve talks about what makes a good learning project. Keep the scope really small. Some variant of a to-do app is a great project.</p><p>Finally, Eve talks about her work with the High Fives Foundation. High Fives works with injured extreme sports athletes to help them pay for the high health care costs of an injury.</p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/a3df6162/transcript\">\"Eve Porcello on GraphQL\" Transcript</a></p><h3>Resources:</h3><ul><li><a href=\"https://www.moonhighway.com/contact\">Moon Highway</a></li><li><a href=\"https://www.youtube.com/watch?v=F_M8v6MK0Sc\">Eve Porcello - Everything You Need to Know About GraphQL in 3 Components</a></li><li><a href=\"https://www.amazon.com/_/dp/1492030716?tag=oreilly20-20\">Learning GraphQL</a></li><li><a href=\"https://www.gatsbyjs.org/\">Gatsby</a></li><li><a href=\"https://highfivesfoundation.org/\">High Fives Foundation</a></li></ul><h3>Eve Porcello:</h3><ul><li><a href=\"https://github.com/eveporcello\">Github</a></li><li><a href=\"https://twitter.com/eveporcello\">Twitter</a></li><li><a href=\"https://medium.com/@eveporcello\">Medium</a></li><li><a href=\"https://www.oreilly.com/pub/au/6914\">O'Reilly</a></li></ul><h3>Joel Hooks:</h3><ul><li><a href=\"https://twitter.com/jhooks\">Twitter</a></li><li><a href=\"https://joelhooks.com/\">Website</a></li></ul>",
    "duration": 1506,
    "episode_number": 25,
    "contributors": [
      "Joel Hooks"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/k7wmx",
    "path": "/podcasts/eve-porcello-on-graphql",
    "published_at": "September 21st, 2018",
    "url": "https://egghead.io/api/v1/podcasts/eve-porcello-on-graphql",
    "edit_podcast_url": "https://egghead.io/podcasts/eve-porcello-on-graphql/edit"
  },
  {
    "id": "podcasts-00000000000000000069",
    "title": "Jason Lengstorf on GatsbyJS",
    "summary": "Today’s guest is Jason Lengstorf, a developer on the GatsbyJS team. Today Jason discusses his career path, what Gatsby accomplishes, how Gatsby compares with other static site generators, what's coming up in Gatsby 2, and what it's like to manage a large open source repo. ",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/b36aa0cc-3fde-44b8-a751-6cc71cad4cc3/188eecc0_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/b36aa0cc-3fde-44b8-a751-6cc71cad4cc3/1537381627artwork.jpg",
    "simplecast_uid": "b36aa0cc-3fde-44b8-a751-6cc71cad4cc3",
    "transcript": "<p><strong>John Lindquist:</strong>     Alright, I'm here with Jason today. Jason, why don't you go ahead and introduce yourself.</p><p><strong>Jason Lengstorf:</strong>    Sure. Yeah, my name is Jason Lengstorf. I am a developer on the Gatsby.js open source framework. And I've been doing a lot of work on the developer relations part of things.</p><p><strong>John Lindquist:</strong>     Awesome. So, tell me a bit about your history as a developer and how ... What's your path from knowing nothing to, now, working with Gatsby?</p><p><strong>Jason Lengstorf:</strong>    It's a long and wandering one.</p><p><strong>John Lindquist:</strong>     Okay.</p><p><strong>Jason Lengstorf:</strong>    I started out wishing that I was a musician, right? I wanted to be a rockstar. So, I dropped out of college to be a full-time musician. And because we were a band, we didn't have any money.</p><p><strong>Jason Lengstorf:</strong>    So, I learned design so that we could have merch and posters. And then, I learned web design a little bit so that I could customize our Myspace page. And then, I learned how to do a full website.</p><p><strong>Jason Lengstorf:</strong>    And eventually, I needed to figure out how to let other people in the band post photos and blog posts. And so, I had to learn some backend stuff so I could do that. And it kind of just grew from there.</p><p><strong>Jason Lengstorf:</strong>    When the band broke up, I realized I was significantly better as a developer than I was as a musician. So, I started an agency. My agency grew. I got reasonable amount of experience. Eventually, ended up contracting around for awhile.</p><p><strong>Jason Lengstorf:</strong>    Started working as a front-end architect at IBM. And then, just at the end of last year, started looking around and got moved over to Gatsby as of, I think, February?</p><p><strong>John Lindquist:</strong>     Okay. Sweet. That's a fun path. Do you regret ... Do you still get a chance to sing or guitar, whatever you were doing?</p><p><strong>Jason Lengstorf:</strong>    Yeah. So, I was a bad guitarist. And then, probably a worse vocalist. So, I don't think the world is missing much without me making music. But I still play from time to time, just for fun for myself.</p><p><strong>John Lindquist:</strong>     Awesome. Alright, so let's chat about Gatsby for a bit. So, what is Gatsby for people who haven't heard about it yet?</p><p><strong>Jason Lengstorf:</strong>    Gatsby is a site generator that's built on React and GraphQL. So, the core focus of Gatsby is to create a unified data layer so you can pull data from anywhere, any headless CMS, any API, static files, whatever you want.</p><p><strong>Jason Lengstorf:</strong>    And then, you use React and GraphQL to build your whole front-end. And then, we will build that into a really high performance, progressive web app so that you're able to focus on building a great experience and not focusing on performance tuning and all that kind of stuff.</p><p><strong>Jason Lengstorf:</strong>    So that's kind of the super high level view, but the general idea is we're trying to make really good decisions baked into a framework so that you get ... You can ace your performance audits, and things like that, without having to do any extra work.</p><p><strong>John Lindquist:</strong>     So, by any CMS, any API are some examples of that: Ruby, Python, Node, just literally anything pretty much?</p><p><strong>Jason Lengstorf:</strong>    Anything that exposes its data through an API. So, we've been able to pull in ... WordPress is a common backend CMS for us. We use software as a service platforms like GraphCMS or Contentful.</p><p><strong>Jason Lengstorf:</strong>    We've pulled in Drupal sites. We can pull in Shopify. We just built this wag store powered by Shopify. And we can even do weird stuff like Workshop.me, which is one of Ryan Florence's projects. He has actually built from a Google Sheet using Gatsby.</p><p><strong>Jason Lengstorf:</strong>    So, Gatsby consumes that Google Sheet and builds a website out of it.</p><p><strong>John Lindquist:</strong>     Cool. Yeah. Is there a most common approach? I mean, I know static site generators typically have some mark-down files, just on your local machine. And you say, build. And then, you'd deploy it.</p><p><strong>John Lindquist:</strong>     Is that still the most common thing? Or what do you guys see-</p><p><strong>Jason Lengstorf:</strong>    I would say that's the ... It's the path of least resistance, right? So, if you're just working on your own blog, the easiest way to get started, if you're starting from scratch, would be to build a Gatsby site, write some markdown files and publish those.</p><p><strong>Jason Lengstorf:</strong>    What Gatsby's trying to overcome though, and I think this is maybe what we're uniquely bringing as a framework, is that you can use Gatsby for your personal blog and just write markdown.</p><p><strong>Jason Lengstorf:</strong>    But as you scale, when you've got a content team or a marketing team or, for example, you've got your dev team writing docs in markdown, but your content team is using WordPress or Contentful for that.</p><p><strong>Jason Lengstorf:</strong>    And your marketing team has got Salesforce hooked up. In traditional business models, or development models, you would end up having three apps for those three data sources that would have to be fit together through sub-domains or reverse proxies, or something like that.</p><p><strong>John Lindquist:</strong>     Right.</p><p><strong>Jason Lengstorf:</strong>    With Gatsby, what you can actually do, is you can plug all three of those into the same Gatsby backend. And it will unify that data into our GraphQL data layer so that you develop the same way, regardless of where that data came from.</p><p><strong>Jason Lengstorf:</strong>    And so, it will kind of expand with you as you go from a single ... From a one developer shop up to an infinitely scaled company.</p><p><strong>John Lindquist:</strong>     Right. Yeah. And I can't even imagine trying to take a Jekyll or the others, a Hugo, or something through static site generators. And what the migration story would be to Contentful, or something like that.</p><p><strong>Jason Lengstorf:</strong>    Yeah. It's definitely possible. The stuff that Hugo is doing and the stuff that the Jekyll does, they're really good tools. I think this just isn't what they're built for. They're built for very quickly building small static sites.</p><p><strong>Jason Lengstorf:</strong>    And they're excellent at that. We are targeting ... We just want to do more. We want to be kind of a data agnostic development layer. So, we worked hard to make sure everything was extensible.</p><p><strong>Jason Lengstorf:</strong>    So, if you've got any API, you can just write a source plugin for it. And then, that means that any Gatsby site now can install that plugin and pull in your data source. So, you can write a custom API and have it be integratable with Gatsby out of the box.</p><p><strong>Jason Lengstorf:</strong>    So, you could say, \"Hey, do you want to build a site with your data? Here's what you do.\" And we're seeing that a lot of ... I think, a company called Wings is a new headless CMS. And part of their core marketing strategy was they launched.</p><p><strong>Jason Lengstorf:</strong>    And part of their launch was, we also have a Gatsby plugin, which is ... We are over the moon about that that we've been able to make that kind of impression in the open source community.</p><p><strong>Jason Lengstorf:</strong>    Anyways, that's kind of what we're after is that type of openness and data agnosticism.</p><p><strong>John Lindquist:</strong>     Agnosticism. I like it. Now, spell that.</p><p><strong>John Lindquist:</strong>     So, would you say if ... Say, someone who was about to sign up for a site at WordPress.com, what's the difference, skill level-wise, that's required between just signing up for an account on WordPress and maybe playing with some preferences or a PHP template, or something, compared to launching something through Gatsby where ... I'm not familiar with it.</p><p><strong>John Lindquist:</strong>     But is there Gatsby hosting where you can create an account and just kind of go from the default templates?</p><p><strong>Jason Lengstorf:</strong>    Not yet. That's a plan. Gatsby got Venture Capital funding back in the end of 2017. So, one of the things that we're hoping to bring out, that we're working on now, are a couple different tools that will make Gatsby more of an active competitor with the WordPress seamless model.</p><p><strong>Jason Lengstorf:</strong>    So, one thing that WordPress does better than us right now is if you don't do code at all, you can still set up and operate a WordPress site.</p><p><strong>John Lindquist:</strong>     Right.</p><p><strong>Jason Lengstorf:</strong>    You're limited in what you can do. You're stuck with whatever theme you can find and whatever plugins, and kind of putting all that together. But there's just this amazing ecosystem in the WordPress community where if you are not a developer, there's almost nothing you can't do with WordPress.</p><p><strong>Jason Lengstorf:</strong>    And that's all with free open source plugins, which is amazing. Gatsby is ... So, if you were a developer who wanted to build a custom theme, the ramp-up between WordPress and Gatsby, depending on what your level of comfort with PHP versus Javascript is, I would make an argument that it's easier to ramp up with Gatsby, because there are fewer internals.</p><p><strong>Jason Lengstorf:</strong>    WordPress has a lot of internals and Gatsby is a little bit more of a concentrated suite of things that it does. That could also make it harder, because in WordPress, almost everything you do on a standard site is kind of baked into the core.</p><p><strong>Jason Lengstorf:</strong>    Whereas, with Gatsby, you're going to end up adding plugins. Almost immediately, you need a plugin just to add the title tag to the HTML. And so, things like that, I think, can be a little bit overwhelming for people.</p><p><strong>Jason Lengstorf:</strong>    But we did that by design, because we didn't want to bake a ton of stuff into the core. If you're comfortable with the plugin style architecture and you're comfortable with writing a little bit of code, I think it's going to come down to your preference.</p><p><strong>Jason Lengstorf:</strong>    But my preference would be that, I think, Gatsby's a little bit easier to pick up.</p><p><strong>John Lindquist:</strong>     Right. And it's funny. I know a lot of people who their introduction of programming has been launching a WordPress blog. And then, they're like, \"Well, I want to change something.\"</p><p><strong>John Lindquist:</strong>     And they look at the plugins. And then, they're like, \"Well, that doesn't quite fit what I want to do.\" So, they copy and paste, whatever in-line Javascript or PHP, or whatever it's going to be.</p><p><strong>John Lindquist:</strong>     Usually, outdated plugins.</p><p><strong>Jason Lengstorf:</strong>    Right.</p><p><strong>John Lindquist:</strong>     It's funny how much that it's a real development experience for people, even though they're fumbling around a bit. How often do we just check static overflow for the units we're looking for and copy and paste.</p><p><strong>John Lindquist:</strong>     I think, it's really cool that now, if Gatsby brings that story about, then it can be truly an introductory programming experience for people. Where, here's this working thing and what do you want to change?</p><p><strong>John Lindquist:</strong>     And then, they say, \"Well, I want to change the way that the footer looks.\" And then, they can do the footer code and make some calendar widget, or whatever.</p><p><strong>Jason Lengstorf:</strong>    Yeah, that's-</p><p><strong>John Lindquist:</strong>     I think that's exciting that Javascript and React can be more of an introduction.</p><p><strong>Jason Lengstorf:</strong>    And I would agree with that. I have found that we've seen people using Gatsby as a way to learn React. Because one of the things that's difficult about Javascript development is the kind of immediately sharp learning curve.</p><p><strong>Jason Lengstorf:</strong>    When you go from, \"Okay, I'd like to learn Javascript.\", to, \"How do I get some Javascript onto the screen.\". If you're trying to learn React, you can use Create React app, which is great.</p><p><strong>Jason Lengstorf:</strong>    But if you're not using Create React app, you're kind of looking at like, \"Okay, before I can write any React, I need to set up Babel. I need to set up Webpack. I need to set up my CSS suite of SAS or post-CSS, or whatever.\"</p><p><strong>Jason Lengstorf:</strong>    And all of these things are very context-heavy tasks that require you to just have so much knowledge before you can configure them in a way that doesn't feel like just copy, paste, pray. Right?</p><p><strong>Jason Lengstorf:</strong>    And so, what Gatsby does and what Create React app does well, is we are trying to abstract away all of that. When you build a Gatsby site, you just do Gatsby new and then, pick your starter.</p><p><strong>Jason Lengstorf:</strong>    And you're able to move into that folder, run Gatsby develop and then, change something in a file and immediately see it live on the page. We've got hot reloading built in. We've got file watching.</p><p><strong>Jason Lengstorf:</strong>    All of that is happening so that you're just running the server. And if you go from never having used Gatsby before, you can go from there to actually looking at your changes, live rendering on the page inside of two minutes.</p><p><strong>John Lindquist:</strong>     And that's a story that WordPress and the others don't have.</p><p><strong>Jason Lengstorf:</strong>    Yeah. For custom development, yeah, 100%. The only thing that's really, really close to that ... Create React app is another one. It's really, really good at this. Where I would say, Gatsby is a little bit ... It's got a little more power than something like Create React app is we've also got data access baked in.</p><p><strong>Jason Lengstorf:</strong>    We've also got a really good deployment story. We wanted to make it-</p><p><strong>John Lindquist:</strong>     Which are things you can make anyway, right? Regardless of whatever site, you're-</p><p><strong>Jason Lengstorf:</strong>    If you're building a website, yeah.</p><p><strong>John Lindquist:</strong>     Going to do that in deployment.</p><p><strong>Jason Lengstorf:</strong>    Exactly, right? You've got to put it somewhere. And so, how do you do that? So, we've thought through, \"Okay, once you've built a site, where does it go?\" And when you're looking in something like a static site generator, which at its core, that's what Gatsby is, you can host it for free on GitHub pages.</p><p><strong>Jason Lengstorf:</strong>    You can host it for free on Netlify. And Netlify has kind of been our recommended way to go, because Netlify will watch your GitHub repo. And whenever you make a change, it just automatically polls and updates everything.</p><p><strong>Jason Lengstorf:</strong>    It's magical. I'm in love with Netlify as a service. So, we've got that great story of you build something, you hit Gatsby build and then, you save those change ... Or you hit commit, push that up to GitHub and then, Netlify will build your site.</p><p><strong>Jason Lengstorf:</strong>    And the same with data. We've got a story for how to get data in. If you want to use data, here's what you do. And if somebody hasn't already built it for you, here's some instructions on how to get it in so that you can use it in the same way that you would use data from anywhere else.</p><p><strong>John Lindquist:</strong>     Right. Right. So, I see that Gatsby's version two is in beta. What sort of changes are we looking forward to in the upcoming version two release?</p><p><strong>Jason Lengstorf:</strong>    The biggest ones are mostly under the hood. So, a lot of what's happening in Gatsby version one is just older versions of the technology that powers the web. So, Gatsby version one is on Webpack version one.</p><p><strong>Jason Lengstorf:</strong>    So, Gatsby version two is moving us to Webpack version four. So, it's a big jump. We get a lot of performance benefits there. There are additional performance benefits like better code splitting, better dead code elimination, some other kind of ... How we can do things like sub-setting your fonts.</p><p><strong>Jason Lengstorf:</strong>    So, if you have a web font that you're using, if it's included in the repo, we are going to be able to run a plugin that will look at just what characters you use and only include those in a sub-set font so that you're only sending down what you really need.</p><p><strong>Jason Lengstorf:</strong>    Instead of having to send 500 characters, you send down 10. So, those are some of the under the hood things that are going to happen to make the sites faster, to make your build times faster.</p><p><strong>Jason Lengstorf:</strong>    We've improved the build time by about, I think, it was 80% or something. It's a huge difference between Gatsby v1 and Gatsby v2. One of the biggest limitations of static sites is that they're very slow to build.</p><p><strong>Jason Lengstorf:</strong>    So, we are putting a lot of effort into making it faster. And our target, and who knows if this is physically possible, but what we really want to do is get to the point where our static sites are building in ... Huge static sites are building in seconds instead of minutes.</p><p><strong>Jason Lengstorf:</strong>    And so, those are ... That's another big one that we're working on. And then, other than that, there are just a couple kind of magic things in v1. We had this layout component in Gatsby v1 that was automatically applied to your pages.</p><p><strong>Jason Lengstorf:</strong>    And it kind of worked as an app shell, sort of. You would define your header and footer in there. And it ended up being just this ... It was a little bit confusing, right? So, in v2, we removed that.</p><p><strong>Jason Lengstorf:</strong>    And we went to the point where, now, the Gatsby stuff is pulled out and you have to actually use it like a React component. You plug it in and you have to include it and wrap your files in it.</p><p><strong>Jason Lengstorf:</strong>    And it's exactly what you've always done in React. So, we made a couple decisions like that that make React feel more like React. And there's less magic from Gatsby. We added a couple other things around GraphQL.</p><p><strong>Jason Lengstorf:</strong>    We're going to support external GraphQL schemas as first-class citizens. I think that poll process is getting merged today, if it hasn't been already. And I think everything else is more around stability.</p><p><strong>Jason Lengstorf:</strong>    We've got a whole migration guide written up that covers the nitty-gritty details. There are a couple breaking changes, in terms of the names of things changed to be more clear. But otherwise, it's not a ... The migration path is pretty shallow for most websites, because most people aren't using the stuff that we ended up changing.</p><p><strong>John Lindquist:</strong>     Right. Right. Now, would you recommend, if someone starts with it today, that they just dive into v2?</p><p><strong>Jason Lengstorf:</strong>    I would start with v2. Our current push is to get to a release client, or a release candidate, for v2 soon. If it were up to me, we would probably have our release candidate out in the next two weeks.</p><p><strong>Jason Lengstorf:</strong>    So, the time horizon for v2 going stable is potentially a couple of months. But I would not ... I would say, it's probably not longer than that.</p><p><strong>John Lindquist:</strong>     Okay. Awesome. I'm excited. I see on the GitHub page that Gatsby has 964 contributors, 5,500 commits. What's it like managing such a popular open source project? I'm sure, it looks like the issues are at 936, not that that means ... Not that that reflects the quality or anything.</p><p><strong>John Lindquist:</strong>     But that's just a lot of people asking questions, or [crosstalk 00:17:32]-</p><p><strong>Jason Lengstorf:</strong>    Yeah.</p><p><strong>John Lindquist:</strong>     That's a load of things on your mind, day in and day out.</p><p><strong>Jason Lengstorf:</strong>    Yeah. And it's something that I am not terribly involved in the day-to-day management of the repo. So, one of the things that is very nice about having a strong maintainer community is that ... So, Kyle Matthews is the original creator of Gatsby.</p><p><strong>Jason Lengstorf:</strong>    And he mostly spends his time on new features, what's kind of next generation stuff. And then, we're super lucky to have great people like Mike Allanson, Michal ... I'm going to murder his last name. He's Polish. And I think it's like Piechowiak, I think.</p><p><strong>John Lindquist:</strong>     Sounds right to me.</p><p><strong>Jason Lengstorf:</strong>    I'm so sorry, Michal. And then, we've got just this army of amazing people who just show up and put in the work and help keep these things moving. So, we've got ... Mike and Michal are full-time with us now.</p><p><strong>Jason Lengstorf:</strong>    We've contracted them for as many hours as they'll give us, basically, to manage this and keep things under control. We're also working with someone named William Imoh from Nigeria who's helping us do, what we're calling, open source gardening.</p><p><strong>Jason Lengstorf:</strong>    Because a lot of those 900 issues have been fixed. He didn't have great organization in the previous versions of the repo where they were just kind of managed in a very ... There are tons of things happening, so we're tracking as best we can.</p><p><strong>Jason Lengstorf:</strong>    But also, there's just general chaos. So, now we're trying to get more methodical, especially since we got funded. We want to bring that back into check. And so, we've contracted Marissa Morby who is an excellent organizational architect to help us write some project workflow processes, to find some things that we can do better to make the project workflow just work and just identify some different ways that we can do a better job of that.</p><p><strong>Jason Lengstorf:</strong>    Because it is really, really difficult when you've got dozens of issues opening a day to not let some fall through the cracks. And so, we're trying very hard to not let that happen.</p><p><strong>Jason Lengstorf:</strong>    But even just today, we had someone who was unhappy because we ... They opened a poll request. And they did a ton of work on this poll request and we just missed it. It just got lost.</p><p><strong>Jason Lengstorf:</strong>    And by the time we found it again, it was out of date. It didn't match with our roadmap. And so, we ended up having to close it. So, that's super frustrating because had we been paying attention, we would have caught it and we would have closed it earlier, because it wasn't in line with what we were headed for.</p><p><strong>Jason Lengstorf:</strong>    But instead, it was like months. Alright. Somebody just waiting. Like, \"Are they going to merge my work? What's up with this?\" And so, we're trying to figure out, how do we make that not happen again?</p><p><strong>Jason Lengstorf:</strong>    How do we make improvements that prevent us from taking advantage or letting down the people who are basically volunteering their time to help make Gatsby better for the rest of the community?</p><p><strong>John Lindquist:</strong>     Right. Yeah. And I know for certain, for every young, happy person, there's thousands who are happy. So, you can-</p><p><strong>Jason Lengstorf:</strong>    Yeah, and-</p><p><strong>John Lindquist:</strong>     [crosstalk 00:20:28]. No one's perfect.</p><p><strong>Jason Lengstorf:</strong>    Yeah. Our goal is that we don't create ... We don't want to create unhappy people. There will definitely be people who just don't like the product and that's fine. But we don't want to be the ones who are like, \"Hey, we did something crappy and you have to deal with that. And now, you don't like us very much.\"</p><p><strong>John Lindquist:</strong>     So, if someone were to get started with Gatsby today, I know there's a lot of examples in the repo, which one should they start from? Or, is the document the best place to go? What would be your recommended path to I know nothing about Gatsby to launching a personal blog, or whatever?</p><p><strong>Jason Lengstorf:</strong>    We have just done a huge effort with Shannon Soper and Amberley Romo have just done a huge amount of work on improving our tutorial. So, that would definitely be the best place to start. It's really comprehensive.</p><p><strong>Jason Lengstorf:</strong>    They added a part zero that's like ... It will tell you what the command line is and how to get Node installed. And then, it goes all the way from there to pretty advanced topics like building source plugins and stuff like that.</p><p><strong>Jason Lengstorf:</strong>    So, I don't know if it actually builds a source plugin. But we get you to the point where you'll have the level of understanding that you can then jump to the advanced guide on building a source plugin.</p><p><strong>John Lindquist:</strong>     Right. That's awesome.</p><p><strong>Jason Lengstorf:</strong>    But yeah, for a beginner, that's definitely where you would want to start. Hit up the tutorial, skip ahead to the part where it seems new. And then, go through that.</p><p><strong>John Lindquist:</strong>     Cool. And that's at gatbsyjs.org/tutorial, so.</p><p><strong>Jason Lengstorf:</strong>    That's correct, yes.</p><p><strong>John Lindquist:</strong>     Alright. So, it's about time to wrap up. Is there anything you'd like to promote or say about your life or Gatsby before we close it off?</p><p><strong>Jason Lengstorf:</strong>    Something that we're trying to do right now is get more people involved in open source, especially if you're somebody who feels like you're typically not part of the open source crowd.</p><p><strong>Jason Lengstorf:</strong>    So, first time contributors, we'd love to have you. We've got open pairing hours available, so you can find that on our WeMeet. You can tweet at us. It's on my Twitter. There's a link to actually schedule an hour.</p><p><strong>Jason Lengstorf:</strong>    Somebody from the Gatsby core team will do a screen share with you. And we can look at any code you want to do, whether you're getting started with Gatsby. If you're wanting to make a contribution to open source.</p><p><strong>Jason Lengstorf:</strong>    And if you want to make that contribution, it doesn't even have to be to Gatsby. It could be to any open source project you want. We just want to try to get more people involved. So, that's my big effort right now.</p><p><strong>Jason Lengstorf:</strong>    So, come and talk to me. And let's get some time set up.</p><p><strong>John Lindquist:</strong>     Awesome. That's great. You're awesome, Jason.</p><p><strong>Jason Lengstorf:</strong>    Well, thank you.</p><p><strong>John Lindquist:</strong>     Well, thanks so much for your time today. And have a wonderful rest of the week.</p><p><strong>Jason Lengstorf:</strong>    Yeah, thank you for having me. I really had a good time.</p>",
    "slug": "jason-lengstorf-on-gatsbyjs",
    "description": "<p>Jason Lengstorf is a developer on the GatsbyJS team.</p><p>Jason didn't start his career even remotely in the tech field. He was a musician.<br />Jason's band didn't have much money, so he learned design to make merch, learned some markup to edit their myspace, eventually learned to build a website for them, then learned backend so his bandmates could upload images and post things.</p><p>Jason talks about Gatsby's plans to compete with the more seamless WordPress model. He also talks about gatsby's differences from WordPress and the use cases for each service.<br />One of Gatsby's strengths is how good it is for learning Javascript and React, you can quickly go from the command line to getting stuff on the screen in two minutes, much like create-react-app, the differences is that with Gatsby you get a data layer and a good deployment story.</p><p>Finally, they talk about what it's like to manage a repo that has 964 contributors, 5500 commits, and 936 issues. It was more chaotic in the early days, but they have brought on some people who are helping manage it and are defining better processes.</p><p>If you are interested in learning Gatsby, they have recently put much work into revamping their official tutorials.<br /><a href=\"https://www.gatsbyjs.org/tutorial/\">Check them out here</a></p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/188eecc0/transcript\">\"Jason Lengstorf on GatsbyJS\" Transcript</a></p><h3>Topics:</h3><ul><li>His early musical aspirations that lead to his career as a developer</li><li>Gatsby's goals in creating an agnostic unified data layer.</li><li>The differences between Gatsby and other static site generators</li><li>Gatsby 2 and its many performance upgrades</li><li>Managing a large and active repository</li></ul><h3>Resources:</h3><ul><li><a href=\"https://www.gatsbyjs.org/\">Gatsby</a></li><li><a href=\"https://twitter.com/gatsbyjs\">Gatsby on Twitter</a></li><li><a href=\"https://www.gatsbyjs.org/tutorial/\">Gatsby Tutorials</a></li><li><a href=\"https://www.netlify.com/\">Netlify</a></li></ul><h3>Jason Lengstorf:</h3><ul><li><a href=\"https://lengstorf.com/\">Website</a></li><li><a href=\"https://twitter.com/jlengstorf\">Twitter</a></li><li><a href=\"https://github.com/jlengstorf\">Github</a></li></ul><h3>John Lindquist:</h3><ul><li><a href=\"https://twitter.com/johnlindquist?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor\">Twitter</a></li><li><a href=\"https://johnlindquist.com/\">Website</a></li></ul>",
    "duration": 1387,
    "episode_number": 24,
    "contributors": [
      "Jason Lengstorf"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/28kfa",
    "path": "/podcasts/jason-lengstorf-on-gatsbyjs",
    "published_at": "September 14th, 2018",
    "url": "https://egghead.io/api/v1/podcasts/jason-lengstorf-on-gatsbyjs",
    "edit_podcast_url": "https://egghead.io/podcasts/jason-lengstorf-on-gatsbyjs/edit"
  },
  {
    "id": "podcasts-00000000000000000068",
    "title": "Lynne Tye, founder of keyvalues.com",
    "summary": "This episode is a chat with Lynne Tye, the founder and developer of keyvalues.com, a place for Software Developers to find the team and company that is right for them. ",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/7ec9eae6-a240-4d6b-92dc-9f2653cc8e5a/881088a2_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/7ec9eae6-a240-4d6b-92dc-9f2653cc8e5a/1535540020artwork.jpg",
    "simplecast_uid": "7ec9eae6-a240-4d6b-92dc-9f2653cc8e5a",
    "transcript": "<p><strong>Joel Hooks:</strong>         So, I was watching The Hot Ones. Have you seen that show where they eat the hot chicken wings?</p><p><strong>Lynne Tye:</strong>          No. I was like, what is that?</p><p><strong>Joel Hooks:</strong>         Yeah, so it's this YouTube show put out by Complex, and it's called The Hot Ones. It's this guy Sean Evans, and he started out by inviting kind of C, B list celebrities onto the show, and then-</p><p><strong>Lynne Tye:</strong>          And, they just eat spicy wings?</p><p><strong>Joel Hooks:</strong>         Yeah. So, he has 10 wings, and it goes from sriracha up to like, blow your gourd, triple ghost pepper.</p><p><strong>Lynne Tye:</strong>          I've heard of the show, or I've heard of this, yeah.</p><p><strong>Joel Hooks:</strong>         So, he had Gary Vaynerchuk on there who started out on wine, he's just kind of a big boot strapping, crush it kind of guy, and at the end of it he's like, \"Do you have a podcast?\", and he's like, \"No.\" He's like, \"Why don't you have a podcast?\", I saw that and then John saw that, and the Monday following the episode we're both like, \"Hey man, we need a podcast.\"</p><p><strong>Lynne Tye:</strong>          That's amazing.</p><p><strong>Joel Hooks:</strong>         It's interesting, and then it's also interesting to talk to people, too.</p><p><strong>Lynne Tye:</strong>          No, of course. I think people have actually said I should have a podcast but, then of course you know how much work it is, or it can be a lot of work. It's deceiving I think, how much work goes into it but, maybe someday. I do like talking.</p><p><strong>Joel Hooks:</strong>         I mean, for me personally, the hard work is the research. That's where I try to put in the work, and then the grueling work I really just don't want to do, I've managed to outsource at a fairly reasonable-</p><p><strong>Lynne Tye:</strong>          Yeah, if you can do that, then by all means.</p><p><strong>Joel Hooks:</strong>         I mean, I know I've read, you've thought this way before too, like when you're freelancing, or you've determined what your hourly rate is. Am I going to pay that hourly rate to edit a podcast? Or can I get a much better rate and get somebody else to do it?</p><p><strong>Lynne Tye:</strong>          Totally.</p><p><strong>Joel Hooks:</strong>         I think at some point you have to organize your life around that sort of thing because, there's just finite time, right? I don't have time to edit podcasts, or even worry about it really. I just wanted to record the thing, have a cool conversation, and then it's done.</p><p><strong>Lynne Tye:</strong>          Yeah, no I think that's a good attitude to have. It's actually funny, I was just telling someone else about that. The difference between being an employee, and doing freelance work, or being a consultant has really changed the way I think about my life. Because, you're literally ... I don't know, you're more conscious of trading time for money. I don't know if that's what you were talking about earlier but, it's just an interesting shift in the way that ... your outlook I guess.</p><p><strong>Joel Hooks:</strong>         Yeah, I mean sometimes I'll do stuff. It's like you start applying at the house chores and whatnot. Which, inevitably have people do that for you too, and it's like there's a huge culture of that though. San Francisco and all these services popping up. How do we remove this? I think it stems there from developers working 80 hours a week at these starts ups.</p><p><strong>Lynne Tye:</strong>          No, yeah, absolutely. Also, I don't even know if you meant to say that because, you know I used to work at Homejoy but, I'm very familiar with the home cleaning base, or I used to be at least. So, no, it's definitely an interesting way to think about it. That applies to everything else. It even made me like, when there were barbecues I would get invited to from like, third tier friends, acquaintances, it's like, do I really want to go? Just knowing what my time is worth, decide not to go. It's really strange.</p><p><strong>Joel Hooks:</strong>         I've intentionally tried to pick up because, I've got to the point where I was doing basically nothing outside of the tasks, my job, whatever work it was I was mainly trying to do. These days I really try to suppress that instinct. The, this is my hourly rate because, you know, working in the garden, or doing wood working or these other kind of hobby level I guess really but, I can't apply that same thought to them.</p><p><strong>Lynne Tye:</strong>          Yeah, well that's different because, you really enjoy doing it. I think you apply it when it's a chore like when it feels anything chore like.</p><p><strong>Joel Hooks:</strong>         Yeah. It's just higher level thought.</p><p><strong>Lynne Tye:</strong>          Yeah, yeah, yeah.</p><p><strong>Joel Hooks:</strong>         So, anyway, I didn't do an introduction. Hi Lynne.</p><p><strong>Lynne Tye:</strong>          Hi.</p><p><strong>Joel Hooks:</strong>         I wanted to ask you because, I've read this in a couple places, and it's like you mentioned in an interview, and you've written it down that the number one choice on Keyvalues.com is work life balance. I'm curious if you think there's such a thing as work life balance, or if we're just living life, and work is part of that?</p><p><strong>Lynne Tye:</strong>          Oh, that's a really interesting question. I mean, work life balance is definitely real in the same way that happiness or something like that. Happiness is very real. It's just different for different people. I think work life balance is really tricky because, a lot of people don't really dive deep into how they define it, and then if a company says we have great work life balance, you're like great, I'm so glad, I was looking for that. Without even pausing to dissect what that means. I think that's kind of where ... it's like a trap that people fall into. But, no, yeah, it's definitely real. Work life balance is not even consistent for me, it changes daily, and I think for individual people not only do you define work life balance different than I do but, it probably changes.</p><p><strong>Lynne Tye:</strong>          Our own definitions change as time goes by. You know? What I cared about, what I thought it meant in my early 20s is different than what I think now, and I'm certain it will change again, and again. What does work life balance mean? I think it's really just balancing enjoying in your life, and I guess achievement, or just feeling like you're working towards a goal, and being productive, and getting towards that, and obviously you can see how those sometimes are at odds with one another.</p><p><strong>Lynne Tye:</strong>          So, for me it's not really about time. A lot of people say like, \"Oh, if you work over 40 hours a week there's no work life balance.\" I personally would much rather work 60 hours a week if I got to choose when, and where I worked. That makes me so much more happy, and makes me feel like I have more freedom. But, of course there's lots of people who would disagree with me. I don't know if that answers your question though.</p><p><strong>Joel Hooks:</strong>         Sure. I mean it's a hard question. I think the answer like, work life balance, and like you said, if you're looking for a job, and they say, \"Oh, we provide great work life balance.\" What does that actually mean?</p><p><strong>Lynne Tye:</strong>          Exactly. Yeah.</p><p><strong>Joel Hooks:</strong>         For me, all my really good friends I made for the most part in the last 10, 15 years have been work related. So, for me, work and life, the whole thing really mixes in together in a lot of ways.</p><p><strong>Lynne Tye:</strong>          I think that means you're doing it right.</p><p><strong>Joel Hooks:</strong>         Yeah, I think so too. I mean, there was a time in my life where I was working a day job, and then to make ends meet I was working another 40 hours. I would freelance in the evenings, and over time ... in my 20s I could handle it, and now I just can't do that. I don't have the energy or concentration. I have five more kids than I did when I was in my early 20s, that sort of thing.</p><p><strong>Lynne Tye:</strong>          Yeah.</p><p><strong>Joel Hooks:</strong>         So, it's tricky, and it changes too, I think, the balance.</p><p><strong>Lynne Tye:</strong>          Yeah, no, exactly. I think for me before, it mattered so much that I think I'd always blurred the professional, and personal line. I've never really liked keeping a very strict divide between those two worlds but, work life balance to me, I was fine. So, I used to work at Homejoy, I mentioned this earlier. We worked a lot. I certainly worked a couple of hundred hour weeks which, is nuts to me now but, we were all just so bought into it, and it felt really fun. Like, we would ... oh my God it's like embarrassing to say this now but, we would sometimes sleep at the office because, we just have to be there in three more hours. So, why not just crash there? But, it was just a really exciting time, and I felt like I had that balance because, I was doing it with my friends.</p><p><strong>Joel Hooks:</strong>         Yeah, like a team, right?</p><p><strong>Lynne Tye:</strong>          Yeah.</p><p><strong>Joel Hooks:</strong>         Like, a real team.</p><p><strong>Lynne Tye:</strong>          Exactly. We were all just taking this risk, and we were gambling, and saying we were going to go all in, and try to make this work. Obviously it didn't work out. Homejoy folded but, no regrets. I think it was a really good experience. But, of course now, oh my goodness. You couldn't, I would not do that again. Yeah. So, my definition has definitely changed.</p><p><strong>Joel Hooks:</strong>         Yeah. So, you wouldn't do that again for one reason because, you've started your own business I would think.</p><p><strong>Lynne Tye:</strong>          Yeah, and if I do work a lot it's kind of like what you're saying, it's because there's no real external pressure. It's because I genuinely want to. Actually, this is something I've been thinking about a lot recently too just because, I have like these really ... I mean, everyone has the ebbs and flows of feeling motivated, or just with energy. I feel like I have some pretty drastic ones, and sometimes when I'm not very inspired, or motivated, I don't like forcing myself to work, because I just know I'm not as productive. It takes me five hours to do something that should take me an hour. But, then when I do have that rush, and I feel real excited I just run with it, and I'll work really long weeks because, I have that. I'm in a state of flow and I don't want to lose the momentum.</p><p><strong>Joel Hooks:</strong>         Yeah, sure. Speaking of your business, so you started a job site which, to me, or to a lot of people even might seem like a nutty idea given the competition. It's Keyvalues.com. I got Shawn Swyx Wang, where was I originally saw the link to the site, and I clicked through, and I'm like, this is amazing. In terms of finding a job, that you've taken this different approach. Can you describe why Key Values is different?</p><p><strong>Lynne Tye:</strong>          Yeah.</p><p><strong>Joel Hooks:</strong>         Keyvalues.com is different to other sites because, it really truly is, and I think it's pretty special.</p><p><strong>Lynne Tye:</strong>          Thanks for saying that. I obviously think it's pretty special too but, I'm biased. So Key Values, the goal is to help software engineers find teams that care about the same things they do, so if you're a developer who cares a lot of contributing to open source, and you want to work on a diverse team, you can find engineering teams who share those values. Or, we were just talking about this, maybe you're starting to think about starting your own family, and having some kids.</p><p><strong>Lynne Tye:</strong>          So, now your priorities change, and you want to find a company that's parent and family friendly. Key Values is really the only site that I've heard of where you can even search for companies, and discover companies based on things like work life balance, or practicing inclusion. If you're a social being, and you don't want to just stay at this one company, maybe you want to work somewhere that really engages with the community. Whatever that community is, but people care about different things, and ultimately that's what differentiates employers.</p><p><strong>Lynne Tye:</strong>          If you're not looking just for a job, there's what matters most, I think it's who you're working with, how you work together, and why. I started Key Values because, those are the things I care about, and there's just no way to search for those things. You Google companies that value work life balance, and yeah, the results aren't great. More importantly, I think people talk about things at the company level but, everyone knows that as a software engineer, your life, your day to day is so different than someone whose on the sales team, or the marketing team.</p><p><strong>Lynne Tye:</strong>          So, it's really just a question of what does your day to day look like? Can you find out more information before having to do the cover letters, applications, phone screens, take home test? There's just so much that developers have to jump through before they can even ask these questions. So yeah, Key Values was just hoping to reverse, or re-order the steps of the interview process.</p><p><strong>Joel Hooks:</strong>         You don't list ... there's no salary information which, I think is pretty radical. That's a decision I'd like to hear more about. Also, how many times a week do people request?</p><p><strong>Lynne Tye:</strong>          I was just going to say I think, to me, of course money matters but, it's just not the most important factor. Especially for software engineers who for the most part, can get any job they want. If you're an experienced developer, you're in high demand, and you really can choose. You're pick of the litter. So, I don't think salary is really the biggest factor. Even honestly just thinking of the range, the range is, I don't know, if we even want to go crazy it's probably from like $80,000 dollars a year to $350,000 dollars a year which, is a big range but, still that's just one dimension. There's so many other things that matter more. So, yeah, I just left it off because, I think .. yeah, it was a really radical decision.</p><p><strong>Lynne Tye:</strong>          People used to ask me a lot more for some reason. I don't think anyone's asked me in a few months. When I first launched it was definitely like, one of the most common comments. Like, where's salary? Your site's great except for it's missing the most important thing, salary. But, I think there's dozens of other job sites out there that focus on compensation. So, those tools already exist for people who care about that the most.</p><p><strong>Joel Hooks:</strong>         To me that's interesting because, keyvalues.com, it isn't the end. Right? If I'm looking for a job, I want to go to Key Values. One, I want to see the company that has inquired, or I'm inquiring at, and what their values are, and then there's one, they probably have an official job listing that has that information-</p><p><strong>Lynne Tye:</strong>          Exactly.</p><p><strong>Joel Hooks:</strong>         And, that kind of stuff so, it's just part of the overall.</p><p><strong>Lynne Tye:</strong>          Yeah, exactly. The way that I think about it also is, the world is kind of split between missionaries and mercenaries. I think a lot of the other tools, and job boards, I think they're built for mercenaries, and there's this other set of people that have just been forgotten. Maybe they're not in the majority but, they don't have a tool for them. They don't have a product made for them. So, that's kind of the intention, to build something for that group of people. Who I belong to.</p><p><strong>Joel Hooks:</strong>         Right. I think I'm like 50/50. The family, and just the general expenses make me have to be mercenary but then, like it's so important to me to have a job that ... I mean, I love work, I don't like jobs. That's how I always put it. If you're going to have to do a thing then, it really should be something that fulfills you in more ways than just financially.</p><p><strong>Lynne Tye:</strong>          Yeah, also because you know that you can do that. You have lots of options to get the dollar amount that you need. So, then how do you chose between those options?</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Lynne Tye:</strong>          Exactly.</p><p><strong>Joel Hooks:</strong>         So, you built Key Values by yourself, you programmed it, you marketed it, you had mentors and input but, you've done this thing by yourself. I'm wondering like, skill wise, what have you had to learn and do to get to the point where you could start a business on the internet?</p><p><strong>Lynne Tye:</strong>          That's a good question. I think, I mean, you don't have to know how to code but, it definitely really helps. I'm sure you know this, I didn't know how to code until 2015. I remember in 2015, I started a book camp, Dev Boot Camp. They're actually not around anymore. I actually didn't finish the program so I didn't technically graduate but, it was really helpful for me, and I didn't even know ... I thought you had to download your terminal. I really was starting at zero. Then, I freelanced a bit. I don't even consider myself at all, experienced with web development. So, I think it depends on your site to be honest. Key Values is not a complex app so, it didn't require too much.</p><p><strong>Lynne Tye:</strong>          I think it's mostly confidence to launch something, and build something. I think it's just being really excited about something, and taking the chance because, the fear is that you'll build something, and no one will like, or it won't work, or it will be a dud but, I think it's the confidence to go for it. That's probably the most important thing.</p><p><strong>Joel Hooks:</strong>         Does it really matter if it's a dud, or it doesn't work?</p><p><strong>Lynne Tye:</strong>          I mean, of course it does but, it doesn't. It doesn't matter in the scope of life but, obviously it sucks to build something that doesn't work out. Actually, Key Values is the first ... it started as a side project. I just wanted to have a side project that I liked enough to work on for more than three days because, I'd always just get bored. Maybe just because, my ideas were bad. But, Key Values like, a week in I was like, I still love this. Then it quickly turned into the thing I wanted to spend all of my time doing. So, yeah, I think that's really important. It's just being really excited about it.</p><p><strong>Joel Hooks:</strong>         So, one of my favorite books is called Apprenticeship Patterns. It has one of the chapters, each chapter is like a pattern in building your skills as a software craft person. One of them is the idea of the breakable toy. So, this is like a side project or whatever. It's something you can play with. It doesn't matter, you can break it, if you break it then it's broken but it's not tragically effecting anybody's life. I looked at side projects that way which, in a lot of ways is like, Egghead IO is my breakable toy. There's a lot of people that watch it but, I always describe it as, it's a video blog. Right? I started a video blog.</p><p><strong>Joel Hooks:</strong>         I've programmed professionally for 10 years now. I switched careers, and then I started this thing, and it wasn't a terribly complex idea. It's the sea of competition that you deal with, and it's like, you've done a business in a sea competition too. Do you worry about all the other people in this space? The big sharks, and being kind of a minnow in the pond?</p><p><strong>Lynne Tye:</strong>          This is such a good question. I've talked about this. I talk about competitors all the time simply because, I don't think we should be talking about competitors all the time but, no, I don't really. I think in the beginning I was really worried about it, and then I was listening to actually a couple of podcasts on Indie Hackers, and they kept saying this thing where you don't need to have a brand new idea. It's okay if it's already been done before. It didn't really click until, I don't know, maybe the tenth time I heard it.</p><p><strong>Lynne Tye:</strong>          If anything, it's actually a huge advantage to have competitors because, you know that there's money flowing. I think there's a lot of companies, founders that I meet, and they just don't even know if people will pay for the thing that they're building. That's a problem I had never had to really think about because, from day one I knew that people ... I know there's a lot of money going into recruiting, and there's a lot of individuals who will pay for recruiters to help place them.</p><p><strong>Lynne Tye:</strong>          So, I knew that was a need. Every company you meet talks about how hard it is to hire engineers. Yeah, the fact that there's all these other tools like Hired, and Triplebyte. There's people paying LinkedIn like, tens of thousands of dollars a LinkedIn recruiter. It means there's a need. So, I think it's an advantage in a lot of ways. Then, in terms of just like, the founder psychology of knowing at any moment you could get crushed, I just think that's okay. I don't know, I've kind of made peace with it. So, this is why I talk about it a lot because, a lot of people tell me I should be more aware of what my competitors are doing. But, I just don't want to live that way. I think it's really stressful, and if I'm not having fun then, it's probably not worth doing to be honest.</p><p><strong>Joel Hooks:</strong>         I actually completely ignore the idea of competitors when I'm building Egghead.</p><p><strong>Lynne Tye:</strong>          That's awesome. I mean, that's awesome to me. I feel the same way.</p><p><strong>Joel Hooks:</strong>         Because, there's huge players, and ed tech is massive. Right? It's billions, and billions of dollars, and billion dollar acquisitions, and all that stuff going on. I'm like, well we're just going to do things how we like to do them to solve the problem that we're trying to solve for the folks that we know and understand. Right?</p><p><strong>Lynne Tye:</strong>          Yeah but, I think that's the other lesson. It was Laura Router I think, yeah, it was Laura Router, she was talking about this. She was just saying how in tech, people have this strange paranoia of building a similar product to something that already exists, and is successful. But, in everything else like, water bottles ... these were her examples. Notepads, sunglasses, there's so many competitors, and they all do well. People still buy these things. So, in other industries people don't think like that. Like, Italian restaurants. If you we're like, hey I want to open an Italian restaurant, I wouldn't be like, oh no but, there's already an Italian restaurant.</p><p><strong>Joel Hooks:</strong>         I'd tell you it's a huge mistake. Restaurants always are.</p><p><strong>Lynne Tye:</strong>          But, you know, there's dozens of bakeries, and Indian restaurants, and salad places, and people still open them, and people still go to them. So, it's funny that in tech, people feel like you have to have this brand new idea. It's so funny to me now because, it really honestly didn't make sense to me for a long time, and now it's so obvious. It's hard for me to un-know it. But, it really did trip me up for a long time.</p><p><strong>Joel Hooks:</strong>         Yeah, I mean, it's tough. Psychologically I think it's tough until ... you have to make that mental decision that this is how I think, and it's not like I'm unwaveringly, we've done competition research. I just try not to let it drive what we do. I want to stick to our core, our key values.</p><p><strong>Lynne Tye:</strong>          Yeah.</p><p><strong>Joel Hooks:</strong>         And, hold the course on that.</p><p><strong>Lynne Tye:</strong>          But, I think that's the thing also, like people who love Egghead, and Egghead is such a cool product. They like it because of the decisions that you've made. You're right, there are other ed tech products out there but, it didn't speak to them. I think that's kind of the beauty of it also, and it makes it easier for us to just be ourselves, and not have work feel like work because, it's just so easy for us to be ... I don't know if that makes sense. You're not trading off, or compromising what you care about, and how you want to do things, and therefore it just ... yeah, I mean that's a decision that I also consciously make.</p><p><strong>Joel Hooks:</strong>         Yeah, like that's why we've forgone taking any investment, too. Right? I don't want ... somebody who gives me millions of dollars, or maybe that's being optimistic. If they give me millions of dollars, they expect something, we're not just passing millions of dollars around, and most of that's going to be like, well you need to move the company this way, we need to get a board in place to check your reckless abandon to doing good business.</p><p><strong>Lynne Tye:</strong>          I'm so on the same page as you. If anything actually, before we even ever talked, I followed you on Twitter, and there's some tweets that you wrote on the same, about this, and I think it really resonated with me, and honestly, I don't know, I think I've told you this but, you basically gave me permission to feel the way that I do. It was really, really helpful for me when I was trying to figure out if I should fundraise or listen to the advice people were giving me.</p><p><strong>Joel Hooks:</strong>         That's awesome.</p><p><strong>Lynne Tye:</strong>          So, thank you. No, really, it actually was a really memorable ... it was late one night. I had a really rough week, I felt a lot of pressure to fundraise, and start a company the way that most startups do in Silicon Valley. I saw your tweet, and I had been like crying, and it was like, I really needed to see that at the time that I did. So, thanks. I don't know if I've told you that.</p><p><strong>Joel Hooks:</strong>         No, you haven't, that's awesome.</p><p><strong>Lynne Tye:</strong>          Yeah.</p><p><strong>Joel Hooks:</strong>         I kind of shied into the void on Twitter a little bit. So, hearing that something landed, and actually resonated.</p><p><strong>Lynne Tye:</strong>          Oh my gosh, no, it really, really did. I shared it with so many people. I remember it was really late at night, too. Everyone's like, why are you on Twitter? Shouldn't you be working? I was like, no this is why. I want to do it my way. So, it was really helpful.</p><p><strong>Joel Hooks:</strong>         So, speaking of doing it your way, and not having investors, how did you pull that off? You live in San Francisco, it's the most expensive city on the planet, arguably. Yet, you still managed to boot strap a business that I think has been ... it's profitable, and growing. So, how did you get from working every day to being able to do this, and build something for yourself?</p><p><strong>Lynne Tye:</strong>          So, I actually did take money because, I did YC.</p><p><strong>Joel Hooks:</strong>         Oh, okay.</p><p><strong>Lynne Tye:</strong>          But, it's funny when I did YC, I was like, the reason why I didn't want to do YC is because, I was really, really attached to this identity and wanting to be a bootstrapped, self funded company. But, also of course, YC is a network of startups that are doing really cool things, struggling to hire engineers. Key Values is trying to help startups doing really cool things hire engineers. So, it seemed like an obvious-</p><p><strong>Joel Hooks:</strong>         That's a good fit.</p><p><strong>Lynne Tye:</strong>          Yeah, if I was doing anything else, I almost definitely wouldn't have done it but, I actually haven't touched any of YC's money. Honestly, that's probably silly but, I just do it for myself. I'm like, I didn't need it, I didn't want.</p><p><strong>Joel Hooks:</strong>         Gain interest on it.</p><p><strong>Lynne Tye:</strong>          Yeah. But, I saved up a lot of money consulting. I think I was saving up not knowing for sure if I was going to start a company but, I knew that I wanted to save up money for something. Like, maybe I wanted to start a family which, I still do. If I wanted to start a business, I wanted to have that cushion, and some run way. But, to be honest I live really frugally. When I first moved to San Francisco I was a grad student at UCSF living on $30,000 a year, that was our stipend. I actually don't know how I did that.</p><p><strong>Joel Hooks:</strong>         That's what I was just thinking.</p><p><strong>Lynne Tye:</strong>          It was a lot of anytime anyone had a free I was there.</p><p><strong>Joel Hooks:</strong>         Right?</p><p><strong>Lynne Tye:</strong>          Ate a lot of oatmeal. It was definitely hard. Then I worked at a startup which, didn't pay well. So, I never really had money or saved. So, consulting was the first time. Getting paid to code, that was really exciting, and then people pay well. Developers do well, and so I got really obsessed with that for a while. Just it was so fun to me, to be able to make money, and save money for the first time. When I started Key Values I think leading up to it, even before I had the idea, I knew that I should probably build up some good habits, and live cheaply. I think I was saving, hoping that I would start a company, and that helped me prepare for it.</p><p><strong>Joel Hooks:</strong>         Yeah, you had to have the thing to do the thing kind of situation.</p><p><strong>Lynne Tye:</strong>          Yeah, exactly. But, yeah, no, I mean I think it's just planning. I think planning is the answer. Otherwise, you do need investment, and a lot of people have good ideas but, don't have the cushion, or the space to even explore or try it. They end up looking for investors before they even have a product, and that's a game I didn't want to play.</p><p><strong>Joel Hooks:</strong>         I think there's value to that approach. I'm not completely anti-investment or anything but, to me, my relationship with the business is really, really strong because, it was literally like from nothing, and every step of the way built this thing, and I'm discussing how we spend money, I'm really discussing how we spend my money, and there's a closeness that comes from not having the big investment and scaling fast, and growing furiously. That's been an interesting experience, and led some depth to the process. Also, I'm generally incompetent in learning as I got along. So, that's-</p><p><strong>Lynne Tye:</strong>          Wait, what?</p><p><strong>Joel Hooks:</strong>         That's how I feel. That's the internal like, I don't know what I'm doing, I'm just kind of like trying to do my best. You know?</p><p><strong>Lynne Tye:</strong>          Yeah, but I love that. I know this is the weirdest ... I feel so guilty saying all these things in Silicon Valley like, sometimes I feel guilty for not being more ambitious but, I think it's just I have different goals. For me, the mental framing that seems different compared to the founder friends have I have is that, it's all ... like, having low expectations makes it so fun because, you just keep surpassing them by doing your best. In the beginning, honestly my goal was just to have a side project that I liked for more than a week.</p><p><strong>Joel Hooks:</strong>         Yeah, same.</p><p><strong>Lynne Tye:</strong>          Once I was there I was like, oh my God this is awesome, I did it. Then it was of course, launching. I've never launched a product, that was super scary, and when I launched that, I was like, I'm done, I did it. I feel like I'm successful. Then of course I was like, okay let's see if I can make money from this. Will anyone pay me for this? Once the first company wrote me a check, and made that deposit, I was like, oh my God I did it, I win. So, I think it's just for me, it helps to have really easy goals to make, to reach.</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Lynne Tye:</strong>          Then it just makes it such a fun journey. I have friends who are like, oh I have to IPO in the next 10 years. It's like, what?</p><p><strong>Joel Hooks:</strong>         Why?</p><p><strong>Lynne Tye:</strong>          I'm like, that's not a fun goal to have.</p><p><strong>Joel Hooks:</strong>         No.</p><p><strong>Lynne Tye:</strong>          That seems stressful and distant, and I don't know.</p><p><strong>Joel Hooks:</strong>         To me that kind of goal would be sad, honestly. When I set out to do this, I had no idea, right? Eventually it evolved into like, well I really like helping people, and I like helping people find jobs, and work in a way. Which, is interesting to me in talking to you, and just your site, and why it resonated with me because, I feel like we share a lot of commonality to what our businesses are here to do because, for me it's not really about the videos. It's more about providing the instructors opportunity, and getting people paid, and then also getting people watching the videos into better jobs. That's what everybody wants right? Everybody wants to learn, and grow, and want to get into the salary bracket you were talking about that software can provide.</p><p><strong>Joel Hooks:</strong>         Not only that, you can take that and learn how to program, and start a business. To me, that blows my mind. There's a Paul Graham essay that talks about that, and the generation of wealth in our modern age.</p><p><strong>Lynne Tye:</strong>          I don't know if I've read that. I'm making a note, I will read that today.</p><p><strong>Joel Hooks:</strong>         It's in Hackers and Painters, and I'll also add a link.</p><p><strong>Lynne Tye:</strong>          Oh, yeah cool. I was just going to say though, I would have totally loved Egghead to learn, and then once I felt confident enough to be an instructor, and then when you get ... I think it's just building confidence. Not even as a developer but, to become a founder. After I launched Key Values, I think in the first couple weeks of YC was the first time ... this was like, in January. When I considered myself a founder. I wasn't even comfortable calling myself, or referring to myself as a founder. It's kind of funny now but, I think that's the point. You learn, and then you feel comfortable enough teaching someone, and then over time you feel really comfortable just knowing what you know, and feeling you're an expert in the thing that you do. Or, not even an expert but, just well versed or competent.</p><p><strong>Joel Hooks:</strong>         A little more competent.</p><p><strong>Lynne Tye:</strong>          Yeah, yeah. Then finding jobs, and then being able to ask for the things that you care about, not just for that paycheck. I mean, that's all progression. After I learned how to code, my first gig, I was like, I'll do it for $20, okay, $15 an hour. I was negotiating against myself because, I was just thrilled to be paid at all for coding. I had just learned how to do that. Anyways, I think again, it's a really cool place to be able to go through so many of those places. I definitely wish I knew it existed.</p><p><strong>Joel Hooks:</strong>         My broad vision of it now is more of a pipeline. Like, a job is pipeline.</p><p><strong>Lynne Tye:</strong>          Yeah.</p><p><strong>Joel Hooks:</strong>         We're paying people $20 an hour to review but, the idea is to get those people though to the end. Right? Through to a job. Even working with companies, probably folks that you're working with too to even place them, and if they don't come to Egghead directly. That's the right idea. I love working on ideas that don't scale. People are constantly wanting to scale, and grow, and I actually like trying to solve problems that don't obviously scale. Which, I think having worked with you and done the process for Key Values to get our profile, that doesn't scale right, out of the box? You have to do it.</p><p><strong>Lynne Tye:</strong>          No, not at all.</p><p><strong>Joel Hooks:</strong>         Lynne has to do it all.</p><p><strong>Lynne Tye:</strong>          It's funny, I love that you just said that. I feel the same way. But, I'm kind of shy about admitting it. Because, I'm just in the city where that doesn't make sense. You get looks if you say things like that, I don't know. But, I think the hands on part is so meaningful. Actually you know, when I was in grad school I think one of the reasons why I didn't like research was because, obviously you're helping people. I was trying to think of, or develop therapies for parkinsonian patients, and that obviously has a very clear mission, and impact but, I felt sad that it was so removed. I would never meet someone, and I was really only contributing to that. But, I feel like there's no one that I would sit across a table, and they would look me in the eyes, and say, \"Thank you for this that you did.\" I think I just care a lot more about those, how close you are to the people that you're helping. If that makes any sense.</p><p><strong>Joel Hooks:</strong>         Yeah, totally.</p><p><strong>Lynne Tye:</strong>          Of course helping as many people as possible is great but, it also means a lot to me that I'm close, and know these people.</p><p><strong>Joel Hooks:</strong>         Yeah, I've gotten a couple hand written thank you notes.</p><p><strong>Lynne Tye:</strong>          Oh yeah.</p><p><strong>Joel Hooks:</strong>         Sent to me.</p><p><strong>Lynne Tye:</strong>          I'm not surprised.</p><p><strong>Joel Hooks:</strong>         I was just like, what? One, that anything I say or do would have that effect, and that's kind of, it's not really impostureous syndrome, I'm really trying to build something that will help people. So, that result is very much what I'm looking for but, just that it actually works. Right?</p><p><strong>Lynne Tye:</strong>          Yeah, I mean, I'm not surprised that people would do that. That's the best validation.</p><p><strong>Joel Hooks:</strong>         For sure.</p><p><strong>Lynne Tye:</strong>          That's what makes work not feel like work.</p><p><strong>Joel Hooks:</strong>         I feel like when you build this thing, and you have something, especially when ... is Key Values paying your rent at this point?</p><p><strong>Lynne Tye:</strong>          Not quite yet, soon hopefully.</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Lynne Tye:</strong>          Also, to answer your question, I have to say, I do have rent control in San Francisco. So, I'm not paying the ... obviously I'm still paying for rent but, it's not as crazy as some other folks.</p><p><strong>Joel Hooks:</strong>         Oh, that's great.</p><p><strong>Lynne Tye:</strong>          So, that definitely is a lucky thing. I'm in the same apartment that I moved into when I moved here in 2010 for grad school.</p><p><strong>Joel Hooks:</strong>         Oh, that's good.</p><p><strong>Lynne Tye:</strong>          So, that's definitely ... I'm very fortunate to have had that.</p><p><strong>Joel Hooks:</strong>         When I got there, as a business, I see it with all the faults right? To me it's like this garden of low hanging fruit is how I describe it. There's so much to do, and so many things we can pick out that add value to what we're building. That's probably one of my favorite aspects of starting something, and that we're able to work on, on an ongoing basis.</p><p><strong>Lynne Tye:</strong>          Yeah. I talked to everyone on your team, and the fact that you've been able to build not only a product that helps so many people but, a company that people genuinely love to work at, and feel lucky to, I mean yeah, you did it.</p><p><strong>Joel Hooks:</strong>         That's good to hear.</p><p><strong>Lynne Tye:</strong>          Of course there's more to do, right? But, definitely I'm all about taking a moment, and being like, I did it. I'm already here, and celebrating that. I'm definitely good at that. I think there's a lot of people who need the reminder to take a moment, and just celebrate what they've done already, no matter what stage they're at. Anyways, I hope you do that.</p><p><strong>Joel Hooks:</strong>         Yeah, I try to.</p><p><strong>Lynne Tye:</strong>          Okay.</p><p><strong>Joel Hooks:</strong>         I had a question just as kind of a ... we're running to the end of the thing here but, we can keep talking it doesn't matter. So, I wanted to ask you about your education because, you've done some fairly intense education in your life. You went to MIT, and got a degree, and then moved to San Francisco to pursue your PHD. You were studying essentially how the brain works, cognitive and neuro science.</p><p><strong>Lynne Tye:</strong>          Mm-hmm (affirmative).</p><p><strong>Joel Hooks:</strong>         I'm wondering, and I was curious because, of your studies mostly. Right? You're studying the brain, and how the brain works, and how our minds function. Has that helped or affected your transition into the software engineer side of your career?</p><p><strong>Lynne Tye:</strong>          It's so funny as you were asking the question, I was like, yeah I could probably paint a nice picture but, real talk, no. So, I studied brain and cognitive sciences at MIT, and then I was pursuing my PHD in neuroscience but I dropped out. So, don't give me credit for that, I'm a quitter there but, with neuroscience, I mean, it doesn't really translate. I think that was the biggest fear is that I had spent so much time laser focused on developing skills that wouldn't transfer to other things. My parents definitely were really worried for me. For example-</p><p><strong>Joel Hooks:</strong>         That conversation must have been funny.</p><p><strong>Lynne Tye:</strong>          Funny's not the right word.</p><p><strong>Joel Hooks:</strong>         No, it's not.</p><p><strong>Lynne Tye:</strong>          Yeah, that was hard. Also, I don't know if you know this but, my parents and my sister are all academic professors. So, that was the family business. Growing up I knew I wanted to be a professor too. So, dropping out of grad school was for sure the hardest thing I've ever done. It was like, yeah. It was just like leaving everyone I knew, everything I knew. Me coming to terms with the fact that I'm not the person that I always thought I was, it was a hard time.</p><p><strong>Joel Hooks:</strong>         Shattering your entire reality, in a lot of ways.</p><p><strong>Lynne Tye:</strong>          Oh yeah. It was a quarter life crisis for sure. I was like, I feel young to be having this but, I'm definitely having a life crisis. It was a lot but, the skills I learned in grad school I think aside from like, communication, writing, those things definitely are transferable to any industry. But, my surgical hands, I'm not implanting optic fibers into tiny mouse brains. I don't look into microscopes anymore. I don't run experiments the same way with animal models. It's totally different.</p><p><strong>Joel Hooks:</strong>         I'm not going to lie, that sounds kind of fun though.</p><p><strong>Lynne Tye:</strong>          It really is, I think that was the other thing that was tricky though because, I enjoyed doing it which, kept me ... it was confusing because, I enjoyed the day to day but, obviously the goal is to eventually become a professor, and run a lab, and have other people do those things for you. It's just it's very analogous to start a company but, I like doing the hands on stuff. Which, is actually kind of part of the reason why I don't want to scale so fast because, I like doing it.</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Lynne Tye:</strong>          I don't want to just hire a bunch of people to figure out how to do these things for me, I really want to learn, and do it myself.</p><p><strong>Joel Hooks:</strong>         That's totally how I started, and then over time kind of grew to, well this would be really neat because, I can't be an expert in everything at the end of the day. So, it's like, let's get an expert that can do this better than me, and learn from them too, right?</p><p><strong>Lynne Tye:</strong>          Exactly but, I think it's different than not knowing any of it, and just hoping someone will figure it out. You're not even capable of assessing if they're doing a good job. I think that's something that I don't feel ... like, I like knowing of course you're right, I'm not going to be an expert at everything. In fact I might not even be an expert at anything if I just keep ... but, I'm okay being good, or slightly above average at multiple things. But, I enjoy that. Obviously when you get your PHD, you're literally trying to become the world's expert at this one very niche topic. That doesn't suit me. I'd prefer to be a jack of all trades.</p><p><strong>Joel Hooks:</strong>         I'm kind of anti school at all levels. Maybe one of my most unpopular opinions that I hold.</p><p><strong>Lynne Tye:</strong>          I mean, it's not for everyone.</p><p><strong>Joel Hooks:</strong>         I agree. I guess it's for some people, and just the idea of the university model in this modern day of the internet feels like it's deteriorating and I don't know, does it have a long and bright future? The university system through PHD's, and kind of the hustles? I read a great articles about the PHD system, and how it's kind of just a scam, and a gate keeping mechanism for educators.</p><p><strong>Lynne Tye:</strong>          It's tough. I don't know ... it's hard to say what will happen. I feel like academia is just so ... it couldn't be more different from [inaudible 00:37:47] and in tech where things change so rapidly. Every couple of years things change, and you really have to keep your ... that's why people are always nervous about their coding skills getting outdated. There's new framework coming in. Maybe what you're doing now isn't going to be relevant in a few years. With academia it's just so slow for any changes to happen.</p><p><strong>Joel Hooks:</strong>         They'll kill you at the last step.</p><p><strong>Lynne Tye:</strong>          Yeah, people don't even retire until they die. A lot of professors ... in that regard, it's really hard because, it's hard to get a job because, it's not like jobs are being created there's a pretty finite number, and you kind of almost have to wait until someone leaves. This sounds really morbid but, you're basically waiting for someone to die to get that position. So, it's really hard, I think a lot of PHD graduates, they don't stay in academia because, they're definitely just doing the simple math, there's not room for everyone.</p><p><strong>Joel Hooks:</strong>         That's why the PHD is a gate keeping process in a lot of ways too.</p><p><strong>Lynne Tye:</strong>          Yeah, this conversation's-</p><p><strong>Joel Hooks:</strong>         We don't have to go into details about this one.</p><p><strong>Lynne Tye:</strong>          It's a touchy one with my family, and I but, obviously everyone in my family is like, stellar, and they're killing it. So, they're not at risk but, it's the hard truth. It was tricky because, for my mom and my dad, 30, 40, 50 years ago things were so different, and the landscape is really different. It's definitely more competitive now. I can't imagine it's going to get less competitive as time goes on but, I do think there are people who do love school. You may not be one of them but, some people really love ... they want to get their PHD, and spend four to ten years just going really deep on something, and basically being a student for longer.</p><p><strong>Joel Hooks:</strong>         It probably depends on what you're studying too because, to me, software, building a business, these kinds of things. Going to get an MBA, I don't think that's going to prepare you to build a business. If you study computer science, you'll definitely learn at a low level how computers work but, if someone was like, hey I want to start programming computers, and get one of these good paying jobs, should I start school today? I would say no, go to Free Code Camp. Get to freelancing as soon as possible, and build it that way, just put it out there, and make your profile wherever, and start gaining experience. Free Code Camp's curriculum is amazing if anybody is trying to start from the beginning, and learn how to code from scratch.</p><p><strong>Lynne Tye:</strong>          Oh, I didn't even know about that. To be honest, I did the boot camp because, I'm a student, I've been groomed to be a professional student. I need the structure, and I needed something that seemed familiar to me to learn. Then half way through I realized, I actually didn't really, I just needed a little push. No, I actually agree. I think the thing that was so appealing about coding is that it's almost like if you start today, in a year or two you might be sitting side by side with someone whose been doing it for 10, 15 years. Because, maybe they were professional, and they're a PHP developer but, now you guys are both learning React. I mean obviously they have more context but, it's easier to get in the game, and not be so far behind.</p><p><strong>Joel Hooks:</strong>         It's an infinite puzzle.</p><p><strong>Lynne Tye:</strong>          Yeah.</p><p><strong>Joel Hooks:</strong>         If you think of this as an infinite rubrics cube, and you'll solve one side, and now you got to work on the other.</p><p><strong>Lynne Tye:</strong>          Yeah, exactly. It's maybe shitty and scary for people who've been in the game for a long time but, for up and coming folks it's like, you can be 30 years old, and learn, and not be that behind but, it is pretty intimidating if you're 30, and you're like, oh maybe I should get my masters or PHD in something I've never studied before because, it's a ladder, it's hard to shortcut. It's harder to skip rungs.</p><p><strong>Joel Hooks:</strong>         I got my first programming job when I was 35. I tried to go back to school, and I was doing it, it was so grueling, and slow. I was trying to do night school. I'd have to leave every day, and then at the end of the last semester I went, I was like, I'm also setting a bad example for my children who are all home educated, I should really just get the stack of books, and do the work at home and represent. Which, is what I did over time.</p><p><strong>Lynne Tye:</strong>          That's a great story, I didn't know that. That's so funny, I love that, that was a motivation for you.</p><p><strong>Joel Hooks:</strong>         I was gone, I wasn't there at home, and then at the same time, I'm like hey, this is one thing, and we should do it this way, and then I'm doing the exact opposite.</p><p><strong>Lynne Tye:</strong>          Yeah, that's interesting, I like that. I mean, things work out, everyone's different, and I think that's honestly the hardest part about life. Not even learning how to code, or starting a company or any of that. I'm guilty of this too, we all want to meet that one person who can just tell us how they did it, and we'll just follow in their footsteps. I want someone to like hand me a playbook or something that worked for me. But, it just doesn't work like that. We're all so different, and not only are we different but, the times change, the context changes. So, you just have to figure it out yourself, and everyone has things ... it's just actually, this is analogous to work life balance. It's just everyone's different, and there's no shortcut, you have to just figure out how things work for you, and what matters to you.</p><p><strong>Joel Hooks:</strong>         This is just actually summarized why I don't like the general education system that we have here in the US.</p><p><strong>Lynne Tye:</strong>          Because, it says you have to go this one way. Yeah, no, it's interesting. Even at MIT there was tons of people, I actually have friends who dropped out for sure, and they're doing great. I don't think dropping out was an option for me. It didn't feel like one with my family, it's totally not. But, I really, really look up to people who drop out I guess because, I've also dropped out now. But, I think it's really amazing when people can do that at an earlier age because, it means they know themselves, and that's the hardest part.</p><p><strong>Joel Hooks:</strong>         I mean, at some point, some folks have the realization that they're going to have to learn everything for themselves, and do everything for themselves and spoon feeding is generally not an option which, isn't, I don't think, what's trained into us as youth going through the normal system. I wish it was, I think you could make school good. It's just for me and my personal opinion, it didn't work for me. I'm trying this radical experiment over the long term on all my children for better, or for worse, we'll see how it works out. So, far it's worked out really well.</p><p><strong>Lynne Tye:</strong>          Good for you, you have a good sample size.</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Lynne Tye:</strong>          Please share your conclusions.</p><p><strong>Joel Hooks:</strong>         I play a long game is what it gets down to.</p><p><strong>Lynne Tye:</strong>          No, I love that. No, go ahead.</p><p><strong>Joel Hooks:</strong>         I was going to say, we'll close it out, and I wanted to ... so someone whose learned how to program, and they want to start their own product business, what would be your top tips? Things that you've learned, what you'd advise them to do in terms of getting started, and building something of their own?</p><p><strong>Lynne Tye:</strong>          Okay, I guess first thing is to, if you don't know what you want to build yet, the idea generation part I'm honestly so bad at that part, admittedly.</p><p><strong>Joel Hooks:</strong>         Me too.</p><p><strong>Lynne Tye:</strong>          Yeah, it's really hard, wow. But, while you're thinking, and brainstorming, start collecting the skills that you think you'll need. Sometimes it's just like really basic stuff. Writing marketing copy, really hard. Basic design skills, not everyone has those. So, start trying collecting little bits of knowledge here and there.</p><p><strong>Lynne Tye:</strong>          SEO, oh my gosh, I wish I knew was SEO was when I started. I had no idea. Regret but, just like becoming aware of the things you'll need to know, and gaining some knowledge about those. Then in terms of idea generation it is discipline. You should just practice writing down 10 ideas every day. They can be stupid, they don't have to be brand new. Then eventually some of them will be kind of ones that you think about the next day. You're like, I kind of like that.</p><p><strong>Lynne Tye:</strong>          Then of course that idea of validation, that's a whole other thing but, I think even if you don't know where you're headed yet, it's still worthwhile to prepare. I guess an analogy would be like, if you're going on a trip, you don't know where you're going yet, you still are going to have to pack once you figure out where you're going. So, you might as well start packing a little bit.</p><p><strong>Joel Hooks:</strong>         Yeah, I totally agree with that. I learned how to program so I could start something, I read Paul Graham, and I was like, man I have to learn how to code if I'm going to do any of this.</p><p><strong>Lynne Tye:</strong>          Hell yeah.</p><p><strong>Joel Hooks:</strong>         Then I was like, oh I need to know economics. Oh, I need to know marketing. Oh, I need to know general business strategy, all these kinds of skills. It's stuff you could hire, or work with other people but, at the same time like you said early on, I need to also understand them to have conversations about them.</p><p><strong>Lynne Tye:</strong>          Yeah, of course. How can you hire someone for something that you know nothing about? That scares me but, also if you like learning which, we both obviously do, then it's really fun to learn about all these different worlds. Even to know that they exist, that's really, yeah.</p><p><strong>Joel Hooks:</strong>         Yeah, for sure. Do you have any favorite people, or resources in terms of starting a business, and coding that you send people to if they ask you about these things?</p><p><strong>Lynne Tye:</strong>          Yeah, well I've been sending people to Egghead, and also of course for starting a business, Indie Hackers was key to me even feeling like it was possible for me to start a company. Just hearing all the success stories but, also there's that forum where you can ask other people at the same stage as you for advice, and help, and I think that's really, really helpful. Yeah. I think those are probably two really good resources. Why not start there?</p><p><strong>Joel Hooks:</strong>         My two currently that looking back would be Nathan Barry's book, Authority which, is I think only available in hard cover on Amazon, and then Amy Hoy's 30 by 500 course which, is-</p><p><strong>Lynne Tye:</strong>          Oh yes, I've heard so much about ... by the way, Amy Hoy, and Nathan Barry, I didn't know who they were until Indie Hackers. It's funny, I was in Silicon Valley, I worked at a tech company but, I really didn't know anything about any of this world until last year. Honestly, you know what else? I think people should get on Twitter.</p><p><strong>Joel Hooks:</strong>         Yeah, I agree.</p><p><strong>Lynne Tye:</strong>          I used to hate Twitter, I was so anti-Twitter. I love it now.</p><p><strong>Joel Hooks:</strong>         I use an alternative client, I use Tweet Bot, and it's like the anti-Twitter. Twitter just removed a bunch of their abilities to use the API so, now it no longer has the statistics. Which, are vanity metrics like, how many likes and re-tweets you're getting. If they're there, you're going to obsess over them, and a native Twitter client is so anxiety ridden for me but, this client has RegX, muting, and it does chronological feed. It's only on IOS but, it's really, really nice, and makes this calm Twitter that I'm able to treat like a Bonsai tree to get my feed.</p><p><strong>Lynne Tye:</strong>          Nice, Tweet Bot, noted. I think Twitter's great.</p><p><strong>Joel Hooks:</strong>         It does bring a lot of anxiety though I think, with some, and I think they do it on purpose but-</p><p><strong>Lynne Tye:</strong>          You mean Tweet Bot?</p><p><strong>Joel Hooks:</strong>         No. Just Twitter in general. The Twitter official channels feel like they want to amp me up a little bit, and show me too much stuff, and buzz my pocket too much. You know?</p><p><strong>Lynne Tye:</strong>          I turn off all notifications, yeah. But, I think Twitter's something I wish I got into earlier. Especially for developers. It is such a good ... I didn't realize how many software engineers were on Twitter but, I've witnessed so many cool things happen. I've met people on Twitter that are amazing, and helpful but, also people find jobs, people help point each other to good resources, you meet really interesting people that you never would have otherwise had the opportunity to meet them.</p><p><strong>Joel Hooks:</strong>         I put my entire career ... I put Twitter frankly, it was just in terms of socializing and being able to have that work when I was with Fort Worth, Texas where there was no real significant network. I could build this online, and work on how I interact with people, and being able to help and be helpful.</p><p><strong>Lynne Tye:</strong>          That's so cool.</p><p><strong>Joel Hooks:</strong>         Really cool.</p><p><strong>Lynne Tye:</strong>          It's so, so cool yeah. Anyways, I feel like ... it's funny, I talk to people who now hate Twitter but, I was like, I used to, you'll see.</p><p><strong>Joel Hooks:</strong>         I think people hate ... well, it's politics Twitter that's really the horrible part, and politics and development, and politics and government, all that.</p><p><strong>Lynne Tye:</strong>          Yeah, but you don't have to participate.</p><p><strong>Joel Hooks:</strong>         It's easy to filter the keywords, and I'm good.</p><p><strong>Lynne Tye:</strong>          Yeah.</p><p><strong>Joel Hooks:</strong>         I honestly don't worry about oh you're going to live in a bubble, and I'm like, eh, maybe that's okay.</p><p><strong>Lynne Tye:</strong>          I say that too. Yeah, I know, okay.</p><p><strong>Joel Hooks:</strong>         All right, Lynne.</p><p><strong>Lynne Tye:</strong>          At least you're aware of it.</p><p><strong>Joel Hooks:</strong>         We could probably go on for another hour but, I'll let you get back to your day.</p><p><strong>Lynne Tye:</strong>          I know, thank you so much, I'm sorry for going over, I'm a chatter.</p><p><strong>Joel Hooks:</strong>         No worries. I really enjoyed talking to you, and look forward to talking to you more, thanks.</p><p><strong>Lynne Tye:</strong>          Thanks Joel.</p>",
    "slug": "lynne-tye-founder-of-keyvalues-com",
    "description": "<p>On this episode, I get the chance to speak with Lynne Tye, the creator of Key Values, a place for Software Developers to find a company that fits their values beyond just what tech stack they use or salary they provide.</p><p>Lynn has had a diverse career and only started coding in 2015. Once she cut her teeth freelancing, she realized it was hard to find the right company to work with. When job listings and recruiters proved unhelpful, the idea for Key Values was born.</p><p>Tune in to hear us talk about finding the right company culture, work/life balance and why it doesn't mean the same thing to everyone, and the value of hands-on involvement.</p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/a8c84eea/transcript\">\"Lynne Tye, founder of keyvalues.com\" Transcript</a></p><h3>Topics:</h3><ul><li>Weighing the importance of your time</li><li>What does work/life balance mean to <i>you</i></li><li>What it takes to launch your project</li><li>Why loving what you do is so important</li><li>Taking investment money</li><li>Ambition and expectations with yourself</li><li>Lynne’s previous career path vs. her current one</li><li>Figuring out what works for you in your education</li><li>Starting a business when you just started to program</li></ul><h3>Resources:</h3><ul><li><a href=\"https://www.keyvalues.com/\">Key Values</a></li><li><a href=\"https://www.indiehackers.com/\">Indie Hackers</a></li><li><a href=\"http://shop.oreilly.com/product/9780596518387.do\">Apprenticeship Patterns</a></li><li><a href=\"https://www.amazon.com/Hackers-Painters-Big-Ideas-Computer-ebook/dp/B0026OR2NQ\">Hackers and Painters</a></li><li><a href=\"https://www.freecodecamp.org/\">freeCodeCamp</a></li><li><a href=\"http://nathanbarry.com/authority/\">Nathan Barry - Authority</a></li><li><a href=\"https://30x500.com/academy/\">30x500</a></li></ul><h3>Lynne Tye</h3><ul><li><a href=\"https://twitter.com/lynnetye\">Personal Twitter</a></li><li><a href=\"https://twitter.com/keyvaluesio\">Key Values Twitter</a></li></ul><h3>Joel Hooks:</h3><ul><li><a href=\"https://twitter.com/jhooks\">Twitter</a></li><li><a href=\"https://joelhooks.com/\">Website</a></li></ul>",
    "duration": 2979,
    "episode_number": 23,
    "contributors": [
      "Joel Hooks"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/jakyy",
    "path": "/podcasts/lynne-tye-founder-of-keyvalues-com",
    "published_at": "August 29th, 2018",
    "url": "https://egghead.io/api/v1/podcasts/lynne-tye-founder-of-keyvalues-com",
    "edit_podcast_url": "https://egghead.io/podcasts/lynne-tye-founder-of-keyvalues-com/edit"
  },
  {
    "id": "podcasts-00000000000000000067",
    "title": "Jen Luker, a11y champion",
    "summary": null,
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/01ceb024-f64e-448b-b645-e98ef6e0663b/6113ba2b_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/01ceb024-f64e-448b-b645-e98ef6e0663b/1534900131artwork.jpg",
    "simplecast_uid": "01ceb024-f64e-448b-b645-e98ef6e0663b",
    "transcript": "<p><strong>Joel Hooks:</strong>         Alright. Hi, Jen.</p><p><strong>Jen Luker:</strong>          Hey, Joel.</p><p><strong>Joel Hooks:</strong>         So, I'm really keen to learn more about accessibility and I think you might be the person to tell me about it. So, I thought we'd start with just talking about what accessibility is, in terms of how we use the internet.</p><p><strong>Jen Luker:</strong>          As far as how we use the internet, accessibility is the ability for everyone to be able to participate and interact with the internet. So, whether you need to use web technologies to help you interact with it or not is slightly irrelevant. The point is that you can.</p><p><strong>Joel Hooks:</strong>         So, using screen readers, that's part of it. And I think that's something that most people would associate, oh if it's accessibility that means we can use a screen reader, but that isn't necessarily the end of the definition of accessibility. Is that?</p><p><strong>Jen Luker:</strong>          Absolutely not. That's just the tip of the ice burg. That only covers people with enough visual disability to need a screen reader, but there's plenty of other physical disabilities that make how you interact with the web useful for accessibility purposes. One of them is the ability to use only a keyboard. Another one is to have high enough contrast on your website so that people with other vision disabilities like being color blind can see those contrasts.</p><p><strong>Joel Hooks:</strong>         Yeah, so we've had particular challenges with Egghead, because it's video, right?</p><p><strong>Jen Luker:</strong>          Right.</p><p><strong>Joel Hooks:</strong>         So, there are certain challenges there where if I can see the video and hear the video it works for me. How do you even start? What's the minimum that every single website should do? I think that's my question, really. What's the next step if we haven't focused on this at all as an organization or are starting a new software project that we're gonna put out there, where do we begin and what's the course of action that you think people should take?</p><p><strong>Jen Luker:</strong>          So, one of my favorites to start with is the Deque Axe Chrome Firefox plugin. Once you get that installed and you run an audit on your website, you can start seeing what kind of issues that you have. And if you use Lighthouse, for instance, to also test your websites and PWAs, then that also is including the Axe core for the accessibility testing. So, either one of those will do. The Axe plugin actually goes into much more detail and tries to teach you what the limitations are, what the problems are, and the different options for fixing it, whereas Lighthouse only gives you the problems.</p><p><strong>Joel Hooks:</strong>         So, what's Lighthouse, just for folks that haven't heard of that before?</p><p><strong>Jen Luker:</strong>          Lighthouse is auditing that's built into at least Chrome to allow you to test performance, accessibility, whether your website is progressive web app capable, whether you use best practices. It does quite a few audits to verify that your site is ready to go for PWAs, which is like a web app that you use on your phones, but also covers all the other options.</p><p><strong>Joel Hooks:</strong>         So, does a PWA, progressive web app, does that deal with accessibility? Does that address accessibility issues?</p><p><strong>Jen Luker:</strong>          It doesn't, but their accessibility audit portion does.</p><p><strong>Joel Hooks:</strong>         Oh, okay. So, it's related. So, it's auditing accessibility and are you a progressive web app and kinda giving you hints as to what you can do to fix that. So, Lighthouse is a basic plugin. I've seen that. That's on the audit tab, I think.</p><p><strong>Jen Luker:</strong>          Right, it is.</p><p><strong>Joel Hooks:</strong>         And that just runs the Google Lighthouse for us. I actually hadn't even heard of that before a couple weeks ago, and we ran it on our site and were surprised. But it was cool because it gave us performance targets.</p><p><strong>Jen Luker:</strong>          Mm-hmm (affirmative). It does.</p><p><strong>Joel Hooks:</strong>         And I was thinking, performance is important in terms of accessibility in a lot of ways, too, because beyond physical limitations with interacting with the computer, we also have limitations in terms of infrastructure or how fast a page loads will effect somebody that doesn't have 250 megabit internet, which is blazing fast, right? But that's not the norm even for the global usage, I wouldn't think.</p><p><strong>Jen Luker:</strong>          It's absolutely not. If you're sitting in a hotel or a hospital, for instance, and trying to connect to the internet, you're going to learn very fast how easy it is for even first world countries to lose internet access or to have access that's so low it makes everything painful.</p><p><strong>Jen Luker:</strong>          So paying attention to performance and how your website loads even on very slow internet connections allows you to not only access the people that can afford blazing fast internet, but also all the people that can't.</p><p><strong>Joel Hooks:</strong>         Yeah. Look at our business, right, and I'm always thinking I want this to be more accessible and I want more people to be able to use it. It's a pretty good business decision, but just looking at it. I'd feel bad, right? We didn't have closed captions for the longest time, but we then published transcripts, which aren't as good, but they're better than nothing. I was like, oh I feel so guilty. I was having a Twitter conversation with Marcy Sutton and she's like, well no, you have something. You've made an effort and you've pushed in a positive direction. And I think a lot of people probably feel bad and they feel overwhelmed by the thought of accessibility as this massive huge thing that you have to do. Is it important for people just to make small steps forward if they can't do the whole ball of wax.</p><p><strong>Jen Luker:</strong>          Oh absolutely. Anything that you do allows more people to be able to access your sight and be able to utilize it in the way that everyone normally does. So, every single step you take is helpful. When you definitely run the audits for the first time and you see 300 errors or problems that you're running into, it can be really overwhelming at first. So I try to lay out a few steps that people can take to start with to start making those strides one bit at a time.</p><p><strong>Jen Luker:</strong>          One of the things that we recommend you start with is your definition of done. If you can include something like JSX plugin, react, ally, or JSX react native A11Y, then you're definitely at least starting to audit while you code, so you're getting a lot of those low-hanging fruit even before you push.</p><p><strong>Jen Luker:</strong>          And after that, you start with your reusable components, the stuff that you end up copy and pasting everywhere is the code that if you fix it once it fixes it for everything. And then after that you start looking at your individual pages to start fixing the one-off items that the audits start complaining about, and then after that you're looking at content and how you phrase things in order to make it easier for people to understand.</p><p><strong>Jen Luker:</strong>          So, that's kind of the steps that I recommend to start working towards making something accessible. But definitely start with as much low-hanging fruit as you can. It's amazing how just a couple of changes in very few portions of your website can make it much more accessible for a much larger group of people.</p><p><strong>Joel Hooks:</strong>         Yeah, for us, after we did the transcripts, that was like a step. And then, because we have closed captions now, which we just got to introduce this year and because we had this nice backlog of transcripts, moving to closed captions was actually pretty straight-forward, so we got to progress it. And I'm also taking notes because I feel like this is something that we can actively start doing with your recommendation.</p><p><strong>Joel Hooks:</strong>         You mentioned Axe, and that's from, is it Deque, D-E-Q-U-E, is the company?</p><p><strong>Jen Luker:</strong>          Right.</p><p><strong>Joel Hooks:</strong>         So, the Axe plugin, it sounded like, from what you said, is kind of like Lighthouse but more?</p><p><strong>Jen Luker:</strong>          It is more. So, it's an extension onto either Chrome or Firefox, so it'll be an additional tab and the developer tools, just like if you were to install the React plugin. The benefits, like I said, over just using Lighthouse is that it gives you links within each error and it'll highlight the portions on the page that have the problems, and it'll give you more information regarding what the problem is and multiple solutions to solve it.</p><p><strong>Jen Luker:</strong>          The links themselves go tell you about why it's a problem and also more reasons to fix it, more ways to fix it.</p><p><strong>Joel Hooks:</strong>         Yeah, I've interacted with some of their articles that they have. And just, I haven't used this plugin. I've used some tool that analyze a page, it feels like. But they have extensive articles on literally how to go in and implement these solutions. It feels like they spend a lot of time and effort building up a catalog.</p><p><strong>Jen Luker:</strong>          Yeah, it is Deque's business model, actually, making things accessible, making accessibility tools and audits. So, it's their business to make sure that the audits that we run are successful and that they don't provide false positives.</p><p><strong>Joel Hooks:</strong>         Yeah, that's great.</p><p><strong>Jen Luker:</strong>          And false negatives. It also means that Axe can only cover between 30 and 50% of your app, depending on how much text there is. In the end, you are always going to have to have a person manually go through with it a screen reader with a keyboard and verify that how a user interacts with it is understandable. It isn't just the technology, it's also the text, it's whether it's understandable, it's whether people can find the flow of the website usable in an easy manner, if it's actually a user-friendly website.</p><p><strong>Joel Hooks:</strong>         Yeah, so that gets into usability that we think about, like making your website efficient. What strikes me, what's interesting to me when you start talking about the words is it almost sounds like how you think about marketing when you're building a site. You want it to be clear and easy to understand and you want people to get what they want how they want it. There's a book, Don't Make Me Think, that I really enjoy that kind of digs into that. People don't want to think, they just want to do. And in a way, these marketing principles are actually accessibility principles also.</p><p><strong>Jen Luker:</strong>          They absolutely are. One of the benefits of incorporating a lot of these accessibility features is they end up helping everyone. One of my favorite quotes says something along the lines of when our library created ramps that got them into the library, it helps not only the people in wheelchairs, but also the couple with a baby and the deliver driver with a trolley and the student on a bicycle. So, those accessibility features don't just help those that require assisted technologies. They help everyone.</p><p><strong>Joel Hooks:</strong>         Yeah. I hear this objection a lot and people will use, I'm using air quotes, the business. The business will never do this. The business will never support this. The business will never provide a budget for this. And I'm wondering if somebody does care, and hopefully people do, how do you get past this objection of the business, which seems to kind of sluff it off onto an inanimate object, in a lot of ways.</p><p><strong>Jen Luker:</strong>          It really does. And though we can effect people, and the people that make up a business are still people and we can remind them of why we need to do this. They can really want to, but they have to report to people, and they have to report to people, and those people have budgets. How do you get this to be a priority?</p><p><strong>Jen Luker:</strong>          And I want to use an example. Well, we'll go back a little bit before that and say, according to the World Health Organization, about 15% of the population has some form of disability. And those numbers are extremely conservative because they're done based on people that fill out forms, and I had a friend who said my 98-year-old grandmother can't walk anymore, can't see anymore, can't really hear anymore, but if you ask her if she's disabled, she'll say no. So, it's definitely a conservative number.</p><p><strong>Jen Luker:</strong>          In 2012, the US did an audit, as well, to see how many are disabled here, and the answer came down to about 19%. So, still a conservative number. So we're looking at 15 to 20% of the population is suffering from some sort of accessibility. If your website is accessible, you access those 15 to 20% of people. And if you look at your website in you look at your income and you look at the number of people that are accessing your site, you can say that if your company is $10 million and you increase the revenue by 20%, because you get 20% more people using your website because it's accessible, that makes a $10 million company into a $12 million company just by incorporating some accessibility features. That's not adding any other features. That's making sure you have a high enough color contrast, that's making sure that you can navigate with a keyboard, that's making sure that a screen reader can navigate through your site in some sort of reasonable manner. That's huge.</p><p><strong>Jen Luker:</strong>          I mean, it's been a long time since I've incorporated a single feature that's increased my company's revenue by 20%. So not only that, but only about one in 10 websites, according to an audit that Deque did, is accessible, which means not only are you increasing your revenue by 15, your readership or usership by 15%, but you're cornering the market on the larger 15% of the population that's trying to use that feature that your website offers.</p><p><strong>Jen Luker:</strong>          So if you could be one of the 10% of websites that's accessible, you get much more of that market share than others, and then you take that and you add it to the fact that when you incorporate those accessibility features, you access people that have temporary or circumstantial disabilities like a broken arm or holding a baby, and you make it much easier for them to use. So then your entire readership actually has much easier access to get through your funnel. The easier it is to get through your funnel, the more likely it is they'll come back and do it again. So, you're increasing it based on the broader concept of readership and usership, in addition to cornering the market and adding an extra 20% on top of that.</p><p><strong>Joel Hooks:</strong>         Yeah, so it's a market advantage. It can be a competitive advantage for a business. People have a sea of choices, right? So why wouldn't they use the thing that's the easiest to use or even usable at all for them?</p><p><strong>Jen Luker:</strong>          Exactly. It's like they'll use you over anyone else because you're the only one they can use.</p><p><strong>Joel Hooks:</strong>         In my experience, most of the projects I've worked on that accessibility was a push at all was because they had a champion, had somebody that was internal to the company or the project that was making sure that when we talked about done, that accessibility was part of that conversation. Have you had experience doing that? Have you found yourself in that situation where you were a champion for accessibility?</p><p><strong>Jen Luker:</strong>          At basically every company I've ever worked for, I've been a champion.</p><p><strong>Joel Hooks:</strong>         I mean, do you have any advice, then? That's interesting and I'm wondering if you had advice for folks that would like to pick that up and they would like to be the champion for their project for accessibility.</p><p><strong>Jen Luker:</strong>          One of the things I can recommend is pushing back, pushing back from the very, very beginning if you possibly can. One of the biggest issues that we run into is contrast issues. Based on people with lower vision, people with color blindness and just a lot of other vision issues, that color contrast is very, very important. So if you can make sure that you have high enough color contrast, that solves a great majority of problems, and after that, just make sure that as you're coding you can navigate through your website with a keyboard and fix any of those issues as you go.</p><p><strong>Jen Luker:</strong>          You can also advocate for including accessibility linters into your project to get started, at least. At that point, it makes it easier for the company to do the right thing than it is to do the wrong thing. And I've found that that is the best way to get people onboard, is when it's harder to do the wrong thing than it is to do the right thing.</p><p><strong>Joel Hooks:</strong>         So, not to suggest people should be subversive in their jobs, but management isn't just going along with this, right? They're not going to have any of it, and as a team member at some grassroots activities, can we still add accessibility to the product that we create, to the code that we write?</p><p><strong>Jen Luker:</strong>          Absolutely. You can do that on your own. You just need to make sure that your definition of done before you say that it's done and pass it on to QA or whatever the next step is, that you've passed your own accessibility audits.</p><p><strong>Joel Hooks:</strong>         Right. So, we can build, I can actively build accessible components or build accessible pages and think about that and work on it and add it to part of my project without necessarily having explicit permission or making it a corporate mandate of some sort. I can be in there actively doing these things and running audits and showing the result of that work, I think.</p><p><strong>Jen Luker:</strong>          Absolutely. The company trusts you to complete what it is you say you're going to do, and if you say I've written this component as part of my story, and you pass that on and the component works and does everything they want, they're fine with that. The additional step of verifying that passes accessibility tests, if no one else in the company will do it but you, make sure that everything that goes out the door, everything that goes past you through pull requests includes accessibility audits.</p><p><strong>Jen Luker:</strong>          You can push back. You can make those PRs that say, you know it would be better if this was able to do this. It would be better if we could make sure that this happened, as well. You can make small use cases for, I was having problems navigating, I was trying to use my keyboard and this didn't work, so I'm going to put in a bug to fix this. And it becomes more of a usability feature than it is an accessibility feature.</p><p><strong>Joel Hooks:</strong>         Yeah, because it might even be a language thing. You suggested this, oh we're not gonna get in that ... Like I'm curious how much you can push back, right? If you're in planning meetings, if you're ... What does it take? For me, with anything I feel like you have to be knowledgeable when you come into it, so you're armed and ready to do battle, or however you want to phrase it, and fight for this cause to be a champion. That's the old-school definition of that: you are a champion and you're hear to fight for this cause.</p><p><strong>Joel Hooks:</strong>         I definitely have never heard of anybody getting fired from a position for really championing the cause of building an accessible, fast, easy-to-use for more people website. Have you?</p><p><strong>Jen Luker:</strong>          No. I've had people get shutdown, occasionally, and say we'll we're not going to go back and change old code. But that doesn't change the fact that you can fix code from here on out. And at the same time, after a while, even old code gets rewritten. And then those are accessible too because they've passed your accessibility audits as you've written them. So, making sure that those thing happen can happen one very small step at a time. It can happen with this one component, it can happen with this one pull request, and everything that you do makes it just a little bit better, a little bit easier to use, a little bit more accessible. That's more than most people are doing now.</p><p><strong>Joel Hooks:</strong>         And that falls into the principle of just writing clean code, for instance. Say we want unit tests, but we don't have any. Where do you start? Well, you write one unit test and you test the thing that you're working on. You write a piece of accessibility, you make this component better. You have to go in and fix a bug? Then can you slide in a little extra code quality, which to me, when you're applying the definition of done, accessibility should be something that's discussed and it should really be considered part of the code quality initiative, as well, right? This is the quality of what we're writing and it needs to be accessible and work right, both for developers as well as end users. It kind of fits into that same category.</p><p><strong>Jen Luker:</strong>          It should, but I also want to task in there an extra little note while we're talking about it. Part of making a solid code base reusable is also documentation. I recommend that any time you have to use an example, you have to write a code example to show how something works, that you make sure that all of those code examples are accessible.</p><p><strong>Jen Luker:</strong>          I was talking to a friend of mine last year named Nicoline Hubner, and when she started coding she was copying and pasting examples from people that also really cared about accessibility in order to build up her components. And because of the fact that that's how she learned how to code those pieces when she applied for her first job, she used those same code examples and they included alt tags and they included aria tags for certain things and roll tags, and the response back from the company was, wow, you really care about accessibility. And she was kind of confused. She didn't really know what that was, she hadn't heard of it. All she knew was that when you code, this is how it's supposed to be done. And when you're using those examples, you're copying and pasting that off of everything from stack overflow to the documentation from your website, if that's how it's supposed to be done, that's how it's supposed to be done. And most developers just copy and paste, so even in our documentation we can make sure to spread accessibility to any of the copy and pasting that happens after that.</p><p><strong>Joel Hooks:</strong>         Yeah, that makes a lot of sense. So, that makes me kind of think about the idea of being, as kind of let's say a niche programming expertise, where do you see a career as a programmer and being an accessibility expert? Is there a demand for that? Do you see companies looking for that? Does that give us as developers a competitive advantage in the same way that it does a business?</p><p><strong>Jen Luker:</strong>          Accessibility has really started to get a lot of play in the last few years. So, it's still up and coming as things that people worry about. It was code size a couple of years ago, and it was reusability, and now it's starting to move towards accessibility. And I think that it's not because the problem is solved, but the problem isn't being approached, so I think that the more we can allow ourselves to learn how to make things accessible and then just incorporate that into our general code, the better the entire web is going to be.</p><p><strong>Jen Luker:</strong>          As far as making ourselves more marketable, being able to have that skill is really important right now because of the fact that it is getting a lot of play. So, I think that it is important. I think that it can be a marketable skill. I think that it's still an up-and-coming marketable skill, though.</p><p><strong>Joel Hooks:</strong>         Yeah, it's like wide open to me, in terms of a space where you can blog and have a voice and things even up to conference speaking and this sort of thing, it feels like people want to hear about it and people are really excited and interested.</p><p><strong>Joel Hooks:</strong>         When I'm watching talks on Youtube from conferences and an accessibility expert is up there and they're delivering they're talk, I often hear the audience clap and cheer for specific content. People are excited and interested and I feel like as developers, there's a large portion of us that want to make the web a better place and that's something that motivates us even beyond higher salaries and all that sort of thing, which is nice, too, but it gives you a broader purpose, just the idea that we're building towards, we're part of the solution, instead of being part of the problem.</p><p><strong>Jen Luker:</strong>          Up until very, very recently, it felt like accessibility is one of those things everybody loves to ignore, so everyone was willing to clap and cheer when it comes to conference talks, they're excited that these things are available, and then they go back to their desks and nothing happens with it. It seems that, as of very recently it's starting to step out of great talks from conferences and more into people actually wanting to work with those features and wanting to understand them and wanting to incorporate them. So, it's nice to see that shift.</p><p><strong>Jen Luker:</strong>          Marcy Sutton actually said a few years ago she applied for a conference with an accessibility talk and the response back was they rejected her because it was a problem that was already solved. And the truth is that the features and the ability to make things accessible is already there, but no one's been using it, so as far it being solved, we may have answers, but if they're not being used, then clearly there's still a problem.</p><p><strong>Joel Hooks:</strong>         Yeah, I mean I know there's still problems. I see the internet and I've been on enough teams to know that it's a problem and there's not enough champions out there and there's not enough people ringing the bell. In the past, I've been guilty of that myself, just kind of sitting there silently and building what we're told to build and not expressing that, but that's one of the coolest things about being a developer to me is there's always something new to learn and something to improve in a way that we can make our trade and our craft better for more people in a way that is accessible, frankly.</p><p><strong>Jen Luker:</strong>          And for those that are listing that aren't developers, this is a job for everyone. Design needs to be involved, product owners and managers absolutely need to be involved. It's definitely an entire business and anyone in the business can be the champion. It doesn't have to be a dev.</p><p><strong>Joel Hooks:</strong>         I agree with that and we need champions at every level for this to really work. It doesn't just work from development. Obviously, the people writing the code have a lot to say in how applications functions, but you're right. If we're not getting buy-in all the way to the top, then it's really just a partial measure, I would say.</p><p><strong>Jen Luker:</strong>          Yeah. Devs can handle the technology, but we can't handle the words that you put on the page. We can make suggestions for how to make the flow and the funnel easier to get through, but that tends to be a much larger business decision than us, and the design that comes to us that we end up incorporating, that also has some accessibility concerns and requirements, from the size of buttons to the size of text, to the color contrast, to how items are organized. We can incorporate that and we can push back on that, but that's also a design decision. So, it is definitely at every level.</p><p><strong>Joel Hooks:</strong>         Yeah, I agree with that. Jen, you've given me a lot to think about. I actually came out with a to-do list of some things, mainly to go try out that Axe plugin. I've tried Lighthouse, I haven't tried that one yet. So, I'm excited to do that one with our site. And I really appreciate your efforts and your continued effort, being a champion for this particular cause, because I think it's important. And thanks again for chatting with me today.</p><p><strong>Jen Luker:</strong>          Thank you.</p><p><strong>Joel Hooks:</strong>         Cheers.</p>",
    "slug": "jen-luker-a11y-champion",
    "description": "<p>Jen Luker is a software engineer at Formidable Labs Inc. She has worked as a full-stack developer using PHP, Javascript, and CSS, but has a particular fondness for frontend technologies.</p><p>Today, we discuss the issue of accessibility and how focusing on making websites and software more accessible should be a constant consideration, particularly since it taps into an underserved market. Tune in to hear on discussion on this vital and fascinating topic.</p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/6191c97e/transcript\">\"Jen Luker, a11y champion\" Transcript</a></p><h3>Topics:</h3><ul><li>The Internet and accessibility</li><li>How loading times affect accessibility</li><li>How accessibility helps everyone</li><li>Missing out on business by not being accessible</li><li>The importance of making accessibility a regular part of the conversation</li></ul><h3>Quotes:</h3><blockquote><p>“One of the benefits of incorporating a lot of these accessibility features is that they end up helping everyone.” -Jen Luker</p></blockquote><blockquote><p>“Only about one in ten websites, according to an audit that DQ did, is accessible.” -Jen Luker</p></blockquote><h3>Resources:</h3><ul><li><a href=\"https://formidable.com/\">Formidable Labs Inc.</a></li><li><a href=\"https://www.deque.com/axe/\">Deque aXe</a></li></ul><h3>Jen Luker:</h3><ul><li><a href=\"https://www.jenluker.com/\">Website</a></li><li><a href=\"https://twitter.com/knitcodemonkey?lang=en\">Twitter</a></li><li><a href=\"https://github.com/knitcodemonkey\">Github</a></li></ul><h3>Joel Hooks:</h3><ul><li><a href=\"https://twitter.com/jhooks\">Twitter</a></li><li><a href=\"https://joelhooks.com/\">Website</a></li></ul>",
    "duration": 1650,
    "episode_number": 22,
    "contributors": [
      "Joel Hooks"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/22k2a",
    "path": "/podcasts/jen-luker-a11y-champion",
    "published_at": "August 21st, 2018",
    "url": "https://egghead.io/api/v1/podcasts/jen-luker-a11y-champion",
    "edit_podcast_url": "https://egghead.io/podcasts/jen-luker-a11y-champion/edit"
  },
  {
    "id": "podcasts-00000000000000000066",
    "title": "swyx (Shawn Wang) on infinite building",
    "summary": "Tune in to hear Shawn talk about what it means to be an infinite learner and builder and how he uses this approach to further his career. ",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/5eccf5b6-2062-4bd3-a096-cb97b06c683a/4f2ec647_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/5eccf5b6-2062-4bd3-a096-cb97b06c683a/1534358600artwork.jpg",
    "simplecast_uid": "5eccf5b6-2062-4bd3-a096-cb97b06c683a",
    "transcript": "<p><strong>Joel Hooks:</strong>         Hey Shawn. Despite our struggles on the internet, we're going to talk today about being an infinite learner and what that means to you. You're the first person I've encountered that described themselves as an infinite learner so I thought maybe you could tell us what that means to be an infinite learner.</p><p><strong>Shawn Wang:</strong>         Sure. I've actually started talking about myself as an infinite builder but we'll get there. The infinite learner term came from Reid Hoffman of Linkedin where he analyzes all the people that he invests in at Greylock, people like Mark Zuckerberg. He says that the most consistent thing about them is that they are infinite learners. There's never a point where they say they know enough and they stop learning. If you want to grow a lot as a person, you're always going to go into something, some area that you don't know well, and you have to have that infinite learner mindset to get yourself up to that next level. That's where I got it from and that's something that I think has become a core part of what I want to do. My growth strategy as well is what I want to do with my life. We can talk about the infinite builder part.</p><p><strong>Joel Hooks:</strong>         Yeah. I haven't heard that yet. I personally feel like I'm the same way. I've never framed myself like that. But you know, it's like I want to be an autodidact. I want to learn and grow over time, not restrict myself to what I know and not hold the same lever for 20 years. That's how it sounded like, not the way to be. It sounds to me this is a similar, right? Where we are just constantly working towards, not necessarily a specific goal but the goal that we're going to know and grow and do more and learn more as we progress and get older in our lives and career. Is that the same?</p><p><strong>Shawn Wang:</strong>         Yeah. Totally. I think it's also a big part of just being a Dev, especially a front end Dev, because it moves so quickly. There's always so much to keep on top of. It's a really great attitude to say that you should probably reexamine the things that you know every so often because the SD underlying assumptions which used to make it true may have shifted so that your beliefs are no longer true. This is a parallel between personal life philosophy and a philosophy of building a career in tech.</p><p><strong>Joel Hooks:</strong>         Yeah. You see the word like Java script fatigue get thrown around, which to me is almost like this depressingly negative way to look at this cornucopia we have of constant things that we can be learning and doing and growing on. I see it as a positive where I also see it framed as a negative. There's too much to learn. I can't keep up. For me it feels like the opposite. We can learn and grow and do more. The best practices of last year, they're gone and now we have new practices that we get to employ that might be better.</p><p><strong>Shawn Wang:</strong>         Yeah. Java script fatigue. I actually interviewed Sasha Griff about that. It's funny how it keeps coming back. I think that it's a two way street. We as an industry move very quickly. We were still in the early days, right? Kids who are 19 years old can come along and revolutionize the world of cold sandbox or something. That just doesn't happen in the physical sciences where the last time something happened like that was in 1905 when Albert Einstein just came out of nowhere with three papers that just changed physics. We're in the 1905 stage of tech where things move quickly. I'm sure people back then had physics fatigue where they're like, \"Oh, there's so many papers coming out. I don't know how to keep up.\" That's a luxury. People are coming out with new stuff. We can learn at our own pace. We don't have to succumb to that fomo that everyone... There's a certain herd mentality of ,you want to keep up with the Joneses or the Kardashians. It's entirely uptrend. It's entirely free software. As long as you're achieving your end goal, it doesn't really matter what tech do you use to get there. Those are the healthy perspectives to deal with java script fatigue as far as I'm concerned.</p><p><strong>Joel Hooks:</strong>         Yeah. I actually had my general career pulled out from under me in 2011 so I'm always... The idea that I would stop learning and I can be content. I feel like I can do that for periods of time. But at the same time, when you have a complete technology removed by a vendor. It's what happened to me. I was doing Adobe and development with flash and whatnot. It's like a fear of not being able to eat more than missing out for me. I'm a little over it. I feel like, especially in this space and now, with the web and the state it is, that I can be pretty comfortable. But at the same time I'm like, what's coming up? What's going on and where are the dangers? That to me it was more like a proprietary situation anyway. You're right, the idea that you can't just relax every now and then or you have to constantly be spending your weekends and evenings learning new things. I don't think that's really true. But at the same time, being open to new ideas is super important. The idea that you can't just stop and that this is the final stop in your journey. It doesn't resonate.</p><p><strong>Shawn Wang:</strong>         Well, I mean, you and I have talked a few times about being career changers. I can relate a little bit to that because I changed myself from a financial career. I thought that was a stable thing for a long, long time. Like you, I realized that I needed to move on from that as well.</p><p><strong>Joel Hooks:</strong>         Yeah. What does it mean to be an infinite builder then? That's what I'm curious about.</p><p><strong>Shawn Wang:</strong>         Okay. I branded myself... I mean, branded myself is too much of a strong term for what I was doing. I was mentally in the mode of infinite learner for probably the first half of this year. There's so many things to learn and there's so many ways to learn. The more I experimented with those things... you do a lot of content consumption, right? Listening to podcasts, reading articles and blogs and keeping up on Twitter, stuff like that. But then, how much of that do you retain? Right? How much of that do you actually have a differentiated perspective on or a personal relationship with? How much of it is you being familiar with the headlines?</p><p><strong>Shawn Wang:</strong>         The more I was doing that, the more unsatisfied with my own learning I was. I think learning isn't that effective for me as much as building is. If I can just switch my mode from consumption to production, I can be more productive and I can learn. The other big principle that I like to share with people is that you should learn just in time and not just in case. Just in case learning was what I was doing. Read all the things and have an approximate knowledge of all of many things but no mastery of anything. I realized that that was the wrong path to go down. What I should really be doing is a path. Fix things I'm super interested in and build stuff and learn whatever I need to to get to that goal. Learning is a means to an end and not an end in itself. That's what I got wrong by focusing too much on being the infinite learner. I'm obviously still iterating on that, but I've started to focus on being an infinite builder instead.</p><p><strong>Joel Hooks:</strong>         Yeah. So just changing your personal mindset. For me anyway, the idea that I'm going to learn all the time and I need to learn all these things was important in the beginning. At some point, you reach the tipping point where you have to take what you know and apply it, right?</p><p><strong>Shawn Wang:</strong>         Yeah.</p><p><strong>Joel Hooks:</strong>         That's the building is when we apply things. I was reading your summary of like 80 books. Did you read all those in the first quarter of the year? Was that over a longer period?</p><p><strong>Shawn Wang:</strong>         Yeah. You see. Infinite learning. That was good and bad, right? Because good in sense I covered so much surface area. I don't have any personal relationship with it. I just read it, you know.</p><p><strong>Joel Hooks:</strong>         I mean, what I was reading was your notes. To me, is the notes actually part of the building or is that just part of the learning?</p><p><strong>Shawn Wang:</strong>         I think that was my initial getting into it. I think that's important. I think that learning in public is something that I championed a lot. That's what's currently pin to my Twitter profile. I think that if you produce output well... Am I still on? Okay. If you produce output while you learn, you're not only making those for your future self, but then you also enable other people to learn along with you.</p><p><strong>Joel Hooks:</strong>         Yeah, I know. I'll take notes or highlight and it ends up in the Kindle. Not only do I not really review it, but then it's locked there forever and nobody else can see it. I read through your... they were on dev.two and we'll link to it. You read these 80 books and then took notes and then gave us links to those books which to me was useful. I'd read a lot of them already, but then, not only do you give me a review but it was like eating your perspective and taking what you learned out of those. Remembering it or being able to think about those books. Even just as a book reviewed where I'd be like, \"Oh, that sounds like something that's interesting to me.\" I thought that was a pretty cool technique. And then the fact that you put it out there for all of us to read was pretty awesome as well.</p><p><strong>Shawn Wang:</strong>         Oh. Well, thank you. The other thing that's an open secret about these kinds of books, which are all general, nonfiction, self-helpy kinds of things, is all of them ar, I don't know, 200 pages. They have one central idea which can be given in 15 minutes TED talk. Right? If you take nothing away, but this one thing, this is it. What if you just went through all of them and just took the one thing away. That's what the summary thing is. But then, I think there's also a point where you read too much. That's I think what I hit at the end of the first quarter.</p><p><strong>Shawn Wang:</strong>         What was I going to say? I think that a lot of people read, maybe even take notes on your kindle, which I don't even do because I need to type it out to take notes. That last mile, that last 10% of sharing it and making it so that other people can read it, that makes it so much more valuable because you can share it with people. They can benefit from your experience or they can discuss it with you. Passions McKenzie calls it a friend catcher. I liked this idea, although the name quirked me, where if you like actively write stuff and put stuff out on stuff you're interested in, guess what, people come and engage with you just like you're doing with me, on the things that you're interested in. That's so different from typical networking where you try to have a mutual exchange of values. In this form you, you just have a shared interest and you just talking about stuff.</p><p><strong>Joel Hooks:</strong>         Yeah, I like that. Have you read Derek Sivers? His reviews of books that he likes to read?</p><p><strong>Shawn Wang:</strong>         Yeah. Some of them. He's growing on me. I must have golden guy, but Derek Sivers is getting up there.</p><p><strong>Joel Hooks:</strong>         Yeah. I love his book reviews. He's usually spot on. He gives them a rating too, which I like as well. It's like a nice filter for what I might want to read.</p><p><strong>Shawn Wang:</strong>         That's so common about learning in public. They just have blogged for 20 something years and built up this whole backlog of things where people can connect with them on topics that they're interested in. He probably wrote some of those things 10 years ago, right? That's what was valued to you today.</p><p><strong>Joel Hooks:</strong>         Yeah. It's like you basically have assets at that point. I liked that. I like the idea. I've heard friend catcher before, but you're casting a net out there and pulling people into your sphere of interests and get a pre-connection. I don't know. It works as a filter, right?</p><p><strong>Shawn Wang:</strong>         Yeah.</p><p><strong>Joel Hooks:</strong>         I have the feeling somebody like Derek, the chairs like that, you get to know them a little bit. It's almost personal even though he's just broadcasting, on a one way basis.</p><p><strong>Shawn Wang:</strong>         It's unabashedly one way. That's amazing. Super selfish, right. Somehow, it has value because it's shared. It's like, take it or leave it. It's like open source. I have value in my little fork of react. You can take it if you want or just ignore me but it's here. Isn't that great?</p><p><strong>Joel Hooks:</strong>         Yeah, it's awesome. The idea of getting back to java script and it's constantly changing. To me it's like, this is my interest and this is my use case so I'm going to build a thing for me, but I'm also going to share it with you and if you share my interest then you can contribute back as well. That circle of sharing and learning and working in a global unit that the internet allows us to do has been really exciting. It's like watching it evolve over time. It's been super interesting.</p><p><strong>Shawn Wang:</strong>         The other thing I found is that by learning in public in that way where you're actively putting output, you are very likely to be taught by people smarter than you. Often that the authors of the thing themselves because, the best way to learn something on the internet is to just get it wrong publicly and let people correct you because they will correct you. They will crawl over broken glass to come and tell you that you're wrong. That is fantastic. If you have no problem being wrong, there's so much you can learn. All right. I try my hardest and my best to not be wrong because you should put in that level of work. But then, at the end of the day get something out. I talk with so many people who don't put anything out because they are like, \"It's not perfect yet.\"</p><p><strong>Shawn Wang:</strong>         I'm like, yeah. Even the final product that you put out is not perfect. There's stuff that you don't know you don't know. Just get it out there and let people correct you. That's the other thing, I volunteer as well. I've actually talked with some of the authors of these books because I tagged them in my Twitter thread. They're like, yeah, you should really read this instead. People don't follow up, as a rule, even though some people who are super popular with like hundreds, thousands of readers and whatever. Very small percentage of them actually connects with the author. You can take that the opposite of learning public to actually do that and establish a connection with people that you might learn a lot more from.</p><p><strong>Joel Hooks:</strong>         I'm always amazed. If you email an author or tweeted them and then you get your response. It's like, wow! One year expressing interest in the thing that they've obviously put a lot of time into. A lot of them will actually respond to you. It's just been great. I've had that happen several times in my life. Every time, it has been amazing. Over time, if you establish some expertise people do that for you too. They'll send you a question or a note or a comment on something you've done or built and you get to reply back to them. Just thinking of the whole circle of the things. Pretty neat in terms of how we can learn and build and grow.</p><p><strong>Shawn Wang:</strong>         I've also started putting up repos where, I put up essentially my state of knowledge so that people can make PRS and correct me on stuff. I just learned from that. I have a reactive type scope cheat sheet, which I essentially... I've only done typescript for probably seven months and then I just put it up. People were just like, okay, this is wrong. There's a better way to do xyz. I have a log on my progress. They're just people teaching me stuff, same yours. That's really great. 90% of what I do on Twitter is that as well.</p><p><strong>Joel Hooks:</strong>         I'm always encouraging people to write and put it out there and learn in public just because I think in terms of a career boost. Like you mentioned earlier, developing a brand, if you're willing to get out there and put it out there, there's huge benefits. But I've often seen the objection that somebody has already said that or somebody said that better. Nobody wants to hear what I have to say. Or the excuse of not wanting to put it out there. I was wondering if that ever occurs to you and how you got over that if it had.</p><p><strong>Shawn Wang:</strong>         Yeah. You invited me to be an Aiken instructor and sometimes I don't even feel super knowledgeable about stuff. I look around the Aiken courses and I see that it's already been done. I automatically get discouraged. I would say, that attitude is mostly you looking for excuses to get out of it. You know, the arguments for it already. You have a unique voice. You should speak to people who are new learners, just like you. Multiple different ways to approach the same thing can be productive. All those things are true but most of the time is the brain looking for excuses to get out of it somehow.</p><p><strong>Shawn Wang:</strong>         I think we have to constantly fight that. I mean, I still fight that even though I know it, right? It's a human instinct to crave the new, to do the things that are undone and also to try to disqualify yourself from a club which you perceive to be more exclusive than it is. All that is bs, right? At the end of the day, what is your goal? Your goal is to the better, I don't know, xyz. To get there, you have to learn how to do the thing. The best way to learn it is to share it. Share what you've learned. It just builds up progressively from what is your end goal and being okay with doing your damn best to do the best work that you can, but being okay with it being imperfect.</p><p><strong>Joel Hooks:</strong>         Yeah. I mean, there's always the risk. This thing isn't going to be the correctest or the best. The idea that, I don't know, they were inadequate or our opinion doesn't matter. It's just more noise. I like constantly fight that. Right? The idea that your voice isn't going to add to the overall discussion, which I think is totally untrue. Like you said, everybody's perspective is unique and interesting and not necessarily that we want the same derivative or we're copying the same thing and we're trying to say the same thing. But in my experience, between people's writing and people's recording and screen casts, everybody has just a different viewpoint or a different way of looking at it.</p><p><strong>Joel Hooks:</strong>         I think what's really important to remember is that folks that are coming into this, they're learning the thing. That don't have a lot of experience or are following a similar path as you don't just want one perspective, right? They want multiple perspectives and they want to form their own opinions or they should, I think, want to form their own opinions from gathering from different sources. It's really doing a service to get out there and put your 2 cents and do this learning in public and do this constant putting stuff out there and taking those risks. I think it's a real benefit to our general peer group as a whole. And it makes it more welcoming and inviting to.</p><p><strong>Shawn Wang:</strong>         I will also say, since I put that out, there had been a total people who constantly checked back with me on how they're doing. I'll also say, don't worry about the fact that no one will read your stuff when you start learning in public. It doesn't matter. Your number one customer is you. This is your time to be terrible at things. It's probably a good thing that no one's reading your stuff anyway. But the few that will care about you, are investing in you early and you should try to nurture that relationship. It's fine. Multiple iterations is more important than just getting it right the first time.</p><p><strong>Shawn Wang:</strong>         I definitely struggle with that too, especially it's just like business stuff. You and I are pretty interested on business side of things. It gets not the first video course side around. A reasonable development would be, Pluralsight exists. It's been done right. There's no need for Aiken and that is so wrong because your unique spin is what has made Aiken such successful company. I'm a very philosophical person. I think you are too. All these things from coding to life philosophy to visits, it all sort of interrelated with the same ideas, just applied in different ways.</p><p><strong>Joel Hooks:</strong>         Yeah. I know. I love stoicism as a life philosophy. I even love things like agile and I apply it to, not the capital ATM [crosstalk 00:21:10]. It's like small iterations. I learned that from studying software but not on my part. This really applies to other things as well. It's like object oriented programming or even functional programming. It's just weird to me the way that everything intertwines. Studying, casting that wide net of learning and building things. It's like art, doing that, being creative. How does that come back and affect my ability to grow a business, for instance. I feel like it's all mesh together.</p><p><strong>Shawn Wang:</strong>         I thought so that. The first kind of throwaway, jokey odd is that, isn't it weird how everyone has annual goals? On January 1st you set this arbitrary goal for the end of the year. That's the most waterfall thing you can imagine, right? They'll have this big set of requirements and then fail to reach them because life happens. We could all probably do with a running our life in a more agile fashion. That's what he did, right? I did the whole read a book a day thing in perfectly for the first quarter, finished the first quarter and then, and then reexamined where I was going. Then I was like, all right, I need to build more shit. That's, you know, the agile approach, obviously. I'm not perfect with that. I like the agile philosophy as well.</p><p><strong>Shawn Wang:</strong>         The other thing about stoicism, I struggle with that recently and I posted about it recently too, which is, stoicism, you shouldn't let things that happen truly out to random chance to affect your internal state. That's fine. But I think you still have to be optimistic about stuff. That's what a lot of technology is. Being overly optimistic about whatever promising technology can be because that's where the really asymmetric payoffs come into play. I think that stoicism can get in your way and that's where it falls apart. You can go like, all right, I am not going to overreact to this because it could be, it could be gone the next day. That may well be true, right? You may get over excited about VR or bitcoin or I dunno, whatever. If you never take a bet or if you never take risks, then you're not going to grow with the potential of technology because it's all about the asymmetric risk.</p><p><strong>Joel Hooks:</strong>         Yeah. I mean, I don't even know whether that's necessarily incompatible either. Right? For me, I'll take risks, but at the same time I'm just zen or stoicism or whatever. Know that failure is an option and be cool with that. Right. That something that I've tried to incorporate. I saw it in your list, I think the seven habits of highly effective people.</p><p><strong>Shawn Wang:</strong>         Yeah.</p><p><strong>Joel Hooks:</strong>         It's one of those books that is a very... it's 200 pages, but the takeaway for me was, you can't get too stressed out about things that you can't control. If it's out of your control, then you can't worry about it too much. Life is like that, right? It's this constant swarm of variables that we are assaulted with on a daily basis and we have to filter that and figure out what's next and what's good right now. If we're too rigid in our planning or if you look at the beginning of the year, you set these major goals and something goes wrong and just wrecks you, right? It just shatters everything and you're barely even up versus okay, what did I learn? What can I do? What's the next smallest step that I can take to reach my larger goals that I might have? That sort of thing. Ultimately, it's played out pretty well. Applying that agile thought to my life. Things go wrong. You've got to stop. We've got to take notes and see what's next.</p><p><strong>Shawn Wang:</strong>         I think a lot about this in relation to media because that's such a big part of our lives, whether we like it or not. Especially like social media these days, can bring up a lot of outrage over things that you don't really have control over. Sure, you can get involved in politics or be environmentally conscious. But there's only so much that you as a person can do. I think it's healthy to give a proportionate amount of attention to that and not let it take over your life because there's this other things that you have to do with your time and your attention as well. That's my approach to Twitter, it is my approach to news and stuff.</p><p><strong>Shawn Wang:</strong>         I think that's a big part of how you spend your day is, do you want to be primarily affected by things which you have no control over? You just get upset and outraged by it. Or do you want to focus? You do your part on that front, but then you spend the most of your day on things which actually you have an impact on and have a positive impact on the people that you work with. Because you're not going to change the world on your own.</p><p><strong>Joel Hooks:</strong>         Yeah, we don't scale. Neither do we.</p><p><strong>Shawn Wang:</strong>         I love the ability to have a platform, have this business where I can... education is important to me. I really like to help people. I really love to see people go from zero to hero effectively for... there's probably better ways to phrase that. The idea that I can take folks that don't even know how to program and help them into a new career in lots of different ways, right? From the Broadway where we're just broadcasting videos on the internet too, a very personal way where I'm able to engage. Help them specifically. I can't express in words right now how much that is meaningful to me. To be able to wake up. I'm not trying to change the world. I'm just making my little dance in my little corner and have a little hammer and chisel. I'm able to do my part. I think that's the best any of us can do really. Try to carve out a little piece and make it better at a scale that-</p><p><strong>Joel Hooks:</strong>         I think you have changed the world, right? You have changed the world of people who-</p><p><strong>Shawn Wang:</strong>         Everyone who has come in touch, come into contact with are good. I think that's really what the fundamental insight comes down to is that there are many worlds and everyone lives in their own world. You should not try to impose your world on other people. That's probably a bad idea. Instead, you should probably create a world where people can participate with you. That whole friend catcher mentality. You've done that, right? People who identify with your values and your inner vision and mission can join you of their own choosing in improving themselves. Getting a better job, becoming cooler. These are all really fantastic goals. The best way to change the world is not have that be your goal. That's a side effect of the thing that you really want to see in the world. The world is not going to do this on its path. I have to be the one and this is what I really want out of it. Once you have that specific ask like that, people come out of the woodwork to help you achieve that goal.</p><p><strong>Shawn Wang:</strong>         It's really amazing to see that happen. Obviously you've done it a lot more than I have, but I really like this way of living because it feels like the happiest path of not being too affected by things you can't change but just having a really positive impact on the things that you can.</p><p><strong>Joel Hooks:</strong>         It's a product of learning in public too, right? If you learn in public, if you create this space, if you share what you know and work on creating that, when you express that, when you publicly express your values or your interests, it draws in folks that also share that. Like you said, you're growing this over time and snowballing a thing. Assuming you stick with it or it works out or other people are interested. I'm sure sometimes that doesn't work out. I know for sure it does. It doesn't always work out. Sometimes it does. You get that right by continuously doing this. This process of learning, growing, sharing, building, right? In creating the universe of your reality that you want to-</p><p><strong>Shawn Wang:</strong>         I think something that's really special about tech is that you're allowed to do this and even you're encouraged to do this, right? I just got a new job which I haven't started yet, but I'm going to start, which essentially, it lets me learn in public as part of my job. That's really fantastic, but in my former career in finance, you were explicitly, even by law, not allowed to learn in public. Everything you wrote was property of your employer. It probably was read by two people who couldn't care less about what you wrote. When you leave that place, it's gone forever. Even though I was a very good writer, none of that work ever mattered.</p><p><strong>Shawn Wang:</strong>         It made some money, lots of money whenever, but it didn't stay with me. It was a property of the company. It was definitely not in public. Therefore, those years I spent writing really good stuff will never see the light of day. Whereas in tech, you're actually encouraged to share and encouraged to learn in public. I think picking the industries that let you do that helps you do so many other things that are not possible in your own personal capacity. Networking is so much easier in tech. I would never have gotten connected to someone like you in the finance world. It's very much like, did you go to school with them? No. All right. You're out of luck for the rest of your life. This is great. I think picking the right game to play is also pretty key.</p><p><strong>Joel Hooks:</strong>         What are you building now? If you're an infinite builder, what are you working on?</p><p><strong>Shawn Wang:</strong>         I definitely want to build apps one day, but right now I'm building dev tools. I am working on a couple things which are not super [inaudible 00:31:12]. I'm not really ready to talk about it yet. One thing I'm building in public is the GraphQL Bubble plugin. I really want to learn how to write about plugin because I think that is some dark magic. I picked a used case which is GraphQL, which I think is growing in popularity and I think it's going to revolutionize the way the front end talks to the backend. I said, okay, how can I make this better with bubble. I wrote a plugin because I started posting about it as I wrote about it. As I wrote it, people started chipping in and contributing ideas. People that I respect who've built stuff way more complicated have started giving advice and feedback. I think that's a really good example of how to build in public. To me, that's the next level. Actually build a thing instead of just learning and consuming all the time.</p><p><strong>Shawn Wang:</strong>         I'm also working on my VR talk which is happening in a couple of weeks. So that should be exciting. It's my first big conference. Then I'll be starting my new job, which I will announce it at some point. That's it. I am building some courses for Aiken and those are mostly beginner friendly stuff on egghead where I think there may be some demands. It probably fills out the gap so that when people come into egghead and ask for beginner level stuff. It's really embarrassing. I think you shared with me in our first chat where you don't have anything on egghead to send them, you have to send them away to three houses or whatever. I try to play games where even if no one sees it or uses it or plays with it, I still benefit because I walk away with something that is a more fundamental, valuable understanding. That's what has been for me so far.</p><p><strong>Joel Hooks:</strong>         Nice. Yeah. I don't mind sending people to tree house or some other resource that I really like, but at the same time it's like, wow.</p><p><strong>Shawn Wang:</strong>         It would be nice.</p><p><strong>Joel Hooks:</strong>         Here's the thing in our fence. But luckily, it's like you said earlier, Pluralsight exists. Treehouse exists. There's good resources out there and where I don't feel the gap. I'm like, well, maybe this is the better product or this is a better fit for you right now, but we'll be here if you need. I think that's cool. How you talked about you want to learn bubble and you're thinking about where's the best place you can do that. When people are trying to figure out what to build, I always think that's the hard part. People like what should I write about? What should I build? What should I use for an example? Do you have any process for that? Or is it just kind of looking at the scope of what exists or what your interests are?</p><p><strong>Shawn Wang:</strong>         On picking what to build?</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Shawn Wang:</strong>         I'd say just the thing that you really want to use. The thing that you really want existing. I have some apps in mine which basically I would use and if no one else uses it's fine because I would use it. Stuff like that. I think that it helps to pick an area with some popular interest, but it's still relatively early. It's good to be early on something. It's that whole be optimistic in your actions but be so stoic in your emotions kind of philosophy on that front. Just like building in general, don't be too precious about it, right? It's fine. It's going to suck. No one's gonna use your first few things. It's okay because you're going to get good at building. You're going to get good at doing the polish and writing up the documentation and practicing all of that stuff in preparation for your eventual thing that's going to take the world by storm.</p><p><strong>Shawn Wang:</strong>         That's what you should be doing now, right? As a beginner infinite builder. That's the path that I'm following as I go along. I would say a really, really good way to get started, because it's always hard for people to walk away from things like this, what's that one actionable thing to to do is when you use a library or use a framework, things are going to fall off the wayside because documentation is not good enough. Right?</p><p><strong>Shawn Wang:</strong>         Whatever you're trying to do just document what you just did and send in the PR or put up a blog post because you just did it. You are the world's most recent expert in that and that has value. At a bare minimum, I wouldn't get so good at that. Writing docs is second nature. I can pump that out as I code. I think I've gotten to a level of that where I can turnout stuff relatively quickly, and that's good for my next thing and my next thing and my next thing. It's not about like building any individual thing as about just being a really, really good builder.</p><p><strong>Joel Hooks:</strong>         Yeah. I like it. Well, thanks Shawn. Really appreciate you sitting down and chatting with us and talking about being an infinite builder. I like that concept. Hopefully people pick it up and start building.</p><p><strong>Shawn Wang:</strong>         Thank you. It's been an honor.</p>",
    "slug": "swyx-shawn-wang-on-infinite-building",
    "description": "<p>Shawn \"swyx\" Wang is an infinite builder, dual-class CFA, and Developer. Shawn currently works for Netlify.</p><p>Tune in to hear Shawn talk about what it means to be an infinite learner and builder and how he uses this approach to further his career.</p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/b62a331c/transcript\">\"swyx (Shawn Wang) on infinite building\" Transcript</a></p><h3>Topics:</h3><ul><li>Infinite learning</li><li>Infinite building</li><li>Javascript fatigue</li><li>Engagement</li><li>Fighting feelings of inadequacy</li></ul><h3>Quotes:</h3><blockquote><p>“I changed myself from a financial career...I thought that was a stable thing...I realized that I needed to move on from that…” -Shawn Wang</p></blockquote><blockquote><p>“You should learn just in time, not just in case.” -Shawn Wang</p></blockquote><blockquote><p>“If you actively write stuff and put stuff out...that you are interested in, guess what? People come and engage with you…” -Shawn Wang</p></blockquote><h3>Shawn Wang:</h3><ul><li><a href=\"https://egghead.io/instructors/shawn-wang\">egghead</a></li><li><a href=\"https://www.swyx.io/\">Website</a></li><li><a href=\"https://twitter.com/swyx\">Twitter</a></li></ul><h3>Joel Hooks:</h3><ul><li><a href=\"https://twitter.com/jhooks\">Twitter</a></li><li><a href=\"https://joelhooks.com/\">Website</a></li></ul>",
    "duration": 2196,
    "episode_number": 21,
    "contributors": [
      "Joel Hooks"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/ad24e",
    "path": "/podcasts/swyx-shawn-wang-on-infinite-building",
    "published_at": "August 15th, 2018",
    "url": "https://egghead.io/api/v1/podcasts/swyx-shawn-wang-on-infinite-building",
    "edit_podcast_url": "https://egghead.io/podcasts/swyx-shawn-wang-on-infinite-building/edit"
  },
  {
    "id": "podcasts-00000000000000000065",
    "title": "Henry Zhu, Maintainer of Babel",
    "summary": "\r\nToday, Henry Zhu, the lead maintainer of Babel, discusses what it's like to work on a large and important open source project. Henry gets into how Babel receives funding, how corporations are involved in open source, stewardship of an open source project, mental and physical health, and not compromising his values.  ",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/0470de61-8896-4f53-9ad0-56eb8c7a6ea2/07f589b7_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/0470de61-8896-4f53-9ad0-56eb8c7a6ea2/1534346287artwork.jpg",
    "simplecast_uid": "0470de61-8896-4f53-9ad0-56eb8c7a6ea2",
    "transcript": "<p><strong>Joel Hooks:</strong>         I have a list. I went and internet stalked you a little bit, like in listen to all your podcasts and went back ... Obviously, Babel comes up a lot and people want to talk about that kind of stuff.</p><p><strong>Henry Zhu:</strong>          Right.</p><p><strong>Joel Hooks:</strong>         Which is interesting technically, but personally I've been interested in what you've been doing lately in terms of ... this idea that I can do open source and I can get myself funded. As an independent, I can go out and get myself funded. Because so much of open source that I see, is it says corporate funded.</p><p><strong>Henry Zhu:</strong>          Right.</p><p><strong>Joel Hooks:</strong>         It's either being funded by a global ad network or being funded by everybody's favorite, binge watching of television service or what have you. But what's this idea that we can go out and we can do good work and do open source but then also fund it which is a pretty significant problem, right? How do I do that as an independent person? That's been really interesting to me to watch as you kind of make that leap from working at a corporation to working open source full time. I'm really curious how that's going for you and the sustainability and stability of that process and the future of it.</p><p><strong>Henry Zhu:</strong>          For sure. I think that is a lot more interesting to me and I'm sure most people 'cause you can look up all this stuff about Babel and a lot of people can talk about the technical parts, but that can apply to anyone. And sure, a lot of people [inaudible 00:01:34] aspirations of doing something like this too.</p><p><strong>Joel Hooks:</strong>         Yeah, we talk to people all the time and I know a couple other people that have done this. Like, Andrew Stoltz quit his job. He's calling himself full-time open source, is what his doing. Which, he maintains through consulting and doing gigs and that sort of thing. Which is definitely an avenue, right? Like an approach but when you start consulting you're taking a full-time job usually depending on the gig so it has its drawbacks too.</p><p><strong>Henry Zhu:</strong>          Yeah, and I think if, the problem is a lot of the ways of doing this are not really maybe what you set out to do or specifically doing open source. If you're doing consulting then that means you're doing consulting you're to working on open source unless they're paying you to work on in which it seems to be rare.</p><p><strong>Joel Hooks:</strong>         Yeah, and I think a lot of companies if they're considering paying for open source they're paying for a feature. They want something specific and then a lot of times that specific thing they want made may not even be in scope for the project. But we're paying you so you should be adding this. And it's like, Well actually ... managing that kind of stuff.</p><p><strong>Henry Zhu:</strong>          Exactly and that's just not, it kind of goes against the spirit of open source. I mean maybe the thing that they want does apply to everyone but it's just kind of a weird kind of give and take. In my mind it should be that companies should trust the maintainers to figure out where they want the project to move and obviously maintainers want feedback from the community but maybe not in that specific way and may want to hear the use cases. But ultimately I think the maintainers should be able to decide what goes in and in some sense all these companies are already relying on them to do it currently without paying for them. So, it's like there shouldn't be any difference.</p><p><strong>Joel Hooks:</strong>         I think the role of maintainer is also interesting. Because I think a lot of folks when you think about open source software the first thing you're thinking about is the software portion event not the actual writing of code. Where in my experience that's a part of it, that's a huge part of it no doubt, but then there's also this whole other part where it's more of a project management. It's almost a marketing job.</p><p><strong>Henry Zhu:</strong>          Yeah, exactly. And I find that that part I guess it's kind of like a hidden cost or people don't think about it and most people aren't maintainers anyways so they don't really know what goes on. And I'm finding myself that's the part I don't want to say I think I like it more than the actual coding but that's taken me awhile to learn that and I also don't really know that much about it so maybe that's also exciting too. Where it's like, \"Oh a different kind of skillset.\" Like what you said whether it's marketing or project management or just trying to deal with people whether it's on your own team or a community.</p><p><strong>Joel Hooks:</strong>         Yeah, you got to make sure the documentation is up, the code, the goals, the coordination. It's like a facilitator role in a lot of ways to connect and shield the actually developers. Sometimes they don't need to deal with everybody's personal preferences all the time. [inaudible 00:04:49] that and helping distill it into something that's cohesive. Any good, especially something like that because it's a driving java script in a lot of ways, like modern java script just fundamentally driven by Babble at this point.</p><p><strong>Henry Zhu:</strong>          Yeah, I think facilitators a good word. We've used words like maintainer, facilitator, I've used the word steward. I think those words kind of give a different connotation where it's not like the whole dictator thing where you do need to make decisions but in the end you're trying to bring people together and figure it out together how we should move forward. And you might not care about the individual specifics but just the overall workflow of what people do and trying to figure out where do people work the best.</p><p><strong>Henry Zhu:</strong>          And trying to figure out they don't just have to, especially for new people, where they're always trying to, they want you to tell them exactly what to do. Which you can do but to make it actually scalable and maintainable we want you to figure out what interests you too. Which is hard because the problem is that there isn't really a maintainer role people normally take on it's that you have to do all of them. So, you are the maintainer but also the developer because there's only like two people on the project.</p><p><strong>Joel Hooks:</strong>         Yeah, I did back in the Flash days I kind of had the facilitator role in an open source project. And honestly it launched my career. And it started with writing docs which isn't, I listened to a podcast that you're on you talk about you got in and you start doing the thing, right? This thing I understand. And I think that's what people have a lot of. You get in and you want to do a code commit or add a feature, you're getting into a lot of almost politics at that point. You have to weigh all these decisions but you want to get in and spruce the docs up and add an example it's the barrier to entry [inaudible 00:06:42].</p><p><strong>Henry Zhu:</strong>          Right and they're more willing to merge it instead of do we even want this at all? That kind of thing.</p><p><strong>Joel Hooks:</strong>         Yeah, if you start talking about code that's a deep discussion but if you start talking about docs it's still super important but at the same time one a lot of times core developers are less inclined to really care so much about the docs. They're focused on the algorithmic problems.</p><p><strong>Henry Zhu:</strong>          So, most likely there's a lack of docs so they're willing to take it in.</p><p><strong>Joel Hooks:</strong>         Yeah, that's why it's a great, it's such a great, I can't recommend that enough to folks to get out there and look for that kind of opportunity if you want to breaking.</p><p><strong>Henry Zhu:</strong>          It's hard though because I know that it is easier but at the same time obviously you need to know about the product or the code or how to use it at least. And usually the people that know it the best are those core developers it's just that they don't prioritize it. So, there's definitely a learning curve for sure. But yeah, you're right it's definitely more approachable than other aspects.</p><p><strong>Joel Hooks:</strong>         One thing I kind of noticed and it's a little on the negative side of the internet and maybe it's just the internet as a whole. But there's this underlying culture of complaining whether it's on Twitter or in issues and comments, comments are horrible, but as a maintainer as the shepherd of a project how do you approach that like people's general, like the negativity? It sometimes might feel a little overwhelming.</p><p><strong>Henry Zhu:</strong>          Yeah, that's always going to be hard to deal with. I think that also like people have a solution to how this works per se. Some people might say something like, \"Okay maybe start muting, blocking everyone and turning off issues.\" That kind of thing. And that will probably work for a lot of people. Or responding in a positive or nice way no matter what they say because sometimes they're just frustrated or just misunderstood and if you respond in a welcoming way they'll realize that you're just the person or a human too. But I think it really depends on the situation. It's like I guess, yeah, I mean I think most of us know there's no formula it's just hard.</p><p><strong>Henry Zhu:</strong>          And yeah, there really needs to be some kind of cultural change and I feel like the way we go about doing that is through kind of changing the environment that we work in. And I don't know trying to change the habits that we have which are how we use these tools whether it's [inaudible 00:09:13]Hub or Twitter, or Slack and it's like the way we use them kind of changes how we act. So a simple example is like the fact that we have notifications and it's kind of like email where it makes you want to look at every single one and kind of the whole inbox zero but same with [inaudible 00:09:33]Hub and it's like oh I need to have zero notifications and then you keep wanting to look at them when you shouldn't be doing that your whole day or week because there's just going to be thousands of those all the time.</p><p><strong>Joel Hooks:</strong>         It's global too. So, it's everyday 24 hours a day not just during work hours in the U.S.</p><p><strong>Henry Zhu:</strong>          Right, exactly and that kind of goes into the maybe implicit idea that if you're a maintainer you're kind of like always on call. And people are going to message you, direct message or notification like, \"Hey can you help me with this thing?\" On every single possible medium and then you make it so easy for anyone to notify you and so there's that side. And the other of we all want to be inclusive and open and so those things combined together and then you're going to feel overwhelmed even if everyone is nice which is a weird situation to be in.</p><p><strong>Joel Hooks:</strong>         Yeah, you said somewhere I can do this full-time and it still isn't enough.</p><p><strong>Henry Zhu:</strong>          Yeah, exactly.</p><p><strong>Joel Hooks:</strong>         Right. And to me there's a lot of interesting correlations between running and open source project and actually running a business. It's like a business except the payment model is almost nonexistent. Because running Egghead this isn't the first time I've ever had a business but I've done that role on open source and I was like this is very much the same. Because it's like people have preferences people want stuff a certain way for themselves or they're just confused or sometimes often even angry maybe even justifiably so.</p><p><strong>Joel Hooks:</strong>         So, how do we deal with that? And kind of smother me with niceness or go the ignoring route. To me the maintainers mental health or the business owners mental health over the longevity of the project is super important. You don't have that, if you can't stay happy, if you can't enjoy your work then that doesn't help the project or anybody that's using this, right?</p><p><strong>Henry Zhu:</strong>          Yeah, exactly. I think thinking of it like a business is important and maybe we try to shy away from that idea whether it's not wanting to think about money because it's complicated or just thinking oh it's just an open source project. But it really is and especially if you're going to leave your job for it it definitely does become, you kind of need to take on that mindset. Despite, I feel like most programmers not really knowing a lot about that or wanting to think about it, yeah it's ...</p><p><strong>Joel Hooks:</strong>         I think a lot of folks look at the business side and the marketing side as almost unsavory. And it's probably easier when you're on a corporate open source project because you're already dealing with it. You're inside of a business and they kind of have those models and everybody's making a salary and that sort of thing. You have to start being creative almost when you're an Independent and working on an independent open source project.</p><p><strong>Henry Zhu:</strong>          Yeah, the creative part is interesting because it's like you have to really want to do it. I think a lot of people would be okay with doing open source if they got paid but if you're not then you really have to desire it anyway. So, I know that changes things.</p><p><strong>Joel Hooks:</strong>         It's like the word hustle, right? It can have a negative connotation or positive ones. You can hustle in a positive right, you're not hustling people, you're out there just doing your thing. It's like you're on tour, you've been on the west coast and you're talking to businesses and I'm sure part of that is to increase your funding and increase the support for Babble and this open source project that we all rely on for deploying our applications that pay our bills. So to me it makes a ton of sense and I really, I've just been impressed watching you and your approach to this whole thing because I think it's pretty balanced and sane. And ultimately it feels like I think you can be successful with this from my vantage.</p><p><strong>Henry Zhu:</strong>          Yeah, I think one thing I am trying to do is while doing this I want to make sure that I don't compromise what I'm setting out to do. I obviously need to make money but one of the issues I feel like I'm going to face and I am facing is when you're in this business money mindset it kind of in some sense goes against some of the, I don't want to say well maybe values of open source where it's not that you can't make money but maybe it will lead you in a direction that becomes all about money rather than about people and relationships and helping people.</p><p><strong>Henry Zhu:</strong>          And so, exactly what you said, it's like how do you keep that balance so that you don't end up doing something you didn't think you were going to do earlier. It's kind of like throughout the process of doing all this stuff you might get caught up in how other people do things in the startup situation or a different kind of business. I think the open source way is more of a, kind of a non-profit type of thing. You need to sustain yourself but ultimately your goal is a little bit more beneficial than just getting profit per se.</p><p><strong>Joel Hooks:</strong>         Yeah, in the corporate world there's I think B corps which is a public benefit corporation is one of the structures they have here in the U.S. that allows you to build a business and the idea of being, ultimately this business is here for the public benefit. And it's a service that is offered to everybody with [inaudible 00:14:55] access to this which is what open source is. I think in a lot of ways, I read a lot about free and open software and open source and the way it was almost co-opted by corporate America in terms of a lot of people accuse corporate America of using open source as a way to garner free labor. Which I think is actually a valid criticism but it's also pretty negative and kind of cynical way to look at the whole thing. Because it helps everybody not just mega corps or whatever.</p><p><strong>Henry Zhu:</strong>          Right, and I think the fact that it's free means that people weren't able to pay for whatever proprietary thing. It definitely lowers that barrier of use. Obviously the problem is that companies can get way more use out of it and they don't have to give back. But I think that's something that's slowly changing and hopefully I can be apart of doing that. I think with stuff like Open Collective, Patreon, and just I guess different examples it definitely seems to be changing. I think we just really need to change to make it a little more like oh well this one company the size that they can do it and other companies will want to continue to join them.</p><p><strong>Joel Hooks:</strong>         Yeah, it's like you'll see the tip jar with a dollar it will prompt other people.</p><p><strong>Henry Zhu:</strong>          Right, and that was something it was hard to think about because I was thinking if you don't have a lot of money you would think maybe would people want to support you even more? And then, the psychology of like oh if you have a lot of money maybe they won't want to donate because they're like oh they're doing okay. But it does seem like it's basically the more you have the more people will give because I guess that's the same as Kickstarter or GoFundMe where it's like once they have a lot you are willing to give back to something that is already going to succeed or you think is going to succeed. And if you don't think it's going to succeed you're less likely to help out. It's interesting.</p><p><strong>Joel Hooks:</strong>         On the business and marketing side of it one of the interesting, like pricing a product is super hard and its very stressful and the mantra is charge more, right? The reason is people actually perceive value as this huge thing you can sell a thing for 10 dollars and maybe to you it's like eh it's just worth 10 bucks which will actually cause a certain sector to not be interested in it where as if you charged 500 dollars for the same thing then these people are like, \"Oh this is a really valuable product. They're charging 500 dollars.\"</p><p><strong>Henry Zhu:</strong>          Yeah, I remember hearing something about that too. Say you wanted to sell your sofa and it was like 10 dollars but then you do 200 dollars and suddenly everyone wants it. So, that's really, it is interesting. And I guess because it's free then it's even worse because it's not even anything then.</p><p><strong>Joel Hooks:</strong>         Oh people value free stuff so little. So we run a photography business and we give away free photography and those were the worst clients. The most demanding, the most complaining. Whereas somebody that paid the most money if they paid us 10,000 dollars to shoot a wedding that would actually be a really good client and they would be agreeable and they would look at the end result as it contained more value. Which is, I mean it's psychology and humans are so weird, incentives are so weird.</p><p><strong>Henry Zhu:</strong>          Yeah so it makes me wonder that's kind of like a fundamental issue with open source because it is free. So, we're always going to have this inherent group of people that are going to act like that unless we change I don't know the conditions in which they decide and use open source. I don't know I guess part of my talk from [inaudible 00:18:34] was about how when I first started using open source you might not even realize you are and the last thing you're going to do is think about who works on it. So just from the beginning you're already not thinking about people and what's happening to the project but just the fact that it exists. It's not on their minds.</p><p><strong>Joel Hooks:</strong>         Are you familiar with [inaudible 00:18:53] and her keyvalues.com? Have you seen this website?</p><p><strong>Henry Zhu:</strong>          Lynn ... I don't think so.</p><p><strong>Joel Hooks:</strong>         So, she runs a website and it's called keyvalues.com and basically it's a job board but instead of traditional sort by pay rate or location you actually choose through a list of key values that the company holds. Like inclusion or work life balance or ... it's a pretty big list. She has like 50 items. And to me this idea of defining as a company or as a project defining your key values and then expressing them publicly like these are our key values this is what we hold. This is how we operate.</p><p><strong>Joel Hooks:</strong>         I think is a really powerful approach to bringing in and drawing in community or coworkers or what have you. Which [inaudible 00:19:37] community and that's such a huge aspect to open source. And I don't see that a lot. I see code of conduct. And that kind of approaches the same thing but really it's not explicitly like these are our values. This is what this project is about and the agreed upon value system which I think is just interesting and I haven't seen a lot of it.</p><p><strong>Henry Zhu:</strong>          Yeah, no, I think that's really cool. I feel like code of conduct is more of, it's almost on the negative side, you're kind of assuming something bad is going to happen and this is what we do when that happens. But this is more like oh these are positive values that we want to aspire to that you might want to look into which yeah I don't think people really talk about that or have any documentation on that.</p><p><strong>Joel Hooks:</strong>         Ultimately one of the coolest side effects to me of dealing with the open source and being involved with this has been the relationships we build, like true friends, lifelong friends that have come from collaborating and being part of the same community on open source. And that to me even beyond the ability to get some software for free and build a thing on the internet, the ability to make friends and grow as a human in that way has been really awesome.</p><p><strong>Henry Zhu:</strong>          Yeah no, I totally agree. I remember just saying a few weeks ago when I did go to Seattle it was so interesting to be able to go to a city and be there for my first time and have people that want to meet up or even stay at their place because I didn't have a place to stay. That's pretty amazing to be able to do that through open source.</p><p><strong>Joel Hooks:</strong>         Yeah and I mean it's almost an instant bond too. Maybe we can only talk online but you meet and it's like getting to know an old friend and just comfortable even. Time and time again it's not even isolated. It's not a couple folks it's been dozens over the last years I've been involved with this stuff.</p><p><strong>Henry Zhu:</strong>          Yeah exactly, yeah.</p><p><strong>Joel Hooks:</strong>         But getting to brass tacks and financing and getting in and having stability I think the, I actually have kind of a problem with the donation economy around open source and providing resources mainly because of stability, right? This month you can be getting a certain level of income but next month somebody might decide to pull their contribution or their play. That's kind of the NPR model, right? Public radio where we don't really know what we're gonna get next month. We're gonna ask and we can have kind of an idea but how do we deal with that and what models are you looking at anyway to make your life more stable as open source maintainer?</p><p><strong>Henry Zhu:</strong>          Yeah I definitely experience that first hand. When I first did the Patreon I was pretty surprised I even got anything. In the first three days I had like 2,000 and it went up to like 3,000 a month. But what happened was after the first month two of the people gave me a thousand dollars a month and they couldn't do it anymore. So that why it went down to a thousand. So one day it's like, \"Okay minus 2,000.\"</p><p><strong>Henry Zhu:</strong>          So that number doesn't really say how, whats gonna happen the next month at all or, like what you said. So that is a good kind of passive thing where it's like, \"Oh maybe it will slowly increase and every month people will drop off and people will join.\" But yeah you definitely can't rely on that unless you've been doing it for a really long time and those people continue to give. But it does seem like if it's not a large company or someone else that's stable that they're gonna, yeah they could drop off at any point.</p><p><strong>Joel Hooks:</strong>         Yeah it's almost like a numbers game. If you 500 people giving you 30 dollars a month, that's like 180 grand a yeah which is, that's a really solid living wage. But if you have three people giving you a couple thousand dollars a month and one of those goes away it really effects it versus the kind of numbers game once you have [inaudible 00:23:31].</p><p><strong>Henry Zhu:</strong>          Right, yeah. SO it's like you want a lot of giving you, well not really give you a small amount but giving you an amount. But then it's just you don't really know that many people and then also you almost feel weird where it's like, \"Why are the developers the ones that have to give the money to you when the companies could do it?\"</p><p><strong>Joel Hooks:</strong>         Yeah and I saw you had, well it's the I think it's the open collective, Adobe went for a year long maintenance contract. But that's pretty cool that approach is pretty interesting. The idea a corporation would dig in over a period of time versus one month, right? A year is a different scenario.</p><p><strong>Henry Zhu:</strong>          Right because they could do the one year and then half way through the year they're like, \"Oh we don't need it anymore.\" So it does seem like in terms of just getting yourself started doing the bulk up front is a lot better. Maybe later it won't matter as much but now it's like, \"Okay that's really helpful.\" Just to make sure that we're sustainable in the next few months. And yeah that was a good, that was probably my first big, I don't know even know what you call this but set of funding because it was a big company and then I guess other people and other companies are like, \"Oh we want this kind of service too.\" That would be really useful if it's like a starting point. And it's also not exactly like consulting where I'm spending lots of time where its low amount of hours so that's really helpful too.</p><p><strong>Joel Hooks:</strong>         Yeah it's like questions and priority support basically, is that the general gist of it?</p><p><strong>Henry Zhu:</strong>          Yeah basically like support hours.</p><p><strong>Joel Hooks:</strong>         So one of the things and actually this is the reason Egghead exists because when I first, when the idea was sparked it was John Lindquist had his 50 videos on YouTube and he was giving away for free which is awesome and people do that and I was like, \"Man you should really be charging for this.\" And he was like, \"Well I have a donation button.\" And I was like, it's busking almost, right? Like you're at the street corner and just hoping people toss money [crosstalk 00:25:32].</p><p><strong>Henry Zhu:</strong>          Yeah</p><p><strong>Joel Hooks:</strong>         Which is fine and people do that and I think it's an okay model but my idea was well why can't we, if we're gonna teach and we're gonna share this knowledge and obviously people will pay for that sort of thing. People want to educate themselves. That was where the idea was like, \"Let's do this instead we'll charge a fee and a lot of people access.\" Which ultimately what the business has been about. Content creators are able to earn a sustainable income versus, well or in addition to the asking people for help I guess.</p><p><strong>Henry Zhu:</strong>          Yeah and then for Egghead it's not just one persons content but all the creators. So you're paying for access to everything. So that really makes it different too.</p><p><strong>Joel Hooks:</strong>         Yeah and makes the value pitch for, to get people to sign up. Just I don't know to me I think education in general is a rally great way to finance what you're trying to do whether it's workshops or even books and tutorials and that sort of thing has time again proven to be a great approach to...</p><p><strong>Henry Zhu:</strong>          Yeah that makes sense. It's just I have this very naive view of material for free but it's, I guess it shouldn't prevent you from making paid content or that kind of thing, so.</p><p><strong>Joel Hooks:</strong>         Well there's also, so this is getting back to more business and marketing, right? There's this idea of tiers. So a lot of times if you're starting and or software as a service a lot of times they'll start with a low tier, like the free tier, right? Like, \"Get this guide.\" Or, \"Get this thing.\" But then if you also want these extras you can get this. Or if you want the mega extras you can do this amount and there's a ratio, like a price ratio, zero free obviously you multiply that by anything it's still zero.</p><p><strong>Joel Hooks:</strong>         But just this low barrier entry where you're delivering value, you're giving enough to get started, you're contributing that way. Because I agree we have like 30 or 40 free courses. Which like 30% of our courses are actually free which I love. I want people to learn and I want, I think the world deserves that. The idea of open access to education but at the same time you have to premium offering of else how do we eat? That comes into question. It's always a balance thing, like with everything, right? It's all how doe we [crosstalk 00:27:52].</p><p><strong>Henry Zhu:</strong>          Yeah I think it's justifiably in the sense that if the paid content is advanced it's like, \"Well they already got value from the free stuff and people are more willing to pay for something that they probably wouldn't look at for free anyway.\" Where it's, it wasn't accessible before but now because they have the knowledge they're willing to learn more. That seems like an easy way to keep going with that idea.</p><p><strong>Joel Hooks:</strong>         Yeah I mean it's like reciprocity, right? I've got free, you're able to prove that you can deliver the value so they can with much less risk approach it versus some get rich quick type scheme. That's not what we're talking about. It's like, \"Hey heres some value you'll learn. We can prove that by giving you this thing and the if you need to learn more and you want to advance further then with little risk you can give us some money and get the more advanced stuff.\" Which is fair and equitable. It gets tough and especially with access globally because countries on the African continent or South American have a really hard time paying U.S. developer products. And that's been, making it fair and equitable globally has been an interesting challenge that we didn't even consider when we were starting it.</p><p><strong>Henry Zhu:</strong>          Right, yeah that's interesting. I think the point about not getting rich quick, but not just quick but I guess, or the rich part, but the I guess it's like how do we show people that what we're about isn't the something really fast or hype or these releases and downloads but we're here for the long term. And it's really, I guess it's really about trust, right? And making sure that from X years from now this is still a relevant, helpful product or whatever it is. But it just means a lot more to people than just like, \"Oh this thing is just something I need right now.\"</p><p><strong>Joel Hooks:</strong>         So this all kind of goes back to me to my friend [inaudible 00:29:51] Davis has an expression that he likes to use it's living an unconventional life of my own design. Your recent journey has really made me think of that and this idea that we live in a time where you can what you're up to I think is pretty awesome.</p><p><strong>Henry Zhu:</strong>          Yeah. And it took me a really long time to I don't know I guess make that leap of faith because everything about what we're doing now is just kind of like working at a corporation or just doing whatever it was there before and then you never, you have ... I think a lot of people have dreams of doing their own thing but they're kind of shaped but what we see on T.V. or Silicon Valley, that kind of stuff. And I remember when I was younger I really wanted to do a startup but then i was just looking at how it's portrayed and other people and their stories and just burnt out and just bad work life balance. And then later it's like, \"Oh now I'm kind of doing it again but in this other way.\" Which in my mind hopefully is more sustainable physically and mentally. So I'm glad...</p><p><strong>Joel Hooks:</strong>         Yeah it's so important [crosstalk 00:30:59] health absolutely thew most important thing. Mental and physical health is the most important thing we can have. If you don't have those two things it's hard to have anything else I think.</p><p><strong>Henry Zhu:</strong>          Yeah and just to go back being sick this last week every time I get sick it's another reminder to me all those things that I cared about before don't matter at all. Whether I was getting angry or other people complaining or whatever it was when you're not feeling well none of that matters at all. It helps you think about what your priorities are and hopefully when you're not sick you'll remember that.</p><p><strong>Joel Hooks:</strong>         Yeah I think that's probably one of the, breaking off and being independent how do you deal with being sick? And can I still take vacations? And how do I get breaks? Because you have to have them, right? I think some people think they can work 365 days a year.</p><p><strong>Henry Zhu:</strong>          Yeah that's really interesting because I almost feel like a lot of people that are willing to take that, I don't know if that's true, but if they're willing to take that step to do it on their own they're probably people that work a lot or they're used to working a lot versus just chilling. Because I feel like if they did that they probably wouldn't be willing to to take the leap in the first place. So then its like yeah how do you deal with not knowing when to take vacation? You probably didn't take vacation where you were working before and so now no one's telling you at all and you could be doing it at any point but then you decide to just do what you're used to or the default.</p><p><strong>Joel Hooks:</strong>         Yeah. I know it's been hard with Egghead and trying to get a business off the ground. And when it first started it was just me and John and I was doing all the website and marketing and all that stuff and I was doing long weeks. Even then it was like 50 hours I would never, being able to work 80 hours a week has never been neither appealing to me or something that I felt like i would be physically be able to do. And I know some people do it but I feel like you're kind of borrowing from your future self when you so that. You're kind of saying, \"Hey I'm gonna use this now but I'm gonna pay for this later.\"</p><p><strong>Henry Zhu:</strong>          Exactly and if, like you said, this is more of a lifestyle change or the future of what you're doing then you should care about your, yeah the long term. And the long term is definitely your health.</p><p><strong>Joel Hooks:</strong>         And is burnout preventable. I would say yes and I heard I think it was from the change log and you were on it and a woman on it was talking about burnout and the, it's the same medically the diagnosis is the same as clinical depression. Burnout and clinical depression are the same diagnosis and present themselves in the same way. Which makes sense to me I've been burnt out and I've been depressed and they feel very, very similar in terms of how your body does that.</p><p><strong>Joel Hooks:</strong>         And how do you prevent that and what kind of regiment does it take because Babel needs you, they need you as the maintainer and you're willing to do it and you enjoy doing it and how do you maintain that kind of pleasure and enjoyment and making it something that you want to do long term because nobody wants you to leave and how do we make it to where you should be able to, \"If I left it would be fine but also i want to do this for a long time so how do I make that happen?\"</p><p><strong>Henry Zhu:</strong>          Yeah I kind of feel like, I don't know why but in the end I feel like it's basically just a sense of humility and thinking about how your pride. The fact that I think that people really need me it's because I think that I'm that important. If I left and suddenly everything would be broken, or whatever that kind of thing. And even if it was true I don't think it's worth the sacrifice of your current state if in the end, especially because depending on your health situation you might have actual problems not just getting a cold but actual issues.</p><p><strong>Henry Zhu:</strong>          So I gave this example in a talk where I was, you know how you go on the airplane and you have to put on your seatbelt, or you put on your mask first and then you put on your child's mask for oxygen. It's like you gotta help yourself before, even if your desire is to help other people, if you can't even help yourself then maybe everyone's gonna spend all their time trying to help you too. So it's hard because you're like, \"Oh I'm being selfish.\" But helping yourself in order to help other people, if that's your actual end purpose or goal, it has to be part of the [crosstalk 00:35:26].</p><p><strong>Joel Hooks:</strong>         Especially long term, right? If you want to do something and you're like, \"I want to still be doing this in five years.\" It's just so important. And you can take it as I suppose selfish and I think we should be though. You should be, it's not to anybody else's detriment but to, taking care of yourself and making sure your needs are met is absolutely important. And I see that with Egghead and ultimately one of my goals for in terms of running a business is to make it to where I'm not as essential.</p><p><strong>Joel Hooks:</strong>         At first, in the first two years it would have been if I left that was it. But now we've got this amazing staff built up and we're, we have processes and stuff that's written down and I feel like if I left for a year what would it look like when I came back? And I enjoy working, I really love to work. I don't like having a job, I love to work. But I want to also make it to where everybody feels confident they can make decisions and I don't have to sign off on everything and everything doesn't have to run through me...</p><p><strong>Henry Zhu:</strong>          Exactly.</p><p><strong>Joel Hooks:</strong>         And it's not this cult of personality around a single or small group of individuals but it's kind of this collective thing that we're all working towards.</p><p><strong>Henry Zhu:</strong>          Yeah that's so good. I want to think of myself as replaceable even though, or not even just so that means that if you're doing the same thing over and someone else can do it now you can think about more higher level meta level things. SO it's like as a maintainer the way I think about it is how do we think about the more long term things and also the higher level things versus just cutting out the fires.</p><p><strong>Henry Zhu:</strong>          Because we could do that all day and we basically did that for I don't know like a year after I guess took over with some other people. At that point I wasn't thinking about vision or anything I was just like, \"Oh I got handed or inherited this code base.\" I guess I considered it a code base at the time. So all I thought about was fixing bugs. And then later when I realized, \"Well I guess nobody is stepping up and the thing we're working on is a lot bigger than just fixing bugs.</p><p><strong>Henry Zhu:</strong>          Then we should think about what the future is.\" And, yeah just to think a little bit beyond the code and that kind of helped me to think, \"Oh it's not just about code. It's about where this project is going in the ecosystem and the people and all that.\" And I think that was better because the reason why a lot of us get so frustrated is because we're so frustrated with the small things. But I fee like if we do have that vision in mind then we're willing to take on those small boring things because they're all at least towards the purpose that we agree with.</p><p><strong>Joel Hooks:</strong>         Yeah I think developing my ability to say no have been also an interesting [crosstalk 00:38:10]. Over time I can say no. At first it was like, \"Hey we should have this partnership.\" And I'd be like, \"Oh okay we'll do that thing.\" And then now I'm like, \"Um, no.\" That's been a big, and it's just hard. That word is actually hard to say a lot of times but to me the ability to say no has been a big mental relief.</p><p><strong>Henry Zhu:</strong>          Yeah I think I'm still learning that. So I think I say yes to basically everything at the moment.</p><p><strong>Joel Hooks:</strong>         I think sometimes there's some periods in life where that's great, like, \"I'm just gonna say yes to whatever comes my way. And accept this ans see how the opportunities...\" But then, to me, that was part of the learning experience. \"Well I need to say no.\"</p><p><strong>Henry Zhu:</strong>          Yeah, I've been thinking a lot about habit and the fact that yeah if you don't do it then it's gonna be easier and easier to contain. It's easy to say yes because I'm always saying yes. It's not like I have to say no just so that it'll be easier to say no it's just that you kind of, same with taking breaks, it's like, \"Oh if you're working all the time you never take a break.\" It's like the fact that we have vacation is good because then you realize, \"Oh I am finite. I am limited. I get tired.\" And it's helpful to remember that physically that you should stop. Same with sleep, right? Same exact thing. Because we all want to not sleep or whatever and just work all day but...</p><p><strong>Joel Hooks:</strong>         I gotta get my nine hours. And I didn't, I used to not. I'd go to bed and I'd do four hours a night of extended periods of time. And I'm 44 now so I think as you get older it also changes too but even just thinking back like, \"Man I probably would have just been saner and more pleasant to be around for sure if I had a decent amount of sleep.\" Have you read the power of habit? Have you read that book?</p><p><strong>Henry Zhu:</strong>          No I haven't someone did recommend it to me. I read a similar book but it was more specifically about spiritual formation but it was also about habit. It was called You are what you love. And I think it probably talked about the same stuff.</p><p><strong>Joel Hooks:</strong>         Yeah, yeah. It's, I don't know for any of this, developing, doing what you're doing, or building a business or anything your habits are just living a life. Your habits kind of define I think a huge portion of what we do. Good or bad, right? It's interesting because good and bad habits you can develop both of the them and the process is actually very similar for both.</p><p><strong>Henry Zhu:</strong>          Yeah, I think one of the main points in the book that I was reading is that you can't fix bad habits by thinking differently, you have to create new habits that replace them. And I think the problem is that we all tend to think as long as I know the right things, I'll change. But if we don't actually do anything to change, we're always thinking that we're doing the right thing.</p><p><strong>Joel Hooks:</strong>         Another great habit resource is a Stanford professor BJ Fog and he has a website called tinyhabits.com and he signs up, and he's basically doing research and he's been doing it for years and years but you sign up and he starts sending you these little emails and you develop a tiny habit. Like you want to exercise more so instead of saying I'm gonna go to the gym every morning and this hour long routine you simply after you brush your teeth you put your walking shoes on, that's the habit you develop, right? This, how do we incrementally build toward a habit versus a lot of times we'll take on something and it's this huge commitment and your brain absolutely shuts down.</p><p><strong>Joel Hooks:</strong>         If you're like, \"Oh I want to lift weights for an hour three times a week.\" And your brain's like, \"I don't think we're gonna do that. That doesn't sound good at all.\" So how do we develop these habits in an incremental way. To me it rolls back to building software. This incremental approach versus massive change. It makes a lot of sense, right? If we can be agile in our habits, and that's lowercase agile, in our habits and how we work and do these small incremental improvements over time you get this sustainability. If you're working in a positive way then long term you end up with positive benefits and positive habits that you build over time.</p><p><strong>Henry Zhu:</strong>          Right.</p><p><strong>Joel Hooks:</strong>         Which to me it's worked out pretty good, I think. I know I'm a big ball of all my habits that I've accumulated over [crosstalk 00:42:22].</p><p><strong>Henry Zhu:</strong>          Yeah I think it's just I'm starting off with just trying to be aware of those are. Because a lot of them are things that you don't realize that you're doing. So I guess that's a good first step.</p><p><strong>Joel Hooks:</strong>         Yeah, for sure like acknowledging or understanding what it is you're up to.</p><p><strong>Henry Zhu:</strong>          Yeah like why you're being aware of what they are. And a lot of them are just unconscious. So I think that's the problem, yeah.</p><p><strong>Joel Hooks:</strong>         So I think we'll wrap it up but let people know just where they can go and attribute to Babel and to your Patreon to support your effort.</p><p><strong>Henry Zhu:</strong>          Yeah, so if you want to contribute financially my Patreon is patreon.com/henryzhu which is just my name. Or you can donate to the project which I can take out of opencollective.com/babel. Yeah we're also looking for people that want to get more involved as well. I'm trying to figure out a better way of doing that because I feel like it's easy to just ask for contributors and then not really have the resources to maintain all that work. So maybe it's better to do more of a mentoring thing, but we'll see.</p><p><strong>Joel Hooks:</strong>         Yeah mentoring, coaching, sponsor type approaches is interesting, I think.</p><p><strong>Henry Zhu:</strong>          Yeah the whole catch all, \"Hey I need a hundred contributors.\" And now you're like, \"Well now there's a hundred PR's to review.\" I would like to but it's just not everyone has time to do that. And then everyone else will go away thinking that we're not, we don't have the time or we can't help and then, yeah.</p><p><strong>Joel Hooks:</strong>         You know what's interesting there to me, we have all these code schools, right? What if mentoring or coaching was something that the people could do where they had goals and were able to, it's almost like a patching on level, like a support level.</p><p><strong>Henry Zhu:</strong>          That would be funny.</p><p><strong>Joel Hooks:</strong>         Where they have to apply and they could send in an application and become a mentee effectively. I've paid a lot of mentors over my years for both business and development because I was 35 when I switched to development and I had to. I had four kids, I couldn't all of a sudden be a junior developer and lose my salary so I had to figure it out and I did that by paying people. And I did that for Egghead too I pay, I still do, I pay people that know what they're doing reasonable sums of money to give me advice and help me out. But somebody that's gone through code school or is in code school and wants to do extra work that might be, that's kind of something you could do where you'd work directly, build relationships. And it's almost like a support contract in a way.</p><p><strong>Henry Zhu:</strong>          Yeah but for that person, that is interesting.</p><p><strong>Joel Hooks:</strong>         You'd want, like application, you'd want to vet and make sure that people are serious about what they're doing and that it would be a good fit and all that stuff.</p><p><strong>Henry Zhu:</strong>          Yeah because there's plenty of people that just message me like, \"Hey what's your view on this?\" I'm like, \"I don't know anything about that.\"</p><p><strong>Joel Hooks:</strong>         I imagine you get people that email and message you that are like, \"Oh can you mentor me?\"</p><p><strong>Henry Zhu:</strong>          Yeah, or they're just like, \"What are your thoughts on this project that I made?\" And it's like, \"I don't know anything about backend or if i did I don't feel comfortable giving advice or talking about it.\" So...</p><p><strong>Joel Hooks:</strong>         Yeah, yeah.</p><p><strong>Henry Zhu:</strong>          It's just like not unrelated. It's like, \"The only thing I want to talk about is JavaScript and Babel.\" It's like, \"Everything else I'm okay with not knowing about.\" So...</p><p><strong>Joel Hooks:</strong>         Yeah, it's good too I mean focus and how much stuff can you know about in a given time, right? And do you want to be an expert in everything?</p><p><strong>Henry Zhu:</strong>          Yeah and I don't, I guess I don't feel that sense of, I guess that's [inaudible 00:45:49], right? Of random stuff that comes out I just I don't, it's not really interesting to me or appealing.</p><p><strong>Joel Hooks:</strong>         Yeah so my confession I haven't even done a hello world in view, for instance.</p><p><strong>Henry Zhu:</strong>          Oh.</p><p><strong>Joel Hooks:</strong>         I know it's good technology, I know it. I'm just, I don't need it. I'm fine where I'm at right now. And I used to be I would be all over it. Like, \"Everybody loves this it's super hot and it's obviously a good kit.\" So I'd have to learn it also. But at this point in my life I'm like, \"You know I've got a lot going on and it will still be there when I'm ready if I need that.\"</p><p><strong>Henry Zhu:</strong>          Yeah that's totally fine.</p><p><strong>Joel Hooks:</strong>         Yeah it's fine especially if things are going pretty good. Not that with impact we have to look to the future too you always have to kind of have your mind on it. But it's like Babel and JavaScript five years from now, yeah it's still a thing.</p><p><strong>Henry Zhu:</strong>          Yeah.</p><p><strong>Joel Hooks:</strong>         It's not going anywhere, right? This is as as much of a problem for me that in five years I will still be working on problems in this space. And people are like that with entrepreneurship too and the whole serial entrepreneurship, \"I gotta start [crosstalk 00:46:52] I gotta have a portfolio of business.\" I'm like, \"You know what? I like my one little business I don't want to have to ideate on new businesses all the time. I just want to make this one better for the people that use it now.\"</p><p><strong>Henry Zhu:</strong>          Right, yeah I think focus, that's really important too. And you know maybe I got lucky and I picked a project that just happens to be part of the language. So in some weird way in inherently isn't really gonna go away anytime soon. So there that but I mean I do like what it means and what it's doing. So, yeah but what's weird is in the last, I guess, few weeks we've been getting a lot more donations which is pretty crazy.</p><p><strong>Joel Hooks:</strong>         Oh well your marketing career's gonna work Henry.</p><p><strong>Henry Zhu:</strong>          You think so? Okay.</p><p><strong>Joel Hooks:</strong>         I mean all these podcast appearances and going traveling around and meeting face to face and people will see you [crosstalk 00:47:43].</p><p><strong>Henry Zhu:</strong>          Yeah face to face definitely although now I did that whole thing and I don't really want to travel that much.</p><p><strong>Joel Hooks:</strong>         Yeah well I mean you'll see and uptick and then take a break.</p><p><strong>Henry Zhu:</strong>          Yeah.</p><p><strong>Joel Hooks:</strong>         And you're basically in a DevRel job.</p><p><strong>Henry Zhu:</strong>          Right.</p><p><strong>Joel Hooks:</strong>         That's kind of, which is good and bad. It's grueling the whole conference tours [crosstalk 00:48:06].</p><p><strong>Henry Zhu:</strong>          Yeah and also the conference thing is like, \"I really want to meet people but I don't care about traveling that much.\" Or maybe I just haven't done it enough to care. It's funny other people in my situation they're like, \"Wow you don't even have to live anywhere and you can just...\"</p><p><strong>Joel Hooks:</strong>         You live [crosstalk 00:48:22] so going other places is kind of like, \"Hmm, [crosstalk 00:48:26].</p><p><strong>Henry Zhu:</strong>          Well they're more like, \"Oh you can be a...\" what's it called, a digital nomad. You Airbnb everywhere and you don't even have any stuff with you and it's free. But I'm like, \"No, I don't think that's free at all.\"</p><p><strong>Joel Hooks:</strong>         Yeah, I really like home. I love the comfort of my house and my collection of things that I have to make me more comfortable.</p><p><strong>Henry Zhu:</strong>          Right and then your family and your friends and people that are in your city and all that.</p><p><strong>Joel Hooks:</strong>         It's different when you have to travel all the time.</p><p><strong>Henry Zhu:</strong>          Yeah Salesforce they're giving 1000 a month for nothing and then Trivago you know the same company that donated to Web[inaudible 00:49:05]?</p><p><strong>Joel Hooks:</strong>         Mm-hmm (affirmative).</p><p><strong>Henry Zhu:</strong>          Well, they gave 10,000 a month which was crazy but they're going to give us 2,000 which is the highest out of any company.</p><p><strong>Joel Hooks:</strong>         Nice.</p><p><strong>Henry Zhu:</strong>          Even with that I'm already pretty good. I guess it just depends on how we want to, how do we split it per se. I don't know how badly other people want to do this so there's that.</p><p><strong>Joel Hooks:</strong>         Well, I mean i think the idea of having the ability to say I don't know bring on people and actually take on almost contracts, right?</p><p><strong>Henry Zhu:</strong>          Mm-hmm (affirmative).</p><p><strong>Joel Hooks:</strong>         Bring on folks for a specific targeted task. That's interesting in terms of, at the end of the day you run it like a business I would think. The way you described it so far it's very much like, similar to running a non profit or a corporation or whatever, it is a business.</p><p><strong>Henry Zhu:</strong>          Right, yeah, it has been interesting the fact that there are no companies that donate to [inaudible 00:50:01]. They only do to open collective because they want to support the project.</p><p><strong>Joel Hooks:</strong>         Yeah, they definitely, I can totally see that. I mean, it doesn't really make a difference it's just the perception of where that money is going.</p><p><strong>Henry Zhu:</strong>          Yeah. And then so this hasn't even happened yet but this, I got an email, this random company I guess they're doing something with Crypto or open source and they raise money and they're going to give more than half of it to open source. And I guess they picked one of us as one of the projects.</p><p><strong>Joel Hooks:</strong>         That's cool.</p><p><strong>Henry Zhu:</strong>          Which is pretty crazy. But yeah, I guess that will, I don't know when they're going to announce that but it will happen pretty soon.</p><p><strong>Joel Hooks:</strong>         And I think core java script and then up through Babble stuff is workshops especially onsite corporate workshops and then even selling tickets. My max rate for that, my record rate, was 15,000 dollars a day. And then, my general rate was 10,000 dollars a day and companies ate it.</p><p><strong>Henry Zhu:</strong>          They were just like, \"Whatever.\" Yeah.</p><p><strong>Joel Hooks:</strong>         I mean you have to do a little sales, you have to talk up what we're going to learn and what value it brings. But there's so many companies that need core java script training and I gave the same training 30 times at 10,000 dollars a day. For a two day training it would be limited to 20 people but we have 40 well we'll do two trainings then back to back in the same week. And it's fine. Some people, \"that's too expensive.\" To which I always meet silence, never make excuses for how much you're charging and I always charge [inaudible 00:51:38]. If they're like, \"Oh that's very expensive.\" And then that's a negotiation tactic and it actually works pretty good because instead of offering an excuse I'll just make them explain it.</p><p><strong>Henry Zhu:</strong>          Yeah, there is no excuse.</p><p><strong>Joel Hooks:</strong>         It is what it is. If you don't like it that's fine find somebody else. You can definitely find somebody else that will be less expensive whatever quality they happen to deliver. But you're confident in your product and the value you're delivering you don't have to be a discount operator.</p><p><strong>Henry Zhu:</strong>          Right. And especially if it's about Babble I mean who else are you going to ask to do it then? If you're not going to ask someone that woks on it then I mean you can go ahead and do that.</p><p><strong>Joel Hooks:</strong>         Yeah, it's like [inaudible 00:52:19] I want Michael Jackson.</p><p><strong>Henry Zhu:</strong>          Right.</p><p><strong>Joel Hooks:</strong>         That's who I want to deliver that or whatever. I think that's a great way but honestly it doesn't even matter. I mean that's great they can throw you weird curve ball questions but I could given at this point in my life feel like I could do a Babel workshop with enough preparation. And I [crosstalk 00:52:39] to but you add so much value to it, right? You're Henry Zhu and like you say who else would you want to do that? And that in itself adds credibility and it makes it stick too in the company. Having you do it is gonna be a bigger uplift and if you think about it that way in terms of funding how many 10,000 dollar a day workshops do you need to do in a year to cover your expense.</p><p><strong>Henry Zhu:</strong>          No, not that many.</p><p><strong>Joel Hooks:</strong>         Yeah so it's like every three months you, well what it does is it removes the sales burden from you.</p><p><strong>Henry Zhu:</strong>          Yeah.</p><p><strong>Joel Hooks:</strong>         It doesn't matter, I don't need to go to your shop I'll accept any 10,000 dollar a day offers that come my way but I don't really need it. So in terms of negotiating from a position of power.</p><p><strong>Henry Zhu:</strong>          You can say no basically, yeah.</p><p><strong>Joel Hooks:</strong>         Yeah like, \"No that's fine it doesn't sound like this is gonna work out.\" If they're weird or they have weird requirements or whatever. Oh and also always make them pay for the travel. Less expenses not covered expenses.</p><p><strong>Henry Zhu:</strong>          Yeah. This is funny when we talk about it, like the workshops and all this stuff, it almost feels like it's too easy.</p><p><strong>Joel Hooks:</strong>         It's not really that hard. Most people don't want to ask for money and they feel [crosstalk 00:53:48] about it and they just want to work a job.</p><p><strong>Henry Zhu:</strong>          Right.</p><p><strong>Joel Hooks:</strong>         Let somebody else handle all of that and I think, you've already taken the hardest step cutting the apron strings from a corporation and going independent is super hard mentally. And doing that is such a staggeringly difficult mental leap. So once you've done that it's like, \"Now I just have to eat.\" And you have the knowledge though. That's the thing you're an expert and you have actual knowledge and that will provide value to others. You're not selling them snake oil. It's not, you're not ripping them off.</p><p><strong>Joel Hooks:</strong>         And when I first was doing it I was like, \"Oh am I ripping people off? Is this ridiculous?\" And then I was like, \"No, really no I'm not.\" Because I would get called back. I would have repeat customers and that was validating, right? I'm like, \"Oh, okay they're calling me back and I am an expert and I do know this stuff and I can answer their questions.\" I've sold support contracts, like email only support contracts, where you have high availability 24 hour turn around on answering email questions for like 5,000 dollars a month.</p><p><strong>Henry Zhu:</strong>          Yeah exactly.</p><p><strong>Joel Hooks:</strong>         And that's valuable, right? I would solve, if they were bickering internally about some sort of technical issue, they would explain it to me and I would be like, \"Oh yeah well if you go with option B I think that's would be a better one.\" And that's valuable to them as a mediator. There's all sorts of small things, not even getting into to the content marketing which selling content. What's interesting once you make, like and Egghead course, taking [crosstalk 00:55:12] which is three years old and he's made a quarter million dollars off of that course. And that's amazing to me though, right? He just had this little library, it was 90 lines of code at the time, [crosstalk 00:55:25] pretty, it was tough recording it but then you take that hourly and it's like, \"Wow that's really great.\" And so many people have watched it a benefited from it. Yeah but I'm gonna get back to it and it was awesome to, I guess to meet you, really and talk to you. Been a good conversation I enjoyed it.</p><p><strong>Henry Zhu:</strong>          Awesome, Thanks Joel. All right, bye.</p>",
    "slug": "henry-zhu-maintainer-of-babel",
    "description": "<p>Henry Zhu is currently a steward for Babel, and today he'll be discussing the management and lifestyle side of working on an open source project full-time.</p><p>The financial side to open source is interesting. Henry talks about where he gets his money and how he can be financially independent while still working on open source full time. Most of the money comes from donations through Open Collective and Patreon. A lot of the donations come from users, but corporations do donate as well. Henry also discusses the stability of it, and how the NPR model of asking for donations can lead to uncertainty about the next month.</p><p>Henry says he's enjoying the management and marketing side of being a steward about as much as he enjoys coding. It's a side that people don't often think about with open source. This side of it includes a lot of marketing and interacting with the greater community, as well as the other maintainers and contributors to babel.</p><p>How does Henry handle all this responsibility when there is no one above him telling him when to take a break, or when to go on vacation? Henry and Joel talk about having a positive \"selfishness\", and taking care of yourself so that the project can prosper. If you want to be doing it for years you have to make sure that you don't burn out.</p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/henry-zhu/transcript\">\"Henry Zhu, Maintainer of Babel\" Transcript</a></p><h3>Resources:</h3><ul><li><a href=\"https://babeljs.io/\">Babel</a></li><li><a href=\"https://www.amazon.com/Power-Habit-What-Life-Business/dp/081298160X\">The Power of Habit</a></li><li><a href=\"https://www.amazon.com/You-Are-What-Love-Spiritual/dp/158743380X\">You Are What You Love</a></li><li><a href=\"https://www.tinyhabits.com/\">Tiny Habits</a></li><li><a href=\"https://kaidavis.com/articles/\">Kai Davis</a></li></ul><h3>Henry Zhu:</h3><ul><li><a href=\"https://twitter.com/left_pad?lang=en\">Twitter</a></li><li><a href=\"https://www.henryzoo.com/\">Website</a></li><li><a href=\"https://github.com/hzoo\">Github</a></li><li><a href=\"https://www.patreon.com/henryzhu\">Patreon</a></li><li><a href=\"https://opencollective.com/babel#\">Open Collective</a></li></ul><h3>Joel Hooks:</h3><ul><li><a href=\"https://twitter.com/jhooks\">Twitter</a></li><li><a href=\"https://joelhooks.com/\">Website</a></li></ul>",
    "duration": 3344,
    "episode_number": 20,
    "contributors": [
      "Joel Hooks"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/watq7",
    "path": "/podcasts/henry-zhu-maintainer-of-babel",
    "published_at": "July 30th, 2018",
    "url": "https://egghead.io/api/v1/podcasts/henry-zhu-maintainer-of-babel",
    "edit_podcast_url": "https://egghead.io/podcasts/henry-zhu-maintainer-of-babel/edit"
  },
  {
    "id": "podcasts-00000000000000000064",
    "title": "Phil Pluckthun, Creator of Dank Mono",
    "summary": "Phil Pluckthun is the creator of Dank Mono, a new monospaced programming font with ligatures. He is also a core contributor to Styled Components, a component-based CSS Library.\r\n\r\nTune in to hear a discussion on how Phil got involved with design, how he become a core contributor to the styled-components library, and how and why he started working on Dank Mono.",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/15d47d11-eb6a-4708-88d2-703f92195a74/7718b358_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/15d47d11-eb6a-4708-88d2-703f92195a74/1534346302artwork.jpg",
    "simplecast_uid": "15d47d11-eb6a-4708-88d2-703f92195a74",
    "transcript": "<p><strong>John Lindquist:</strong>     ... Alright, I'm here with Phil Plickthun. Phil, can you go ahead and introduce yourself for us?</p><p><strong>Phil Plickthun:</strong>     Hiya, I'm Phil. I am the co-contributor of styled components. I work for Formidable here in London and recently I've started creating this new font, Dank Mono.</p><p><strong>John Lindquist:</strong>     Shout out for Dank Mono, I absolutely love it. It's my daily driver font these days. So thank you for making it</p><p><strong>Phil Plickthun:</strong>     Oh, thank you. Oh no, thank you for using it.</p><p><strong>John Lindquist:</strong>     Oh, thank you first.</p><p><strong>John Lindquist:</strong>     So people can get to know you a little bit, what's kind of your programming background, what was your first programming job?</p><p><strong>Phil Plickthun:</strong>     Well, I started working for a web game company, so my first job was actually in Berlin and I was working for a smaller startups doing some kind of mobile apps.</p><p><strong>Phil Plickthun:</strong>     They've been doing some kind of interesting geocaching stuff.</p><p><strong>Phil Plickthun:</strong>     They had this idea that is basically Pokemon Go but without AR and quiz questions so that was my first job and then it kind of went on for me ...</p><p><strong>John Lindquist:</strong>     That sounds challenging.</p><p><strong>Phil Plickthun:</strong>     ... going through a lot of jobs.</p><p><strong>Phil Plickthun:</strong>     Well, it was, the only challenging part about it really though was my first job and it was more getting to know how it works, to work with more people and like, bigger projects.</p><p><strong>Phil Plickthun:</strong>     And it was fairly relaxed. We were only seven people in total. And the other six have worked together for a year before that.</p><p><strong>Phil Plickthun:</strong>     I was basically the first external employee so to speak.</p><p><strong>John Lindquist:</strong>     Oh, okay. That must've had its own challenges.</p><p><strong>Phil Plickthun:</strong>     Well, it was interesting. I mean, the six have been buddies for a year and they've known each other for a very long time, so it was kind of like getting to know them better, getting closer. Yeah, but it was really fun.</p><p><strong>John Lindquist:</strong>     Right, right.</p><p><strong>John Lindquist:</strong>     So you mentioned you were a core contributor to styled components, can you kind of give us a run down of what styled components is real quick? And then why you got on the team and what's your involvement with it?</p><p><strong>Phil Plickthun:</strong>     So, style components is one of these newer component based ESS in JS libraries. So basically it's CSS and Java Script are all focusing on creating small components that you put in instead of elements and instead of inline styles and it was created by Max Stoyberg and Glen Maddon and I've come in shortly after and, basically my idea - and why I was getting involved in that project - was they had a lot of interesting ideas and at the same time I was searching for a CSS in JS project that was easier to use, that basically had this nice developing experience, so that definitely kind of hit that kind of area in that spot that they wanted to get to with star components, and they had this really interesting issue open the repository which was one of the first ones they've created and it just said 'Babel transform'.</p><p><strong>Phil Plickthun:</strong>     And the idea was how can we transform how you write style components in Babel to make it more efficient and more performant? And I kind of got to talk to them and I was like this actually is what I wanted to create - as a new CSS in JS library - but you know, who needs another new CSS in JS library? True, as true now as it was back then.</p><p><strong>John Lindquist:</strong>     Right. Yup.</p><p><strong>Phil Plickthun:</strong>     Well, we didn't right jump onto that issue but they were like \"Well, what about if you try it out? If you get involved?\"</p><p><strong>Phil Plickthun:</strong>     So I kind of coded up with prototype for it into the previously already existing Babel plugin for style components. And, well to be honest, it didn't work out that well. So we're still not fully there to have this kind of pre-processed CSS in JS via style components that, it's an effort that I'm still working on, and less so currently, but it's interesting that original issue that got me to work with them is still - kind of - present and not solved.</p><p><strong>John Lindquist:</strong>     Yeah, I just started using styled components in the past couple of months and I just love the idea that I don't have to create a component for every single div or span or button that you know just needs some styles. I want it to be reusable and I want it to have styles but I don't want to create a whole new component (with rendering and everything in there) where I can just kind of add those inline styles inside the back tics. It's kind of changed, even changed the way I think about react projects like oh these are just styled components. [crosstalk 00:04:16]</p><p><strong>Phil Plickthun:</strong>     It's in components.</p><p><strong>John Lindquist:</strong>     Right.</p><p><strong>Phil Plickthun:</strong>     I mean I didn't always think about it that way, even as a co-contributor when I first looked at it I didn't think it was actually quite that nice. You have to really sometimes, at least for some people you have to get into it and you have to write it a couple of times to understand why it's actually more productive, or why it's nicer.</p><p><strong>John Lindquist:</strong>     Yeah and I kind of went in going, I went in thinking I would be doing styled components around a lot of existing components rather than just the core HTML elements. I thought 'Oh I'll just write some sort of container, I'll write some sort of custom button or whatever, then I'll style it.'</p><p><strong>Phil Plickthun:</strong>     Yeah, it's interesting it's easy to go overboard with that.</p><p><strong>John Lindquist:</strong>     Yeah and I kinda flipped my mindset over the past little while, well lets start with style components at the lowest level where they're the div's and the spans and then write the bigger components around the styled components. Anyway just a thought I had.</p><p><strong>John Lindquist:</strong>     So what's your design background then, as far as what got you into the CSS and JS, and kind of led you into about thinking about [inaudible 00:05:25]</p><p><strong>Phil Plickthun:</strong>     Well interestingly I think a lot of web app and web app developers go through a similar journey, but as I progressed from different start ups and different projects, I always found myself in roles that involved myself being a kind of designy position, where I was still a developer but where I had to communicate closely with a designer, or there was no additional designer, the designers wanted a lot of feedback, all these kind of similar positions, so over the time I just had to work on more design parts of certain projects, and over time, as I joined smaller start ups that had smaller teams there was maybe no lead designer that was there, basically every day working on the app.</p><p><strong>John Lindquist:</strong>     Right, so you started as just pure developer and over time gained the design side.</p><p><strong>Phil Plickthun:</strong>     Yeah well I would still describe myself as mostly a developer, I mean my open source work's definitely more in Java Script libraries or on the development side, but I really enjoy working on design every now and then and jumping in and helping out. I'm definitely not a designer, I mean the hours that a designer has put in over their career to just get to that level where they're at, I could definitely not say I know any of the theory that they know, but interestingly over some projects I've tried to acquire an eye for little details, and having an eye on some of the design side of things.</p><p><strong>John Lindquist:</strong>     Yeah I've always been amazed when I actually sit down next to a designer and watch over their shoulder and watch them work - just how much skill and training - and how technical it really is when sometimes I think 'Oh they just pickup a pencil and draw something in Photoshop.' Well that's totally wrong.</p><p><strong>Phil Plickthun:</strong>     Yeah it's kind of like that isn't it. You always think it's mostly thinking of some concepts and a lot of developers think why can't we use certain editors and certain tools to make our coding faster, and at the end of the day I believe that most of the time coding is probably spent thinking - or not really writing - or you think as you write, something like that, but it's interesting to see how it's actually the opposite for designers, they can get a lot of productivity by just going, and they can go to a prototyping phase separately. Well a lot of developers I know do the thinking and coding part separately. Or they don't do it separately but at the same time.</p><p><strong>John Lindquist:</strong>     Right, or a design can be a therapeutic or doodling, where coding doesn't have that side of it. Usually we go on long walks or take naps I guess.</p><p><strong>Phil Plickthun:</strong>     Yeah I guess for designers it's really common to first collect some concepts and really go about things a little more slowly, whereas for a lot of apps if you have a design, if you have clear idea and you're not working on a hard problem you can just code away for a longer time.</p><p><strong>John Lindquist:</strong>     Yeah - so just a tangent of a question - have you worked with any designers and showed them how to use styled components?</p><p><strong>Phil Plickthun:</strong>     I actually have, there's one in particular and he has pretty good basic coding skills and he really knows CSS well and he's worked with [inaudible 00:08:41] and then he's never worked on [inaudible 00:08:43] not even Java Script and this was still something that he didn't really like to touch. But the idea was to create a component library and he could jump in from time-to-time and make sure things were correct - or absolutely pixel perfect - and so basically I've just sat down with him and I've shown it to him and he didn't really like it to be honest, but he actually grew fond of the idea.</p><p><strong>Phil Plickthun:</strong>     We didn't end up actually working together on that component library, but I think he did end up picking that up with some other colleagues in another project.</p><p><strong>John Lindquist:</strong>     OK, yeah I'll have to try that sometime and see what a designer would think about it. So just with Dank Mono did you have any experience with font creation before you got the idea to create your own font.</p><p><strong>Phil Plickthun:</strong>     I mean, to be honest not really, this is kind of a first for me, but as I went along it went more well than expected. So I really enjoy typography in general, and I've actually recently only started to think about it again. So we've started this website for an event called Component Did Smoosh - a comedy adventure in London about Java Script. And we've created a site for it and basically that was way that I discovered Adobe Typekit and I realized 'Oh! I can use all of these nice fonts that I always look at and thought I could not afford on this site!' And that was kind of the [inaudible 00:10:06] where I tried to rediscover all of these fonts that I've previously discovered and was basically just looking at, being like \"Huh, yeah! That's a cool font!\" And just tried them out on that side.</p><p><strong>Phil Plickthun:</strong>     I basically had this old idea of creating some ligatures and [inaudible 00:10:25] until I found out that from a license point of view that's something I could never even share.</p><p><strong>John Lindquist:</strong>     Yeah, you can't fork a font I guess.</p><p><strong>Phil Plickthun:</strong>     No, there's like a couple of terms in there that say you can't modify and redistribute it, not even in non-commercial sense, or in any way. So it wouldn't even be OK to send it to a friend or something like that, and maybe a bit unsure about the entire thing.</p><p><strong>John Lindquist:</strong>     [crosstalk 00:10:50] I've never really looked at the terms.</p><p><strong>Phil Plickthun:</strong>     Yeah I've been using it for a while, I've actually read the license eventually and that is where I found out OK I couldn't - I mean even if I added some ligatures - that would be something I couldn't really share. And so that was an idea that I was thinking about for a longer time, and then when I looked at Adobe Typekit - and what I was really enjoying - to try different fonts [inaudible 00:11:18] was the one we ended up using, and when I tried out all these fonts that's kind of when the idea came back. I was looking at some mono-spaced fonts and I was remembering 'You wanted to create some ligatures to operate [inaudible 00:11:31].'</p><p><strong>Phil Plickthun:</strong>     You know I couldn't do that back then but what if I used the apps I know and created one from scratch? I kind of tried to create a couple of letters, and it kind of worked out, which is interesting. So the app I was using was [inaudible 00:11:49] and it was really great to play around with ligatures and smaller things, but the more I read about it, the more I realized it's actually a really approachable tool, which I guess makes sense, since a lot of typographers are not really spending most of their time at the computer drawing the fonts there, but are sketching it beforehand and kind of copying it over.</p><p><strong>John Lindquist:</strong>     Wow, I can't imagine sketching a font out. It just doesn't ...</p><p><strong>Phil Plickthun:</strong>     I mean the first letters I ...</p><p><strong>John Lindquist:</strong>     ... yeah. I have terrible handwriting.</p><p><strong>Phil Plickthun:</strong>     ... Oh yeah same here. I think I haven't written a handwritten letter in years.</p><p><strong>John Lindquist:</strong>     Can you give us (real quick for people who are listening) just a quick definition of ligature and mono-spaced font?</p><p><strong>Phil Plickthun:</strong>     Oh sure so monospace font, as in a font you would use in a code editor which has the same width for every single glyph so you have that nice table spacing where every single glyph in the next row would be at the same column - as the same position - as the one above. Ligatures have really become more popular ever since [inaudible 00:12:49] and a couple of fonts before that, Pragmata Pro is another really nice one in fonts that really spend a lot of time on making these symbols that span across a couple of letters and [inaudible 00:13:01] and so on across there so that they can convey a better meaning of area functions and stuff like that. I think that the community's still pretty divided on whether they like it or not. A couple of people really love it, a couple of people really dislike it.</p><p><strong>John Lindquist:</strong>     Yeah I meet people who write code with non mono or just regular sans serif fonts.</p><p><strong>Phil Plickthun:</strong>     Oh really? I've actually never seen that to be honest.</p><p><strong>John Lindquist:</strong>     And I would never, ever consider doing that, but it helps them read it somehow, or that's just how they prefer it? I dunno I'm a fan of ligatures, I think they help convey that meaning. An arrow should look like an arrow not an equal sign and a greater than sign. I dunno, personal preferences.</p><p><strong>Phil Plickthun:</strong>     I mean Operator Mono is being a font that is primarily being marketed to developers, but a font that is inspired by typewriters to have that mono spaced typewriter-like feel is actually pretty far from that. I mean I can kind of see how someone can get used to writing in, I dunno a random, sans serif, non-monospace font every day, but I think a lot of these things developers have gotten really used to having their IDE or editor set up really nicely, having a nice syntax theme, and only I think in the last years fonts have become a thing that people care about - at least in the community I am in, and in the [inaudible 00:14:32]community especially - with Operator Mono.</p><p><strong>John Lindquist:</strong>     Do you have an editor theme that you recommend to go along with Dank Mono, to be the perfect setup?</p><p><strong>Phil Plickthun:</strong>     Right now I'm using Pale Knight. I dunno if that's a name. There is one by Ken [inaudible 00:14:47] for - I think he made it for [inaudible 00:14:50] which is called Gucci Shark Bytes-something.</p><p><strong>John Lindquist:</strong>     Gucci Shark Bytes-something, got it.</p><p><strong>Phil Plickthun:</strong>     Something you'd expect from Ken, should be easy to find. I think if you just type in Gucci syntax or something it should be easy to find.</p><p><strong>John Lindquist:</strong>     I'll have to check that out.</p><p><strong>Phil Plickthun:</strong>     I could be completely wrong about the name I just realized it, this is just I guess what I would expect Ken to name a syntax theme.</p><p><strong>John Lindquist:</strong>     Yeah I always stick with the super high contrast themes, just because I do a lot of video recording and presentation-type stuff with code. When I look at the much lower contrasts, that look really pleasing to my eye, I wish I could use those more, but I don't want to get too used to them if I'm always gonna be going back to high-contrast versions I think.</p><p><strong>Phil Plickthun:</strong>     It's the same for me, I really like colorful, high-contrast type themes, and I can't really look at the colorful themes all day long. I guess that's the annoying part of it I guess.</p><p><strong>John Lindquist:</strong>     So with the creating your own font was there any surprises along the way or was it just kind of smooth sailing the entire time?</p><p><strong>Phil Plickthun:</strong>     I mean the interesting thing is that in the beginning I was always creating every single glyph from scratch. I was starting at all the letters and I did some of the lower-case letters first. I think I started with the 'h' because it was recommended somewhere that's the one that has this really nice shape that repeats for a couple of letters that you can reuse. And so I was starting to design other letters and continued with the 'n' since that's just cutting off that vertical stem from the 'h'. And I was then going on to do more and more of these, until I found out that the glyphs app actually supports components, they're actually called components, so I didn't have to actually copy over things, so I had to basically start over after half a week.</p><p><strong>John Lindquist:</strong>     Oh that sounds frustrating. Oh I don't know, maybe it was a relief that it has components, I don't know.</p><p><strong>Phil Plickthun:</strong>     It definitely paid off, yeah, it was so funny that it was just there called 'components' and I'm like, well I know components. Well that's handy! And I kind of sent some drafts over to Ken after I had a couple of letters, and I didn't really expect much, I was just talking to him like \"Hey, you know, what if Operator Mono was a bit more of a developer-focused font, and actually ligatures eventually.\" And so I send him over a couple of glyphs and surprisingly a lot of them still look pretty similar to what the font looks like now. So that must be pretty much fifty - or more - iterations ago, and Ken is a very cheerful person and probably nice guy to talk to if you ever need a project, and he was amazed and he really told me I should follow this up and do the entire font, and I should try it.</p><p><strong>John Lindquist:</strong>     So a couple of questions around that. Just how many - just to get an idea - how many glyphs are there when creating a font like this? Like how many individual characters did you have to draw?</p><p><strong>Phil Plickthun:</strong>     So after you do the letters and the common symbols, you really move onto diacritics, which obviously means a lot of the glyphs are automatically assembled. So you open 'a' and the umlaut dots above it, that would be automatically assembled, so once all of these are assembled I think then it has 480-something glyphs right now. So that's 480 for the regular and 480 again for the italics. If I'd have to estimate it, I would have to say it's probably around 250 or more. I'm not quite sure to be honest. It's so easy to lose track.</p><p><strong>John Lindquist:</strong>     So should I hold down the alt key and just start typing and see what comes out? I feel like I'm missing 180 of these glyphs that you're talking about that you probably spent a lot of time on, I dunno, like alpha and omega and all the ...</p><p><strong>Phil Plickthun:</strong>     Oh! Funny story, Greek letters is something I haven't even started on.</p><p><strong>John Lindquist:</strong>     I don't encourage you to I mean it's just ...</p><p><strong>Phil Plickthun:</strong>     There's just a lot of symbols and glyphs to go through, I mean after all of the letters you realize, 'OK, I have to do the common curling symbols, and then there's ten more, and then there's ten more, and then there's some more.' And after a while it just starts to accumulate and accumulate, it's easy to loose track over them.</p><p><strong>John Lindquist:</strong>     So I have to ask, how hard was it to create the period?</p><p><strong>Phil Plickthun:</strong>     The period ... I think I'm still not happy with it to be honest. So maybe with a grain of [crosstalk 00:19:42] still tweaking a couple of things. I think that's still one of these components that's reused, I think just called 'dot' or 'circle' because it's not gonna [inaudible 00:19:53] zoomed and stretched in a couple of parts. So I think that actually was one of the hardest, because I didn't want it to just be around and it has this kind of really subtle, kind of, rectangle look to it now. Which is impossible to see when you're using the font normally, so I dunno if it was worth it. I think I spent a couple of hours on the period alone.</p><p><strong>John Lindquist:</strong>     So now I'm gonna have to bump my font size up to 180 just so I can appreciate all of the tiny details you put into it.</p><p><strong>Phil Plickthun:</strong>     Please do, I mean if you appreciate every single word I know that at least someone knows.</p><p><strong>John Lindquist:</strong>     Aw, man. And just kind of, a related question, how in the world do you choose version numbers for your releases? Is there some sort of [inaudible 00:20:41] for fonts?</p><p><strong>Phil Plickthun:</strong>     Well, I mean the interesting thing is ...</p><p><strong>John Lindquist:</strong>     I think you [inaudible 00:20:48] at seven.</p><p><strong>Phil Plickthun:</strong>     It's 0.480 right now, I forgot the version number, but um, the thing is a lot of these fonts that I was looking at, they have [inaudible 00:21:01] numbers, which is great, but the glyph app - as amazing as it is, as powerful as it is - it allows you to only input two numbers, and I was kind of thinking about how to [inaudible 00:21:15] place two numbers that is essentially just one in the hundreds and one with the major version. I didn't want to actually use the major version for now, in case someone looks at the version and thinks 'OK, one point something means it's kind of done.' And so I started out having a version 001 ...</p><p><strong>John Lindquist:</strong>     So you don't think it's done right now?</p><p><strong>Phil Plickthun:</strong>     No! Not at all. I actually think ...</p><p><strong>John Lindquist:</strong>     It's gorgeous ...</p><p><strong>Phil Plickthun:</strong>     Oh thank you, I have the [inaudible 00:21:46] repository open and I'm encouraging everyone to go there and open some issues. I would do that but I've moved it over to Spectrum now. Either way there's a lot of smaller issues coming in. I mean one of the bigger ones is, for example, the Greek letter support, which is one of the things I definitely didn't want in the first release, as I still wanted some early feedback. And there's some smaller things, like some certain ligatures have been requested to be added, certain symbols didn't render well on certain screen resolutions and sizes, so I don't think it's close to be done. And I was kind of surprised that there's lots of people who've jumped onto liking the font and going to the site and buying it early on, and I actually only released it early because after I tweeted out this kind of small [inaudible 00:22:33] screen shot, and this assembly of a couple of glyphs and letters, people actually reacted really well to it. And after a while it hit 1000 likes and I thought, 'OK, I kind of actually have to release it now.' People actually want to use it.</p><p><strong>John Lindquist:</strong>     Social pressure ...</p><p><strong>Phil Plickthun:</strong>     The pressure was definitely kind of rising at that point, because I thought 'OK, I cannot go away and work on this for months now until I actually decide to release it eventually.</p><p><strong>John Lindquist:</strong>     Yeah, never tweet anything you don't intend to release or else the pressure will just get to you.</p><p><strong>Phil Plickthun:</strong>     I mean, I did think about releasing it already at that point, I mean one or two releases, but I wanted to take it slow at the same time, so that part didn't work out.</p><p><strong>John Lindquist:</strong>     Yeah, I think a lot of people think, 'I see a color theme, I can tweak this color theme to make it exactly the way that I want.' Is there any equivalent there for someone who would be like \"I see this font, I can just go in, it's gotta be just as easy as tweaking a color theme or something like that.</p><p><strong>Phil Plickthun:</strong>     Yeah I mean I wanna encourage everyone, I wouldn't say it's as easy as picking a couple of new colors. I feel like even picking a couple of new colors for a syntax theme is quite hard, and I've tried to create a syntax theme before and I'm not that good at it, but I do want to encourage some people to at least try it. As developers we spend a lot of time looking at our screens, looking at the same font for hours on end, for weeks and for months, and it's clearly necessary for us to put some time into our environment to make us happy and maybe to make us more productive because we'll have spent more time looking at it, because it's not as annoying, because you're fixing the small problems, and maybe at that point you're hitting a kind of roadblock, and maybe you really can't find a font that you like.</p><p><strong>Phil Plickthun:</strong>     And I've been using Operator Mono for a while but after a while I've repeatedly thought what if this small letter didn't look this way. Or what if this was a little more fun. What if it just didn't look as much like a type written font out of a typewriter. And lastly of course the ligatures. And I mean if you're thinking that then I would definitely recommend doing your own font. It's definitely fun and if you do some research I can only recommend starting with Glyphs App, reading their tutorials, watching some of their videos and talks, and I would say getting started with just a single letter is something you could try out in an evening or an afternoon, and if you end up liking it, like I did, then you might end up working on it for, I dunno, maybe a couple of hours, maybe a couple of weeks or months. It's definitely really fun.</p><p><strong>John Lindquist:</strong>     Awesome, that's great to hear. So do you have any plans for future fonts, or for a serif version of Dank Mono or Dank Serif or Dank Sans Serif?</p><p><strong>Phil Plickthun:</strong>     I don't think at the moment, I mean we've already talked about that the font is not really done, I don't really want to start anything new right now. People have already requested the font in different weights, which I wanted to avoid for a little longer, since that will involve me redrawing every single glyph that I've done so far.</p><p><strong>John Lindquist:</strong>     Oh really so the heavys and the lights are all ... those aren't just math re-renderings? It's a redraw and everything?</p><p><strong>Phil Plickthun:</strong>     You can actually transform them to make them thicker, but that will mess up a couple of shapes in a really subtle way. I guess increasing things is obviously a bit tricky when you're at a corner and it's obviously being a bit squished together. And glyphs has a nice trick - if you create just two weights of the same style of the font, you can kind of interpolate that, so it takes the two of them and it kind of figures out how to make different weights. But even for that I'd [inaudible 00:26:21]to create a second weight so I have to probably redraw a lot of glyphs.</p><p><strong>John Lindquist:</strong>     Alright is there anything you'd like to say before we wrap it up?</p><p><strong>Phil Plickthun:</strong>     Well I really want to say thank you for having me.</p><p><strong>John Lindquist:</strong>     My pleasure. Where would people go to buy your font?</p><p><strong>Phil Plickthun:</strong>     That would be dank.sh, really short domain.</p><p><strong>John Lindquist:</strong>     Yeah, that's a great get, nice domain. Thank you so much Phil for joining us, pleasure having you here.</p><p><strong>Phil Plickthun:</strong>     Thank you again for having me.</p><p><strong>John Lindquist:</strong>     And have an excellent day.</p><p><strong>Phil Plickthun:</strong>     Cheers.</p>",
    "slug": "phil-pluckthun-creator-of-dank-mono",
    "description": "<p>Today we are joined by Phil Pluchthun, creator of the programming font Dank Mono and core contributor to the styled-components library. Phil will be talking about his work in design and programming, styled components, the process of making a font, and finally some advice to anyone who wants to make a font of their own.</p><p>So what are styled components? It's a new component-based CSS and Jest library. It's all about using these small styled components that you put in instead of HTML. It's nice because you don't have to create a whole new component that renders for some simple styling.</p><p>Phil talks about as a developer he's always been in a role where he's had to work closely with designers and provide feedback for them. Over time he started to work more with design projects, and as he worked for small startups without a lead design, he found himself filling that role.</p><p>Dank Mono is Phil's first font, He's always enjoyed typography, and as he's gone along it starting turning out better than he thought. When he started, he just wanted to make some ligatures for Operator Mono, but there were some terms in there that would prevent him from ever being able to share it.</p><p>In the beginning, Phil was doing every letter from scratch. He started with an h because it has an excellent shape that can be reused with many letters. Halfway through he learned that Glyphs app supports components, so he had to start over after a week!</p><p>Phil encourages anyone who is not entirely satisfied with the fonts available to think about what they'd want to change. He recommends to start with Glyphs app and watch and read its related talks and tutorials and to start with a single letter to see how you like it!</p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/phil-pluckthun/transcript\">\"Phil Pluckthun, Creator of Dank Mono\" Transcript</a></p><h3>Resources:</h3><ul><li><a href=\"https://dank.sh/\">Dank Mono</a></li><li><a href=\"https://glyphsapp.com/\">Glyphs</a></li></ul><h3>Phil Pluckthun:</h3><ul><li><a href=\"https://twitter.com/_philpl?lang=en\">Twitter</a></li><li><a href=\"https://github.com/kitten\">Github</a></li><li><a href=\"https://medium.com/@philpl\">Medium Blog</a></li></ul><h3>John Lindquist:</h3><ul><li><a href=\"https://twitter.com/johnlindquist?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor\">Twitter</a></li><li><a href=\"https://johnlindquist.com/\">Website</a></li></ul>",
    "duration": 1608,
    "episode_number": 19,
    "contributors": [
      "John Lindquist"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/r27gy",
    "path": "/podcasts/phil-pluckthun-creator-of-dank-mono",
    "published_at": "July 13th, 2018",
    "url": "https://egghead.io/api/v1/podcasts/phil-pluckthun-creator-of-dank-mono",
    "edit_podcast_url": "https://egghead.io/podcasts/phil-pluckthun-creator-of-dank-mono/edit"
  },
  {
    "id": "podcasts-00000000000000000063",
    "title": "Ives Van Hoorne, creator of CodeSandbox",
    "summary": "Ives Van Hoorne is a developer who built Code Sandbox, a fantastic online editor (we use it a lot at egghead).\r\n\r\nToday, Ives talks about a childhood interest that would lay the groundwork for his future career path. Tune in to hear how he got his start, what led to Code Sandbox, and where he would like to see things go in the future.",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/91b190c6-22ef-4879-b010-4d3e8a02f967/c8be273c_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/91b190c6-22ef-4879-b010-4d3e8a02f967/1534346326artwork.jpg",
    "simplecast_uid": "91b190c6-22ef-4879-b010-4d3e8a02f967",
    "transcript": "<p><strong>Ives:</strong>               Hello everyone. Yeah, my name's Ives. I'm a student at the University of Trent and a software developer at an auction website called Catawiki. Oh, and I built an online editor called Code Sandbox.</p><p><strong>John:</strong>               Which is the best online editor out there. Just he's too humble to say so.</p><p><strong>Ives:</strong>               Thank you.</p><p><strong>John:</strong>               That's how Ives and I met. And as I started using Code Sandbox and we use it a lot on Egghead as far as being able to host demos and importing directly from Get Hub into Code Sandbox. I kind of bug him sometimes on Twitter if some new view feature isn't supported. So how did you get started in development? What was your first experience with writing code and [inaudible 00:00:48]?</p><p><strong>Ives:</strong>               Oh, that's a pretty interesting question. So when I was much younger, when I was eleven or something, I was very intrigued by secret languages. So that I could exchange messages with a friend and no one else could read them.</p><p><strong>John:</strong>               Okay.</p><p><strong>Ives:</strong>               So my first, kind of project was building a translator that would take normal text, and give you back something that was not readable, and then if you put it in the other translator, then it would give you normal text again. And so we started sending each other Facebook messages, public Facebook messages with this secret language. So that was my first experience with programming.</p><p><strong>John:</strong>               Interesting. What sort of language or I don't know, what did you use to build that?</p><p><strong>Ives:</strong>               That was in a visual basic.</p><p><strong>John:</strong>               Yeah, okay.</p><p><strong>Ives:</strong>               Very old language.</p><p><strong>John:</strong>               Yeah, I mean, I know most of... A lot of people's first experience is just writing scripts inside of Excel. You know, updating values and spreadsheets. They don't realize they're programming, but you know, you are.</p><p><strong>Ives:</strong>               Yeah exactly.</p><p><strong>John:</strong>               But it is.</p><p><strong>Ives:</strong>               Yeah, that's actually true.</p><p><strong>John:</strong>               So where did it go from there? What was your first job?</p><p><strong>Ives:</strong>               Okay, so after I built this translator, I stopped programming. I didn't program for a couple years. Then Minecraft came along and I started building Minecraft mods, and that was my first real proper introduction to programming. I started programming Java, and later on I saw a company called Catawiki. So that's where I'm also currently working. I was really enthusiastic about this company. I definitely wanted to work there, so I started learning web application development. I started learning angular, and I built a portfolio page. And normally portfolio pages shouldn't take that long, but I spent like four months on building that portfolio page so that I would get a chance of working there.</p><p><strong>John:</strong>               Okay.</p><p><strong>Ives:</strong>               So I sent that to them, and they asked me if I could work there for ne year, full time, and it was right after high school so I took a leap year. I worked there for a year, and then I started going to university, and that's when I started building Code Sandbox. So that's kind of been a global view what happens in the past.</p><p><strong>John:</strong>               Oh, interesting. That's a pretty quick jump from Minecraft mods to web development. What was so appealing about, did you say Catawiki?</p><p><strong>Ives:</strong>               Yeah, so Catawiki is an online auction website, which sounds very boring, but it's pretty cool because they have very Polish flow of when you submit an item, auctioneers check it and really weird items get submitted as well. It's like high quality. So the first script of Game of Thrones was auctioned there, some hair of Napoleon, a skeleton of a dinosaur is auctioned there. But the thing I found most interesting was that I lived in this very small city where nothing happened, but Catawiki was based there, and it was the fastest growing company of the Netherlands. And later on, the fastest growing company of the world. That all happened in this super small city, so I was very intrigued by this company, so I wanted to work there, to get the experience of like a fast growing company.</p><p><strong>John:</strong>               Cool. That's awesome. So you're mostly... Can I ask what your education was like as far as learning? Did you buy a bunch of books, did you just trial and error?</p><p><strong>Ives:</strong>               So I'm the type that likes to learn by trial and error, so if I wanted to learn a new language, then I try to find a project built with that language. So I learn that way, and that's actually also why I built Code Sandbox, I wanted to learn Elixir and Phoenix. Elixir language, so I built Code Sandbox with backgrounds in Elixir and Phoenix.</p><p><strong>John:</strong>               That's a very ambitious project to learn a language around.</p><p><strong>Ives:</strong>               Well, to be honest...</p><p><strong>John:</strong>               Usually I'm like, I will built tick-tack-toe.</p><p><strong>Ives:</strong>               Yeah, that's true. But actually when I started building Code Sandbox, it was supposed to be a component editor. So I never started Code Sandbox with the idea of building this online web application editor.</p><p><strong>John:</strong>               Right. Well here you are though. That's pretty crazy. So Code Sandbox has been around for how long now? A year and half? Two years?</p><p><strong>Ives:</strong>               A year and a month, currently. Yeah.</p><p><strong>John:</strong>               A year and a month? That's it?</p><p><strong>Ives:</strong>               Yeah, so we released it at the beginning of April. So one year and a month. Almost one year and two months now. Yeah, lots has changed in the past year. So much has changed.</p><p><strong>John:</strong>               So what's that been like, writing the... I mean, it's an amazing product. What's that been like, kind of writing the success of a project like that?</p><p><strong>Ives:</strong>               Well, it's interesting. When we released Code Sandbox, it got much more popularity than I initially expected, and that was really cool. I was super happy with the result of that, and people started giving very positive feedback and people started using it, and I was very happy. Also people I looked up to, like Dan Abermostar started Tweeting about it.</p><p><strong>John:</strong>               Yeah.</p><p><strong>Ives:</strong>               But people also started messaging me because of Code Sandbox, and at some point I felt that people started to like me because of Code Sandbox. So I attached my self-worth to Code Sandbox. So whenever Code Sandbox would do good, then I would be very happy. But when someone would leave a snarky comment on Code Sandbox, then I would kind of feel sad.</p><p><strong>John:</strong>               Right.</p><p><strong>Ives:</strong>               I didn't realize this until six months after Code Sandbox released, and that's when I learned to work with separating my emotions kind of from Code Sandbox. But not too much that you don't care, but enough that you don't get hurt by people that leave bad feedback. For example, like negative feedback on the product.</p><p><strong>John:</strong>               Yeah.</p><p><strong>Ives:</strong>               But it has been a rollercoaster. It has grown so much and especially the last few months, more and more people are using Code Sandbox, and we are getting more and more emails, so that is super cool.</p><p><strong>John:</strong>               Awesome. So what was the first language or first framework you supported on there? Was that...</p><p><strong>Ives:</strong>               React.</p><p><strong>John:</strong>               React.</p><p><strong>Ives:</strong>               Yeah. We initially supported React, and we wanted to focus on React only at the beginning to keep our, kind of scope low. So that I wouldn't have to build a lot of stuff and get too much feedback on it.</p><p><strong>John:</strong>               Right.</p><p><strong>Ives:</strong>               So first, on React when we thought that React was polished enough, we started expanding to, for example few and react.</p><p><strong>John:</strong>               So did you know React before building and editor for React? Was that your primary focus? Okay.</p><p><strong>Ives:</strong>               Yeah, I knew React before I started... Actually that was the reason that I built Code Sandbox because I was on a vacation to a village St. Ives. I was still working full time for Catawiki at that moment, and I got a lot of questions from a co-worker about React, but I didn't have my MacBook with me. So I wasn't able to answer the questions, so that's when I started thinking like, what if I would have my locally [inaudible 00:08:04] environment everywhere. And the next question was, what if I put it on the web. So that's kind of the spring of the idea of Code Sandbox.</p><p><strong>John:</strong>               You're so much more ambitious than I am.</p><p><strong>Ives:</strong>               I mean, the crazy ideas are always the most fun to work on, right?</p><p><strong>John:</strong>               Yeah, that's certainly true. What was the initial tech stack of Code Sandbox? Was it React and Elixir? Was that...</p><p><strong>Ives:</strong>               Yeah, so we had a React front end, then the preview was in vanilla java script as a separate application. And the back end is an API with Elixir in the front, and we used Postgres as database, and Redis for some caches. Later on in development, we started adding some simple microservices that were written in Note.</p><p><strong>John:</strong>               Okay.</p><p><strong>Ives:</strong>               And that's our current tech still.</p><p><strong>John:</strong>               Okay, so you're still in the same tech stack. What sort of surprises or disappointments, or weird things have happened kind of along the way?</p><p><strong>Ives:</strong>               Well, the surprising thing is, is that we save all files and directories in our Postgres database, and when we fork, we literally copy all the files and directories and Sandbox over. I was expecting that this wouldn't scale, but we now have like 400 thousand Sandboxes and the database is only four gigabytes in size. Which I still have trouble believing because we have 2.5 million files stored in there.</p><p><strong>John:</strong>               Right.</p><p><strong>Ives:</strong>               But it scaled surprisingly well, and I have [inaudible 00:09:42] reason to kind of de-duplicate code works in a database. So that's a really cool thing.</p><p><strong>John:</strong>               That's a pleasant surprise. You were expecting it to fail, but it's what stood the test of time?</p><p><strong>Ives:</strong>               Yeah, exactly. It was... Yeah, it's much better than I expected. We also had a very big surprise in a kind of negative way. Later on, we created a service that would take screenshots of Sandboxes. So when people would for example, share this Sandbox on Twitter, then we would show a screenshot of the preview. But the problem was, when a... We did this with server less functions, by the way. A server less function would take a screenshot. But the problem was, when a Sandbox would have an error, then the server less function would run for like 300 seconds, and then try again over and over. So suddenly we had a bill of like five hundred dollars on hosting costs, while it should be like forty dollars for the screenshot. So that was kind of a negative surprise. But it was a bug on my side. I should have just had it fall back to a different image when the Sandbox fails to load. But yeah, that was a negative one.</p><p><strong>John:</strong>               Yeah. Bugs that actually cost money are the worst kind of bugs.</p><p><strong>Ives:</strong>               Oh yeah. Those are the worst. Or bugs that bring the servers down and such. That's also very gnarly.</p><p><strong>John:</strong>               So what's the experience been like speaking at conferences? How many... Was React Europe your first one or did you speak somewhere before then?</p><p><strong>Ives:</strong>               Yeah, I spoke at... My first stop was in October at Cybe Day Berlin. So I had to say a hosting company, but much more than that, they have shown many open source projects, including Next.</p><p><strong>John:</strong>               Yep.</p><p><strong>Ives:</strong>               And I got asked by Guishermo somewhere in August to speak at the conference, and I had never spoken at conferences before. So I immediately got nervous already, but I decided to accept the request regardless.</p><p><strong>John:</strong>               Yeah, you gotta go for it.</p><p><strong>Ives:</strong>               Yeah, right. The experience was so much better than I expected. I was nervous for it, like two weeks before a conference, I was already nervous. And I would get extra nervous when I saw other people presenting. But then when I started presenting, I noticed that it was just that I was talking to people, and they were listening, and they were willing to listen. That was such a cool experience that I now love going to conferences. So I've done some other conferences after that, and recently React Europe, which was also very cool. But yeah, conference speaking is actually much more fun than I initially anticipated.</p><p><strong>John:</strong>               Yeah, it's a completely different experience when you're the expert on the subject. For example, like you could teach and talk about Code Sandbox because you're the one who built it, right?</p><p><strong>Ives:</strong>               Right.</p><p><strong>John:</strong>               So you're completely confident in what you say because you're the one who put it all together.</p><p><strong>Ives:</strong>               Exactly.</p><p><strong>John:</strong>               I think a lot of people fear the conference because they're not the person who built the thing, and they'll get up on stage and realize well, maybe I don't know everything. Maybe someone's gonna say I'm wrong. Maybe I'll state a fact wrong, and then someone will quote me, and then you can get all these concerns because you're not the person who did the thing. But like you, I think it's much more comfortable.</p><p><strong>Ives:</strong>               Right. It's also super nice to talk about something you've built yourself, because you are enthusiastic about it.</p><p><strong>John:</strong>               Right.</p><p><strong>Ives:</strong>               And you're kind of dying to show other people what you've built. And that's very nice. But still, I think that talking about some other concept, yeah I can very much see that it would be very scary. But I think it could also be kind of good excuse to get really good knowledge in that field.</p><p><strong>John:</strong>               Yep.</p><p><strong>Ives:</strong>               I'm actually planning to... I want to speak more about other things and just Code Sandbox because now I've only done conferences about Code Sandbox. But in the future conferences, I want to talk about things like developer tools driven by UI, for example.</p><p><strong>John:</strong>               Oh cool. I'd watch that.</p><p><strong>Ives:</strong>               Oh, thank you. Thank you very much. That's something that can be improved by a huge margin.</p><p><strong>John:</strong>               Right.</p><p><strong>Ives:</strong>               People are now using the terminal and their code editor, and with Code Sandbox, we're already trying to make it a bit better. Like, we have a UI for almost every configuration and for every action that you can do. But this hasn't happened in the local development yet. For example, MBM Installing is still MBM Install or yarn add. While a UI would be perfect for this. While you can just search for a dependency and add it with a single click.</p><p><strong>John:</strong>               Right.</p><p><strong>Ives:</strong>               That's something that I'm very enthusiastic about.</p><p><strong>John:</strong>               Yeah, for sure. That'd be pretty cool. Can't wait to see it. If anyone's listening and they've been offered to speak at a conference, I think you guys will back me up on this.</p><p><strong>Ives:</strong>               Absolutely. Yeah.</p><p><strong>John:</strong>               Just go and do it. Because it will open up so many opportunities. You'll meet a lot of great people.</p><p><strong>Ives:</strong>               Oh yeah.</p><p><strong>John:</strong>               It's an awesome experience.</p><p><strong>Ives:</strong>               Yeah, that's one of the best things, meeting so many people. Especially if you're an introvert. Normally when you are at a conference and you need to approach people and talk to them and introduce yourself. But when you've given a talk, people will approach you. So if you're an introvert, that's kind of the perfect opportunity. And you meet so many cool people. I think it's one of the best things that I have done in the past year, speaking at a conference. Not just because of the content, but also because you have... It's a whole new experience, and I think everyone would like it.</p><p><strong>John:</strong>               Yeah. For sure. So do you have any future plans with Code Sandbox or other things you want to share?</p><p><strong>Ives:</strong>               Oh yes. Yeah, yeah, yeah. We're now working on a dashboard. Because managing Sandbox is super cumbersome right now. You have to go to your profile, and then go through a list of Sandboxes. So we're working on a dashboard where you can put Sandboxes in directories, and organize them that way. That's one of the biggest things. We're also working on offline support, so that you can use Code Sandbox without a network connection and create new Sandboxes. That's a second thing we're building.</p><p><strong>John:</strong>               Awesome.</p><p><strong>Ives:</strong>               And we're building team support. Because there are many companies that are interested in using Code Sandbox that they have a team at the company, and everyone wants to edit the same Sandbox. And we want to make that possible, so we'll add teams to Code Sandbox as well.</p><p><strong>John:</strong>               Wow, that sounds great. At what point does this become a full time job for you? I mean, it seems like...</p><p><strong>Ives:</strong>               It's kind of full time for me already. At my study, I'm not applying for lectures anymore, so I have around forty hours already to work on Code Sandbox.</p><p><strong>John:</strong>               Okay.</p><p><strong>Ives:</strong>               And we even started hiring someone from May, full time to work on Code Sandbox. So it's really starting to become something bigger than the site project.</p><p><strong>John:</strong>               Yeah, it certainly deserves it.</p><p><strong>Ives:</strong>               Thank you very much.</p><p><strong>John:</strong>               Yeah, no problem. Any future conferences or places people can catch you at, or meet you, or say hi?</p><p><strong>Ives:</strong>               Next week I'll be at a conference called Fuge S Barcelona.</p><p><strong>John:</strong>               Okay.</p><p><strong>Ives:</strong>               After that, I'm actually not planning to go to conferences just yet. But I'll be moving to London at the end of June. So if people are in London, and ever want to meet up, that would be super cool.</p><p><strong>John:</strong>               I'm sure there's some great meet-ups there.</p><p><strong>Ives:</strong>               Oh yeah. Yeah, I've seen so many messages already for meet-ups in London. That's super cool.</p><p><strong>John:</strong>               Awesome. Well, thanks for chatting with me today. It's been awesome talking to you. We've chatted a lot on Twitter, but never in person.</p><p><strong>Ives:</strong>               Yeah, that's right. It's likewise, was great talking.</p><p><strong>John:</strong>               And thanks for listening everyone. Everyone out there have an awesome day.</p>",
    "slug": "ives-van-hoorne-creator-of-codesandbox",
    "description": "<p>We are joined by Ives Hoorne, a developer at Catawiki and creator of code sandbox. Today he talks about how he began writing code, how Minecraft modding made him love it, his interest in the company Catawiki and how he taught himself web development to work there, and finally the future for his projects.</p><p>Ives began coding at 11 years old. He was fascinated by secret languages, so he and his friend made a program in Visual Basic that would jumble text and another that would decipher the text. They would send these to each other as public facebook messages. It fell off after this project for awhile. After a few years, Ives got back into it when Minecraft came around, and he started writing mods for it.</p><p>The success and popularity of Code Sandbox made Ives happy. He enjoys how it became popular and how some of the bigger names such as Dan Abramov started talking about it. Though Ives discussions about how this positive feedback caused him to attach his self-worth to the project, and how he had to let that go so he wouldn't be hurt by snarky feedback and other forms of negativity related to his project.</p><p>There were a couple of surprises in the development of Code Sandbox. Code Sandbox stores all files and directories in their Postgres database. When they fork Code Sandbox, they copy all the files, directories, and sandboxes over. Ives thought this wouldn't scale but somehow they now have 400k sandboxes, and the database is only four gigabytes! One of the negative surprises was when there was an error in the sandbox when someone tries to share their sandbox, the preview service would try over and over again to take a snapshot. The following month their hosting bill was a dozen times the price as it usually was!</p><p>Ives' first experience speaking at a conference was much better than he expected. When he was presenting, he noticed that he was talking with a bunch of people who were willing to listen to him. It was such a cool experience for him that he now loves speaking at conferences for him. Ives says he wants to start talking about things besides Code Sandbox, such as UI driven development for example. He says that it can be greatly improved, npm installing is still manually typing npm install package-name. He says that this can be made much better by being able to search for dependencies and directly add them with a single click.</p><p>Finally, Ives talks about his plans for Code Sandbox. He plans on adding a dashboard because currently, it's very cumbersome to navigate to your sandbox. The dashboard will give you the ability to put sandboxes in directories organizing them that way. They are also managing offline support. Finally, they are adding team support so multiple people can all work on a sandbox at once.</p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/ives-van-hoorne/transcript\">\"Ives Van Hoorne, creator of CodeSandbox\" Transcript</a></p><h3>Resources:</h3><ul><li><a href=\"https://codesandbox.io/\">Code Sandbox</a></li><li><a href=\"https://www.catawiki.com/\">catawiki</a></li></ul><h3>Ives Van Hoorne:</h3><ul><li><a href=\"https://github.com/CompuIves\">Github</a></li><li><a href=\"https://ivesvh.com/\">Website</a></li><li><a href=\"https://twitter.com/compuives?lang=en&lang=en\">Twitter</a></li></ul><h3>John Lindquist:</h3><ul><li><a href=\"https://twitter.com/johnlindquist?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor\">Twitter</a></li><li><a href=\"https://johnlindquist.com/\">Website</a></li></ul>",
    "duration": 1055,
    "episode_number": 18,
    "contributors": [
      "Ives Van Hoorne"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/172gn",
    "path": "/podcasts/ives-van-hoorne-creator-of-codesandbox",
    "published_at": "June 27th, 2018",
    "url": "https://egghead.io/api/v1/podcasts/ives-van-hoorne-creator-of-codesandbox",
    "edit_podcast_url": "https://egghead.io/podcasts/ives-van-hoorne-creator-of-codesandbox/edit"
  },
  {
    "id": "podcasts-00000000000000000062",
    "title": "Health and Wellness for Developers",
    "summary": "Our guests all began in similar situations. They were all almost 300 pounds or more and decided they needed to make a permanent change. John Lindquist, Leonard Souza, and Taylor Bell discuss what caused them to have a wakeup call, and what they did to get healthy and stay healthy.\r\n",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/6308ee9e-bffb-4fc1-a76e-62cc0818cbc7/b529a876_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/6308ee9e-bffb-4fc1-a76e-62cc0818cbc7/1534346342artwork.jpg",
    "simplecast_uid": "6308ee9e-bffb-4fc1-a76e-62cc0818cbc7",
    "transcript": "<p><strong>John Lindquist:</strong>     On the podcast today we have Leonard and Taylor and we're going to be talking about health and kind of changing your life and getting fit and that sort of stuff. So Leonard if you'd like to go ahead and start, kind of introduce yourself and maybe all your health background and every doctor you've ever visited.</p><p><strong>Leonard Souza:</strong>      I don't believe in going to the doctor. I think I know better. No, I'm just kidding. My name's Leonard Sousa. I'm an Engineering Manager at WebFlow and so my health journey, I had a pretty typical health trajectory for most developers and it didn't help that I sort of had kids earlier on and when I was 20, I had my first kid when I was 23. I was a developer and sympathy weight is real and I gained on ton of weight based on that and I was sort of a had a bit of a vegetarian for a long time. I didn't really understand what I was doing to my body. I'm not really against vegetarianism, but for me it's not really the right path. I basically ballooned up to about 280 pounds and I'm about 6'3\" so it was a pretty hefty amount of weight on me and right around when I hit 30 I realized I really needed to make a change.</p><p><strong>Leonard Souza:</strong>      'Cause I wasn't really someone who was generally out of shape before that point in my life, but I'd been out of shape for a good deal of time. I mean I had sort of a yo-yo stint when I was like 27 I was able to lose quite a bit of weight and sort of on Jenny Craig with my wife and it sort of came back when I was 30 and that's was about 2010. That's kind of when P90X was a big craze and I started seeing everybody doing that and it took me about a year to muster the courage to actually dedicate myself to something as strenuous as P90X and that is sort of what kicked off my journey towards trying to get fit, but it's evolved significantly since then. I not longer believe in P90X, but it was great to build a habit. It was a great starter kit if you will. We're gonna get more into that later.</p><p><strong>John Lindquist:</strong>     Leonard is very opinionated for people who are listening.</p><p><strong>Leonard Souza:</strong>      I am super super opinionated.</p><p><strong>John Lindquist:</strong>     It's weird to know that developers are opinionated.</p><p><strong>Leonard Souza:</strong>      Yeah it's odd, but we can get more into the how later, but that's sort of the beginning of it right?</p><p><strong>John Lindquist:</strong>     And numbers wise you were up to 280. Now you're down to 180 or so, right?</p><p><strong>Leonard Souza:</strong>      No, no, no. I had to keep myself around like 195 to 200 which is probably about 10 pounds more than what I weighed in high school, but I also can lift significantly more weight than I could in high school. I was rather thin in high school, so I'd like to think that I'm actually less body fat than in high school and much more muscle since then and that's really all what's being fit's about. Well actually that's not true. Being fit is about being healthy, but that's one of the metrics I follow, I try to go after.</p><p><strong>John Lindquist:</strong>     Great, Taylor you got a story to share?</p><p><strong>Taylor Bell:</strong>        It's quite a bit differently actually. So all through high school I worked at the local pizza place. Well this was before I was a developer obviously when I'm working at the pizza place, although shout out to all my pizza guys writing code on the side I guess. Anyways, so I was eating too much pizza and drinking too much soda, so when I was 19 years old the biggest number I ever saw on the scale was 287 and I know I got further.</p><p><strong>John Lindquist:</strong>     How tall are you?</p><p><strong>Taylor Bell:</strong>        I man 5'11\"-ish and I know that I went higher up than that 'cause my size 40 jeans were too tight. Now I am 34, so I decided that I would become a vegetarian right before I turned 20. That was the last I ate meat and then I didn't eat fish or any other meat. I was strict lacto ovo vegetarian all through my twenties and dropped down. At my lowest I was like 182 for about a month or so and that took me years to get to and then I went back up and I've maintained around 185, 195 back and forth for the last, I don't know, five or six, seven years. I'm 34 now, so I just kind of decided to make a change. I didn't feel very good basically.</p><p><strong>Leonard Souza:</strong>      That informed my decision too. When my heart was skipping beats I was like, \"I'm not gonna live until I'm 40.\" So that took a kick in the butt.</p><p><strong>John Lindquist:</strong>     For me, it's funny how similar Leonard and I are. We're the same age and same height and we're both white male and all that, but I had a similar story as far as having kids and I'm just jumping up a 100 pounds. I was 320 or more. I kind of avoided scales at the time and then over time I'm currently down to 220-ish. I'd like to be a bit lower, but food is yummy and it's kind of been a long journey as far as... Let's see, how long did I start losing the weight? Probably eight years ago is when I really started thinking, \"This is too much.\" So let's talk about what kicked it off for me is when I was in like 320-ish and we were living in this house and I felt like I had really bad allergies. So I went to the doctor to check on the allergies and they did the prick test and they did a breathing test on me.</p><p><strong>John Lindquist:</strong>     I failed the breathing test so bad that the doctor said, \"You know what? You only have less than half of your lung capacity with the way you breathe,\" and I said, \"Well that can't be good,\" and I was snoring really loud at night. I was sleeping terribly. All the sorts of things that come with being overweight and he told me to my face. He's like, \"You know what? You need to lose 50 pounds.\" That was the trigger for me. It was kind of like \"F.U. I'm gonna go do this,\" sort of thing. Just someone calling me out on it because before that, my family's on the heavier side and hanging around with heavier people and so it was just kind of an accepted thing until Mister Doctor Dude comes up and says, \"You know what? You need to do this. You are not healthy,\" and that's what kicked it in for me.</p><p><strong>John Lindquist:</strong>     So my mindset switched from eating candy and donuts and the whole whatever I wanted whenever I wanted and sugar addiction is real and all that, to changing my mindset of I'm the type of person who goes to the gym and I started on the elliptical. As wonderful of exercise that is, just getting that basic, that mindset in of \"I do this every day. I eat healthy.\" There wasn't any meal plan. There wasn't anything other than me telling myself, \"This is who I am now. I am not that person I used to be.\" Is there something that triggered it for you? For you two as far as was there a day or anything that kicked you in the butt? Said, \"Not. Today's the day.\"</p><p><strong>Leonard Souza:</strong>      I think for me it's a different sort of process, but I think I definitely recall. I wasn't joking about the heart palpitation thing. I actually remember sitting there. I actually called the doctor. I said, \"Look, am I dying? I think I might be having a heart attack,\" and they were like, \"No. Your heart skips a beat sometimes,\" and I was like, \"This seems like it's more than sometimes,\" and I knew I had a lot of weight on me. So and I wasn't feeling great either and I remember just I have two boys and they're pretty rambunctious and I remember keeping them in line is a bit stressful. There's correlations between that stress and the heart sort of jumps and I realized that I was like, \"My kids are gonna kill me if I don't get this under control now,\" and I knew that the first step it wouldn't be medication or anything. It was \"I need to lose weight and start exercising more.\"</p><p><strong>Leonard Souza:</strong>      It took me about a year though to muster the courage to really commit to it. So for me, I knew P90X was going on and it was a big phenomena back then and my buddies and I were talking about doing it and it took me about a year to go, \"Okay, I'm at a point in my life new where I'm going to do this come hell or high water.\" I was just like, \"I'm gonna do this every day and that's it,\" and that's kind of how I do things, an all or nothing venture, but sometimes it takes me a while to get to that point.</p><p><strong>John Lindquist:</strong>     Was there support there for you? Friends and family?</p><p><strong>Leonard Souza:</strong>      No, and I tend not to look for support there. I'm more of a lone wolf when it comes to that kind of stuff to be honest. I hate gyms. I really, really hate gyms. I like working out alone.</p><p><strong>John Lindquist:</strong>     Yeah the same here.</p><p><strong>Leonard Souza:</strong>      I like tackling things by myself. Now as far as accountability goes, there's interesting mechanisms there that I sort of stumbled across. For one, here's a silly one, but with P90X you have Tony Horton and he sort of keeps you accountable. There's something about that guy's energy which is really infectious and you kind of want to live up to that guy. You kind of want to look like that guy too and another thing that struck me about Tony is-</p><p><strong>John Lindquist:</strong>     He's so much older than you would think.</p><p><strong>Leonard Souza:</strong>      Right, he's in his fifties and look at him, right? And I'm like, \"Man, I want to look like that when I'm in my fifties.\" So it's something to aspire to. We can talk more about how that changed into a different sort of sustainable routine because P90X is just not a good thing for the most part. As far as getting you into really good shape and also staying in good shape for a long period of time, but that was sort of the kick in the butt for me was the stress of holding down a developer job and having kids and just being overweight and then feeling it.</p><p><strong>John Lindquist:</strong>     I remember if my kids would run up the stairs, looking like, \"Well, they're gone.\"</p><p><strong>Taylor Bell:</strong>        Mine was I had been struggling with my weight for several years, but it was really sort of just turning 20 as a milestone, so it wasn't, it's really easy when planning to do anything to say, \"Oh I'll start on Monday.\" 'Cause Monday's the start of the week. So it was-</p><p><strong>John Lindquist:</strong>     We'll start next Monday.</p><p><strong>Taylor Bell:</strong>        Yeah, yeah. So it was kind of like, \"Well I'll just do it on my twentieth birthday,\" and then I didn't necessarily plan to go a whole 10 years before I ate meat again and I know that Leonard's already alluded to him not liking the vegetarianism thing and I do eat meat sometimes now. Usually about once a month or so, but I haven't eaten beef or chicken. It's bacon. I eat bacon once a month.</p><p><strong>John Lindquist:</strong>     It's a good one if you're gonna have it.</p><p><strong>Taylor Bell:</strong>        Everyone out there's [crosstalk 00:11:09]. I didn't go straight to working out when I started. I used to like riding a bike a lot and then I was, I used to kind of joke that I looked like when the bear was riding a bicycle at the circus or something or it just doesn't look right. So the first thing I did was I quit drinking soda and that took off 10 pounds in a month right there.</p><p><strong>John Lindquist:</strong>     Such a good first step for anyone.</p><p><strong>Taylor Bell:</strong>        And then eat less pizza and just start riding a bike and walking around. It's kind of funny for me to be on the podcast with you guys because I feel like the imposter syndrome that I feel in the software developer sense of looking at what my experience and things are compared to what you guys have done is different but then what I realize that more than ever I need to not look at things as being a contest and so it's like looking at as far as my health and stuff is I still think that I could be in better, I know I could be in better shape than I am, but I'm better than I used to be, but if I compare myself only to others then I don't think that's the most mentally healthy thing to do.</p><p><strong>John Lindquist:</strong>     Right and let me say, I should have started with this which is congratulations on all the progress both of you have made.</p><p><strong>Taylor Bell:</strong>        Well you as well. It was an implicit congratulations in having the conversation I guess.</p><p><strong>John Lindquist:</strong>     And I'm awesome of course.</p><p><strong>Taylor Bell:</strong>        Of course.</p><p><strong>John Lindquist:</strong>     But you guys are too.</p><p><strong>Leonard Souza:</strong>      We're all winners here I guess is what Joel's trying to say to quell that competitive spirit there.</p><p><strong>John Lindquist:</strong>     So Taylor, did you have much support where people do the accountability?</p><p><strong>Taylor Bell:</strong>        Yeah, so I had done like, I had tried the Weight Watchers thing with my Mom when I was younger and I hadn't thought about this in a very long time, but one of the first times I really realized that I was going to need to change something was there used to be this thing that was Richard Simmons Deal a Meal and my grandmother bought that for me when I was 12 and I can feel my blushing right now so I'm really glad we're not on video 'cause I don't think I've ever told anybody that.</p><p><strong>John Lindquist:</strong>     It's just a secret between us now.</p><p><strong>Taylor Bell:</strong>        Which actually that brings me to another thing is that I don't share about the big weight loss that I did at all really. I have a couple of friends that I'm still friends with that knew me back then for lack of a better phrase, but I was always kind of reluctant to talk about it because I didn't want it to be like \"Oh there's that guy. He lost 100 pounds,\" and then that's all that I've ever done and that's all that I ever will do.</p><p><strong>John Lindquist:</strong>     Sometimes I admit I still feel like the fat guy even though I know I'm not and some days I'm like, \"Aren't I out of shape?\" and then I'll do something, hop up the stairs just fine. Like, \"Wait a second. I'm not.\" That was me before, not that person now.</p><p><strong>Leonard Souza:</strong>      You know that's interesting 'cause I feel that way too. I really do think it's a state of mind this idea of feeling fit because I think you could probably be in super duper crazy fit shape and still feel like you're out of shape and I think I know people that aren't in great shape that feel awesome all the time. I think it's how you approach it in your own head.</p><p><strong>John Lindquist:</strong>     Interesting. What did you do to kind of keep it off or maintain over the years? 'Cause it's been, Leonard how long have you since the big turnaround again?</p><p><strong>Leonard Souza:</strong>      It's been about five years now since that initial P90X push time and for me though, the journey was much more about figuring out how to eat versus and how to balance a sustainable exercise program that I could take well into my, I mean I was planning on something I could do for the rest of my life, well into my eighties. That's sort of what I sought. So I began with P90X and I did six months of it perfectly. Everyday, well six days a week and you get one day off and by about month four I definitely made progress. I got down to about 205 pounds and that was pretty good considering where I was. I think I was around maybe 240 when I started, but I felt absolutely terrible. I mean it was great though because I finally could do some pull ups. I'd never really been able to do many pull ups in my life. I'd never been able to do push ups in my life and here I was doing quite a few, but the thing is the weight stop coming off.</p><p><strong>Leonard Souza:</strong>      I sort of stalled and I couldn't figure out what was going on for the life of me, but I also hadn't really given much thought to what I was putting into my body. I was given a lot of thought to how I was outputting from my body, but I didn't know how to change my diet. So I started exploring diet options and that's when things really opened up to me because I was-</p><p><strong>John Lindquist:</strong>     Science at all?</p><p><strong>Leonard Souza:</strong>      Yeah, well I got to a place where I was actually very demoralized. I was actually getting really depressed 'cause I was like, \"Man I cannot make progress here and I feel terrible and I don't understand why 'cause I'm doing everything 'right.'\" So then I came across, I started seeking stuff, and I came across Tim Ferriss's Four Hour Body which I thought was compelling and sort of opened my eyes to the idea of insulin and its effects on the bodies and how you can manage it by the foods that you put into your body. So I did that for a month or two and I saw progress and I was like, \"Wow, this actually works,\" but I hated every single thing that Tim recommended that I eat. [inaudible 00:16:52] and stuff just did not work well for me and I felt better but not great.</p><p><strong>John Lindquist:</strong>     You hated it as in it didn't taste good or as in it didn't make you feel-</p><p><strong>Leonard Souza:</strong>      Something didn't feel right about it. There was just something that didn't feel right. So then I kept seeking, kept seeking and I came across a book called The Primal Blueprint by Mark Sisson and that book I literally shed a tear when I turned the last page of that book 'cause it was so transformative. It presented several things to me, not just a new way of eating, but also a new way of approaching how to exercise and basically Mark distills it down to like it's a paleo inspired thing. It's not really paleo though because it's much looser. I'm not really much for hyperbole and so I was happy to see that it was a sensible approach to this idea of paleo which is basically this low carbs and also a certain type of activity style that matches what are ancestors did.</p><p><strong>Leonard Souza:</strong>      Anyways, after realizing that the diet game is about balancing macro nutrients and the exercise game is really all about lifting heavier things to the point where you exhaust the glycogen in your muscles and then you give your body a ton of rest and that's really the easiest way to put it. So what I then did is I ditched P90X... Actually I didn't ditch it, I modified it. I reduced my workouts to four days or five days a week and changed my diets to a low carb sort of diet and that worked really well for a while and then I kept seeking, kept seeking and I was like, \"You know what? This body weight stuff, dumbbell stuff is not enough for me.\" So then I started looking to \"Well how do I get into this, the barbell gang and into the iron gang,\" which I hated all of my life because I really don't like gyms and bros, or bros are fine, but I just didn't like the attitude, that sort of alpha attitude.</p><p><strong>Leonard Souza:</strong>      Anyways, Mark though changed my tune. He basically said, \"You know we lifted heavy things back the day and if you killed an animal you carried it back.\" I think it probably weighed at 200 pounds, 300 pounds. That's what are bodies are sort of designed for. So then I came across Martin Berkhan's sight called leangames.com and Martin sort of just cut through all the crud in the fitness industry for me. Say the same thing for Mark Sisson and he prescribes a three day a week strength training program which is a lot less than what I was doing. It also fulfilled my, \"Oo, I can do this for the rest of my life,\" kind of thing and it was all barbell driven. So at that point I had proved to myself that I was committed and I purchased a cage, a workout cage and put it in my office.</p><p><strong>Leonard Souza:</strong>      I'm sitting in the same office with the same cage that I bought five years ago and been using it since and I started lifting really heavy stuff three times a week according to Martin's theories and also to Mark's theories and then I also started doing intermittent fasting which is what Martin actually sort of conceived or made popular. I'm not sure if he conceived it but he made it popular. That was the key. That was the secrete sauce. Then I blew through my weight plateaus, cut down to sub 10% body fat, developed significant musculature. Was able to squat 420 pounds, deadlift 500 pounds, stupid numbers I never thought were even possible and the crazy part was I realized being a developer and working remote was the ideal environment to actually be able to achieve these things which you would think it would be completely opposite because I sit on my but most of the day, but that's actually a good thing 'cause your body needs to recover.</p><p><strong>Leonard Souza:</strong>      So anyways, that's the evolution that happened with P90X and to what I do today and to what I've helped many people do themselves and I've seen success with a great number of folks, not only through my own personal efforts in coaching, but also through, let's see Martin's clients and seen other people who do the same thing clients and it's been really rewarding that way. By the way I'm not like a coach or anything. I just do it for friends and stuff. I don't get paid for it. I just enjoy disseminating the knowledge because it's so powerful and yeah, that's sort of-</p><p><strong>Taylor Bell:</strong>        That-</p><p><strong>John Lindquist:</strong>     Alright Taylor, if you didn't have imposter syndrome before.</p><p><strong>Taylor Bell:</strong>        No shit.</p><p><strong>John Lindquist:</strong>     I shouldn't let you leave.</p><p><strong>Taylor Bell:</strong>        I was with Leonard up unto yeah, Four Hour Body Tim Ferriss book was transformative for me and then I have nothing else in common with that whole last story. I work remotely. I guess I have that in common, but yeah Tim Farriss's the Four Hour Body diet is actually what got me through my plateau twice. I plateaued at 204, 206. I was stuck between those two for a long time and then the last spot I was stuck was 191.5 and I was always that for days in a row and it wouldn't matter what I did.</p><p><strong>John Lindquist:</strong>     The scale was broken.</p><p><strong>Taylor Bell:</strong>        I honestly thought it was. But yeah so I, I don't like work out work out like that. I don't know if you guys remember the Seven Minute Workout thing from a few years back? So between that and this book called The Compound Effect by Darren Hardy which he has an example in his book about the magic penny where if somebody offered you three million dollars right now a penny that would double every day for a month, it's smarter to take the penny and so you think that seven minutes is basically nothing and for the first two weeks it doesn't really feel like anything, but then I did it for 30 days straight at seven minutes a day and then at the end I was doing 20 push ups instead of six. It's pretty good, but my goal was never to be like six pack and I've never had one. My goal is to feel better and I still drink beers, not as much as I used to of course, but I don't restrict myself \"bad\" stuff I guess.</p><p><strong>Taylor Bell:</strong>        Moderation is something that I learned more. One of my friends says that he'd rather not indulge because if he indulges then he has to work out harder and so I sometimes hear his voice in the back of my head, but I don't know. Did you say sub 10% body fat Leonard? Yeah I don't know what mine is but I know that it's not that. It's sub 100%. I know that.</p><p><strong>John Lindquist:</strong>     You have done wonderfully.</p><p><strong>Leonard Souza:</strong>      Well you know what I like hearing from you [inaudible 00:23:44] is I think the key is to start, to start with anything. Go walk five minutes a day. That's enough, I'm not kidding. Just go do something and build from there and what's weird is we're sort of these relativistic creatures. Absolute terms are very scary to us. So suddenly trying to go and lift 500 pounds from Day One is way to intimidating or it's impossible or you'll get hurt. You start walking five minutes a day, tack on another two minutes, maybe try doing a push up the next week and that seven minute theory, right? It's pretty brilliant. That's a fantastic way to get into it and that's sort of, I think that really works well for a lot of people. So I'm happy to hear that that worked for you.</p><p><strong>Taylor Bell:</strong>        And it's one of those, I think about in There's Something About Mary where it's like, \"Seven minutes? No, it's six minutes,\" and that kind of thing. I fall in and out of it just like any other kind of, after a while it becomes a real habit and then things happen or you don't feel like it for too long and then it becomes harder to get back.</p><p><strong>Leonard Souza:</strong>      Something else you said that I really appreciate is everything in moderation [crosstalk 00:24:53]. I actually subscribe to the same exact philosophy and I found the reason that what I do is so magical is 'cause there's a lot of room for that. I drink a lot of beer. I still eat two pints of ice cream on three days a week.</p><p><strong>Taylor Bell:</strong>        Ice cream or Halo Top? 'Cause I found out that I can't eat Halo Top. Like I have the-</p><p><strong>Leonard Souza:</strong>      Yeah, there are certain ones that screw with you.</p><p><strong>Taylor Bell:</strong>        Yeah, big time.</p><p><strong>Leonard Souza:</strong>      Yeah stay away from those, but there are alternatives. You should try Arctic Ice or Arctic Zone, one of those two. Anyways, that one screws with my gut but hopefully will be good for you.</p><p><strong>Taylor Bell:</strong>        I'll let you know.</p><p><strong>Leonard Souza:</strong>      But the crazy thing is that I think you have to find ways of keeping yourself motivated by giving yourself those small luxuries. Almost as rewards for the hard work that you put in. The whole idea of \"I have to work out harder because I ate more?\" See that's totally flawed 'cause you can't. The body's actually only capable of burning about five to six hundred calories at most a day and then after that it goes into a weird sort of flight or fight mode and it doesn't make any more progress. So there's no point in trying to burn more than that many calories a day. You just have to adjust your diets to account for the energy that you took in versus what you want to put out. So yeah, I mean I think that it's important to find something that gives you those luxuries too and I think that that's also the reason why I'm really excited about what I do 'cause I still get them.</p><p><strong>John Lindquist:</strong>     It's funny you mention that. If I treat food as a reward it always just triggers my insatiable appetite for sugars and carbs and then I spiral out of control again. I don't know if that's just a mental thing for me or an actual physical reaction to eating sweets or whatever. I can eat junk food when it's not a reward, if it's just something with lunch or something with dinner or whatever, but if I use it as a reward system then I start cheating.</p><p><strong>Leonard Souza:</strong>      Like a cheat meal?</p><p><strong>John Lindquist:</strong>     Yeah. Just anything like that. The worst is celebrating, hitting a particular weight.</p><p><strong>Taylor Bell:</strong>        Celebrate by offsetting it back to where you started.</p><p><strong>John Lindquist:</strong>     Yeah and that's what I still struggle with. It's \"Yay, I made it to 210. Let's eat cake.\"</p><p><strong>Leonard Souza:</strong>      My wife is the same exact way and I don't do cheat meals anymore by the way. I actually think they're worthless and I mean they can be useful on a rare occasion if you're really, like maybe during Thanksgiving or something or on a holiday, but you're just sort of participating, but I found that it's much better just to spread out tiny rewards, tiny rewards that don't trigger that heuristic of \"Well, I just ate all this stuff. There's no point in continuing trying to be healthy.\" 'Cause it is a real struggle. My wife, she can't do it either because I was trying to experiment cheat meals with her and she'd just go completely off the wagon after that. So was like, \"That's cool. We'll just figure out other ways.\" So we do it like a cheat, I'm sorry not cheat meal, do it like a cheat day... Sorry, cheat days are what screwed her up, but then we do like a small reward like a cheat meal like maybe just a dessert and then maybe just once a week and that was enough. It's just enough when it doesn't trigger that weird bounce back, rebound thing.</p><p><strong>John Lindquist:</strong>     Let me just throw in to the maintenance stuff for me, like the way I kind of kept it off over the years was my family was really into running and I've always hated running, but my sister challenged me to run a half marathon and if you challenge me to do something I kind of take it personally. I just have to, I [inaudible 00:28:38] about it. So I just stuck to it and I ran a half marathon. That kind of got me into shape to play basketball and play racquetball and those have been kind of my go to fitness things. I've worked with Leonard the last couple of years as far as trying to get into his [crosstalk 00:28:55] of [crosstalk 00:28:58].</p><p><strong>Taylor Bell:</strong>        Yeah choose his instead of mine I think.</p><p><strong>John Lindquist:</strong>     Where he calls basketball play and racquetball play and those don't count as exercise. Leonard's lifestyle's a hard pill for me to swallow. Because there's so many things I love to do that Leonard frowns upon.</p><p><strong>Leonard Souza:</strong>      You totally can do it. I just say you have to account for it. If you're going to play basketball, you have to account for it. It's not that I don't want you to play basketball, have fun. It's not like make your life miserable so you look good. That's like the dumbest thing to do ever. Anyways, go on, sorry.</p><p><strong>John Lindquist:</strong>     I was just going to say if I play basketball and racquetball and basketball, three days a week I do that, then I have no energy to lift or sometimes that amount of cardio will make me so hungry I just can't stop eating and all of this sort of stuff. So those are still things I'm struggling with daily. It's never over. The health is a daily, it's a lifestyle and all the cliches that people say.</p><p><strong>Leonard Souza:</strong>      Little bit of back story for those who may not know. So I advocate for no cardio or just low, low aerobic like walking at the most. Hiking's fine. Anything where your heart rate's below 65% because anything above that you start to produce weird hormones that your body thinks it's running away from something and it does weird things to your biology, but that's all in the palm of [inaudible 00:30:29]. It's manageable maybe. I don't know.</p><p><strong>Taylor Bell:</strong>        I'm going to-</p><p><strong>John Lindquist:</strong>     I just love sports I guess. I love the competition of it.</p><p><strong>Leonard Souza:</strong>      Yeah no that's great and that's important.</p><p><strong>Taylor Bell:</strong>        I'm going to have to read these books. That's like the only, besides the seven minute deal, I ride my bike. I found out that I got a bike trainer that you hook your bike wheel in to and my bike wheel fit under my standing desk where I can type and pedal at the same time and I have not disclosed that I do that publicly until right now. It's really silly. I feel silly a lot which is why I work out alone. My-</p><p><strong>John Lindquist:</strong>     Do you lock the door before you start pedaling just in case-</p><p><strong>Taylor Bell:</strong>        Don't come in.</p><p><strong>John Lindquist:</strong>     ... someone tries to sneak in?</p><p><strong>Taylor Bell:</strong>        No I don't, but since I work remote I get time when my wife's not here that I don't have to feel like... I don't know. I don't know why I feel so embarrassed, is not quite the right word, but I don't know. I think it's funny, it's funny just talking about it right now to me. It's not-</p><p><strong>Leonard Souza:</strong>      I think it's brilliant. I think you just, for one as far as competitions go you just won out of the three of us.</p><p><strong>Taylor Bell:</strong>        And I'm so competition averse. When John is like \"Somebody challenges me and I take it personally,\" and it's like someone challenges me and I give them the finger or something, I don't know.</p><p><strong>Leonard Souza:</strong>      You should create tablesunderdeskbike.com and just have your stats on there and just share it with everyone all the time.</p><p><strong>John Lindquist:</strong>     The live webcam in your office.</p><p><strong>Leonard Souza:</strong>      Your feel just off of the bike itself.</p><p><strong>Taylor Bell:</strong>        Oh man. I'm sure someone out there would be super into it.</p><p><strong>John Lindquist:</strong>     I bet you they would. You'd probably get some profit with that, man.</p><p><strong>Leonard Souza:</strong>      But back to the idea of maintenance, I don't think I answered that. For me, so what I do is I do something called nutrient partitioning and that means I'm low carb on my rest days and sort of high carb on my workout days, but that also means I modulate my fat and my fats and carbs on those days and I keep my protein consistent and really it's a dance between those three macro nutrients. That's what I've found the easiest way to keep weight off consistently. So on my rest days I eat maybe about 30 grams of carbs. That's definitely in the ketogenic range. It's not quite ketogenic, but it definitely gets you there if they're long enough and on my workout days that pumps up to about 280 grams of carbs, but there's a really great reason for that and Martin sort of extols this on his website.</p><p><strong>Leonard Souza:</strong>      When your muscles are exhausted of glycogen, your liver is seeking glucose so it can convert it into glycogens so it actually takes that and shuttles it into your muscles which helps with the repair process and makes the active hypertrophy or the active knitting more muscle together. It accelerates it. So you actually are supporting muscle [inaudible 00:33:24] by eating those carbs on your workout days if you're lifting really heavy stuff and getting to the point of exhaustion, but for anyone if at the end of the day, this whole equation, the whole game, if you want to keep weight off, if you want to manage your weight, it's all about managing your carbohydrates. That's really all it is. If you keep your carbohydrates under a certain level, like under 50 grams of carbs a day and you eat as much protein as you want and sort of keep your fat maybe around 40% of your body weight in grams, whatever that is, which is a healthy hormonal sort of level for body fat or for eating fat.</p><p><strong>Leonard Souza:</strong>      You will lose weight and one of the things I discovered through this whole journey is that losing weight is actually not the hard part. It's actually finding something that keeps the weight off, but then also putting on muscle. That's the hard part and that's when you shed weight, that's when it reveals what's underneath and it becomes interesting in that aspect too, but anyways, carbohydrates man, that's it. That's all you have to worry about.</p><p><strong>John Lindquist:</strong>     Which requires actually tracking them and looking at food labels.</p><p><strong>Leonard Souza:</strong>      It does.</p><p><strong>John Lindquist:</strong>     I found, it was really interesting, following Leonard's advice and doing it with the plan that he's talking about, it's like how much water weight I would drop and how I would feel less bloated. I was thin, but because the health plan you gave me I would finish less bloated. So there's that extra sense of feeling lighter than anything else.</p><p><strong>Leonard Souza:</strong>      Yeah, your body needs water to process carbs and that's why [crosstalk 00:35:06].</p><p><strong>Taylor Bell:</strong>        Can you drink too much water? How much is too much?</p><p><strong>Leonard Souza:</strong>      Oh yeah, absolutely.</p><p><strong>Taylor Bell:</strong>        I'm asking for a friend.</p><p><strong>Leonard Souza:</strong>      So water, hydration's a funny thing 'cause everyone's like, \"You gotta drink four liters of water a day.\" All of that is bunk. It's relative to you and really what I look out for and forgive me for TMI, but it's really the color of your pee. If your pee's almost clear, then you're good. You've drunk enough water. If it starts to get highly colored then you need to drink more water and if it's totally super clear, I actually think in my own personal experience, some people can tolerate that, but that tends to start giving me headaches. So really it just comes down to the color of your pee. So if that's four liters, that's awesome. If it's two, great. 'Cause you can't, certain foods hydrate you really well also. So you can't just rely on a number of cups and those sort of generalized statistics of \"Do X to achieve X\" generally doesn't work. You have to have another performance indicator in there. So just the color to get you.</p><p><strong>Taylor Bell:</strong>        I just had an app idea.</p><p><strong>John Lindquist:</strong>     There you go.</p><p><strong>Leonard Souza:</strong>      Toto. And also too, tracking too, you brought that up John and tracking is really rough and it's really rough especially in the beginning because you just don't want to deal with entering all the macro nutrients into any app ever, but it is pretty critical in a lot of ways until you're really well established, then you already know the foods you're eating and you've already sort of pre-calculated in your head, but another critical component of tracking is not to track your weight so much 'cause weight is usually a false-y sort of metric 'cause it can lead you to believe things that aren't true, but it's also to measure you body size sites so your waist in three different areas, your arms, your legs will give you a much better indication of where you are, truly where your body is versus how much fat you have versus how much muscle you have outside of getting a dexa scan or what not which actually tells you how much skeletal mass you have versus muscle and fat, but measuring yourself weekly or bi-weekly is critical. That's another as well as tracking.</p><p><strong>Taylor Bell:</strong>        Do you weigh yourself every day?</p><p><strong>Leonard Souza:</strong>      No. I weigh myself once a week. I can probably punt that to once every two weeks. So I have a weigh day. It's like on Saturday mornings and it's consistent, consistent with the amount of food content in my stomach, with the amount of elimination, the amount of I wake up, I just basically undress, hop on the scale and go measure myself every Saturday morning and so there's eight sites I use a tape measure to measure on my body. That's what I track when I cut versus when I bulk and that's also another strategy for maintaining weight is to constantly alternate between bulking and cutting cycles. So right now I'm cutting 'cause during the winter I generally gain a little bit of weight from all the holidays and fun which I allow myself to do because it's healthy for my brain and then I sort of shed that weight towards the beginning of the year.</p><p><strong>Leonard Souza:</strong>      So right now I'm cutting. So I'm looking for mostly the sites around my midsection, my midriff if you will, to decrease because with men, fat patterning in men, we tend to lose our last bits of fat around our stomach and our back whereas women tend to lose their last, when I say last bits of fat I mean like when you start getting down to really low fat body percentages around, they lose weight in their thighs and arms last. So they look for those measurements to decrease and then I look for, men should look for midsection and back while also trying to increase how much you're lifting 'cause that's a very good indication that you're putting on muscle while losing weight which is the golden goal. It's also hard.</p><p><strong>John Lindquist:</strong>     So just to wrap up here, let's leave this motivational, inspirational words to anyone who's made it this far and who wants to make a change in their lives I would say that the difference I feel now between the way I felt years ago with being 100+ pounds heavier than I am right now. It's again I feel like a completely different person. I feel like I have completely changed my life around and that I can jump and I can run and I can play with my kids and I can go on hikes and just have, life is more fun now and it's an incredible feeling. So it think just to echo the idea of just starting, whether it's that five minute walk or the seven minute, whatever, getting into dropping soda or starting to track food or whatever it is that initial step if you need to take it just take it and move forward. I'm going to turn it over to you guys. Any inspirational words?</p><p><strong>Leonard Souza:</strong>      Well I know for myself there was a bunch of unforeseen consequences to it. Yeah, of course I wanted to look nicer and all that stuff and that's a bit shallow, but at the same time it's nice to feel good about how you look 'cause it feels good in general, but for me I didn't realize that the whole paleo thing would lead to sort of a change in my chemistry. So I used to struggle with pheno depression and anxiety like most people, but I had to contend with it quite a bit and I noticed in the past five years of my life and this is the first time in my life, I'm 38 now. About three years ago I noticed a marked decrease in those feelings, this overwhelming dark cloud inside where you don't have much hope and today it is gone and I don't know if it's just because my body's rewarding me or if my chemistry's better or my gut health is better or whatever, but whatever I'm doing has completely reversed those sort of psychological difficulties that I once possessed.</p><p><strong>Leonard Souza:</strong>      That alone I would take that any day even over looking fit or what not. That for me has been everything. It's made me more mentally healthy. It's also made me, my mental abilities, it's increased that, my output I can do a lot more now and just look forward to where it takes me. It's been a huge boon and that's why I also try to help people with it too and I'm more than happy to. If anyone's listening to this that wants some advice or wants to talk about it I'm more than happy to sit down with you and just walk you through it.</p><p><strong>John Lindquist:</strong>     I don't snore any more so my wife doesn't wake up in the middle of the night. We both sleep well. There's silly things.</p><p><strong>Taylor Bell:</strong>        I just realized that it takes time and do it for yourself. Don't do it for anyone else and don't get in a big hurry. That's kind of my philosophy on life anyway I suppose.</p><p><strong>Leonard Souza:</strong>      That's a great philosophy.</p><p><strong>John Lindquist:</strong>     Alright, thanks for listening everyone.</p>",
    "slug": "the-health-episode",
    "description": "<p>Today our guests and host talk about what pushed them to start living healthier lifestyles and what they are doing to maintain it. Leonard was 280 pounds when he was 23 at his heaviest, Taylor was 19 and 287 pounds, and John was 320 pounds.</p><p>Leonard made a change due to having health issues with his heart, he got on P90x and after a year of it moved on to much better things, this got him to a muscular 190. John began because he failed a breathing test and only had 50% lung capacity, he got it into his head that he was a healthy person now and started using the elliptical and not eating junk food. Taylor was turning 20 as a milestone and decided to make a change by kicking soda, going vegetarian, riding his bike, and walking around more. His goal was never to get a six pack but just to live a healthier life.</p><p>It has been five years since Leonard's initial push to get fit. He says that the most significant thing has been finding a sustainable diet and exercise program that he can do for the rest of his life, well into his 80s. P90x is not sustainable, he followed it precisely for six months, but he was physically burning out and felt terrible.</p><p>Reading a book called the Primal Blueprint changed everything for Leonard. It teaches that manipulating your body composition is all about finding that balance of macronutrients and lifting heavy things while getting plenty of rest. Since he hated gyms and alpha attitudes, Leonard purchased a barbel, a squat cage, and some weights allowing him to take his body to the next level lifting heavy things three days a week. He blew through his weight stalls, cut down to sub 10% bodyfat, and developed significant musculature! Being a remote developer was the ideal environment for achieving these things due to the flexible schedule and ease of access to his home gym.</p><p>Finally, things are wrapped up with Leonard explaining how having a healthy body and exercising have given him mental health benefits. The depression and anxiety he used to struggle with have been helped by the changes he has made. Taylor leaves us with the advice to do this for yourself, not for anyone else, and to take your time and not get into a big hurry with it. It takes time.</p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/the-health-episode/transcript\">\"Health and Wellness for Developers\" Transcript</a></p><h3>Resources:</h3><ul><li><a href=\"https://www.amazon.com/Primal-Blueprint-Reprogram-effortless-boundless/dp/0982207786\">The Primal Blueprint</a></li><li><a href=\"https://leangains.com/the-leangains-guide/\">Leangains</a></li><li><a href=\"https://well.blogs.nytimes.com/2013/05/09/the-scientific-7-minute-workout/\">The 7 Minute Workout</a></li><li><a href=\"https://www.amazon.com/4-Hour-Body-Uncommon-Incredible-Superhuman-ebook/dp/B003EI2EH2\">The 4 Hour Body</a></li></ul><h3>Taylor Bell:</h3><ul><li><a href=\"https://twitter.com/taylorbell\">Twitter</a></li><li><a href=\"https://github.com/tayiorbeii/\">Github</a></li></ul><h3>Leonard Souza:</h3><ul><li><a href=\"http://leonardsouza.com/\">Website</a></li><li><a href=\"https://twitter.com/jslauthor?lang=en\">Twitter</a></li><li><a href=\"https://github.com/jslauthor\">Github</a></li></ul><h3>John Lindquist</h3><ul><li><a href=\"https://twitter.com/johnlindquist?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor\">Twitter</a></li><li><a href=\"https://egghead.io/instructors/john-lindquist\">egghead.io</a></li><li><a href=\"https://github.com/johnlindquist\">Github</a></li><li><a href=\"https://johnlindquist.com/\">Website</a></li></ul>",
    "duration": 2520,
    "episode_number": 17,
    "contributors": [
      "John Lindquist"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/2m00b",
    "path": "/podcasts/the-health-episode",
    "published_at": "June 14th, 2018",
    "url": "https://egghead.io/api/v1/podcasts/the-health-episode",
    "edit_podcast_url": "https://egghead.io/podcasts/the-health-episode/edit"
  },
  {
    "id": "podcasts-00000000000000000061",
    "title": "Brian Vaughn, React Core Team",
    "summary": "Brian Vaughn speaks about his transition from graphic design to programming, his building of react-virtualized, him landing his job on the React core-team, and finally, React's goals with 17.",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/4c24a78b-f2fd-41f2-87e9-265ead1acb93/64ad7451_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/4c24a78b-f2fd-41f2-87e9-265ead1acb93/1534346357artwork.jpg",
    "simplecast_uid": "4c24a78b-f2fd-41f2-87e9-265ead1acb93",
    "transcript": "<p><strong>John Lindquist:</strong>     All right, our guest today is Brian Vaughn. Brian, can you go ahead and introduce yourself?</p><p><strong>Brian Vaughn:</strong>       Yeah, hi. My name is Brian. I'm on the core React team at Facebook, and I maintain and contribute to a lot of Open Source projects, mostly in the JavaScript space. I like to run and sometimes I write and record music as hobbies. That's me.</p><p><strong>John Lindquist:</strong>     Yeah, so I checked out some of your SoundCloud stuff. You're very talented.</p><p><strong>Brian Vaughn:</strong>       Thank you a lot.</p><p><strong>John Lindquist:</strong>     You get around to recording or performing anymore, or is that kind of a previous life now?</p><p><strong>Brian Vaughn:</strong>       I don't perform anymore. I haven't performed in a while because it's a lot of work, but I do still write and record, just in a home bedroom studio situation.</p><p><strong>John Lindquist:</strong>     I'm glad to hear you keep that up. I know a lot of people just kind of lose track of that talent and let it go. Can I ask how you got into programming, what your first exposure was and first job and that sort of fun background?</p><p><strong>Brian Vaughn:</strong>       I went to college for graphics design, and I was fortunate enough to line up some consulting work initially doing design work, and then it sort of transitioned into doing some programming work, which I was using to pay my way through college. I had a client that asked me at one point if I could build them an interactive website and I said, \"Sure, I can,\" even though I couldn't.</p><p><strong>Brian Vaughn:</strong>       And I bought a MySQL book and read it on a long weekend and thumbed my way through it and really enjoyed it a lot. And over the course of college, I realized I would much rather do programming than the graphics work, and so that just made the transition. I played a lot with Flash and Action Script in the early days because it was a nice overlap with programming and the visuals,. But yeah, that's how I got started.</p><p><strong>John Lindquist:</strong>     Yeah. Sometimes I miss the stage and the display list and all the fun animations and inter frames and all that in days gone by. It's funny you bring up the MySQL books; I remember the feeling of ordering a book online and that thick PHP book would show up on the doorstep, and like, this is gonna make me so much smarter. I'm gonna be able to build so much stuff with this giant book I haven't felt that in forever. Just haven't ordered a giant book, I guess.</p><p><strong>Brian Vaughn:</strong>       Yeah, that's also true.</p><p><strong>John Lindquist:</strong>     So how did you get into React? What was your experience there?</p><p><strong>Brian Vaughn:</strong>       Yeah, I worked at a couple of Bay Area startups. I worked at a company called Recurly in 2014, and Recurly was a subscription eCommerce company, and we had ... I think we were using React 0.11 at the time. We weren't really using it for most of our applications, but it was just controlling a couple of widgets here and there, like a typeahead sort of a thing. And then I joined another startup later in 2015 called Treasure Data, which is data management company. They have a bunch of software as a service to collect and analyze large amounts of data, and the cool thing about Treasure Data is that they were built on top of a lot of Open Source technologies. The company has written and released a lot of Open Source themselves, and they were very supportive of using React, I think.</p><p><strong>Brian Vaughn:</strong>       That was '14 at the time. We use it to build a console, which was the web interface for how you import data, you manage your databases and tables, you write SQL queries, these things. That was my first in-depth experience with React, because the Recurly one was very shallow. So yeah, Treasure Data was probably the first deep experience with it.</p><p><strong>John Lindquist:</strong>     All right. So they were already using it, and you went into the job and it was part of the job requirement? Or is it something that you introduced or someone on the team introduced?</p><p><strong>Brian Vaughn:</strong>       Well, I joined the company just as they were doing the big rewrite of the console application, and the front end team was pretty small. But they were, the folks that were there before me were really excited about React, and I was just fortunate enough to join at the time and get to use it, because I hadn't had much experience or opinion about it yet.</p><p><strong>John Lindquist:</strong>     Yeah. Yeah, I love the excitement of learning something new like that. I've been doing React for a few years now, and the excitement's still there, but the initial, \"Oh, what's this thing do? Oh, how does that work?\" Especially with the team, you're always discovering and sharing.</p><p><strong>Brian Vaughn:</strong>       Yeah. I made some really clowny mistakes in the early days. I put things in props that should have been state and vice versa, and I didn't understand why it mattered. It's fun to think back at that learning experience.</p><p><strong>John Lindquist:</strong>     Yeah. For anyone listening, we all, no matter how expert someone is, we've all been where you are. We've all made the dumbest mistakes possible. This is just part of the growing process. So what got you on the ... was your React virtualized work, your performance libraries and stuff, was that what got you on the React team, or how did that ...</p><p><strong>Brian Vaughn:</strong>       Yeah, I think that's probably the biggest thing. As I mentioned, Treasure Data was really big into Open Source. Some of the core engineers there had a lot of libraries that they had created and maintained, and they also contributed to a lot of larger projects like Ruby on Rails and larger frameworks. So when we were writing the console at Treasure Data, we used the Facebook's fixed data table component at first, because we needed to display tens of thousands of records of rows of data. So we wanted to window it so that we didn't have really terrible performance, but fixed data table didn't have some features that we wanted. Namely, there wasn't a way to programmatically jump to a specific row, which is something that was important for us if we wanted to highlight a row and [inaudible 00:05:33], or a column in your table that was misconfigured.</p><p><strong>Brian Vaughn:</strong>       I remember having this conversation with my teammates saying, \"I think I can build this,\" and they're like, \"No, that's a lot of work. That's a lot of work.\" But I was stubborn, and so I went home over the weekend and put together a prototype that ended up being the v.1 release of react-virtualized. Treasure Data was super supportive, let me open source it, which is awesome because that's something that I would have really struggled to do if it was just a free time project. Then we also were using Redux for our state management, and we wanted to be able to filter the data that you're looking at. So you're looking at a huge set of records and you write a SQL query to search for things, but maybe you want to filter farther within the browser. I wrote a search middleware for Redux that we could use to filter in the browser.</p><p><strong>Brian Vaughn:</strong>       It was another thing that I open sourced, and then I worked with one of my teammates, [Sazar 00:06:29] on that one, and we open sourced it. Then I guess Dan found out about it and tweeted about it, which was pretty exciting at the time because I had, I don't know, 200 followers on Twitter maybe, if that. He tweeted about it and one day, I just noticed a bunch of people following me on Twitter. What is going on? It was because of that. Yeah, he tweeted about virtualized and Redux search, which is the name of the other thing. That got all our traction, and yeah. Through that, I met a couple other people online from the React team. There's a direct line from there to the fact that I'm working on React today, for sure.</p><p><strong>John Lindquist:</strong>     Right. I found most developer's success is, I shared this cool thing I worked on and, just some either weekend project, late night project, put it online. Then it's just like a career boost. Share your work if you're listening, just share it. Seriously. That's a great story, I love it. So, what was it like joining the React team? I imagine ...</p><p><strong>Brian Vaughn:</strong>       Super [crosstalk 00:07:31].</p><p><strong>John Lindquist:</strong>     Well, just seeing all the feedback from the community, and all the different issues that you were probably never exposed to before. It's got to be a pretty daunting task to support everyone.</p><p><strong>Brian Vaughn:</strong>       Oh, yeah. It was super intimidating. I've done a couple of Open Source projects on my own. I think my first one was a PHP engine back in 2005, 2006 on SourceForge. So I've dabbled in Open Source for a long time, but nothing at this scale. Virtualized by far is the biggest personal project, but that's nothing on the scale of React. There's definitely been a lot of fun learning experiences, in terms of the types of considerations that go into even seemingly simple changes. My teammates have been really awesome in sharing their experiences, and that's based.</p><p><strong>Brian Vaughn:</strong>       It's been a lot of good learning experience, but joining was super scary. I was very intimidated for a long time, too, not just until I joined. I think I was intimated for the full first year. Just certain types of changes are just really scary to make. Certain types of PRs were scary to make, because everything is visible. There's so much scrutiny and spotlight on a project that has that much traffic.</p><p><strong>John Lindquist:</strong>     Writing code can be scary sometimes. No one should look at the code I write during the weekends. That's mine. Oh, that's good to hear that people are still people, even when they get on the big teams like that. So with React now, there's always something brewing there. There's been ... 16's pretty recent and lots of talk about 17. Can you go over some of the changes in 16, like specifically the unsafe changes and all that, and what developers should be looking out for?</p><p><strong>Brian Vaughn:</strong>       Yeah, so 16 has been ... yeah, it's been a lot of things. The initial 16 re-write was focused on a few areas. It was a big tech got cleanup to get rebuilt and adding full type static analysis coverage to the code base, making it easier to create custom renders. There were a lot of longer term goals for 16. There were some really nice short-term wins. Everyone liked that it got smaller, you could return a raise from render. There were some nice features that were enabled, but 16 I think was a forward looking release. It's starting pay off already. I mean if you look at the 16.3 release that we did a couple of weeks ago, there were a lot of features in that release for just a point release. And I think the fact we were able to add all of those features is a testament to the architecture that the fiber rewrite and 16 enabled.</p><p><strong>Brian Vaughn:</strong>       There's still stuff coming. Async is another big thing, like 16 sync by default, Async is still an unstable feature that we're experimenting with, but the architecture that came with 16 was to enable Async work.And yeah, you touched on the unsafe life cycles in 16.3 that we introduced. That's also part of our work with Async. We released a couple of blog posts around this time, and I don't know if we can include links to them in the podcast description anywhere.</p><p><strong>John Lindquist:</strong>     Yeah, we will.</p><p><strong>Brian Vaughn:</strong>       But if you have ... Awesome. Yeah, if you haven't read the blog posts, I would definitely encourage you to go to reactjs.org and check them out, because they have a lot more information that I won't be able to go into in the podcast. But the gist of where we're going with the class component life cycles, is that we've looked at a lot of code. Facebook has something around 50,000 React components between all of our mobile and web products, which is just [inaudible 00:11:13].</p><p><strong>Brian Vaughn:</strong>       We've also looked at GitHub. You use GitHub search features to look at Open Source libraries that are just on the internet that we can look at, trying to identify patterns that people are using in React components, and then the life cycle changes that came as a result of that was basically us recognizing that some of the life cycles are easy to use in ways that will cause problems with Async Rendering. That's not us pointing fingers at people and saying, \"You're misusing this.\" This is just the API when it was created several years ago, the class component API has been stable for something like three to four years.</p><p><strong>Brian Vaughn:</strong>       No one was thinking of Async Rendering at that time, and you can do a lot of things in a sync rendering context that work fine that don't work well in Async. So it's been a process of us realizing how Async is going to work, and then saying, \"Oh, what about this? This will hold pretty with Async.\" The 16.3 and probably the next release or two in 16 will be ... one of the focuses for us will be finding patterns that don't work so well, or might not work so well with Async, and then providing guidance and recommendations for things that will work better with Sync and Async, and that's, yeah. That's been a big focus.</p><p><strong>Brian Vaughn:</strong>       If you have follow-up questions, maybe specifically about the unsafe stuff, I'll give you a chance to ask them because I'm kind of rambling.</p><p><strong>John Lindquist:</strong>     Can you talk about the difference between Sync and Async just a little bit more, just to expound on what Async means?</p><p><strong>Brian Vaughn:</strong>       Yeah. So when I say Sync and Async. Synchronized rendering is the way that reactors traditionally work, which is just that when you call, for example, ReactDOM.render, React will render your entire application tree and update, in this case the DOM synchronously before it returns control to the JavaScript that caught it. Asynchronous rendering is a new thing that we're playing with. And there's some really great talks about this from last year's React conferences. There were some talks by Tom and [Lynn 00:13:17] and others about what sorts of things Async will unlock. There was a recent talk that Dan gave, maybe three weeks ago that was a really cool compelling demo to of the types of things that Async can unlock.</p><p><strong>Brian Vaughn:</strong>       But in general, I think the observation is that, well it's a couple things. One of it is that React, sometimes it isn't the only JavaScript on the page. We [inaudible 00:13:38] all the way for React to operate better with other JavaScript that's running on the page, so that React isn't using up all of the frame budget. Then we also wanted a way for React to do a lot of work, but still remain responsive to user input, like mouse-click events and things like that that require immediate feedback, and this recognization that certain types of input, let's say a network request that returns a response are inherently less important than other types of input, such as like a user click or a keyboard event. So finding out a way that React could support and do this prioritization and scheduling in a smarter way, I think are all things that feed into Async.</p><p><strong>Brian Vaughn:</strong>       Async, in a nutshell just I guess means that when your React components render, they might not all render within the same frame or the same tic. If you have a really complex application in the future, your rendering might take place over several frames, and that's to enable the things that I mentioned previously. Then what comes with that, is that any parts of your code that were previously written with the assumption or the expectation that rendering is synchronous, we have to look at that and find ways that we can provide people different patterns for writing code that won't have that assumption, because that assumption would break with Async Rendering. Does that answer the question?</p><p><strong>John Lindquist:</strong>     Yeah, yeah. For sure. Are these changes for people whose big applications are built on 15 and migrating to 16 and beyond? What's their outlook as far as being able to update and switching to the new component life cycles? Is this going to be a lot of work on their end? Are there going to be guides coming forth? How can we help them out the best?</p><p><strong>Brian Vaughn:</strong>       Yeah, totally. So I will say again that Facebook has something like 50,000 React components, and when the React core team makes a backwards-breaking change that we're ... and there's fewer than 10 of us on the core team, and we're responsible for not breaking Facebook. We each own several thousand components essentially, so we definitely feel the pain of legacy code and I think that's, hopefully I say this to reassure the Open Source community that migration from Sync to Async will be gradual, and it will be incremental and we're going to follow the same pattern that we've followed for the last several years, which will gradually introduce deprecation warnings, and as long as you're addressing them in each release, then you'll be able to continue upgrading without any break.</p><p><strong>Brian Vaughn:</strong>       So what this means for Async specifically is that, a couple of weeks ago, I guess it's been about a month now. I released a blog post that had a bunch of patterns. So here's how things were done with sync components or sync rendering, and here's the suggested patterns that we suggest instead for Async. We also released, there's a repo called React-codemods. We released a codemod on that repo to rename the life cycles to use the unsafe alias. We'll continue doing things like this with each release. We'll definitely be there doing the release with people.</p><p><strong>Brian Vaughn:</strong>       We've also released some helper libraries. So there's a create subscription as a package that we released along with 16.3, which it's sort of a library to help manage ... I think there are a couple edge cases in Async that we're working to make better, tricky edge cases. And one of them is subscriptions. Create subscription is a library that wraps up the complexity and gives you a really simple interface that you can use instead if you want to subscribe to something and do it in a way that's safe with Async. We're going to be looking to do more things like that.</p><p><strong>Brian Vaughn:</strong>       Another one of them is something that we've been calling Suspense, and this is something that Dan demoed a couple of weeks ago at his conference talk. But this is something that we think will dramatically simplify the story around Async resource loading and things like that. Our goal is to make a really compelling use case both from the performance standpoint. Like hey, you'll get these good things performance, but also from a syntactic standpoint. Like look, once you can use Suspense, for example. It used to take this much code and now you can do it in this much smaller amount of code, and it'll perform better. That's a goal, and that's a gradual thing that we're going to be working towards over the next, a year. I'm not sure what the timeline will be exactly.</p><p><strong>Brian Vaughn:</strong>       But, yeah, I would encourage people to just stay calm and tell us your feedback and your concerns. I know several of us are watching Twitter, Reddit, Stack Overflow, and we're constantly responding to and asking questions and taking feedback and this all helps shape our release strategy. So, definitely keep talking to us and sharing your concerns and we'll try to incorporate all that feedback.</p><p><strong>John Lindquist:</strong>     Awesome. And thanks for being so kind to the community that way. You don't have to be, right? It's cool to see that your team cares so much. I just add, I think it's one of the biggest motivating factors for upgrading the latest release of something. It sounds like you're improving the developer experience, like you mentioned working with the asynchronous code will require less and it'll be easier to reason about and you catching errors, and that'll probably be easier now. It's not just ... sometimes if it's just a little bit faster, or if the package is a little bit smaller, it's like, \"Well, we can stick around on this version.\" But if it makes it easier to get your project done, it sounds like that's what's coming.</p><p><strong>Brian Vaughn:</strong>       Yeah, definitely. Yeah, we want to try to avoid fragmentation in the community. Ideally, everyone would always be using the latest release of React. That would simplify a lot of things for Open Source. [inaudible 00:19:28], but understandably, that's not something that can happen. But as much as possible, we would like to make that happen. So we do this through making releases. Deprecations are gradual, we always if we can provide codemods. If not, we provide clear dev warnings and recipes for how to updates thing, and then also as you say, sometimes the motivation of a little bit smaller or a little bit faster isn't enough. We want to make people excited, and we want them to want to update to use the new APIs because they're going to be easier to use and faster to write code. That's a big advantage of React in the first place, is that you should be able to write code and applications quickly. That's something that we're looking to do with features like Suspense.</p><p><strong>John Lindquist:</strong>     Yeah, React is a joy to use. I love building apps with it. Is there anything else you're kind of excited for, looking towards the future as far as React or its supporting libraries or Virtualized? Anything you're working on?</p><p><strong>Brian Vaughn:</strong>       Yeah, Virtualized is something I struggle with to find time with lately. Just finding time for that is something that I'll look forward to doing, but with React, Suspense is definitely the biggest short-term thing and just Async in general as we move forward with making that not an unstable, but a first-class thing that we support. Another thing that I can't talk much about because I haven't been very involved with it, but something that Dominic and Dan from the team have been working on a lot over the past several months, especially Dominic for a lot longer than that even, is work on creating an optimizing compiler for React components, and this is pretty cool. Once it's done, the idea is that this compiler will be able to read in React components and optimize them, which can include things like flattening them if there's a lot of nesting.</p><p><strong>Brian Vaughn:</strong>       We're doing other optimizations on how the JavaScript works using a Facebook technology called Prepack. And the goal for this is, or one of the goals for this project is that you'll be able to keep writing components in ways that I guess make sense to you ergonomically and such, and then we can run them through this compiler, and then they will perform better at run time. This is still early, early days. We're trying this on a couple of Facebook internal projects and finding out what works and what doesn't work and what we need to change, but that's a really exciting thing.</p><p><strong>Brian Vaughn:</strong>       In general, I think I'm really excited and interested to see what kinds of patterns just shake out of our work on Async and compiler in general. I think especially in regards to ways that we can make functional components more powerful so that people don't have to reach for class components to do things like [Stave 00:22:11] or things like get access to the life cycles. There's some fun brainstorming that's going on internally for ways that we might be able to add that stuff to functional components, and that would in turn help with Async and help with compilation efforts. So I think there's a lot of related stuff that's going on that hopefully will result in some even better APIs and stuff and future versions of React.</p><p><strong>John Lindquist:</strong>     Oh. Cool. I wrapped a function in a proxy the other day and gave it the context, like I managed the state of a pure component inside of a proxy. This feels very wrong, but it's really fun.</p><p><strong>Brian Vaughn:</strong>       That's the thing about JavaScript, that you can do a lot of things with it. [inaudible 00:22:49] and it's back. Yeah.</p><p><strong>John Lindquist:</strong>     Well, awesome. Thanks for much for your time, we're going to wrap up here. Do you have any closing inspirational words for anyone listening? Not to put you on the spot.</p><p><strong>Brian Vaughn:</strong>       Inspirational words. Well, maybe. I don't know. I would say thanks for having me. It's been fun, and I would say to anyone again, I think I already said this, but if you are an Open Source community and you're using React and you have ideas for improvements or suggestions or questions or complaints, talk to us, because I think we're all really accessible, on Twitter especially, but also in GitHub and stuff. We love getting ideas from the community to help the projects.</p><p><strong>John Lindquist:</strong>     Awesome. Great, thanks Brian.</p><p><strong>Brian Vaughn:</strong>       Yeah, thanks John. This has been fun.</p>",
    "slug": "brian-vaughn-react-core-team",
    "description": "<p>We are joined by Brian Vaughn. Brian is on Facebook's Core React Team. He also contributes to a lot of open source products in the javascript space.</p><p>While Brian went to college to study Graphic Design, he ended up transitioning into programming. During college, he did a lot of graphic design consulting work, as a way to pay his way through school. Eventually, he agreed to create a website for a client and found that programming was a much better fit.</p><p>Brian built react-virtualized during his time he spent at Treasure Data. The company is really into open source, and many of his team members had projects out there. When they were writing the console, they used Facebook's fixed data table.<br />However, it did not have the features that they wanted. So Brian volunteered and built what would be the first version of react-virtualized.</p><p>The exposure he got from sharing react-virtualized with the community is what landed him the job on the React Core Team. A developer's success tends to come from sharing the cool thing they built. Share your work everyone!</p><p>Brian talks about React's goals with 17. Dan Abramov and Dominique have been working on creating an optimizing compiler for react components. The idea is that the compiler can read your components and optimize them. You will be able to keep writing React components in ways that make sense to you, and it will compile them and optimize at runtime. The team is also working on making functional components more powerful, so you do not have to reach out to class methods. It will be interesting to see what will shake out of their work when using async and the compiler.</p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/3f6b7ef0/transcript\">\"Brian Vaughn, React Core Team\" Transcript</a></p><h3>Resources:</h3><ul><li><a href=\"https://github.com/bvaughn/react-virtualized\">react-virtualized</a></li><li><a href=\"https://prepack.io/\">Prepack</a></li></ul><h3>Brian Vaughn:</h3><ul><li><a href=\"http://www.briandavidvaughn.com/#/home\">Website</a></li><li><a href=\"https://twitter.com/brian_d_vaughn?lang=en\">Twitter</a></li><li><a href=\"https://github.com/bvaughn\">Github</a></li></ul><h3>John Lindquist</h3><ul><li><a href=\"https://twitter.com/johnlindquist?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor\">Twitter</a></li><li><a href=\"https://egghead.io/instructors/john-lindquist\">egghead.io</a></li><li><a href=\"https://github.com/johnlindquist\">Github</a></li><li><a href=\"https://johnlindquist.com/\">Website</a></li></ul>",
    "duration": 1414,
    "episode_number": 16,
    "contributors": [
      "John Lindquist"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/40fgv",
    "path": "/podcasts/brian-vaughn-react-core-team",
    "published_at": "June 4th, 2018",
    "url": "https://egghead.io/api/v1/podcasts/brian-vaughn-react-core-team",
    "edit_podcast_url": "https://egghead.io/podcasts/brian-vaughn-react-core-team/edit"
  },
  {
    "id": "podcasts-00000000000000000060",
    "title": "Evan You, creator of Vue.js",
    "summary": "John Lindquist interviews Evan You, the creator of Vue.js. They discuss what made Evan want to become a developer, how he landed his first job, why he created Vue, and finally proxies and why they're powerful.",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/3b612af5-eda9-4500-8c13-206de58cb60f/bc7d8862_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/3b612af5-eda9-4500-8c13-206de58cb60f/1534346381artwork.jpg",
    "simplecast_uid": "3b612af5-eda9-4500-8c13-206de58cb60f",
    "transcript": "<p><strong>John Lindquist:</strong>     Hi, I am joined today by Evan You. Evan, you wanna go ahead and say a couple words about yourself?</p><p><strong>Evan You:</strong>           Sure. Hi everyone, I am Evan You. I am the author of Vue.js, and I work on it full time.</p><p><strong>John Lindquist:</strong>     A million thank you's from me and everyone listening, because Vue is amazing.</p><p><strong>John Lindquist:</strong>     So just a couple questions to kinda get this chat started. What kind of made you decide to become a developer? When did you first start playing around with code?</p><p><strong>Evan You:</strong>           Well this is kind of interesting, cause I think I didn't really have the point of time where I said I want to become a developer. It kind of just happened over time. I didn't study computer science at school, my undergrad degree was actually in art and art history. Then, after graduating, I figured it was pretty hard to find a job with a art degree. [crosstalk 00:01:00] So I went to Parsons, I went to a program called Master of Sign Arts and Design Technology. Which it was a pretty cool program, it had mix of both designing, artistic stuff, and the technical side of things. Everyone was forced to learn coding, regardless of their background. And that was when I was when I started to seriously learn Java Script. I did take one or two computer science classes in college, but it was in Java and I hated it.</p><p><strong>John Lindquist:</strong>     Yes</p><p><strong>Evan You:</strong>           But then I started building these things. I was building prototypes for the things that I designed, and I found I really like Java Script and Action Script also I think Action Script 3 was Flash was still a thing when I was graduating from college.</p><p><strong>John Lindquist:</strong>     I was a part of that community as well.</p><p><strong>Evan You:</strong>           Cool, What I like about it I can build something and put it up on the Web and everyone can see it. Some of the other things that we use like processing or open frameworks, the thing is you have to sort of bundle, like build a thing, then you distribute it as a some special format, which the other side would have to install some special software, in able to be able to just do it.</p><p><strong>John Lindquist:</strong>     Right</p><p><strong>Evan You:</strong>           Right, but stuff on the web you can just put it up on a URL. Everybody can see it. Which was why I really liked it and I started basically investing more time into it. I think in the beginning it was Action Script. Action Script 3 was the first language that I first seriously tried to understand and learn. And then Google came up with all the Chrome experiments, which totally blew my mind. I was like I can do all these things in the browser with Java Script. So I just okay, I am going to learn JavaScript. And then at that time JavaScript was mostly a tool for me to express some of the designing ideas. I had, I designed something and I wanted to build it myself, so I learned HTML [inaudible 00:03:26] JavaScript in order to build a prototype. Right, so I only got, I guess more serious into it over time. After I started working we also built more things which are less prototype and more like real stuff. So I had to learn how to actually build real apps.</p><p><strong>John Lindquist:</strong>     Right</p><p><strong>Evan You:</strong>           It was kind of a progress, it didn't just happen overnight that I said I want to be a developer.</p><p><strong>John Lindquist:</strong>     Yeah, its funny you mentioned that. I remember in college learning Java as well. And I think they just gave us Notepad and didn't even ave the clips or anything to auto complete or help me out with it. It was just a chore getting though those exercises.</p><p><strong>Evan You:</strong>           Yeah</p><p><strong>John Lindquist:</strong>     But as soon as getting into Flash, or more creative things, I could have an idea and I could implement that idea creatively with the code. I was like I love this! Whereas I kind of Java was going to turn me a way from programming for a bit.</p><p><strong>Evan You:</strong>           Yep</p><p><strong>John Lindquist:</strong>     Yeah, I mean to create and build cool things is still why I do it. It's still why.</p><p><strong>Evan You:</strong>           Same here.</p><p><strong>John Lindquist:</strong>     Do you remember your first, what was your first job after learning programming.</p><p><strong>Evan You:</strong>           My first job was at Google Creative Labs. I think I started, after I thought I was pretty good at JavaScript, I started building a portfolio for myself. Mostly it was kind of like creative experiments using JavaScript. Like drawing some fancy stuff with Canvas. It was more along the lines of the type of portfolios you'd see from digital agencies. To show creatives, that kind of stuff. And somehow it got picked up by a recruiter at Google Creative Lab. Because Creative Lab was looking for this type of so called creative technologists who are able to have a good design sense and also able to build, sort of play along with new ideas and build prototypes and playful things really fast. So that was why I just got picked up by them. And I was like Yes! I received the email that like: Hey! This is Google Creative Labs. Do you want to come for an interview? I'm like, Hell yeah.</p><p><strong>John Lindquist:</strong>     What a cool story, that's, way to put your work out there. I mean that's, I tell people that all the time, just take creative fun things and put them online. And share it.</p><p><strong>Evan You:</strong>           Yeah</p><p><strong>John Lindquist:</strong>     I was looking on the way back machine and I looked at VJS.org to see the very first iteration of what it looked lik and went back to, I think it was February 2014. I think it was Vue.8 or something. Do you remember at that time what Vue was, and what your first app that you build with Vue was and what the feeling of starting the framework was like?</p><p><strong>Evan You:</strong>           Yeah, the early days I actually started working on Vue when I was still at Google Creative Labs, but back then it was first just a really rough experiment. The whole idea started with we were building these prototypes in a set and we had to build them really fast. In the beginning I hand wrote a lot of them. I didn't really want to use, jQuery, and since those prototypes only needed to work in Chrome anyway. I used the latest API like querySelector, classList, and I felt pretty good. I was using the platform. And, but as the thing got bigger, obviously we had to, the code just became less maintainable.</p><p><strong>Evan You:</strong>           So some of the projects we started using Angular, Angularr1 back then. And I like the declaritiveness of it. You can write the template and the framework figures out what to do for you. But Angular1 also had all these extra things that I just I hated Java so I also hated some of the concepts that came with Angular1. So I was like I want to have a lean package that gives me this reactive templating system with out all the extra burden. Extra API that I don't need.</p><p><strong>Evan You:</strong>           So that was the initial idea. And I also had, I wanted to experiment with object USING ES5 getters and setters to build this reactive API because Angular1 used security checking and it was like what if we can do this with fine property and use dependency tracking. So I played around with the idea on and off. It remained an experiment for 6 months before I originally released it. The initial release was February 2014. And that was the first public release. Even for the initial release I didn't really want to build a framework. It was explicitly labeled as a library. I was like this is only a vuelit library, hence the name Vue. I didn't even care about routing or build tools or anything like that. All of these things kind of came along partially because as I was using Vue to build stuff I found I needed all the extra pieces.</p><p><strong>John Lindquist:</strong>     Right.</p><p><strong>Evan You:</strong>           And also more people started using Vue and they started requesting things like that. Additional pieces of the framework really added on over time, one by one. I first worked on a router then we added a browser refine transform. Then someone added a webpack loader implementation. The initial webpack loader implementation was written by someone else and I took the idea over and made the official one. Then we had the mistake management tools, CLI, all those things. They came one by one over time. Eventually it evolved into something that's more like an actual framework today.</p><p><strong>John Lindquist:</strong>     Right. It has conferences and...</p><p><strong>Evan You:</strong>           Yeah. And parades.</p><p><strong>John Lindquist:</strong>     It's just a framework. Conferences and parades. I love it.</p><p><strong>Evan You:</strong>           Yeah.</p><p><strong>John Lindquist:</strong>     So during this whole journey what has kind of surprised you developing an open source framework. What has either delighted or frustrated, maybe?</p><p><strong>Evan You:</strong>           I think the most enjoyable part...something I still...people always ask me, \"When did Vue blow up? When did it become popular?\". To me there's really no such point of time where it just suddenly started being popular. I worked on it for over four years. During these four years, over time, it's like every time we see some growth it's compared to the previous stage. In 2016, I was like, holy crap! We are getting so many users where no longer...it's just like a random project. In 2017, I was like, oh wow! People are actually comparing Vue to Angular and React all the time now.</p><p><strong>John Lindquist:</strong>     In the same sentence...yeah.</p><p><strong>Evan You:</strong>           Right? Over a period of time we reached the next stage. Then the previous stages seemed sort of...it just kept growing and growing, and it's a very long process. To be honest, I never imagined it would grow into what it is today. I'm still pretty grateful because it's the users who actually pushed this thing all along. If we didn't get the initial group of early adopters, I probably wouldn't have worked on it for so long. Every time I was like...oh, there are so many people using this and I felt like I can't have this responsibility to keep this thing going and to make it better and that's what's really been driving it.</p><p><strong>John Lindquist:</strong>     Awesome! Yours is one of the rare success stories of starting with just you, not sponsored by a company or anything like that. Just starting with you, the community helps build it up and it takes off, slowly but surely, and here we are today. Congratulations on your success!</p><p><strong>Evan You:</strong>           Thanks.</p><p><strong>John Lindquist:</strong>     I've always seen Vue as an amazing... you have your conference talk and I think you've given them a few times... labeling it as a progressive framework where you can start with Vue as just a script you drop on a webpage and start building apps and you can bring in a router and you can bring in [inaudible 00:12:53]. It seems like more and more the single file component approach is kind of the blessed path or the...it's my preferred way of altering Vue apps. It seems like more and more that's the way we could and should write our Vue apps. Do you use single file components or Vue components written as single file components as a future browser feature so that they could still have that initial \"just drop a script into a page\" feel to it?</p><p><strong>Evan You:</strong>           Yeah. In fact, I've wanted to build this version of single file component compiler all along that is able to just load a single file component directly into the browser.</p><p><strong>John Lindquist:</strong>     Yeah.</p><p><strong>Evan You:</strong>           There were a few different models that's pretty close to that. Ractive is pretty close in that aspect and I believe early versions of Ractive also had this capability. The problem with this is before we have fully resolved HTTP2 with all the loading async chunks, the cascading request performance problems. This works really well for prototyping but when you deploy this... loading and compiling everything on the fly model to production, it's just a disaster.</p><p><strong>Evan You:</strong>           So at this point of time, pre-compiling is still kind of a necessity and making it too easy for people to just build things like that, I kind of worry that people will not be willing to actually use the pre-compiling approach because it takes more initial setup. So that's why we actually never did it. I still think it's great that you can prototype easily. That's why Vue still supports directly writing your templates in the browser, dropping a script tag and you can get your work in. I think there's still a lot of problems if you want to use a compile on the fly, sort of, approach directly in the browser today.</p><p><strong>Evan You:</strong>           Hopefully that can be solved at the platform level. There is, in fact, a spec that's being discussed called HTML modules. We know that the HTML imports is being dropped from the web component spec. Browser vendors don't want to do that. There has been discussion around a new spec called HTML modules, which looks very similar to what a single file component would look like. There will be some slight semantic differences but I'm not sure if it will even be implemented in the end. It's very close to what a single file component at the platform level would look like</p><p><strong>John Lindquist:</strong>     Right</p><p><strong>Evan You:</strong>           It's still lower level but we should be theoretically able to build something on top of it that gives you a feel that's very similar to what Vue single file components look like. In fact, Polymer is more or less kind of like that. I personally feel that a bunch of detail design position in Polymer is just kind of different from how Vue looks at how things should be done.</p><p><strong>John Lindquist:</strong>     Yep. That'll be interesting to see how that all plays out.</p><p><strong>Evan You:</strong>           Yeah.</p><p><strong>John Lindquist:</strong>     It seems like the efforts are there and the desire is always there but no one can agree on anything?</p><p><strong>Evan You:</strong>           Yeah. The difficult part is a feature like that is almost like going to the more opinionated aspect of things.</p><p><strong>John Lindquist:</strong>     Yeah.</p><p><strong>Evan You:</strong>           The reason the web platform has been...first there's so many parties of interest, people with different vendors...different companies...and it's really hard to reach a consensus so most of the time we only reach consensus on really low level stuff. Anything goes super opinionated about how developers should develop an app becomes super hard to land.</p><p><strong>John Lindquist:</strong>     Mm-hmm (affirmative).</p><p><strong>Evan You:</strong>           At the same time, that means we have the opportunity to experiment in user land. That's where frameworks like Vue get to fill the gaps. Another aspect of it is, I think the compilation step is also becoming more and more important. It provides all these opportunities for us to analyze the source file. Even cross analyze the source file. When you have the whole application, you have all the information together at the build stage, you can do a lot of smart things to make your application load faster which is really really hard to do if you load everything on the fly. In that aspect I still think the model of having a source format, having single file components as a source format and then pre-compiling it into...the cool thing is you don't have to compile it into a single JavaScript [inaudible 00:17:54] right? You can [inaudible 00:17:56] compile them into web components. You can compile them into whatever future format the platform supports...</p><p><strong>John Lindquist:</strong>     Right.</p><p><strong>Evan You:</strong>           ...for better performance. That's the cool part about it.</p><p><strong>John Lindquist:</strong>     Yeah. Kudos on the new Vue CLI version 3. I've been using it and it's working great.</p><p><strong>Evan You:</strong>           Thanks.</p><p><strong>John Lindquist:</strong>     It's just as easy to spin up a new app using the Vue CLI as it would be to create a new webpage, drop in the Vue script and then still trying to write code.</p><p><strong>Evan You:</strong>           Yeah. That's where we hope we can make it so....</p><p><strong>John Lindquist:</strong>     Yeah.</p><p><strong>Evan You:</strong>           The whole idea of having a sensible built tool configuration working out of the box is really important. We don't want to scare people away and we want to make sure Vue stays approachable. Even with all the heavy tooling behind the scenes.</p><p><strong>John Lindquist:</strong>     Right. Whoever came up with the idea of \"Would you like to save these presets?\" Or \"Save your selections for future...\", that person needs a raise. I don't know if that was you, or what.</p><p><strong>Evan You:</strong>           It was me.</p><p><strong>John Lindquist:</strong>     Okay. [inaudible 00:19:07]</p><p><strong>John Lindquist:</strong>     On the topic of browser features, proxies are relatively new to browsers and you've spoken openly about changing the Reactive system in Vue to using proxies. Can you kind of walk me through? I guess I personally understand proxies and I remember using them back in Action Script 3 and I have actually seen a lot of the Vue proxies and [inaudible 00:19:35]. Can you kind of walk me through what it is about them that made you want to make this change experimenting with it? Take me through that.</p><p><strong>Evan You:</strong>           A bit of background. The way Vue currently tracks reactivity or dependency changes is you give Vue a data object. Vue recursively walks the object in converting all the properties into ES5 getters and setters.</p><p><strong>John Lindquist:</strong>     Mm-hmm (affirmative)</p><p><strong>Evan You:</strong>           This has two limitations, right? We have a bunch of caveats in the current Vue version. For example, because the conversion has to happen in one go, once the conversion is done any newly added properties will not be tracked.</p><p><strong>John Lindquist:</strong>     Right.</p><p><strong>Evan You:</strong>           Unless you explicitly use Vue.set. But then you have to remember that. Also we have limitations on when you directly set the index of an array or you modify the length of an array, there are certain cases...these cases you can probably use brute force and make them work but it'll come at tremendous performance costs and it's just not worth it. When you keep these as a caveat that the developer has to remember from time to time. Proxy allows us to completely get rid of these caveats because Proxy traps can detect newly added properties. They can detect deleted properties. They can detect setting and indice on the array.</p><p><strong>Evan You:</strong>           All of the previous caveats that we have can be solved with proxies. The trap is more powerful than ES5 getters and setters. We don't have to convert a nest egg of data structure into all proxies in one go. We can convert them on demand instead of...</p><p><strong>John Lindquist:</strong>     Interesting.</p><p><strong>Evan You:</strong>           ...having to do it in one go. This allows us to essentially do less work upfront. This should technically and theoretically improve our loading performance for an app with a huge data structure up front because right now you have to convert the whole data structure into Reactive ones but with proxies you essentially only convert the property that you are actually using for your initial screen. The rest of the data structure will be converted as you access them when the app starts to do more work, it becomes interactive.</p><p><strong>John Lindquist:</strong>     Right.</p><p><strong>Evan You:</strong>           These are the two prime reasons where we see a proxy would help a lot. Over time I think Proxy is also one of the things that the browser might be able to optimize more, in my opinion.</p><p><strong>John Lindquist:</strong>     Yeah.</p><p><strong>Evan You:</strong>           Getters and setters is kind of like, I don't know, I can't really...I'm not entirely sure on this but I don't think that JavaScript engines have been trying to optimize getters and setters that much. All the new features in ES2015 are getting more attention in terms of optimization these days. So, that's also one of the considerations.</p><p><strong>John Lindquist:</strong>     Could you see the proxy, like right now data has to be a function that returns an object, could you see a proxy enabling data just to be an object? Is that...</p><p><strong>Evan You:</strong>           Not really. The necessity of having to be a function is, it allows you to both return fresh data and also return shared data. Because [inaudible 00:23:14] a function, you can also return something from outside of the function scope. That allows you to effectively share the same object between multiple instances of the component.</p><p><strong>John Lindquist:</strong>     Yeah.</p><p><strong>Evan You:</strong>           So, if you always declone then it's impossible to do that.</p><p><strong>John Lindquist:</strong>     Right. When I've played with proxies it's some of the weird things you can do, like if you proxy a function and then you can invoke the function but you can also say any time you try and get the instance of a function return it's something completely different. There's just some wild. And it would still be typed as a function?</p><p><strong>Evan You:</strong>           Mm-hmm (affirmative)</p><p><strong>John Lindquist:</strong>     There's just some wild things you can do with proxies that...</p><p><strong>Evan You:</strong>           Yeah. We actually already use proxy to an extent in the current Vue so you've probably run into the warning saying that a property is referenced [inaudible 00:24:05] rendered but it's not present on your instance?</p><p><strong>John Lindquist:</strong>     Okay, yeah.</p><p><strong>Evan You:</strong>           This is actually done using proxies. To do a render, all the expressions are actually evaluated on the render proxy which catches all the property access that does not have a [inaudible 00:24:22] property on the actual instance itself.</p><p><strong>John Lindquist:</strong>     Okay.</p><p><strong>Evan You:</strong>           It also opens up a lot of opportunities for better development experience.</p><p><strong>John Lindquist:</strong>     Yeah. It's funny to me when seeing proxies and just some of the crazy things that have been done. It's cool to see it being used for good rather than evil.</p><p><strong>Evan You:</strong>           Yeah. I think these new API's are really powerful for low level use cases especially for us library authors.</p><p><strong>John Lindquist:</strong>     Right.</p><p><strong>Evan You:</strong>           They're not necessarily the best thing to use for your application code.</p><p><strong>John Lindquist:</strong>     Right.</p><p><strong>Evan You:</strong>           But I think it's still good that we can leverage them inside the framework and it allows us to build more powerful framework.</p><p><strong>John Lindquist:</strong>     Yeah.</p><p><strong>Evan You:</strong>           ...and simplify the code that the developer actually has to write.</p><p><strong>John Lindquist:</strong>     Right. The developer experience for me as a developer stays the same. I'm still just [inaudible 00:25:15] equals hello and just what the proxy manage lever that set trap will do.</p><p><strong>Evan You:</strong>           Yeah.</p><p><strong>John Lindquist:</strong>     That's amazing. I just love the Vue development experience. As much as I love going crazy functional and all that, sometimes I just want to build an app.</p><p><strong>Evan You:</strong>           Yeah. That's right. Yeah. I think there's still a lot of areas we can do even better.</p><p><strong>John Lindquist:</strong>     Okay.</p><p><strong>Evan You:</strong>           We're gonna keep working on that.</p><p><strong>John Lindquist:</strong>     Awesome. I will keep following and keep doing it.</p><p><strong>John Lindquist:</strong>     Alright, so, just to kind of wrap up since we're kind of in today. If you could go back in time to where you were before you first started writing Vue, what sort of advice would you have for past Evan coming into today?</p><p><strong>Evan You:</strong>           Well, that'd be tough. I would probably, you know, I've refactored Vue over time. I've completely rewritten it two times.</p><p><strong>John Lindquist:</strong>     Yeah.</p><p><strong>Evan You:</strong>           So I have tons of advice I'd share with my past self.</p><p><strong>John Lindquist:</strong>     Right.</p><p><strong>Evan You:</strong>           Obviously. One thing I would probably tell myself is when I had just started working on 2.0 is, you probably you should just go TypeScript.</p><p><strong>John Lindquist:</strong>     Interesting. Okay.</p><p><strong>Evan You:</strong>           The thing with [inaudible 00:26:35] was it was easy to introduce to the code base back then, which was mostly JavaScript but it just never decided to become 1.0. Every minor [inaudible 00:26:46] there's just a bunch of things I had to fix in order just to upgrade. It was getting kind of tiring and TypeScript is also doing better in terms of IDE support because this code is so good with TypeScript.</p><p><strong>John Lindquist:</strong>     Yeah. If the company controls the language [inaudible 00:27:07] the experience always.</p><p><strong>Evan You:</strong>           Yeah.</p><p><strong>John Lindquist:</strong>     That's something we've seen with C-Sharp and Visual Studio. JetBrains has a language called Kotlin and they have [inaudible 00:27:17] seeing the same thing with TypeScript and VS code. This is amazing.</p><p><strong>Evan You:</strong>           Yeah.</p><p><strong>John Lindquist:</strong>     Thanks for joining us today. Do you have any closing words of inspiration for anyone listening?</p><p><strong>Evan You:</strong>           Not much. Just work on the things that you are interested in and good things will happen.</p><p><strong>John Lindquist:</strong>     Great. Thanks so much, Evan.</p>",
    "slug": "evan-you-creator-of-vue-js",
    "description": "<p>John Lindquist asks Evan You when exactly did he become a developer? Evan talks about how the whole thing was a gradual process with no definite \"I'm a developer now!\" moment. Evan had a degree in art and art history, but he was finding it hard to find work. So Evan went back to school and enrolled in a design and technology program where everyone was forced to learn to code, this is where he first learned Javascript and found great enjoyment in using it.</p><p>Google's Chrome experiments are what drove Evan to learn Javascript on a deeper level. Evan landed a job at Google Creative Labs after he created and put a portfolio of his prototypes out there once he thought himself to be good at programming. Google Creative Labs were looking for someone who could bring in design and build cool things quickly, they contacted Evan, and things sort of just fell together.</p><p>Google Creative Labs was where Evan first started his work on Vue. As the project grew, the team started to use Angular 1. it had too many features that they didn't need. Evan also didn't like some of the design decisions that Angular 1 had. So, Evan started to work on a templating library just for his personal use. After six months, in February 2014, he officially released it as Vue.js, putting it out there for others for others to use. Initially, it was just a templating library but as the community grew and more features got requested Vue got built into the framework that it is today, being compared on the same level as React and Angular.</p><p>Finally, Evan and John discuss Vue's future regarding single file components and proxies. Currently, there are still a lot of problems going with the compile on the fly approach. However, there is a spec being discussed called HTML Modules. Html Imports are getting dropped from the spec. There has been discussion around the HTML Modules spec that looks very similar to what single file components look like on the platform level.</p><p>Evan plans to refactor Vue to leverage proxies. Currently, when Vue receives data, it will walk through all of its properties and convert them to getter/setters, this has caveats such as not tracking newly added properties when it finishes. Proxies allows them to get rid of these caveats. Proxy traps can track these changes!</p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/f0b13ae5/transcript\">\"Evan You, creator of Vue.js\" Transcript</a></p><h3>Resources</h3><ul><li><a href=\"https://vuejs.org/\">Vue.js Website</a></li><li><a href=\"https://www.w3.org/TR/html-imports/\">HTML Import Spec</a></li><li><a href=\"https://vuejs.org/v2/guide/reactivity.html\">All About Reactivity in Vue</a></li><li><a href=\"https://experiments.withgoogle.com/chrome\">Google Chrome Experiments</a></li><li><a href=\"https://www.creativelab5.com/\">Google Creative Labs Five Program</a></li></ul><h3>Evan You</h3><ul><li><a href=\"https://github.com/yyx990803\">Github</a></li><li><a href=\"http://evanyou.me/\">Website</a></li><li><a href=\"https://medium.com/@youyuxi\">Blog</a></li><li><a href=\"https://www.linkedin.com/in/evanyou\">LinkedIn</a></li><li><a href=\"https://twitter.com/youyuxi\">Twitter</a></li><li><a href=\"https://www.patreon.com/evanyou\">Patreon</a></li></ul><h3>John Lindquist</h3><ul><li><a href=\"https://twitter.com/johnlindquist?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor\">Twitter</a></li><li><a href=\"https://egghead.io/instructors/john-lindquist\">egghead.io</a></li><li><a href=\"https://github.com/johnlindquist\">Github</a></li><li><a href=\"https://johnlindquist.com/\">Website</a></li></ul>",
    "duration": 1675,
    "episode_number": 15,
    "contributors": [
      "John Lindquist"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/1ada3",
    "path": "/podcasts/evan-you-creator-of-vue-js",
    "published_at": "May 29th, 2018",
    "url": "https://egghead.io/api/v1/podcasts/evan-you-creator-of-vue-js",
    "edit_podcast_url": "https://egghead.io/podcasts/evan-you-creator-of-vue-js/edit"
  },
  {
    "id": "podcasts-00000000000000000059",
    "title": "Iheanyi Ekechukwu on education, programming, and managing side projects",
    "summary": "Today Joel catches up with Iheanyi Ekechukwu. Iheanyi is a Product Engineer currently working at DigitalOcean. He previously worked at IBM on Watson. They also talk about Iheanyi's education, stack, and side projects",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/d390442a-8989-47a9-9f2e-b84cdbbf99e0/d4b7fdd6_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/d390442a-8989-47a9-9f2e-b84cdbbf99e0/1534346392artwork.jpg",
    "simplecast_uid": "d390442a-8989-47a9-9f2e-b84cdbbf99e0",
    "transcript": "<p><strong>Joel Hooks:</strong>         Hey, Iheanyi, What's up?</p><p><strong>Iheanyi Ekechukwu:</strong>         Hey, Joel. How's it going? Long time no talk.</p><p><strong>Joel Hooks:</strong>         Yeah, it has been a while.</p><p><strong>Joel Hooks:</strong>         So, we do these podcasts 'cause I want to catch up with people to see what they're up to. And part of that's researching backgrounds right, like we go through it. Usually we're just hanging out or whatever, I'm not researching you, but when you have you on podcast we do that and one thing I notice that's consistent through your life as this ... You work a lot, man, you work hard and you always go the extra mile and you always got something cooking and something extra cooking. You went to Notre Dame, and got two degrees, not a major and a minor but you did graphic design and computer science, which to me was like, \"Wow, that's a lot of work.\" How was that experience to go back to your education, doing two degrees at the same time?</p><p><strong>Iheanyi Ekechukwu:</strong>         Yeah, so, it's kind of an interesting story behind that. Actually, I didn't start off as a computer science major whenever I first got to Notre Dame, I actually was a computer engineering major. And then I took the first electrical engineering class and after staying up until two AM doing the first homework assignment for electrical engineering, I'm like, \"Yeah, this aint for me. I like hardware, but not this much.\" So I switched up to CS and I was taking ... I dropped my EE class, I was still taking my CS classes and I realized through various projects and stuff like that that a lot of these user interfaces were looking pretty subpar. Not only my own but just in general computer scientists or programmers don't necessarily have focus on aesthetics or usability. So, there's a special program at Notre Dame called the Reilly Program that I entered and I chose design because just goes hand in hand with computer science or just building applications in general. I enjoyed doing some front end stuff, like building out websites and such, and I just felt like design would be really helpful.</p><p><strong>Iheanyi Ekechukwu:</strong>         And the way the Reilly Program works is ... If you get accepted into the Reilly Honors program, you can do ... You can select any ... You can do two degrees. One from the College of Engineering, which the computer science program at Notre Dame is in the College of Engineering, and then you can get any liberal arts or arts and letters degree. So I did computer science and graphic design, I know some people that have done computer science and Japanese. A lot of mechanical engineers do mechanical engineering and economics for supply chain sort of things. So it's a really unique program and experience and ... It was kind of rough though, because I wanted to do it in four and a half years rather than five because I didn't wanna stay in Indiana for one more winter and so I was overloading on credits.</p><p><strong>Iheanyi Ekechukwu:</strong>         So, taking 21, 22 credit hours during multiple semesters was not that fun but [crosstalk 00:02:46]</p><p><strong>Joel Hooks:</strong>         Yeah, and wasn't like you were just doing the academics either. You had a whole slew of extra curricular activities and what not going on.</p><p><strong>Iheanyi Ekechukwu:</strong>         Yeah, yeah. Time management is the name of the game, though. That's the thing, there's not enough hours in a day, but if you have a routine and you stick to it, it makes it really manageable and rather than procrastinating, it was a matter of getting ahead and staying ahead of your work load was ... Really made it way more manageable and less stressful.</p><p><strong>Joel Hooks:</strong>         Probably helped you for keeping the hustle going after college too, I'd have to imagine.</p><p><strong>Iheanyi Ekechukwu:</strong>         Yeah, kind of. I will say that my time management skills have probably deteriorated since leaving college, just because on a given day to day basis, there's so much entropy and nothing is a set routine like it is during college that-</p><p><strong>Joel Hooks:</strong>         Right, chaos.</p><p><strong>Iheanyi Ekechukwu:</strong>         Yeah, it's a lot of chaos. Especially living in New York City, I have yet to fall into a routine here. I've been living here for two years.</p><p><strong>Joel Hooks:</strong>         It's very distracting up there.</p><p><strong>Iheanyi Ekechukwu:</strong>         Yeah. Yeah. Lots of going on. Can't even decide what to do because there's to many things to chose from.</p><p><strong>Joel Hooks:</strong>         Yeah, it's intense. It's kind of cool. I always wished ... Nobody ever told me about New York City when I was a youngster, like in the movies and stuff. But then I was like, \"Yeah ... \" Later I was like, \"Man, I totally live here,\" but we got five kids so New York isn't very real.</p><p><strong>Iheanyi Ekechukwu:</strong>         Yeah, I feel that. Yeah, I didn't even know about New York City like that either. Whenever I was working at my first job, I visited New York on business because we had headquarters here and just landing in the airport and taking in the energy I was like, \"Wow, I have to live here at some point in my life.\" And might as well get it out of the way whenever you're in your 20s and before you get married and have kids. So, here I am.</p><p><strong>Joel Hooks:</strong>         Yeah, the dual degrees thing, that sounds interesting to me and almost like it should be the default because I think one area of focus doesn't really give people, all the time, a very well rounded education, in terms of finding a job and stuff.</p><p><strong>Iheanyi Ekechukwu:</strong>         Yeah.</p><p><strong>Joel Hooks:</strong>         The cliché is the programmer you are. This looks like a programmer made it and it's some sort of [crosstalk 00:04:44]</p><p><strong>Iheanyi Ekechukwu:</strong>         Yep. Add a button for every single feature.</p><p><strong>Joel Hooks:</strong>         Every property ever is just sitting on the page in a kind of unstyled mess.</p><p><strong>Iheanyi Ekechukwu:</strong>         Yeah, and it's interesting that you mention the programmer you are, because I'm sure you've noticed, a common conversation on Twitter is like, \"Oh, should designers code?\" But, I always wanna say the question we should be asking more is, shouldn't developers design. We're designing for these platforms and everything or we're developing these mobile applications, these web applications with a very engaging user experience being at the forefront of it, and I think it would help developers more to study up or at least read up more on design concepts, especially when it comes to basic fundamentals like [inaudible 00:05:31] maybe, grids, typography, et cetera.</p><p><strong>Joel Hooks:</strong>         Yeah, I went to art school too, that's my background. I don't have a computer science degree, I never studied that formally and self taught but time and time again just the color, composition, typography, all that stuff that's ... I mean like you said, that keeps coming back, and it's so useful. And not only is it ... I don't do design, it's like giving birth to me, I'm not very great at design, but [crosstalk 00:05:58] being able to communicate with designers has been such a big help because I can talk about it and I can ... I know how to critique and have a conversation which is ...</p><p><strong>Iheanyi Ekechukwu:</strong>         Exactly. Yeah, that's exactly where I think it's been most beneficial at my career. I've never worked professional as a designer, I moved ... I gravitated towards the software engineering side of things, just because I love programming and I love building things. But where it really helped, like where I was working as a front end engineer or just doing front end development, I'd be able to talk with designers and like you said, articulate why I think a certain UX pattern or something visual is not successful or how it could be stronger in a well mannered way and speak their language to offer feedback and suggestions and how we can tweak it. Or just tweak it and communicate why I made those changes and they'd be like, \"Oh, yeah, that makes sense to me.\" So, it's been priceless in that regard.</p><p><strong>Joel Hooks:</strong>         Yeah. So, I noticed a lot of people that have that kind of background, and there's quite a few in the industry, especially around front end development. People that do front end development, a lot of times there is going to be more crossover. Somebody that's strictly a database or strictly works on servers, they don't necessarily have to speak that language but I think crossing over is great for anybody.</p><p><strong>Iheanyi Ekechukwu:</strong>         Yeah.</p><p><strong>Joel Hooks:</strong>         But you primarily did front end development for the first part of your career. How long have you been out of school, anyway. How long has that been?</p><p><strong>Iheanyi Ekechukwu:</strong>         Oh, man. It's wild, this year would be fourth year or-</p><p><strong>Joel Hooks:</strong>         Fourth year.</p><p><strong>Iheanyi Ekechukwu:</strong>         Yeah, fourth year in December.</p><p><strong>Joel Hooks:</strong>         And then you went to ... Did you go to IBM right after school or was there a gap?</p><p><strong>Iheanyi Ekechukwu:</strong>         Yep. Yeah, yeah. I chilled at home for three months before moving in Texas and moved to Texas and worked at IBM for a year before peacing out.</p><p><strong>Joel Hooks:</strong>         What were you working on there?</p><p><strong>Iheanyi Ekechukwu:</strong>         So I was in Watson, I worked on our Chef Watson application, doing some front end work there. A little bit of backend work there as well and then there was a second project that I worked on that I don't know if it ever launched, it was a news platform powered by Watson and that's where, actually .... Funny enough, that was ... That project was my first time building something ... Something substantial at least, with React, and that's where I got really into React development or whenever I first used it.</p><p><strong>Joel Hooks:</strong>         When did you get into Ember? Because for a long time you were a pretty big advocate of using Ember.</p><p><strong>Iheanyi Ekechukwu:</strong>         Oh, I got into Ember in college, actually.</p><p><strong>Joel Hooks:</strong>         Oh, cool.</p><p><strong>Iheanyi Ekechukwu:</strong>         Yeah. So I took an interaction design class in college in the School of Design and ii had used Ember for ... I actually learned Rails and Ember for my interaction design course because I was ... We had a project that was redesign a user interface of your choice that you think is lacking or subpar. And the one UI that always constantly, constantly, constantly frustrated me, from school, was the class registration or the class search interface. So, I built this three column UI that I could've probably done in vanilla Rails but it would have been disgusting handling all of that state with jQuery, so. React wasn't really poppin then. Backbone was a thing but I didn't feel like building my own framework or building all the pieces together to build it.</p><p><strong>Iheanyi Ekechukwu:</strong>         Actually, I'd built the first prototype of it with VJS, it was like 0.10 back then, didn't have a router, didn't have UX, didn't have UCLI, it was really bare bones and I had done a manual routing system for it, and it was nice but I switched over to Ember because I found it by just doing research and I was building the backend in rails and it was just a match made in heaven.[inaudible 00:09:47] used to be a core contributor to Rails and helped ... Helps maintain and build on top of Ember. So I did an Ember tutorial, and I rewrote the entire project using Ember and I was just able to iterate really quickly on it because Ember was just pretty straight forward to me with using it.</p><p><strong>Joel Hooks:</strong>         Yeah, I mean it seems like a good kit and it's been around for a long time, it's fully stable but it has this tiny market share and I always try to figure out why. Why does Ember not get more recognition or playtime than these other frameworks. What do you think?</p><p><strong>Iheanyi Ekechukwu:</strong>         Yeah, that's a good question. I've thought about it more recently because even now a days, we use it even at my current company, DigitalOcean, but I think one of the few things with Ember is ... Or why it doesn't have more market share, is a couple reasons, or at least back in the day if you had asked me the same question, I would've said, probably, you have Google and you have Facebook for Angular and React, respectively, and their backing but I don't even know if that's the case anymore because you have VJS which, even though Evan, like you, the creator, was at Google's creative lab 5, it doesn't have any major sponsor behind it. But I think Ember didn't pick up as much market share or popularity primarily because it's a little bit hefty. Well not hefty in a sense, but rather it's two things. It's really opinionated and some people don't like opinionation.</p><p><strong>Iheanyi Ekechukwu:</strong>         I personally do because ... Well, most of the time I personally like opinionation, especially when collaborating with other people because it takes away the amount of thinking you have to do on structuring things but I think that can also be a turn off for some people. And additionally, not everybody wants to build something that needs a router with it. But I do ... Or that ships with a router, perhaps. React was very lean and very straightforward but I do think that there are companies out there that use Ember and the ones that do use it are really productive with it. LinkedIn has thrown their entire weight behind it. I'm pretty sure Square uses it on their web platform. Who else, let's see. Square, Twitch used to be an Ember shop but I think they rewrote their front end in React. We were pretty good with [inaudible 00:12:11] and it's just been helpful.</p><p><strong>Iheanyi Ekechukwu:</strong>         And I think that opinionation really comes into play whenever your collaborating with people because you have a set way or organizing your project, whereas with React you can just do whatever you want or React, Angular, View, structure is up to the user, right. But Ember is kind of ... There's like one right way ... Not one right way but there's a very opinionated way of doing these things.</p><p><strong>Joel Hooks:</strong>         [crosstalk 00:12:37] Rails approach, right. Where we-</p><p><strong>Iheanyi Ekechukwu:</strong>         Exactly.</p><p><strong>Joel Hooks:</strong>         We take a lot of the opinions out of it so we can quit talking about this stuff and just do it the Rails way or the Ember way.</p><p><strong>Iheanyi Ekechukwu:</strong>         Exactly. Convention of a configuration.</p><p><strong>Joel Hooks:</strong>         Yeah, I kinda go back to the idea of major label versus indie where, you know, the higher A-team of a dozen [inaudible 00:12:57] is not something you can do if you don't have major corporate backing and that's been apparent since the start of it. [crosstalk 00:13:05] and I really think people should check it out and add it to their comparison list to find out what's right for you, right. Maybe those opinions, after you spend a little bit of time on them, maybe they make more sense and they actually work out.</p><p><strong>Iheanyi Ekechukwu:</strong>         Yeah, exactly. And I do know that, for the most part, I think that a lot of people that do use Ember, a lot of these companies or even dev shops that do build out products using Ember, a lot of them ... They may have some critiques about the framework but a lot of them do enjoy using the framework itself and having great things to say about it. I do as well. I think it's a great framework to use and even ... They have such a focus on making the whole developer experience straight forward and friendly and even upgrading an old Ember app. I had a client where I upgraded their Ember app from ... It was something really old, like 1.9, to 2.5 and even upgrading it was really painless. It was impressive how stable it was and how little friction there was to get it up to the latest and greatest version. I think we'll see the same thing from Ember two to three, but then I think we all remember Angular, going from Angular one to Angular two, and the whole fiasco that went around with that.</p><p><strong>Iheanyi Ekechukwu:</strong>         But I think that the Ember team really wants to have that stability without stagnation, as I think the saying goes, with their framework.</p><p><strong>Joel Hooks:</strong>         I mean it's been my experience with Rails, too. That crossover, it's so evident, right. [inaudible 00:14:34] was involved and he was involved with both and ... Because you know, I still use gems that haven't been updated in a dozen years, for rails. And having that stability, it's ... Yeah, you're not solving as many puzzles, which is fun. If you're gonna do a React app, you're really solving puzzles and that can be fun. But sometimes you just wanna get in there and make something. That's how egghead was built. I took a ... I did a Rails tutorial and the next week I had a subscription site up and running and was taking subscriptions. And that is awesome.</p><p><strong>Iheanyi Ekechukwu:</strong>         Yeah, that's so dope, yeah. I used Vic Ramon's Ember tutorial and I was like ... It was actually Ember plus Rails, so it was perfect. And I just did that in an afternoon, went through it, I'm like, \"Wow, this really makes sense.\" And I just rewrote my interaction design project using it in two hours. And I was like, \"Wow, this framework's actually really dope.\" And I used it for another data science ... Er, my bad, data mining final project with Django and just seeing how it played well together with all of these other backend technologies was really cool as well.</p><p><strong>Joel Hooks:</strong>         Yeah, yeah, that's cool. So you kind of shifted though. You switched jobs, you're in Austin, you moved to New York and started work at DigitalOcean and they kinda shifted your focus a little bit.</p><p><strong>Iheanyi Ekechukwu:</strong>         Yeah, yeah. It was weird. I was ... I spent my first ten months, eight to ten months at DO doing front end work. But now, for the last almost year and a half now, I guess it is, I've been doing backend work, actually.</p><p><strong>Joel Hooks:</strong>         Yeah. What are you using?</p><p><strong>Iheanyi Ekechukwu:</strong>         Shoot. On a given day, let's see, I write a lot in Go. Pretty much primarily Go. There's some Rail services that we have at DO like ... For our cloud API and our API gateway but I mostly just write Go on a day to day basis.</p><p><strong>Joel Hooks:</strong>         Did they start as a Rails app?</p><p><strong>Iheanyi Ekechukwu:</strong>         I think API and cloud start off as a Rails app from the get go. Actually, I think at the beginning or the inception the core experience was a Rails app but we moved a few years ago, or at least before I joined, we started introducing Go and building out new services in Go and rewriting some older services in Go as well.</p><p><strong>Joel Hooks:</strong>         So how's that ... Writing Go compared to writing JavaScript, how's that experience been for you?</p><p><strong>Iheanyi Ekechukwu:</strong>         To be honest, it's been pretty good. I'm not gonna rag on JavaScript but something I'm realizing, and this goes from all of these dynamic languages, right. I haven't had to deal with the statically typed language since I did ... Since I was writing C++ in college and back whenever I was building java ... My bad, android apps Java. But with those I wasn't really doing backend work so I didn't really get to see the benefit of strong typing. But I dabbled with both Python ... I've used Rails, I've used Django, I've built some Flask applications and I did some Node JS work while I was at IBM. Static typing is just so nice to have. Something I'm realizing with both Rails and just all these other dynamic languages is that you get scared to refactor things if you don't have test coverage to make sure you didn't break things or make sure you didn't break ... Make sure there's no regressions, right. But I've been doing a lot of things ... With statically typed languages it's just been on point.</p><p><strong>Iheanyi Ekechukwu:</strong>         I can ... With Go, I can just refactor things and sure my code won't compile and ... Meaning that something is broken but it helps reduce those chances of run time errors and it's just been a pleasure to work with and it's kind of hard going back to doing front end or writing JavaScript or ... Well, front end JavaScript not so much because I don't get burned nearly as much as I do whenever I do backend work. But going back to doing just backend work in other languages like Ruby and Python has been kind of weird with the lack of types because I gotta write more tests to make sure things work as expected.</p><p><strong>Joel Hooks:</strong>         Yeah, you get spoiled, right?</p><p><strong>Iheanyi Ekechukwu:</strong>         Yeah, for real.</p><p><strong>Joel Hooks:</strong>         Yeah I think I've done a lot of training and teaching people the basics of JavaScript and frameworks and the number one killer for anybody trying to learn it is typos. It's constantly typos and that's something that a nice, complied, static line would ... but you just don't get that same experience.</p><p><strong>Iheanyi Ekechukwu:</strong>         Yeah, and I guess that's the beauty of ... Typescript is getting there, but even then it's not all the way there, but then you do have these other languages that are popping up, like Elm's gaining traction, right, in some niche regard but it's just a nice thing to have. Types are a really nice sanity check.</p><p><strong>Joel Hooks:</strong>         Yeah, I agree with that. Yeah, so, Go is on my list, I haven't ever touched it, and could you describe what's it's used ... What's the use case in general for Go, why would somebody use it to begin with?</p><p><strong>Iheanyi Ekechukwu:</strong>         I think go has a lot of benefits right. So I can talk about it from ... I can talk about it from deep language internals or language [inaudible 00:19:30] perspective and then from a broader engineering organization or just even software engineering.</p><p><strong>Joel Hooks:</strong>         To me, what type of project does it make sense where you go, \"Oh, we should be using Go for this for sure, it's the one we should be using.\" It's kind of a systems programing language right, close to the [inaudible 00:19:47].</p><p><strong>Iheanyi Ekechukwu:</strong>         Yeah. Yeah, yeah. But we use it for building out all of our services that our API gateways or most of the services that the API gateway talks to. But it really is good for building things like these small, self contained services, it's a lot of nice features within it. And using an RPC framework like GRPC with Go, for example, is really great and just building up these small self contain services has been just that simple while using Go, whereas I don't think that same sport of simplicity would be there or readily apparent with something like Node JS, for example.</p><p><strong>Joel Hooks:</strong>         Yeah, so you're building out like microservices, for a lack of a better word, right?</p><p><strong>Iheanyi Ekechukwu:</strong>         Yep.</p><p><strong>Joel Hooks:</strong>         Building small contained services using Go. What's GRPC, I don't think I've heard that. I know it's Remote Procedure Call but what's GRPC?</p><p><strong>Iheanyi Ekechukwu:</strong>         So basically, it's an RPC framework invented by Google. It's open sourced, it's based off a tool they had internally, I can't remember the name of it off the top of my head, but yeah it's an RPC framework. They use protocol buffers, which is ... Or that extend protocol buffers to define these RPC methods and it's really good for creating various services that talk to one another because you can write ... You can define the structure of the service, like it's methods, their inputs, their outputs, in the protocol buffer file, right. And you can compile it and the beauty of proto buffs is that you can write the proto buff out once and it compiles to multiple languages. So you can compile it to Go, C++, Java, Ruby, Python, Closure, did I say JavaScript, Node JS, yeah it's pretty sick.</p><p><strong>Joel Hooks:</strong>         So is a protocol buffer like a contract then? You can build this contract that's protocol buffer and then distribute it to different systems. It can use that to communicate, is that ...</p><p><strong>Iheanyi Ekechukwu:</strong>         Exactly. It generates ... You implement the server and it also generates a client library that you can then import in other programs like if you had a server for, I don't know, in the context of egghead, like the video streaming service or something, and you had a service like that, it had it's own database. Cool. You can have an RPC method that's like, \"Oh, get course video.\" And you basically just say get course videos for user, you basically define a request that takes it as an input the user ID, returns a list of videos that may have an URL and just implement that in the server, the server will just call the database, serialize that into the proto buff and return it. But then ... And from your Rails app, your Rails app could then consume that GRPC Ruby client and call that method that that method that could be in the Go server ... My bad, talking to a Go server, right. And return that and call it, get the response back, and return it to your front end or render it, whatever you need to do with it.</p><p><strong>Iheanyi Ekechukwu:</strong>         So it's kind of like self contained int hat way and you can scale them up independently based on what's getting traffic.</p><p><strong>Joel Hooks:</strong>         Yeah, that sounds pretty nice.</p><p><strong>Iheanyi Ekechukwu:</strong>         Yeah.</p><p><strong>Joel Hooks:</strong>         So, getting off the programming languages for a second. I wanna talk about your projects because like I said, there's just three I'd write, where [inaudible 00:22:57] is always doing something, you always got something going on, it's never just one thing and you got some side projects that you work on. And one of them I saw was interfacelovers.com and can you tell us what interfacelovers.com is.</p><p><strong>Iheanyi Ekechukwu:</strong>         Yeah. Interface lovers. So ii built this with two people, I built this with two people last year. It's an online ... I built it with Timothy Achumba, he's a designer at Facebook based out of London and William Channer, who runs Panda Studio. You might know him from the Panda Chrome Extension and Panda jobs, shouts out to William and Tim, I see you. It's an online digital magazine where we interview various product designers and creatives in the industry or ... Primarily in the tech industry and yeah, it's a fun project. Will approached me and Tim saying, \"Yo, let's build this.\" And I was like, \"Heck yeah, let's do it.\"</p><p><strong>Joel Hooks:</strong>         Yeah. It looks like you got a-</p><p><strong>Iheanyi Ekechukwu:</strong>         It was just a blast to build.</p><p><strong>Joel Hooks:</strong>         Looks like you got a big stack too. You've got more than a couple interviews and I read some of them and they're pretty interesting. I love to see how people work and what they think and they're job and describing that stuff is pretty great.</p><p><strong>Iheanyi Ekechukwu:</strong>         Timothy is an amazing designer, and I had ... I was just honored to work with him and even collaborating with Will, me and him have always been trying to collaborate for the last two years and finally made it happen. But Tim's just amazing and it was just an amazing experience building it and I was writing PHP, and I haven't written PHP since undergrad for research but it wasn't that bad, it was fun. Using Kirby was a really dope content management system.</p><p><strong>Joel Hooks:</strong>         Yeah, that's good.</p><p><strong>Iheanyi Ekechukwu:</strong>         It was on point.</p><p><strong>Joel Hooks:</strong>         Yeah, PHP has made some strides and I always think it gets a little ragged on like [inaudible 00:24:33] and there's other tools and the language itself has evolved over the years to not just be a WordPress plug in language.</p><p><strong>Iheanyi Ekechukwu:</strong>         Yep. Yep. You've got Hack or HHVM and all that stuff. I think we can thank Facebook in a sense as well for kind of pushing it forward because they kind of have to because their entire infrastructure pretty much depends on it.</p><p><strong>Joel Hooks:</strong>         Yep. So, one of the cool thing si saw on interface lovers was this idea that the people that get interviewed or designers in general create SoundCloud mixes or ... No, they were on Spotify. Spotify mixes.</p><p><strong>Iheanyi Ekechukwu:</strong>         Yeah, we have both actually, yep.</p><p><strong>Joel Hooks:</strong>         Yeah, so where is the idea of that coming from?</p><p><strong>Iheanyi Ekechukwu:</strong>         I think that was Will's idea, actually. So Will ... This entire project was conceived by Will and it used to be a Medium blog but then he wanted to give it it's own dedicated site because it's just ... He wants to add more features onto it that Medium didn't support and so these designer mixes were pretty cool because we know we're all ... Whenever we're all working ... Or not all of us, some people like to work in silence, but generally people like to listen to music while they're working, especially creatives. I know me, programming, I like listening to instrumentals. So having that playlist, it'd be cool to ask them, \"Oh, what are you bumping or what are you playing while you're designing,\" you know. And I like that idea as well. It was a nice touch to it and it seems like it was pretty well received, people like listening to it on Spotify.</p><p><strong>Joel Hooks:</strong>         Yeah, I was like, I kinda wanna steal that and have our instructors make mixes. They were down for it. I just think it's neat, I love listening to what somebody else is interested in, discovering new music and that's just such a cool way to do it. I respect this persons work and now I get to also see what they like to listen to, and it's pretty cool.</p><p><strong>Iheanyi Ekechukwu:</strong>         Yeah and music tells you a lot about, not somebody's personality but just another ... It's kind of a cool thing to know about somebody, right. You're learning more about a person through their music taste.</p><p><strong>Joel Hooks:</strong>         Yeah, it's only my indicator of whether we're probably going to be friends or not, I'll admit that.</p><p><strong>Iheanyi Ekechukwu:</strong>         Yeah, I mean hey, makes sense though. A lot of ... Me and my friends have a lot of similar music tastes, it is what it is.</p><p><strong>Joel Hooks:</strong>         So you're also working on-</p><p><strong>Iheanyi Ekechukwu:</strong>         Can't be like-</p><p><strong>Joel Hooks:</strong>         Go ahead.</p><p><strong>Iheanyi Ekechukwu:</strong>         Sorry. I was gonna say, you cant be driving around with your friends and passing by the aux cord and you hate what they're playing, right.</p><p><strong>Joel Hooks:</strong>         Yeah, right, some Katy Perry. No offense to Katy Perry fans, that's your business but you know.</p><p><strong>Iheanyi Ekechukwu:</strong>         Yeah. Aint my cup of tea.</p><p><strong>Joel Hooks:</strong>         So you're also ... So Seeker is what I've been talking to lately, which you wanna explain what that is?</p><p><strong>Iheanyi Ekechukwu:</strong>         Yeah, it's funny because I haven't really gotten out into the limelight with this yet but.</p><p><strong>Joel Hooks:</strong>         Oh if you don't wanna talk about it-</p><p><strong>Iheanyi Ekechukwu:</strong>         It's cool to talk about it. Oh, no dude, it's fine, it's fine. Yeah, I need to overcome this fear of keeping things in secret 'cause it's not gonna help nobody. Seeker, right. So, another component of interface lovers is that we have a job board section and I figured using Panda jobs for that was cool and Seeker was just born from that experience of building that job board into interface lovers. So basically, Seeker is a way for people to ... That run content sites, or various content sites or even other things like opensource, right. Just another way to monetize your content because we have a job board on Interface Lovers because we know various designers will be coming and reading our interviews and we have a lot of jobs for design or even development on our site. So, yeah, Seeker is like the same type of job board. It's a way to ... You sign up, you connect your Stripe account, you set your price and your duration for your jobs and you have a link that companies can go to and start submitting job postings to your website.</p><p><strong>Iheanyi Ekechukwu:</strong>         And another beauty ... The beauty of it is that they can also ... You get paid for it, it's cool, there's an API for it so if you want to pool your jobs into Egghead or something like that, for example, you can just call Seekers API and get the job postings and just rent via JavaScript and just [inaudible 00:28:18] into your website. So yeah, it's been working on that for awhile. I should've launched along time ago but I'm a perfectionist and it's a blessing and a curse at the same time.</p><p><strong>Joel Hooks:</strong>         Gotta launch man, gotta get it out there.</p><p><strong>Iheanyi Ekechukwu:</strong>         I know, I know. Finishing touches.</p><p><strong>Joel Hooks:</strong>         It'll be ready once it's ready, right. So what are you using to build Seeker?</p><p><strong>Iheanyi Ekechukwu:</strong>         It's actually interesting, right. The stack I'm using for this is View JS in the front end, with Django in the backend, with [inaudible 00:28:45] Database.</p><p><strong>Joel Hooks:</strong>         How's that been like, using View.</p><p><strong>Iheanyi Ekechukwu:</strong>         You know, like I mentioned earlier, I used View way, way, way, way, way back in the day. It's come a long way but I like how it has a CLI for getting up and started easily. View X, to me, is way simpler than Redux, it's a less of a ... Less stressful ... Not stressful, cognitively stressful, at least and this was a little bit simpler to use and View router has been pretty on point as well. And you know what I like about it is these are all out of the box experiences that ship with View itself, so it's nice and officially supported or maintained by Evan and everybody else.</p><p><strong>Joel Hooks:</strong>         Yeah, Evan gets to work on it full-time. I don't know if he's the only full-time developer on the project but he's just been amazing as a shepherd for the project.</p><p><strong>Iheanyi Ekechukwu:</strong>         It's just wild.</p><p><strong>Joel Hooks:</strong>         Yeah, he's continuously just impressive and I don't know, I haven't checked it out yet, I kinda took a hiatus from learning front end frameworks, everybody's like, \"Oh, there's a new framework, you've got to learn this framework,\" and I'm like, \"I'm gonna take a break, I'm just gonna take a year off and not learn a new framework for awhile.\" But View keeps calling to me, I'm like ... Because people love it, it has such a passionate following.</p><p><strong>Iheanyi Ekechukwu:</strong>         Yeah, I'm like that and I'm very energetic about a lot of ... You know me, I like learning, I guess as nerdy as it sounds, I like learning and whenever I learn something new, I will ... And that really excites me, I will gas it up or at least give it props where props are due just because I think that ... I believe in it. Back when I used to evangelize Ember back in the day, and I still do vouch for Ember, especially if you're working on a really large project, I will say the same for View as a framework. It's really straightforward and easy to learn, and just really approachable and it's like a great mix of ... I think it's just a good mix of ... You have React, it's like, I guess the most bare bones in a way, but then I think View sits in the middle with ... Of React and Ember on that scale of things from un-opinionated to opinionated, even though it's a little bit more closer to react.</p><p><strong>Iheanyi Ekechukwu:</strong>         But I just like having that ... I personally don't like JSX all that much, I mean just a personal preference. I like it in some regards but other times I'm just like, \"Okay, now we got CSS and JS and this is all too much for me.\" But just having that one flat, single file component with your template, your JavaScript, and your styles all there, and the scoping of the styles to a View component is really nice and actually solved a main problem that I think a lot of developers have which is context switch, just having to constantly switch files and think about different language ... Just think about how everything meshes together and all that, since you have everything in all one file, it's less ... I think it's less stressful because you have all of it right there in front of you and you can always keep it at the top of your mind.</p><p><strong>Joel Hooks:</strong>         Yeah. And View impresses me also and when we talk about [inaudible 00:31:46] the major label verus indie label, it's totally indie. It doesn't have a massive ... It doesn't have an ad network or a giant social network behind it, it's just been Evan and this constant grass roots marketing and it's just blown up. I root for View all the other frameworks just in terms of getting people to check it out and [crosstalk 00:32:11] for their next project.</p><p><strong>Iheanyi Ekechukwu:</strong>         Back in 2014 whenever I first used it, it was interesting the different type of [inaudible 00:32:18] being used for it. It wasn't necessarily being used for there single page applications like Backbone, Angular and Ember were, but rather for these highly interactive websites that just had a very interactive experience. It with just one core screen and maybe it's animating a lot of things or drawing a lot of things but it's evolved to being able to build out these single page applications like in a very sane and user friendly manner and I vibe with that a lot, it's really awesome.</p><p><strong>Joel Hooks:</strong>         Yeah, so you've used Django and Rails and I'm just curious personally, because I've used both too, but why would you go Django over Rails, what's the advantage that you get there? Python?</p><p><strong>Iheanyi Ekechukwu:</strong>         So ... I like Python a lot. Python was my first real scripting language I learned, so it holds a special place in my heart, and after doing C and C++ for three semesters ... My bad, two semesters of college it was kind of a God send for building up these quick and dirty scripts. But I think I chose Django because actually in working on Seeker, I was planning on working on it with a buddy of mine and he's a huge Python, er, fan of Python, Django and he ... It's actually ... My buddy Justin, he helps ... He built out Button Down email, which is this news letter site. High key recommend checking it out, it's really a really awesome experience. So we were gonna work on Seeker together, but then Button Down kind of blew up so he's been putting a lot of his energy into that but we just ... I ended up just keeping Django and View because I had already started building it, so why not.</p><p><strong>Iheanyi Ekechukwu:</strong>         And me and him do code reviews for each other and all that so it's been cool just to be able to bounce ideas off one another and just be able to look at each others code and have that type of person in my camp.</p><p><strong>Joel Hooks:</strong>         Yeah, that makes a lot of sense. When we started Egghead that was the choice for me too. I built stuff with Django, I read a few Rails tutorials, which one should I use and then everybody I know was building stuff with Rails, like they're marketing sites or their apps or whatever, so. Somebody told me, \"Just choose Django or just choose Rails and build it and quit waffling back and forth about the stack.\" Which is a pretty good suggestion, really.</p><p><strong>Iheanyi Ekechukwu:</strong>         Yeah. I also liked how much Django had out of the box. With Rails, essentially the same, was like, \"Oh, there's a gem for that.\" But having ... Being able to just install Django and the only thing I really have to install is Django Rest Framework for the API and then it comes with a way of [inaudible 00:34:46] built in, it comes with an admin panel build in.</p><p><strong>Joel Hooks:</strong>         The admin panel is sweet.</p><p><strong>Iheanyi Ekechukwu:</strong>         It's so on point, yeah. It's amazing. And even ... Also comes built with some other goodies like ... Even comes ... It ships with a path work flow for resetting a users password. All of these small features were really nice and help cut down on development time of a whole bunch of other things as well. I'm actually glad I learned it, I've never worked with it professional but it's still been fun building out Seeker with it.</p><p><strong>Joel Hooks:</strong>         Yeah, that's cool. Always fun to explore things deeper too.</p><p><strong>Iheanyi Ekechukwu:</strong>         Yeah.</p><p><strong>Joel Hooks:</strong>         So you got anything else going on?</p><p><strong>Iheanyi Ekechukwu:</strong>         What else do I have going on. Let me think. Not really. There's one ... I'm working on a small project with some friends called Bombard, it's like a load testing service app but that got put on the back burner as some things picked up on everybody else's plate, so that's on hiatus but also gave me time to just step back and focus on Seeker, and getting final stages of it, like just getting it prepared and everything. Anything else I got going on ... No, not really. Just mostly that. Oh, and teaching on every Wednesday.</p><p><strong>Joel Hooks:</strong>         Teaching ... Where you teaching at?</p><p><strong>Iheanyi Ekechukwu:</strong>         I teach at a school of visual arts, the School of Visual Arts in Manhattan, I teach interaction design, or I co-teach, actually, with my buddy Greg who runs a design studio or consultancy called Partner and Partners in Manhattan.</p><p><strong>Joel Hooks:</strong>         Yeah, teaching's great because it's the best way to solidify your skills and figure out your fundamentals and base.</p><p><strong>Iheanyi Ekechukwu:</strong>         Yeah, and it's so rewarding too, seeing growth. Seeing from like, \"Oh, I remember when you were at point A and you've come all the way to point B.\" And just seeing the progression over time and improvement in their skills is really rewarding to me as well.</p>",
    "slug": "iheanyi-ekechukwu-on-education-programming-and-managing-side-projects",
    "description": "<p>Today Joel catches up with Iheanyi Ekechukwu. Iheanyi is a Product Engineer currently working at DigitalOcean. He previously worked at IBM on Watson. They also talk about Iheanyi's education, stack, and side projects</p><p>Iheanyi started out majoring in Computer Engineering, but switched to Computer Science after he figured out hardware just wasn't for him. He now lives and works in Brooklyn and spends most of his time coding (though he always brings his design skills to the table).</p><p>Iheanyi's design comes from a dual degree program at Notre Dame, the college where he graduated. He noticed a lot of subpar interfaces coming from pure programmers, and he was frustrated with that, so he took his school's opportunity to learn design and apply it to his work. Even if he isn't a designer, he uses his skills daily to communicate with designers and make whatever he works on that much better.</p><p>Iheanyi started using Ember back during college. He was frustrated by his school's class search interface, and he set out to improve it. Ember and Rails were like a match made in heaven for him, Ember having been authored by ex-Rails core team member, Yehuda Katz.</p><p>Joel discusses with Iheanyi what he's currently using in his work. They get into GO, and how Iheanyi has enjoyed working with a statically typed language when doing back-end work. Not having to worry about full test coverage when refactoring has been great!</p><p>Lastly, they talk about the various side projects Iheanyi has going. Such as Interface Lovers, a blog where top designers are interviewed and share their work music playlists. Also, Seeker, a job-board app that allows you to connect your strip account to it and have companies submit jobs.</p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/47aebd17/transcript\">\"Iheanyi Ekechukwu on education, programming, and managing side projects\" Transcript</a></p><h3>Resources</h3><ul><li><a href=\"https://seeker.company\">seeker</a></li><li><a href=\"https://interfacelovers.com/\">Interface Lovers</a></li><li><a href=\"http://creative.black/\">Creative Black</a></li><li><a href=\"https://www.ibmchefwatson.com/\">Chef Watson</a></li></ul><h3>Iheanyi Ekechukwu</h3><ul><li><a href=\"https://iheanyi.com/\">Website</a></li><li><a href=\"http://www.twoblacknerds.com/\">Podcast</a></li><li><a href=\"https://twitter.com/kwuchu\">Twitter</a></li><li><a href=\"https://github.com/iheanyi\">Github</a></li><li><a href=\"https://egghead.io/instructors/iheanyi-ekechukwu\">egghead.io</a></li></ul><h3>Joel Hooks:</h3><ul><li><a href=\"https://twitter.com/jhooks\">Twitter</a></li><li><a href=\"https://joelhooks.com/\">Website</a></li></ul>",
    "duration": 2216,
    "episode_number": 14,
    "contributors": [
      "Joel Hooks"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/db05q",
    "path": "/podcasts/iheanyi-ekechukwu-on-education-programming-and-managing-side-projects",
    "published_at": "April 19th, 2018",
    "url": "https://egghead.io/api/v1/podcasts/iheanyi-ekechukwu-on-education-programming-and-managing-side-projects",
    "edit_podcast_url": "https://egghead.io/podcasts/iheanyi-ekechukwu-on-education-programming-and-managing-side-projects/edit"
  },
  {
    "id": "podcasts-00000000000000000058",
    "title": "Michel Weststrate creator of Mobx and Immer Libraries for JavaScript",
    "summary": "Joel interviews Michel Weststrate, author of Mobx and his new library, Immer. Today they get into the power of Immer, its early success on Github, common mistakes in state management, and what is next for Mobx.",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/76da1786-df5f-4f77-909e-fdc92d8036de/376c554d_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/76da1786-df5f-4f77-909e-fdc92d8036de/1534346408artwork.jpg",
    "simplecast_uid": "76da1786-df5f-4f77-909e-fdc92d8036de",
    "transcript": "<p><strong>Joel Hooks:</strong>         I wanted to say first and foremost, thanks for MobX because we use it at Egghead and we really love it and it's made our development life better with React. I hope this quells some of the state issues that we ran into. So really and truly thanks for creating this awesome library.</p><p><strong>Michel Westrate:</strong>    Cool. You're welcome. Great to hear you that you love it, guys.</p><p><strong>Joel Hooks:</strong>         Yeah, I think it's really kind of, I don't know ... we'll talk more about state management because it seems like a running theme with what you work on. I wanted to jump into that actually, and talk about this library that you've released most recently and that's Immer, which is about immutability, but could you explain what it is and why it's interesting and why we might want to use it?</p><p><strong>Michel Westrate:</strong>    Yeah, Immer is actually a very small, neat utility. Basically what it does is, you give it a function or you write a function, and that function gets one perimeter and it's what you call a draft. It's an object and can basically store anything. It can be anything, it can be like your Redux stage, it can be your [inaudible 00:01:06] integration, and it can be your X stage, it can be your [inaudible 00:01:09] ... I don't know, any plane jump data you have, you can pass into it.</p><p><strong>Michel Westrate:</strong>    And then in the function, you give to Immer, you're just going to mutate that data in anyway you like. You can push new items to an array, you can introduce new attributes object, you can change attributes. I mean you can just do anything you would normally do in a JavaScripts. And then the funny thing is, as soon as your function ends and you look at the object you are mutating, you'll see that you got your original object back, it hasn't been mutated. [inaudible 00:01:45] data loss, keeping track of all the changes you are making, end of function. And then it produce a copy of its original state and applies all the changes to that copy, while keeping social sharing, if anything you didn't change.</p><p><strong>Michel Westrate:</strong>    And so the final stage ... if you write a reducer, this is usually difficult doing, so you are having a piece of state and then you start to produce a new state and you need to clog the tree to a certain depth until you can do your extra mutations. And so that whole bunch of depth is being removed if you use Immer.</p><p><strong>Michel Westrate:</strong>    You just do your mutation you intend to make and then Immer does all the copying of the rest of the tree, as far as it is needed for you. And its basically, it is inspired by the concept of right of copy, data collections, like you have it in Java standard library and also mutual shares or something. And what it does, it proxys old objects and as soon as you write something to it, it creates a copy of depths, data in the backgrounds and applies change actually, into some different place. But you won't notice because you can still risk mutations to share. So its a very small, but very mild agility and you got a lot of friction, I was actually, really surprise by it but I think the first two weeks, its already got to two thousand stars and get up, so its very interesting how to see it's being picked up.</p><p><strong>Joel Hooks:</strong>         When I was reading your articles on Immer, I think what stood up to me most was actually the use in the reducer because it reduced the reducer, I think that might be a fair explanation. You could use this any place that you might have a reducer, like in Redux for instance. You can bring this in, you really kinda help clean up and solidify some of the thoughts in there. Is that true?</p><p><strong>Michel Westrate:</strong>    Yeah. Exactly. Actually, I have some thoughts on how to make [inaudible 00:03:42] and in the end, I decided to call a producer a scan reducer. But also the idea that you produce the new states based on what you already have. And so that makes that very, naturally fit for using RE users.</p><p><strong>Joel Hooks:</strong>         Yeah, the other place I thought, this should be interesting to read assets, I probably learn a reducer pattern myself and then I've read a lot about state reducers now, where people are taking a state reducer and using that to manage local component state and seem like another place that would be pretty awesome for.</p><p><strong>Michel Westrate:</strong>    Yeah, yeah. I think with most applications, we still have to discover. Like the first application I follow was actually, something quite differently and it was to my webic complications, we have this configurations where you have for prediction and developments and they are like, for three quarters the same, but then there's something of dirt loader and the loader J which needs to be different from predictions or something. And that was actually my first application for Immer. I could just stop modifying the webic configuration I had, and in the end I didn't modify the original one but just got it fresh webic configuration for developing. And so the same, better you can follow the state reducers and reset state, et cetera, because its all basically, transforming one object into the next immutable version.</p><p><strong>Joel Hooks:</strong>         Alright so you don't need to use a user reducer. You can just use it, you run set state object and that's your state object for your component. That's pretty cool.</p><p><strong>Michel Westrate:</strong>    Yeah, exactly.</p><p><strong>Joel Hooks:</strong>         So, I mean, state, like we always, I guess it's part of our marketing, but it really speaks to the truth. I'm always saying \"State is hard, we are dealing with state,\" and we have lots and lots of courses on Egghead that are about different ways we can manage our state. I noticed that you have a conference talk that was titled \"State Management is Easy\" and I was wondering, what do you think? Are people over complicating it or what is the reason that state management is so hard in our application?</p><p><strong>Michel Westrate:</strong>    I think the basic reason is that we don't think enough about how we want to structure our state up front. So basically, when you talk about state, you can distinguish three basic concepts. You have values, references, and identities. So things that are not used value, we don't also have identity. And the people usually think about state purely as data and such, passing data all around starting to store some pieces of data and redundant twice. That's where it get all hairy and tricky. So if you want to keep state management easy, the simple question you have to ask every time, is for every fact you want to know your application, who's going to store it, and who's going to reference it.</p><p><strong>Michel Westrate:</strong>    If you keep asking this question yourself, you will avoid treating the data and by that you will afford having still data and those kind of things. And I think one of the reasons, why something like Redux has become so popular is because it simplifies state management builds those three concepts. So it eliminates the concepts of having identities and also doesn't really have references, you have to manage those yourself. It just minimizes state management to having values, and it makes that one hand very easy because there's way less concepts to think about. On the other hand, you see that somewhere unnatural. How you can see that is basically, if you look at how we name our reducer, we call it something like \"update to do title.\" When you look at the reducer, what it does, it isn't of anything to do title, it's like creating a new to do, are you replacing an old one.</p><p><strong>Michel Westrate:</strong>    So that is apparently how you conceptually think about things, is the things have identity, and to do, is the same to do even if you gave it a new name. This mismatch in having less concepts than there are actually are state managements as I think, why people call boilerplates. That's the mismatch between the conception of all you have of your state and the actual permutation of it.</p><p><strong>Michel Westrate:</strong>    Redux is also very appealing because it does make it easier by removing a few concepts. But I think the root core to making state management simpler, or simple, is just recognizing what are the values of your application? Which things have identities, like which things do exist through time? Which things should be referring to other pieces of information? If you can answer those questions, in the state you manage, then it becomes a lot more simple.</p><p><strong>Joel Hooks:</strong>         Yeah, I agree with that. To me the cost of Redux is like this boilerplate, this structure that we have to build around it and we have to have several files, and there's a level of indirection than can almost make it confusing, where you have your state management, but then you're kinda also adding this cost of some mental confusion in terms of where things are happening and what's occurring.</p><p><strong>Michel Westrate:</strong>    Yeah, exactly and I think, there's a chance, I mean it's also great in certain cases. I think what maybe helps, I have a background in Language Engineering and a lot of the languages I engineered prosper related around data management and data base design. I want to see that there are few recurring themes which are like set identities, references, also compositions, relationships, very important data bases. But once you think on those terms, then a lot of confusing about the state management disappears.</p><p><strong>Joel Hooks:</strong>         Yeah and for me, 'cause we switch to, like I mention in the beginning, we use MobX at Egghead, and to me, what it brought to the table was one, it removed a lot of the boilerplate that I was experiencing before. And then, at the end of the day, it feels like observable properties and lightweight dependency injections. So I get what I want, where I want, and I am able to, you know, add observable to a property, and it's just wash and kinda all manage for me. And as a user, that level of use is very simple. Is that the basic description, like the pitch from MobX? Or how would you describe MobX?</p><p><strong>Michel Westrate:</strong>    Yeah, I think it's pretty close. And actually dependency management is even really part of MobX, it like more patterned around this context because people had problems with depths and its part of the package, but it isn't really MobX specific. The most compelling thing about MobX, especially if you use their more complexity situations, it's not just observables, the effect the observables are being traced automatically for you so that as soon as you use observable, MobX captures that relationship. And in the background, at the construct, a complete dependency tree of how the data flows through your applications and that's why it's really make it powerful and something that's stuff like the antimeters are just dependency injection itself cannot offer. It's this thing that MobX can precisely track what data is relevance where. iI you change the title to-do, and that affects how many to-dos can be rendered on screen and that affects three different components, the MobX will track that precisely for you. That data has to flow in those places.</p><p><strong>Joel Hooks:</strong>         Yeah so, when I'm looking at it, it really, the look and feel of the thing is the simplicity. If I understand what you're saying, under the hood, it's also giving us performance optimization, right? It's managed in our almost black box management of our data and state and kind of affecting if we are using it in React or affecting how our components re-render and when they do based on this data that provides some efficiencies.</p><p><strong>Michel Westrate:</strong>    Yes, exactly. So, as a goal, when MobX was like, if you write the components, you should be writing it, as if you render it only once and you should be writing your application as if, of every change, your entire application would fully re-render. I mean when you write application as that, then you're dealing with subscriptions anywhere, anymore. Because if you will render your application, it should always be fresh, right? And so, that's what MobX tries to close. The gap in reality is of course, is you cannot re-render your whole application on every chance, but you can write your goat, as if that is the case and that's what MobX brings to the table.</p><p><strong>Joel Hooks:</strong>         Yeah, so you really don't have to think about it. You can just write to your observables and everything just works.</p><p><strong>Michel Westrate:</strong>    Yes, exactly.</p><p><strong>Joel Hooks:</strong>         So, do you ever in MobX, is there any use case where those two fit nicely together? Or is Immer general enough that you would just use it in a normal React application for your data structures?</p><p><strong>Michel Westrate:</strong>    Personally, I didn't combine them yet, anywhere, but I know that people sometimes do combine MobX partially with immutable data structures. So for example, they have a observable collection of to-dos. The to-dos themself, they are kept immutable for a different reason, maybe because literally you see observer and it should be change or something or because apparent application is still on Redux or it can be many reasons. But only in those cases there makes sense, you can combine the two, because with Immer you can manage the immutable parts. With MobX, you can manage the immutable parts. But beyond that, I didn't really cross lay them.</p><p><strong>Joel Hooks:</strong>         So you have another library kind of in this system of MobX and that's the MobX state tree. And I'm wondering how that fits into an application. We have a MobX application, we want to take it a step further and how does the state tree, how do we use that, and what does it do for us?</p><p><strong>Michel Westrate:</strong>    Yeah, so MobX in itself is quite opinionated on how you organize your observables, right? Where you put, where you store them, how you bounce them around. Like for MobX, you can introduce observables, or yet components, you can put them, I don't know, your module sculpt if you want to. Basically, MobX doesn't have any opinion where observables come from, it will just react to that. And for many that's very appealing, because you can basically design your owner section for application and you can somehow feel MobX in there and it will work and if you're migrating a big bone application or no contact application, you can manage MobX in there and it will also work.</p><p><strong>Michel Westrate:</strong>    That's for others, it can be confusing because MobX doesn't tell you anything on how you should organize your stores and your models, et cetera, and so that is where MobX state tree comes into play.</p><p><strong>Michel Westrate:</strong>    So that's a very opinion implementation, of how you could manage state with MobX. And so the concepts in state management I talked about earlier, like values, identities, references, compositions, those are all very explicit notions in MobX state tree. So the best part of MobX state tree is I think you create a domain model of your application, of your state. So you organize your data into models and you tell how the models relate to each other, which are contain, for examples introduce your contain your to-dos and you store contain users, that's users that contain to-dos, they just refers to to-dos for example. These are things you express on MobX state tree explicitly. And that helps you to, it forces you to think on how you organize your state, so hopefully, you cannot make accidentally a mess out of it, because you didn't think it through.</p><p><strong>Joel Hooks:</strong>         So we are getting an architectural layer, so we can learn and understand how a common or better way to organize your state, or at least a consistent way.</p><p><strong>Michel Westrate:</strong>    Yes, exactly. It's all about organizing your state in a consistent way. And also because it's very consistent and very regular, it can also offer more feature and books for you. A funny thing about MobX state tree, is that, it does also keep an immutable version of its store and so you can pass MobX state tree for example to the Redux [inaudible 00:16:58], and your Redux [inaudible 00:16:58] will learn what's happening in your MobX state tree, even though it's immutable. If you'll just think the immutable representation of it and the reason about that one. And that also makes easy to do things like when I'm traveling or in exchange patch this to a server, those kind of things. And so we can do that because you declare precisely, the model of your data.</p><p><strong>Joel Hooks:</strong>         I thought that those, like both Immer and Mobx state tree, in their documentation, kinda show you that you can use these things, basically anywhere, right? They come back to Redux to me, like we can use MobX state tree and they'll actually fit into a Redux app or you can use Immer and use that, to make your Redux app simpler as well as, not just MobX. So you're really creating tools or you generally useful more than specifically useful too, to the ecosystem.</p><p><strong>Michel Westrate:</strong>    Yeah. The funny thing about Immer and MobX state tree is that they both prove opposite points, opposite side of the coin. So MobX state tree is all about a mutable tree and it proves that you can treat a mutable tree as a immutable one by chiefly generating snapshots. So in MobX state tree you can interact either an immutable life of the tree, but just attributes or inject your fit into an immutable way and applying snapshots to get new versions of the tree. And on Immer, does exactly the opposite. It starts at a immutable world, then it allows you to interact with it in a mutable way and still at the end of the Immer friction, you are holding two immutable objects. Still very short of state, before and after it is executed.</p><p><strong>Michel Westrate:</strong>    So that's kind of intriguing too. Like combine those two worlds and both directions. It's quite funny, because people often, see it as opposite paradigms, and actually they can be reconciliated.</p><p><strong>Joel Hooks:</strong>         Yeah, that's cool. So you said you had a background in Language Engineering, I assume that's Programming Language Engineering, like from a Computer Science perspective.</p><p><strong>Michel Westrate:</strong>    Yes, yes, that's correct.</p><p><strong>Joel Hooks:</strong>         Does that influences these crusade you are on, to simplify state management for JavaScript developer?</p><p><strong>Michel Westrate:</strong>    Yes, definitely because what Language Engineering makes you think about is, what is the essential complexity and what's the accidental complexity? So what is the information you really need from the user? What do you need the programmer to express and the [inaudible 00:19:34]? And what is the information you could actually infer? So people call for example, Java, boilerplating, because it does not infer enough information once you are providing it. So you have the accidental complexity of needing to declare the type of a variable, while it could be inferred.</p><p><strong>Michel Westrate:</strong>    There are other type of an expressionist is in self essential, it somehow has a type what you want to re-use it essential information as much as possible. And so it was kind of this distinction between accidental and essential complexity is also what drove me to develop MobX. It just like, I want to write a components, but I only want to express essential stuff. And essential stuff being, what data does it trend there and how does my dome structure look like. And then the accidental complexity, the question is, what if there's other changes, how should have let it done? And that's the thing I try to entirely obstruct the way in MobX and React. And I think MobX gets really far in that sense, because basically the only boilerplate at least is putting an observer decorator on your components, that's the only thing you still have to do mainly. And all the other things, like how data is centered in your future to your components as it obstructed the way.</p><p><strong>Michel Westrate:</strong>    So, I think that background definitely, mainly wonder how can we write less, how can we write just what we want to express our thoughts, write anything that's just basically copy and paste on the course we want to do.</p><p><strong>Joel Hooks:</strong>         So what's next for MobX? How do you improve on what you already produced? Do you have ideas?</p><p><strong>Michel Westrate:</strong>    Yes. So first of all, there are some interesting developments I'm going to be working on and that's using more of the [inaudible 00:21:49] features, like proxies, because they can make MobX even more transparent than it is now. And at the same time, I'm brainstorming about, how can we make [inaudible 00:22:06] processes even better? So MobX has always been naturally quite suitable for [inaudible 00:22:14] processes, in the sense you can use asynchrobites or even generators without any trouble. But lately I was diving into, also quite a new concept, the async goals. I'm starting to wonder, how can we leverage those concepts? Can we express derived information as a generator, so that you can introduce more complex derivations mechanisms? Like you would do for example in RX radio, debounce, data retrieval, those kind of things. So it's all pretty early, but we're thinking about it.</p><p><strong>Joel Hooks:</strong>         And also, I was thinking just in terms of MobX and the future. Right now, there's a new version of React in Alpha that introduces this update data context API, which looks like it give us this kind of a pub-sub apparatus. Does that affect MobX or does it change it or does that provide any replacement for using a library of any sort? You know, or are we going to still reach for a statement in the library?</p><p><strong>Michel Westrate:</strong>    No, I don't think it's really changed anything. So what the new API does is, it fixes a few fundamental flaws in the current API which makes it hard for library alters to achieve interpretability with other libraries. So notorious sales for example combining [inaudible 00:23:44] and Redux, where Redux connects what prevents components of data, whatever component which prevents changes from propagating and [inaudible 00:23:55] wouldn't react to changes because it would assume that all changes would go through the complex API and through the entire tree. And so this is the thing that basically fixed and show you the improvements but it's not fundamentally changes anything on my opinion because it's essence ... it's not that you now can express things you couldn't express before. The difference is that it's now safe for anybody to use API, whereas API was for library authors only, that's a big difference.</p><p><strong>Joel Hooks:</strong>         It's a big red flags above it -</p><p><strong>Michel Westrate:</strong>    Yes, exactly.</p><p><strong>Joel Hooks:</strong>         That's about. If you're a user, don't use this.</p><p><strong>Michel Westrate:</strong>    Exactly, so that's a big difference but it's not like that it fundamentally changes something. In the sense, the suspense is more way interesting, cause that gives actually new way of self expressing things.</p><p><strong>Joel Hooks:</strong>         It looks like time flies and there's all sort of fun stuff coming up with the suspense-</p><p><strong>Michel Westrate:</strong>    Yes, exactly.</p><p><strong>Joel Hooks:</strong>         -on API's.</p><p><strong>Michel Westrate:</strong>    So that's-</p><p><strong>Joel Hooks:</strong>         Do you have any ideas burning for how you wanna use this stuff? Have you started looking at it at this point?</p><p><strong>Michel Westrate:</strong>    Yes, I started looking at it. Not sure entirely how I am going to use it. So the thing is for MobX utils, of MobX royalty goods, already gets quite close to suspense in that sense that you could already render promises on a very concise way into the doc. Thus, small utils packets, called MobX utils and it has its concept of turning a promise into an observable, so you turn promise into an observable and then you can render based on the failure of the observable, which is what you do everywhere with MobX. So in that sense, rendering promises is something which is already quite common on a MobX world.</p><p><strong>Michel Westrate:</strong>    The interesting thing, of course, in suspense is, it got four of the rendering tree and that's very interesting. It can render a component which of essence is feasible in the dome yet, and so instead of seeing that components transitioning to the difference common states, you won't see the components anywhere until the promise is settled, for example. And in the meantime you can inject with another block of the, there's another rendering of the tree, by the previous version. And that's what make suspense very interesting.</p><p><strong>Joel Hooks:</strong>         Yeah, I'm looking forward to seeing how the stuff shakes out. Its cool to see the framework of all a little bit. What are the options that will give us as developers and then for library authors like yourself, it's really exciting. I always like to see how people push the envelope and give us cool new tools to make our development lives much better, which again, thank you to that, Michel.</p><p><strong>Joel Hooks:</strong>         I am going to call it and really appreciate you taking the time to me today and I look forward what's next.</p><p><strong>Michel Westrate:</strong>    Cool. Thanks a lot.</p>",
    "slug": "michel-weststrate-creator-of-mobx-and-immer-libraries-for-javascript",
    "description": "<p>Joel interviews Michel Weststrate, author of Mobx and his new library, Immer. Today they get into the power of Immer, its early success on Github, common mistakes in state management, and what is next for Mobx.</p><p>Immer is a light-weight, immutable state-management tool. Michel talks with Joel about some of its capabilities. Immer takes an object and a function and can track all the changes made to that object, it then gives you back the original object and a mutated copy. Immer can replace reducers, Michel calls them \"producer\" functions as they \"produce\" the new state.</p><p>Joel then asks Michel \"what makes state management so hard for people and are they overcomplicating it?\" This question leads to Michel explaining that people don't think enough about the structure of their state enough up front. When you talk about state, there are three distinct concepts, values, references, and identities. However, people tend to only think of state purely as data. \"You have to think about what is going to store it and what is going to reference it.\"</p><p>Michel talks about how the mobx-state-tree fits into an application. Mobx is unopinionated; it doesn't tell you how to organize your stores. mobx-state-tree, however, is very explicit about the three concepts of state, values, references, and identities. With mobx-state-tree you organize your data into models and tell it how they relate to each other. It's all about consistently organizing your state!</p><p>What's next for Mobx? Michel is currently working on some exciting features using proxies to make Mobx even more transparent than it is now. Michel has also been thinking about improving on asynchronous processes and how to leverage async actionables.</p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/94ad357b/transcript\">\"Michel Weststrate creator of Mobx and Immer Libraries for JavaScript\" Transcript</a></p><h3>Resources</h3><ul><li><a href=\"https://github.com/mweststrate/immer\">Immer</a></li><li><a href=\"https://mobx.js.org/getting-started.html\">Mobx</a></li><li><a href=\"https://www.mendix.com/\">Mendix</a></li></ul><h3>Michel Westrate</h3><ul><li><a href=\"https://medium.com/@mweststrate\">Medium</a></li><li><a href=\"https://twitter.com/mweststrate?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor\">Twitter</a></li><li><a href=\"https://github.com/mweststrate\">Github</a></li><li><a href=\"https://egghead.io/instructors/michel-weststrate\">egghead.io</a></li></ul><h3>Joel Hooks:</h3><ul><li><a href=\"https://twitter.com/jhooks\">Twitter</a></li><li><a href=\"https://joelhooks.com/\">Website</a></li></ul>",
    "duration": 1627,
    "episode_number": 13,
    "contributors": [
      "Joel Hooks"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/j4hnr",
    "path": "/podcasts/michel-weststrate-creator-of-mobx-and-immer-libraries-for-javascript",
    "published_at": "April 3rd, 2018",
    "url": "https://egghead.io/api/v1/podcasts/michel-weststrate-creator-of-mobx-and-immer-libraries-for-javascript",
    "edit_podcast_url": "https://egghead.io/podcasts/michel-weststrate-creator-of-mobx-and-immer-libraries-for-javascript/edit"
  },
  {
    "id": "podcasts-00000000000000000046",
    "title": "Jack Doyle, creator of Greensock",
    "summary": "John Lindquist speaks with Jack Doyle, the creator of Greensock. They discuss a number of things including the motivation behind the creation of Greensock, managing GSAP forums, and how he transitioned from Flash to Javascript.",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/cadb643c-f099-43e0-b8b6-a6ca72717cd5/76c114c0_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/cadb643c-f099-43e0-b8b6-a6ca72717cd5/1534346420artwork.jpg",
    "simplecast_uid": "cadb643c-f099-43e0-b8b6-a6ca72717cd5",
    "transcript": "<p><strong>John Lindquist:</strong>     Alright, Jack. Why don't you go ahead and introduce yourself.</p><p><strong>Jack Doyle:</strong>         Alright, I am Jack Doyle. I created GreenSock. Back in the day, yeah, it was a Flash ActionScript tool that just kinda helps move stuff around the screen and do crazy animations.</p><p><strong>Jack Doyle:</strong>         And now, I've ported it over to JavaScript and the open web. And so, it is alive and breathing out there. And I think, it's on, I don't know, something like four million sites at this point that we're aware of.</p><p><strong>John Lindquist:</strong>     Wow.</p><p><strong>Jack Doyle:</strong>         So, it's gotten quite popular. And it's very humbling and feels like a big responsibility. But we, at the end of the day, just love helping people to solve animation challenges.</p><p><strong>John Lindquist:</strong>     Yeah. So, you're like the Spiderman of great power and great responsibility out there, then.</p><p><strong>Jack Doyle:</strong>         I don't know. Don't make me feel even more responsibility, please.</p><p><strong>John Lindquist:</strong>     So, I have to ask. Back in the Flash days, when we were all using all onEnterFrame and all these animation techniques, what was the original motivation for GreenSock and TweenMax, TweenLite and all the things that kind of stemmed out of the platform?</p><p><strong>Jack Doyle:</strong>         Good question. Well, I was working at a big advertising firm that they obviously do a lot of animation work. And a fair amount of that was banner ad work, as well. And so, there was some really strict file size requirements and also, performance was kind of a big deal.</p><p><strong>Jack Doyle:</strong>         And now, we have ... We're spoiled with all of these fancy computers with crazy processors. But back then, it wasn't quite that great. So, you really had to be careful about how you wrote your code and how things worked.</p><p><strong>Jack Doyle:</strong>         And so, there was basically a problem. And I saw it and just kinda tried to solve it for myself and create this little engine that I could throw instructions at and it would do stuff for me and make things a lot easier and more concise.</p><p><strong>Jack Doyle:</strong>         So, it was basically, at the end of the day, about trying to solve a problem. So, it was just for myself, really, and the agency I was working for. And then, I don't know, I can't even remember back that far.</p><p><strong>Jack Doyle:</strong>         But I think I put it out on a really lame blog that looked horrible and I'm completely embarrassed of now. But it was just like, \"Here. If somebody else can benefit from this, here you go. Give it a shot.\" And then, it started taking off.</p><p><strong>John Lindquist:</strong>     Do you remember what version one was, like what the features were? Was it just function around x+=1. And you could change the one or something?</p><p><strong>Jack Doyle:</strong>         Yeah, it was very basic. I can't even remember back that far. You know, I'm getting old now, so my memory is going. And pretty soon [crosstalk 00:03:02].</p><p><strong>John Lindquist:</strong>     I forgot what a banner ad was until you brought it up there.</p><p><strong>Jack Doyle:</strong>         They still exist out there. I've seen a few of them on the web.</p><p><strong>John Lindquist:</strong>     Yeah, my ad-blocker's pretty good.</p><p><strong>Jack Doyle:</strong>         Yeah, but it was pretty basic, I'm sure. And over the years, it just kind of ... More people asked for more features. And it just kind of made sense, so I just ... It grew and grew and got more and more advanced.</p><p><strong>John Lindquist:</strong>     Do you remember the first time you used the easing equations? Like Robert Penner stuff?</p><p><strong>Jack Doyle:</strong>         Oh, Robert Penner, yeah. That was like magic. It was so cool.</p><p><strong>John Lindquist:</strong>     It still is to me that-</p><p><strong>Jack Doyle:</strong>         It really is. Yeah, that guy, that was great. The idea that math, simple, well, relatively simple math, could create those kind of effects was this magical idea for me that I had not really been introduced to before.</p><p><strong>Jack Doyle:</strong>         And these little easing equations, they're so small. You look at them and it's just like, oh, there's a little math going on. And what is this math.sine and cosine? And what does that have to do with easing and having something speed up over time, or slow down over time or, I don't know.</p><p><strong>Jack Doyle:</strong>         That was a really neat kind of thing that unlocked a lot of ideas for me.</p><p><strong>John Lindquist:</strong>     Yeah, it's like the, \"Didn't I learn about that in high school?\" And it's 10 years later and, \"Oh yeah, this is.\"</p><p><strong>John Lindquist:</strong>     I wonder if they taught easing frameworks in trig class, if people would pay more attention?</p><p><strong>Jack Doyle:</strong>         It's funny because I have two sons. And one's in eighth grade and the other's a sophomore in high school. And so, they're learning some of this stuff about trigonometry and geometry, and sine and cosine.</p><p><strong>Jack Doyle:</strong>         And they're always like, \"Well, I'm never gonna use this stuff.\" And I'm like, \"What?\" Guess what? That's not true. I use it almost every day. So, you better listen up.</p><p><strong>John Lindquist:</strong>     Sine paid for your Xbox, son. You better pay attention.</p><p><strong>Jack Doyle:</strong>         That's true. It's totally true. Yeah. So, pay attention in math class, kids.</p><p><strong>John Lindquist:</strong>     So, are you a math master now? I see you're doing ... You've had those CustomEase tools around for a while. Have you figured that all out?</p><p><strong>Jack Doyle:</strong>         You know, I do not consider myself a math wiz at all. I do like math or something's strangely interesting to me about it, but there are so many people that are way smarter than me in that.</p><p><strong>Jack Doyle:</strong>         But over the years, it's almost like a riddle for me where I get introduced to the Robert Penner stuff. And then, it's like, \"Wait a minute, how does that work?\" And then, you start picking it apart.</p><p><strong>Jack Doyle:</strong>         And then, take it another step further and try to customize stuff. And then, get into the Beziers and how does a Bezier work? It took me so long to and I had to see it. I'm more of a visual learner.</p><p><strong>John Lindquist:</strong>     How do you pronounce Bezier?</p><p><strong>Jack Doyle:</strong>         Yeah, exactly. I always said Bezz-ee-air. But I mean, I heard somebody else say it and I was like, \"Oh, okay. Wrong, as usual.\"</p><p><strong>Jack Doyle:</strong>         But, when I see it visualized, I go to some articles online and Wikipedia, or whatever. And they visualize how these things works and the dots move over time to the curve. And it's like, \"Oh, okay. I think I kind of see that.\"</p><p><strong>Jack Doyle:</strong>         And then, I can start working out the math in my head. So with enough sheer time and a sledgehammer trying to get into my brain and enough fumbling over in the browser and trying to make things work, eventually something clicks in my brain.</p><p><strong>Jack Doyle:</strong>         And then, I can get it.</p><p><strong>John Lindquist:</strong>     Yeah. I think like you. If math can be made visual and I can tweak things, where the things that I changed have a visual response to it. Then, if I do that like a hundred times and I eventually kind of put the my changes make this happen. My changes make that happen.</p><p><strong>Jack Doyle:</strong>         Yes.</p><p><strong>John Lindquist:</strong>     Then, I understand math. There's no other way for me, unless it's a ... That repetition of this change makes that. This changes make that.</p><p><strong>Jack Doyle:</strong>         Yeah. If I go to a Wikipedia page and I see all the formulas, it's like my eyes glaze over. And I have no idea how to drink all that in and understand it. Then, if I scroll down enough and they have some visual representation, then it starts to click.</p><p><strong>John Lindquist:</strong>     Yeah. So, what was the point ... I mean, this was back in the Flash days when you were able to turn this into a business. What was the point where you thought I could turn a tweenian library into something that could make money for my family?</p><p><strong>John Lindquist:</strong>     You're such a unique story to me be someone who actually made money off of a project they're doing on the side. And then, turning it into a full business. I'm still flabbergasted by your success. It's amazing.</p><p><strong>Jack Doyle:</strong>         I kind of am too. I don't take a lot of ownership for it, but it's really ... I remember it was a stressful time, actually, because I was working for the agency and doing all this side work.</p><p><strong>Jack Doyle:</strong>         And I had my own business too, just doing design work. I did video work for awhile. But then, when I put this thing out there and people kept asking for tweaks and features. And then, eventually, some people who were using it would email and say, \"Can we please pay you something for this?\"</p><p><strong>Jack Doyle:</strong>         And I would say, \"No, that's fine. I don't need any money for that. Just go ahead and use it.\" And then, some of them were getting really persistent. And they would get annoyed with me. They were mad.</p><p><strong>Jack Doyle:</strong>         They were like, \"Why won't you take our money? We don't feel right about this, because we are making money off of your thing. And we're not paying you for it.\" And I think, at the end of the day too, they understood this concept of if there's no money going to support something, then the author's dedication to it can easily wane.</p><p><strong>Jack Doyle:</strong>         Because after all, they have to earn a living for their family. And so, they're going to do what they need to do for their full-time job. And then, if this is just a side thing that, \"Hey, I'll get to it when I get to it, if I get to it.\", then it leaves them in a precarious position with their clients.</p><p><strong>Jack Doyle:</strong>         They're relying on this tool that you created and they feel weird about that. It's like they would rather have ... They would rather support it financially and have it supported for them.</p><p><strong>Jack Doyle:</strong>         And so, that was a decision I had to make at some point where there was enough people using it and features being requested that it was like, it was taking a fair amount of my time. And I remember this one evening down in my basement right in front of my computer, my wife came down.</p><p><strong>Jack Doyle:</strong>         We were chatting a bit. And I don't even remember whose idea it was. But one of us said, \"Well, what if you just created a club to give people, maybe somebody who donates or who signs up for this club, can get some extra plugins that are not really essential. But they're just some nice extras.\"</p><p><strong>Jack Doyle:</strong>         And it's a way of giving back to those people who are supporting it. And I said, \"Well, let's give it a shot. Let's try it.\" So, Club GreenSock was born at that point and just put it up online.</p><p><strong>Jack Doyle:</strong>         And it was not massively successful, early on at all. A few people gave. I had put up a donate button. And people would pitch in five bucks and they would feel really good about that.</p><p><strong>Jack Doyle:</strong>         And it generally was fund five bucks here and there. But yeah, once I created this club, it was like something was official. It went from this, \"Hey, toss in a donation if you want.\" Into this, \"Hey, it's an established business thing.\"</p><p><strong>Jack Doyle:</strong>         And I think, it gave it some credibility. And I think, ultimately, it resinated with at least some of the market to where people started signing up. And I think it gave them more confidence that this thing could be relied upon, because somebody's backing it.</p><p><strong>Jack Doyle:</strong>         There's money going in. And I was showing some level of dedication to it. So, I think, ultimately, it was then. But it did not happen ... The success did not happen overnight. It was years where that kind of ramped up to where I could step away from my full-time job.</p><p><strong>John Lindquist:</strong>     Yeah. So, Egghead started with just me and a donate button, as well, right? I just had some videos up on YouTube. And people could click donate and send me money through PayPal, or whatever.</p><p><strong>John Lindquist:</strong>     And then, I had to bring on Joel at any sense who brought in the actual business acumen in sense of how to turn it into something that people would give us real money for and bring in more people and build it into what it is now and what it will be in the future.</p><p><strong>John Lindquist:</strong>     I've talked to some other people about how they've hired mentors to help publish books and to launch their products. And they've taken courses, bootcamp courses, on how to start up a business.</p><p><strong>John Lindquist:</strong>     Is there anything that you did, as far as after Club GreenSock got going? Did you hire business people to help you out with it, or did you just do it your own way and you're still figuring it out?</p><p><strong>John Lindquist:</strong>     Or, how's-</p><p><strong>Jack Doyle:</strong>         That's a good question. I think, most of it was just me fumbling and bumbling as I kind of do with code, as well, learning as I go. But then, I have had a business coach for the last several years.</p><p><strong>Jack Doyle:</strong>         But that was very late in the beginning. But before I started Club GreenSock, I always had this little entrepreneurial side of me, even in ... From a kid, I was cutting grass for the neighbors.</p><p><strong>Jack Doyle:</strong>         And then, I was in college. It was the time when nobody really had a color printer. This is how old I am, alright? But a really high quality color printer. And I was in graphic design school.</p><p><strong>Jack Doyle:</strong>         And so, we would have to go. We'd drive for ... I can't remember how long, half-hour, 45 minutes to this place that had a fancy color printer. And we would pay a crazy price to get print-outs for our projects and then, turn it in.</p><p><strong>Jack Doyle:</strong>         So, I went out and there was some new fancy color printer that was, I don't know, 350 bucks. And I bought it. And then, I started selling prints. I'd put posters up around the campus to start advertising my services.</p><p><strong>Jack Doyle:</strong>         And so, I started making money off of doing prints for people. And when I worked for an agency, I did the same kind of thing where I undercut where they were going to get their printouts elsewhere, and I kind of made a ... Create a lower price and invested in a $2,500 printer and just-</p><p><strong>John Lindquist:</strong>     That's awesome.</p><p><strong>Jack Doyle:</strong>         Did that overnight, just about every night for them. So, I've just always had that side of me that was interested. I am definitely not a crazy smart business guy. I don't want you to get that impression.</p><p><strong>Jack Doyle:</strong>         But I've always had that interest. And I've always tinkered with that kind of thing.</p><p><strong>John Lindquist:</strong>     Right. So, is that a ... You just want to work for yourself on your own ideas and do your own thing, because working for other ... I've always had that thing where I just don't like reporting to other people.</p><p><strong>John Lindquist:</strong>     And I don't like working on other people's projects that I'm just not inspired by or motivated by. Do you feel the same way?</p><p><strong>Jack Doyle:</strong>         No, it's just because I'm antisocial. I don't like people. No. I totally resinate with that. It's something different when you're ... It's your idea. It's your initiative. And that there's just more higher in the belly, or something like that.</p><p><strong>Jack Doyle:</strong>         I don't mind doing work for other people, but you're right. It's just a little different when it's your own initiative.</p><p><strong>John Lindquist:</strong>     Yeah. That's actually something we've read a lot about, as far as running Egghead itself and our employees is giving them so much ownership over their own tasks where they feel like they are the ones in charge of it.</p><p><strong>John Lindquist:</strong>     And they are ... That it is their work and their goals. They're essentially hiring people that are motivated to do what's good for the company, rather than hiring people and telling them exactly what to do and when to finish it by and all those sorts of things. It's-</p><p><strong>Jack Doyle:</strong>         Micromanaging, yeah. And it sounds like that's worked out very well for you.</p><p><strong>John Lindquist:</strong>     Yeah, yeah. So far, it's ... Yeah, the whole dynamic of running a business and deciding what to pay people and defining when and how to work, and all these things. I mean, we're all still remote.</p><p><strong>John Lindquist:</strong>     There's no specified vacation or anything. It's like work. Here's a set of tasks, or here's your area of responsibility. And there are expectations that you do work in your area of responsibility.</p><p><strong>John Lindquist:</strong>     But other than that, just get it done and take pride in your work.</p><p><strong>Jack Doyle:</strong>         Yeah, I think that's the best way to do it. And I don't think that running a business is for everybody. I think there's a type of person that fits well into that and there's a type of person that it's just terrible for them.</p><p><strong>Jack Doyle:</strong>         I've known some people that they give it a shot and it's just they are built in such a way. And there's nothing bad about this at all. In fact, it's really important to have people like this in the world.</p><p><strong>Jack Doyle:</strong>         Where they just need to be around people. They want to ... If you say, \"Go off in the corner and here's a set of objectives, and just work.\" They dry up and it's just like they can't. It's not how they're built.</p><p><strong>Jack Doyle:</strong>         So, I've always been reluctant to give off this impression that it's fine to work for somebody when you're younger. But then, you should really transition at some point and own your own business.</p><p><strong>Jack Doyle:</strong>         Because I totally don't think that's how it works or how it should work.</p><p><strong>John Lindquist:</strong>     Yeah. It's funny. My wife and I took a personality quiz the other day that asks some of those questions of how do you respond to certain situations. And one of them was, \"Do you like to improvise or organize?\"</p><p><strong>John Lindquist:</strong>     And strongly agree/disagree and I was all the way on the improvise side. I don't like planning. I like to jump into situations and just make do with what I have and have fun with it.</p><p><strong>John Lindquist:</strong>     My wife's on the completely opposite end of the spectrum where she loves to have a plan and execute the plan. And if she does that well, then that's considered success for her. And just that reminder that we're so ... People are built so very differently with the way they approach things is one of those.</p><p><strong>John Lindquist:</strong>     My eyes were reopened to, wow, we're ... Even in our relationship, we're so very different with our approach to things and how we need to talk about going on a trip. I would just want to go on a trip and walk around.</p><p><strong>John Lindquist:</strong>     And she's like, \"Well, we have to have this planned and that planned and that planned.\" And I need to respect her way. And hopefully, she can respect my way. And I think that's the same for any sort of employment, or management, relationship is people are just super different.</p><p><strong>John Lindquist:</strong>     Where everybody ends up is a totally personal thing.</p><p><strong>Jack Doyle:</strong>         Yeah. I hope to invest in a marriage counselor. No, you just described my relationship and my wife's relationship, as well. She's definitely the, we're going on vacation. We need to have what we're going to do each day.</p><p><strong>Jack Doyle:</strong>         Let's find out. We have all these activities. I'm like, \"I want to go just sit on the beach.\"</p><p><strong>John Lindquist:</strong>     Right. And walk around town.</p><p><strong>Jack Doyle:</strong>         Jump in the waves, yeah. Yeah, see what happens.</p><p><strong>John Lindquist:</strong>     Right. So, I have to ask. You mentioned support and how people paying you would encourage you to support them and answer the questions, and that sort of stuff. I looked at your forum.</p><p><strong>John Lindquist:</strong>     And you have a nice, rounded number of 45,000 posts right now on your GSAP forum. Congratulations on that. But how in the world do you support 45,000 questions? How does that work?</p><p><strong>John Lindquist:</strong>     And I also cried a little bit when I saw that the Flash one was an archive. But the 45,000 questions.</p><p><strong>Jack Doyle:</strong>         You're really the only person who would go in there and look around.</p><p><strong>John Lindquist:</strong>     I probably have a question in there somewhere.</p><p><strong>Jack Doyle:</strong>         You probably do, yeah. And it's close to 80,000 in total posts.</p><p><strong>John Lindquist:</strong>     Man.</p><p><strong>Jack Doyle:</strong>         And forums.</p><p><strong>John Lindquist:</strong>     That's amazing.</p><p><strong>Jack Doyle:</strong>         And yeah, we're at 50,000 members. Yeah. But that's over years and years. That's not just this last year. So, they built up over time. And really, it's not just me. I mean, my goodness.</p><p><strong>Jack Doyle:</strong>         If it was only me doing this, I'd be pulling my hair out. I really don't have any hair left. So, I have-</p><p><strong>John Lindquist:</strong>     I'll join that club.</p><p><strong>Jack Doyle:</strong>         So, Carl's been a huge help in that, Carl Schoof. And then, there's also a bunch of just extremely sharp kindhearted moderators that have stepped up and answered a crazy amount of questions every day.</p><p><strong>Jack Doyle:</strong>         And they just do it out of the kindness of their hearts. And we're so honored to have them involved there. So, yeah, it's a big blessing.</p><p><strong>John Lindquist:</strong>     Have there been questions in there that have caused you to GreenSock and what it can provide? Has that sort of feedback from the community, or questions from the community, driven the project at all?</p><p><strong>Jack Doyle:</strong>         I don't know that the forums ... I'm sure GreenSock would not be where it is today if it weren't for the forums. Because it definitely allows us to hear what people are saying, what they want, the things they're struggling with.</p><p><strong>Jack Doyle:</strong>         And so, if we see 20 people asking questions about the same thing, that's kind of like, \"Hm, maybe we should address that a little bit better.\" So, it's been tremendously valuable.</p><p><strong>Jack Doyle:</strong>         And it's also really valuable to have forums where people can search, because that's one of the reasons that I started the forums to begin with was that ... Imagine life without forums and people are going to have these questions.</p><p><strong>Jack Doyle:</strong>         And then, they email you. And it's like the 20th time you get the same question, you're like, \"Okay, maybe I should make sure this is out there somewhere for people to find, so I don't have to keep on answering the same thing over and over again.\"</p><p><strong>Jack Doyle:</strong>         So, they've been instrumental in that as a resource for the community and a great resource for us developing the product, definitely. Feature ideas and there's just some really smart people out there that have pitched ideas for doing various things.</p><p><strong>Jack Doyle:</strong>         And it's like, \"Yeah, why didn't I think of that? Let's do that.\"</p><p><strong>John Lindquist:</strong>     So, along those lines, what's the craziest idea, or even craziest use of GreenSock you've seen? Either from the forums or if there's something we can see online, or anything.</p><p><strong>Jack Doyle:</strong>         You know what? You put me on the spot.</p><p><strong>John Lindquist:</strong>     Sorry.</p><p><strong>Jack Doyle:</strong>         No, that's alright. I don't know how to answer that, to be honest. We have a showcase section on the site of examples and it's amazing. I can't keep up with ... Just the other day, I went to some awards site and it was probably 80% of the award-winning sites were using GreenSock.</p><p><strong>Jack Doyle:</strong>         And I click into them and it's like the creativity of the people out there building these sites is just nuts. It's off the charts. And so, I wouldn't even think of using GreenSock in various ways, but they do it.</p><p><strong>Jack Doyle:</strong>         At the end of the day, it's really an engine that changes values over time. So, you don't have to think of just as fading opacity. You can use it to do ... Wire it up to control a thousand different particles.</p><p><strong>Jack Doyle:</strong>         And as you derive something, it's tweaking values. And it's a whole group. It's crazy what people can do. There's nothing that ... There's not a single site where I think, \"Oh, you have to go check this site out.\"</p><p><strong>Jack Doyle:</strong>         Because it's far and away, the craziest use of GreenSock. There's a ton of them. Just go to our examples section on the website and you'll see a lot of really neat stuff.</p><p><strong>John Lindquist:</strong>     Sweet. Is there a you never expected GreenSock to be used in this way or that way sort of example, as far as well, I built the tweenian library. I didn't expect it to use it to, I don't know, pilot a spacecraft to the moon.</p><p><strong>Jack Doyle:</strong>         You know, yeah.</p><p><strong>John Lindquist:</strong>     It sort of seems to me like you built a hammer. And then, you walk down the street and you'd see all these houses. You're like, \"Whoa. I made the thing that helped them make that?\"</p><p><strong>Jack Doyle:</strong>         Yeah. No, you say that, yeah. I know it's been used in a lot of video games, which, I guess, isn't terribly surprising. But I figure it would just be on the web. But, no, there's companies using it to do console level stuff.</p><p><strong>Jack Doyle:</strong>         There's people that ... There's a company who uses it for their printers, the UI on their printers. So, you walk up to an inkjet printer and you have this screen where you interact with it.</p><p><strong>Jack Doyle:</strong>         And there's little animations that happen on that screen UI and that's driven by GreenSock stuff. So, I just never thought that somebody would use it like that.</p><p><strong>John Lindquist:</strong>     Well, that's awesome. That's like walking into Costco into the printer section and being like, \"Hey, I made that.\"</p><p><strong>Jack Doyle:</strong>         Yeah, a little. Yeah, yeah. I was going to mention something about another company, but I always have to be careful. Because some companies would rather not necessarily be publicized.</p><p><strong>Jack Doyle:</strong>         But there was a particular company. I won't divulge who they are. But I was always waiting for them. They're just a big name. There's a lot of other big names that I knew were using our stuff.</p><p><strong>Jack Doyle:</strong>         But there's just this one company and they finally started using it. And I was like, \"Yes, so happy.\"</p><p><strong>John Lindquist:</strong>     Alright. Congratulations on that.</p><p><strong>Jack Doyle:</strong>         Thank you. Thank you. Thank you.</p><p><strong>John Lindquist:</strong>     So, do you remember the transition from Flash to JavaScript and the challenges that came with that? Is that a good memory, a bad memory? I mean, did that-</p><p><strong>Jack Doyle:</strong>         It's a traumatic thing I've tried to forget for years. Thanks for bringing that up.</p><p><strong>John Lindquist:</strong>     Oh, sorry.</p><p><strong>Jack Doyle:</strong>         No. It was ... Yeah, it was weird. In Flash, you know this, it's like you hit control, enter and then, it like publishes this thing. You look at it in the Flash player and it works, or doesn't work. And that's it.</p><p><strong>Jack Doyle:</strong>         But then, in this world of the open web and the browser, it doesn't work like that. There are all these different browsers. And they work so differently. And there's varying support for all these different features.</p><p><strong>Jack Doyle:</strong>         And that's such a different world to deal with. And it's like, \"Oh, it works totally different on Windows than it does on Mac, so I have to figure out ... I've got to set up a Windows computer. And I have to set up ... Oh, and there's devices that have touch enabled. And I have to have an iPad and an Windows OS phone and I have to have Android. And I have ...\", all these different things.</p><p><strong>Jack Doyle:</strong>         And, oh, the Microsoft things use pointer events and Apple uses touch events. And Android is a little different and the order in which the fire events is totally different. I won't go into all the details, but it's overwhelming to have to deal with all that stuff and to make one tool that you can just plug values into and it works consistently across all of those browsers.</p><p><strong>John Lindquist:</strong>     I-</p><p><strong>Jack Doyle:</strong>         Was quite-</p><p><strong>John Lindquist:</strong>     I imagine that of all the people who have suffered through the inconsistencies of JavaScript between browsers and devices that you are possibly the person who has suffered the most.</p><p><strong>John Lindquist:</strong>     Because the feature sets around animations and like you were saying, all of the different events, those were the most inconsistent of everything that was out there. Yeah, thank you for sticking, just to it.</p><p><strong>Jack Doyle:</strong>         Well, there's that. And there's SVG and it's handled totally different in various browsers. And Microsoft doesn't recognize any kind of CSS transforms. You have to do it in the transform attributes. And on and on and on, it goes.</p><p><strong>John Lindquist:</strong>     Tell me how you really feel.</p><p><strong>Jack Doyle:</strong>         It's just nuts. And I had to support, well, I chose to support IE8, if you can believe that, back in the day. And IE8 was like, \"Transforms? What the heck are you talking about, trans ...\". It didn't recognize those.</p><p><strong>Jack Doyle:</strong>         But Microsoft had some crazy, proprietary filter that I had to figure out how to tap into that to mimic transforms in IE8. So, it was just crazy. So, that was the most painful point of moving from ActionScript to JavaScript.</p><p><strong>Jack Doyle:</strong>         Because really, JavaScript, the language itself isn't terribly different than ActionScript. You know this. But yeah, the browser differences were quite far the most painful thing. I miss the days of Flash where you just hit one button and it works, or doesn't work.</p><p><strong>John Lindquist:</strong>     It seems to be getting better though, so that's ... Is there any feature in JavaScript land, or in CSS land, that you're really looking forward to, or something that's finally stabilized? A success story, if you will.</p><p><strong>Jack Doyle:</strong>         To be honest, not really. I mean, requestAnimationFrame is definitely something that, I guess, that has really stabilized in all the browsers. So that's definitely a huge help. There are a lot of other things that are kind of like mostly there, or halfway there.</p><p><strong>Jack Doyle:</strong>         And it's like, I don't know. Is it ever really going to get fully there? I know some people want to talk about the Web Animations API and how-</p><p><strong>John Lindquist:</strong>     Hell yeah, yeah.</p><p><strong>Jack Doyle:</strong>         And how maybe GreenSock tap into that under the hood to have these other benefits and maybe require less code under the hood. But it's like CSS animations where I, in the early days, I thought, \"Oh, I'll just tap into that, because it's hyper-accelerated and blah, blah, blah.\"</p><p><strong>Jack Doyle:</strong>         There's all these articles that say it's the fastest thing out there. And then, I dig in and it's like, \"No, no, no, no. That's not going to work for a bunch of reasons.\" I won't bore you with all the reasons.</p><p><strong>Jack Doyle:</strong>         But there are definitely a slew of reasons as to why that just can't happen. They don't give you the hooks that you need. And the Web Animations API is definitely a step in the right direction.</p><p><strong>Jack Doyle:</strong>         So, I don't want to make it sound bad, or terrible. But it just cannot do what we would need it to do. We build out all these features in GreenSock. And so, if we were to lean on Web Animations API, and it's not even supported in all the browsers right now.</p><p><strong>Jack Doyle:</strong>         But even if, magically tomorrow, it was completely supported across all of them, build on that for a lot of the features that we have. So, it's frustrating. So, you ask about if there are any technologies that have come of age and it's a success story.</p><p><strong>Jack Doyle:</strong>         There's not a lot of them that come to mind, because there's still ... Even transforms have this weird quirks in between various browsers. We end seeing all the Edge cases, right? A lot of developers, they just toss it out there.</p><p><strong>Jack Doyle:</strong>         They're doing translateX or something, whatever. It's finding in most browsers, but we get all the Edge cases. So, if you have this type of element and it's at this type of scenario and like Firefox, if the SVG is not visible, if there is display none, then it chokes in this scenario.</p><p><strong>Jack Doyle:</strong>         And it won't do [inaudible 00:32:19] and whatever. Where everybody's at, but that's somebody we have to deal with all the time. So, I'd say the majority of my day is just-</p><p><strong>John Lindquist:</strong>     Edge cases.</p><p><strong>Jack Doyle:</strong>         Maybe. Well, maybe not the majority of my day, but a lot of my days are dealing with Edge cases, making sure that our tools just work across the board. In a lot of native technologies, they're fine for a lot of cases but they fall short in terms of browsers.</p><p><strong>Jack Doyle:</strong>         So, we have to try to figure out patches around that. So, that's fun stuff. That's what I do.</p><p><strong>John Lindquist:</strong>     Has the code base around GreenSock ... Have any of the Edge cases completely just disrupted the entire architecture of it and require any rewrites over the years? Or, has the code base been able to kind of stay flexible enough as-</p><p><strong>Jack Doyle:</strong>         I don't know about complete rewrites, but it's definitely required. Some heavy lifting, let's say, some heavy modifications of little chunks and pieces. So, I can't remember there being a, \"Hey, we had to change 80% of the code and engine, because of this one thing.\"</p><p><strong>Jack Doyle:</strong>         It's more like, maybe, there's a ... 80% of the code base had to be tweaked somehow to get around this particular thing. And that will be on a really large one. I can't imagine building 10% of the code base.</p><p><strong>Jack Doyle:</strong>         But if you compare the GSAP of today versus two years ago, then yeah, there's probably a whole bunch of stuff that's changed over that time. It's just in little pieces and releases. And you know how that goes.</p><p><strong>John Lindquist:</strong>     Yeah. I mean, your API has been familiar for 10 years. It seems it can still TweenMax.2 and the thing, the time and options. And that's been the way it is. I don't know. It's like the constant in the universe, the one thing that doesn't change.</p><p><strong>Jack Doyle:</strong>         Yeah. And that's been really, very intentional. There's some things that, knowing what I know today, if I could go back and change it, there are a few things that I would about the API.</p><p><strong>Jack Doyle:</strong>         But it's not to the level where it's worth disrupting everybody who's learned it to date, so we really try so hard to not mess with people. Because you know how that is when you learn a tool and you're finally like, \"Oh, I understand this.\"</p><p><strong>Jack Doyle:</strong>         And then, they change it from underneath you. And you're like, \"Oh, shoot. All of my old code broke. I have to go back and figure out what syntax changed and whatever.\" It's no fun.</p><p><strong>John Lindquist:</strong>     Well, I think a lot of libraries can learn from that where the questions you answered 10 years ago when someone asked how to do something are still largely applicable to the way you would do it today.</p><p><strong>John Lindquist:</strong>     So, I think, the confidence in GreenSock itself stems a lot from, you know what, this answer that I found on Stack Overflow from a long time ago is still the correct one. Whereas, everything I see out there these days is this constant overhauls of API's.</p><p><strong>Jack Doyle:</strong>         Yeah, I know. That's totally true. Over 10 years of doing this, we've dealt with a lot of questions and a lot of challenges. And it's kind of like I see new tools go out today and I'm not putting them down.</p><p><strong>Jack Doyle:</strong>         There's some really smart offers out there that put out some great tools. But I find myself looking at the API and going, \"Oh, no. That might seem fine for now but then, there's going to be these 20 different Edge cases that are ... That's going to fall down.\"</p><p><strong>Jack Doyle:</strong>         And you're locking yourself into something that's going to make it slower. And animation is so sensitive to performance. I mean, the human eye picks up on the smallest little glitch. And so, we've made that decision to write the code in a way that, technically, it is bigger.</p><p><strong>Jack Doyle:</strong>         Our library, TweenMax, some consider it somewhat heavy compared to some other options out there. But some of that is very strategic in that you can write code that is really fast at runtime, but it takes more code because you're inlining various things.</p><p><strong>Jack Doyle:</strong>         And so, just my opinion and you others can disagree with me, but I care more about the runtime performance. I would rather take 250 milliseconds more to load the page initially one time. And it's a one-time proxy load library, so all the other pages don't have that extra load.</p><p><strong>Jack Doyle:</strong>         But I would rather give that up on that very first load and have everything run 20% faster, or 50% faster, whatever it is, than have the smaller library. But some people get really myopically focused on that file size thing.</p><p><strong>Jack Doyle:</strong>         So, anyway, sorry. That's probably-</p><p><strong>John Lindquist:</strong>     I was always in the ... Just include all of TweenMax on all of my projects. TweenLite's not a thing to me. I TweenMax all the things.</p><p><strong>Jack Doyle:</strong>         And I think that's smart. Honestly, we've been asked to ... If we were going to create a TweenNano, just even smaller than TweenLite. I don't know if you remember-</p><p><strong>John Lindquist:</strong>     I do.</p><p><strong>Jack Doyle:</strong>         We had one in ActionScript.</p><p><strong>John Lindquist:</strong>     Yeah, I do remember that. I thought you already made that.</p><p><strong>Jack Doyle:</strong>         Yeah. It was like two kilobytes or something. We've been asked for it, but decided not to. Because I just don't think it's a wise decision at this point, because, well, the first ... I don't want to get into all the reasons, but if guys like you who load TweenMax and you get everything.</p><p><strong>Jack Doyle:</strong>         And it's a one-time load anyway, so it's ... If you had to reload it on every single page, okay, then maybe you need to think about something different. But on all the trade-offs with going with something super, super small just for the sake of being super, super small.</p><p><strong>Jack Doyle:</strong>         And you look at the average internet connections these days and how much time are you really giving up by loading that extra few kilobytes versus all of the headaches of trying to be like, \"Oh, wait, I can't do that, because I'm only using TweenNano. Oh, and I can't do that, because I'm only using TweenNano.\"</p><p><strong>Jack Doyle:</strong>         Okay, well, I'm going to have to load TweenMax. Okay, now you just loaded two different things. At the end of the day, you just cost your user more, because of that. They don't have flexibility.</p><p><strong>John Lindquist:</strong>     Yeah. And I think, if you have animation in mind, you're usually using images or SVG files or things that are going to be bigger than the animation library anyway.</p><p><strong>Jack Doyle:</strong>         Yes. Yeah, right on.</p><p><strong>John Lindquist:</strong>     So, I see that, and you mentioned this before we started the call, that you're working on the dev tools. So, now, you're building tools for your tools. So, I'm anxiously awaiting the tools that'll support dev tools that supports tools, but we'll work on that later.</p><p><strong>Jack Doyle:</strong>         We're working on that, but it's super secret. You're not supposed to say that.</p><p><strong>John Lindquist:</strong>     So, the dev tools, tell me about them and what they do and what the development experience was like for you. Was that fun to build? Looking at it seems like-</p><p><strong>Jack Doyle:</strong>         Kind of yes, kind of no. There's some complexities there that were uncommon. But yeah, so for those who aren't aware, GS dev tools is basically ... Here's the problem that it solves. You create some kind of animation for your page.</p><p><strong>Jack Doyle:</strong>         And in my mind, there's two different kinds of animation, broadly speaking. There's the little UI kind of sparkles, the little nuances. You roll over the button and it wiggles, or whatever it is.</p><p><strong>Jack Doyle:</strong>         Those are just little interactions. But then, there are those that are doing storytelling. So, this thing happens. And then, it explodes. And then, this new text comes in. And then, that ... An image comes in over that and then, it explodes and whatever.</p><p><strong>Jack Doyle:</strong>         Those types of animations are particularly difficult to orchestrate. You're choreographing all of these nuanced motions. And one after the other the other and you want some things to overlap and some things not to overlap.</p><p><strong>Jack Doyle:</strong>         And timing wise, I mean. And so, the difference between a .5 second duration and a .3 duration. It might sound silly, but there's a big difference.</p><p><strong>John Lindquist:</strong>     Yeah, for sure.</p><p><strong>Jack Doyle:</strong>         And I, the animator, whenever you're animating, you're experimenting. Do I want to use this ease or that ease? Oh, that thing came in a little too fast. Let me tweak it. I want it to be elastic, or I want it to be backed. I've got to ease up.</p><p><strong>Jack Doyle:</strong>         And so, the life of the average animator, they're going back and forth of refreshing the screen and saying, \"Oh, you know what? 2.5 is too long. Let's try .4. Refresh. Nope, that's no time. Refresh.\"</p><p><strong>John Lindquist:</strong>     .45.</p><p><strong>Jack Doyle:</strong>         .45, yes. So, that back and forth, we're trying to solve some problems with that. And sometimes, you load the page and it's like your animation is really fast. And you look at it and you're like, \"Oh, wait. I didn't quite see that nuanced moments. Did those two things line up exactly the way I was hoping?\"</p><p><strong>John Lindquist:</strong>     Oh yeah, totally.</p><p><strong>Jack Doyle:</strong>         I didn't see it. So then, I've got to refresh the page again and see if that worked. And so, it just gets a little cumbersome. And we also saw a fair number of people who wanted to wire up little progress bars with where you can have your animation playing.</p><p><strong>Jack Doyle:</strong>         And then, you can scrub back and forth so that it rewinds and fast forwards and that type of thing. And then, we're all doing that manually. And it's just like everybody is recreating the wheel to do that.</p><p><strong>Jack Doyle:</strong>         And you have to make something draggable, or you have to hook it up to the progress of the animation. There's all this boiler plate code that you have to put in there and that just seemed wasteful.</p><p><strong>Jack Doyle:</strong>         So, GS dev tools, you load it. You just say, \"GS devtools.create\" and, boom. You get this scrubber that shows up at the bottom of your browser window that you can scrub back and forth. You can alter the time scale of things, so you can make it go in slow motion to see exactly how those things are lining up as you're choreographing the motion.</p><p><strong>Jack Doyle:</strong>         Setting in and out points, because it's really annoying when you're building out a 30-second long animation and you're already done with the first 27 seconds. And you're just working on the last three seconds-</p><p><strong>John Lindquist:</strong>     You have to-</p><p><strong>Jack Doyle:</strong>         Every time you hit refresh, you're watching that stupid 27 seconds you're already done with. And you're like, \"Okay, can you just get to the end already? You're wasting so much time.\"</p><p><strong>Jack Doyle:</strong>         So, this allows you to get around all of that. You can just say, \"End point 27 seconds.\" And it just starts from there, but you can still scrub around if you want to go back and all that.</p><p><strong>Jack Doyle:</strong>         So, it's just some advanced tools for-</p><p><strong>John Lindquist:</strong>     It's amazing.</p><p><strong>Jack Doyle:</strong>         Making your work flow go much smoother. So, there's a bunch of conveniences in there. I don't want to go through all the features. But anybody who's doing a lot of animation, especially with ... Well, only with GreenSock stuff is going to love having GS dev tools in their pocket to just plop on a page.</p><p><strong>Jack Doyle:</strong>         And it's really just for development. You take it out when you publish your site, or you do your animation in the wild. Although, it's fine. If you want to have a scrubber, you can use GS dev tools as much as you want.</p><p><strong>Jack Doyle:</strong>         So, that's the broad idea of GS dev tools.</p><p><strong>John Lindquist:</strong>     Sorry, I didn't pay attention to any of that, because I have the page open. And I'm playing with this loop between 2.52 seconds and 2.63 seconds. I'm having it loop continually and tweaking things.</p><p><strong>John Lindquist:</strong>     I'm so blown away by that.</p><p><strong>Jack Doyle:</strong>         It's fun, huh?</p><p><strong>John Lindquist:</strong>     And you can slow that down. That .1 speed, I can play with between ... Wow, this is ... That's intense.</p><p><strong>Jack Doyle:</strong>         Yeah, it's fun. Once you play around with it, if you've been doing animation for awhile, why didn't I have this sooner?</p><p><strong>John Lindquist:</strong>     Yeah, why didn't you make this sooner?</p><p><strong>Jack Doyle:</strong>         This would have saved me so much time.</p><p><strong>John Lindquist:</strong>     Come on, Jack.</p><p><strong>Jack Doyle:</strong>         My bad, sorry.</p><p><strong>John Lindquist:</strong>     This is incredible.</p><p><strong>Jack Doyle:</strong>         Yeah, and that was the other thing. I don't know if you noticed. There's the other kind of neat feature that is pretty unique is you can name your animations. So, you can have an animation that has 100 different timelines and Tweens that are nested inside of each other like crazy.</p><p><strong>Jack Doyle:</strong>         And you can just slap an ID onto one of those.</p><p><strong>John Lindquist:</strong>     And it's in the dropdown.</p><p><strong>Jack Doyle:</strong>         Or any of them that's in the dropdown. And then, you can just say, \"Skip right to that one timeline that I'm finessing right now.\" And then, it zooms in on that within the amount of times.</p><p><strong>John Lindquist:</strong>     You know, I'm hard to impress, but I am floored right now. This is incredible. Kudos. All the kudos to you. If I find any more kudos, I'll give them to you too.</p><p><strong>Jack Doyle:</strong>         I don't know if you noticed, it's responsive too. So, if you drag your window open small, then it kind of automatically gets rid of some of the live stuff.</p><p><strong>John Lindquist:</strong>     So, if I want to tweak it on my phone sort of thing?</p><p><strong>Jack Doyle:</strong>         Yeah.</p><p><strong>John Lindquist:</strong>     Wow. I think, the rest of the podcast will just be five minutes of me saying, \"Wow.\" That's alright.</p><p><strong>Jack Doyle:</strong>         Listen to your listeners going, \"Wow.\"</p><p><strong>John Lindquist:</strong>     Well, sweet. I think that's a great spot to end, because I am completely blown away by this. Is there anything else you want to say?</p><p><strong>Jack Doyle:</strong>         No, I think that's ... I really appreciate you having me on. And yeah, it's an honor.</p><p><strong>John Lindquist:</strong>     Thank you so much, Jack. You've been a wonderful guest. Have a good one.</p><p><strong>Jack Doyle:</strong>         Thank you.</p>",
    "slug": "jack-doyle-creator-of-greensock",
    "description": "<p>John Lindquist speaks with Jack Doyle, the creator of Greensock. They discuss many things including the motivation behind the creation of Greensock, managing GSAP forums, and how he transitioned from Flash to Javascript.</p><p>Jack didn’t initially create Greensock to be a monetized business, but rather a helpful tool for other developers. He was working at an ad firm doing animation work, and it was there that he found the inspiration to create Greensock.</p><p>The <a href=\"http://robertpenner.com/easing/\">Robert Penner easing equations</a> were like magic for Jack. Such simple equations that could create such cool effects were terrific. He talks about how he doesn't consider himself a math wiz in the slightest. The visual feedback that animation gives with the equations however really help him solidify the concepts.</p><p>Jack's success turning his side project into a successful business is genuinely impressive. It was a stressful time for him; he was working for the agency still at the time. People don't feel safe with a product that might lose support any day, so he goes into the security behind a financially backed product and the factors that lead to him monetizing his business.</p><p>Finally, there is a lengthy discussion on the challenges of having to maintain such a universal library that works on nearly every platform. There are a <i>*lot</i>- of edge cases. Jack also makes an effort to keep the API stable, so that questions that you find online from ten years ago can still apply to you today.</p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/cd292852/transcript\">\"Jack Doyle, creator of Greensock\" Transcript</a></p><h3>Resources</h3><ul><li><a href=\"https://greensock.com/\">Greensock</a></li><li><a href=\"https://greensock.com/forums/\">Greensock Forums</a></li><li><a href=\"https://greensock.com/ease-visualizer\">Greensock Ease Visualizer</a></li></ul><h3>Jack Doyle</h3><ul><li><a href=\"https://twitter.com/greensock?lang=en&lang=en\">Twitter</a></li><li><a href=\"https://github.com/greensock\">Github</a></li></ul><h3>John Lindquist</h3><ul><li><a href=\"https://twitter.com/johnlindquist?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor\">Twitter</a></li><li><a href=\"https://egghead.io/instructors/john-lindquist\">egghead.io</a></li><li><a href=\"https://github.com/johnlindquist\">Github</a></li><li><a href=\"https://johnlindquist.com/\">Website</a></li></ul>",
    "duration": 2811,
    "episode_number": 12,
    "contributors": [
      "John Lindquist"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/1bd59",
    "path": "/podcasts/jack-doyle-creator-of-greensock",
    "published_at": "March 13th, 2018",
    "url": "https://egghead.io/api/v1/podcasts/jack-doyle-creator-of-greensock",
    "edit_podcast_url": "https://egghead.io/podcasts/jack-doyle-creator-of-greensock/edit"
  },
  {
    "id": "podcasts-00000000000000000047",
    "title": "Sarah Drasner talks about SVG animation with Greensock and Vue.js",
    "summary": "John Lindquist interviews Sarah Drasner, a senior cloud developer over at Microsoft and a Vue core team member. She is also known for making super cool animations. Today they discuss what got her from an art background to a full-time developer, resistance to change, why Vue is terrific, and the GreenSock animation platform (GSAP). ",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/355fadf1-14c0-4ff2-8809-1badf048527a/7b14808a_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/355fadf1-14c0-4ff2-8809-1badf048527a/1534346461artwork.jpg",
    "simplecast_uid": "355fadf1-14c0-4ff2-8809-1badf048527a",
    "transcript": "<p><strong>John Lindquist:</strong>     Alright, Sarah, why don't you go ahead and introduce yourself.</p><p><strong>Sarah Drasner:</strong>      Hi, my name is Sarah Drasner, I am a Senior Cloud Developer Advocate at Microsoft. I also am a staff writer at CSS-Tricks and what else do I do? I give web animation workshops with Val Head and I'm a Vue core team member.</p><p><strong>John Lindquist:</strong>     Yeah, congrats on that. I think since the last time we spoke, you joined the Vue core team and Microsoft and all those things. So it's a ... your life is exciting.</p><p><strong>Sarah Drasner:</strong>      Yeah, it's like a whirlwind. It is.</p><p><strong>John Lindquist:</strong>     You're like one of my favorite people. You like all the things that I like and it's fun to see you do much better things with what I like.</p><p><strong>Sarah Drasner:</strong>      Oh, I feel the same way in the reverse here. I listen to, obviously a lot of your Eggheads. Especially the ones with GSAP and stuff. I was like, \"That is really cool.\" Because you explain it so well and so quickly.</p><p><strong>John Lindquist:</strong>     Thank you. Thank you. Appreciate that. Hey so I need to hit you with this hard hitting question first because everybody wants to know. Your twitter handle is sarah_edo. So what does the \"edo\" stand for?</p><p><strong>Sarah Drasner:</strong>      Yeah, actually, it's funny, I didn't really want to join Twitter. I was helping organize an event called Recon, which is a distributed database conference many years ago. I was really making the websites for it and stuff. And my manager came up and was like, \"You should be on Twitter, you know, it helps to promote the conference.\" And like, \"Oh, yeah. Maybe.\" And eventually, they're like, \"You have to be on Twitter.\"</p><p><strong>Sarah Drasner:</strong>      So I think \"sdrasner\" was taken and a few other plays off my name were taken, so edo is a Japanese print. It's a time from Japanese period where they have really beautiful print making. I went to school for print making at one point and just really loved that era. So I figured that was short and I love it. And I probably will never be tired of it. They only problem is that it's just not associated with any other thing of me on the internet.</p><p><strong>John Lindquist:</strong>     I knew there was a story there, huh. That's fun. So tens of thousands of followers later and tens of thousands of tweets later, do you regret joining Twitter?</p><p><strong>Sarah Drasner:</strong>      No, I mean, so many good things have happened from Twitter. So I think it's funny that I was so reluctant, you know. I think I was like, \"No, I'm too private.\" But it's a lot more fun than I thought it was going to be. And also I've met really amazing people that I really respect or gotten to know their work a little bit better from Twitter. Twitter is kind of like where everybody announces the projects that they're working on. And I get to kind of go on there and talk about the things that I like or the things that other people are doing that I think is really exciting. So that's really cool.</p><p><strong>John Lindquist:</strong>     Yeah, yeah. For sure. It's funny for me, I think I'm the same way. I always hesitate to tweet or share anything just because I'm like, \"Ah, no one going to like this anyway.\" And Joel's always like, \"No just put everything out there.\"</p><p><strong>Sarah Drasner:</strong>      Yeah, I think that that's true. I had a friend who was pretty well known on Twitter and I was like, \"I just don't know what to do with it.\" He's like, \"Just say things, like, you're over thinking it.\"</p><p><strong>John Lindquist:</strong>     Right.</p><p><strong>Sarah Drasner:</strong>      And that's been true, actually. I think the thing that I usually do on Twitter is to just try to keep it genuine because the things that I'm saying are actually the things that I'm interested in or the things that I'm interested in talking about. Then you kind of gather around you, the life like minded people, right. If you're like, \"This thing is awesome.\" And someone follows you because of it. You probably have similar taste. So keeping it to what's true to form is pretty nice.</p><p><strong>John Lindquist:</strong>     Yeah, for sure. So I want to ask you about kind of your developer path. I'm looking at some of your bio resume stuff and your art is incredible, for one. And looks like you had quite a bit of education around that. Where did the whole developer stuff start and fit in with all of that?</p><p><strong>Sarah Drasner:</strong>      Yeah, I have a kind of sordid past. I went to school for, actually for print making and scientific illustration. So I was a scientific illustrator at a natural history museum. So I drew dead snakes and lizards for encyclopedias.</p><p><strong>John Lindquist:</strong>     That is awesome. Do you have prints? Have you sold prints?</p><p><strong>Sarah Drasner:</strong>      Yeah, I used to do that all the time. I still have some. Some are in my office. I think I gave some to some friends. Chris Clear has one of mine and stuff. I was working as a scientific illustrator and the reason why they had people who drew things instead of taking photos, and I did take photos for them too. The reason they had drawings is, there's an aperture on a camera and at some point, something's going to be blurry. Especially if you're taking a really close up shot. And drawings never have that point of blurriness.</p><p><strong>Sarah Drasner:</strong>      So we used a thing called the Camera Lucida. It's kind of like ancient contraption, but basically it's a microscope where you can look in and it has a mirror and you can kind of change this gauge so that until you can see your hand and you can see the thing in the microscope at the same time. So you have to be kind of technically trained as a person who draws to begin with, but then you also are somewhat tracing the thing and that technical training is really interesting because I think a lot of people think that drawing is this thing you just have to have talent for and stuff.</p><p><strong>Sarah Drasner:</strong>      It isn't really necessarily. I was a drawing teacher and would teach people who ... People would walk in who are like, \"I'll never draw anything.\" And then you sit down and it's a bunch of formalized steps. Just like programming and you can teach people how to draw in a kind of formal way.</p><p><strong>Sarah Drasner:</strong>      So the problem was at the Field Museum or in general, they came up with this camera that took pictures at every level and composited them together. So I was kind of out of a job for the scientific illustration thing. I think we all saw that one coming.</p><p><strong>Sarah Drasner:</strong>      So they asked me if I could make websites. And this was back in the day where JavaScript was all in line, everything was done with tables. CSS hadn't really caught on yet, it was a while ago. So it was around 2000, I think. 2002. And I said, \"Yes.\" I just picked up HTML for dummies and taught myself. But then the webmaster at the Field Museum kind of took me under their wing and showed me the ropes of making an industry standard site.</p><p><strong>Sarah Drasner:</strong>      So I kept making websites. I made a bunch of websites for the Field Museum and then I went to get my graduate degree and then I eventually was teaching in the Greek Islands as a study abroad professor. But all the while I was making websites. So I was making websites for Stanford and UCSF and a few other places. Kind of on contract, on the side because teachers don't make that much money. I don't know if you know that.</p><p><strong>John Lindquist:</strong>     I have unfortunately.</p><p><strong>Sarah Drasner:</strong>      But eventually I moved back to America from the Greek Islands and got a job at an agency and that was super intense. Almost like bootcamp work where you have to clock out to use the bathroom. If you code a newsletter one day, that takes you one more minute than the other day, you have to justify the difference in time.</p><p><strong>John Lindquist:</strong>     Oh man, yeah.</p><p><strong>Sarah Drasner:</strong>      So that definitely made me level up from where I was at, to higher class sites and stuff. We had to do all sorts of kinds of work at that agency. So that was many jobs ago, even that one. So yeah.</p><p><strong>John Lindquist:</strong>     Wow, that's really cool. Not many people I know actually started their careers in ... It sounds like your is HTML and JavaScript and CSS is the core of the way you started, right?</p><p><strong>Sarah Drasner:</strong>      Yeah, that's what I started with, I think at that agency they did a lot of word press theming so I became a word press expert eventually. And then I moved on to working for Basho that made REAC. That was a distributed systems company. After that, FaunaDB which is also a distributed system. Now I think they do a lot of server-less work that kind of pivoted. And then after that I worked at Zillow group and worked at Trulia as a manager.</p><p><strong>Sarah Drasner:</strong>      So yeah, mostly it's been front end technology. Progressively more and more JavaScript heavy work.</p><p><strong>John Lindquist:</strong>     Right, right. So you've been to that whole shift of web pages to web applications and everything. Have you seen kind of this ... From my point of view, I've seen a lot of back end developers kind of make that shift to the front end and kind of seen their influence kind of take ... You know, you see statically typed languages and all these arguments come up. Have you seen the same thing? Are you seeing the same trend with the way the web is changing?</p><p><strong>Sarah Drasner:</strong>      Oh yeah, for sure. I think that there's a lot of crossover between front and back right now. Especially right now. I think there was some before, to be honest. But definitely when functional programing and those paradigms moved more towards the front end, ended up becoming not just something that people were interested in, but really the way that everyone was developing applications.</p><p><strong>Sarah Drasner:</strong>      I thing REAC was a giant shift for a lot of people and the way that they thought about state management on the front end.</p><p><strong>John Lindquist:</strong>     Yeah, for sure.</p><p><strong>Sarah Drasner:</strong>      I think there's been a lot of shifts here and there. But that seems to me, like the most massive one. Or maybe it was just my education but when REAC came out that really seemed to be one of the biggest changes in the way I thought about making applications.</p><p><strong>John Lindquist:</strong>     Okay. So with that being said, this is 18 years you've been doing websites, what would Sarah with tens of thousands of Twitter followers and traveling the world, speaking at conferences, of now Tell Sarah of 2000. If you had a time machine, you could go back and talk to her about what's life going to be like.</p><p><strong>Sarah Drasner:</strong>      Well, I think you know, the thing that I don't do now that I definitely did do then is I just was so resistant to change in the beginning.</p><p><strong>John Lindquist:</strong>     Okay.</p><p><strong>Sarah Drasner:</strong>      Way back when I was just like, \"This thing will never catch on.\" I think I said that about CSS actually. I was just like, \"Why do we need this? We have tables.\"</p><p><strong>John Lindquist:</strong>     Right. I've been so wrong, so many times.</p><p><strong>Sarah Drasner:</strong>      Right. I think I had a couple of growing pains and I think the major breakthrough in my mind for when I started to accept that there could be and would be paradigm shifts was when Responsive came out. Nobody else at that agency I worked for thought that it was going to be a big deal and I was just like, \"This is the future. We've got to be on this.\" And that was pretty early stage for Responsive and so luckily that was actually really cool because I spent a lot of time learning it before a lot of other people had kind of decided to, so that kind of ramped me up to becoming a lead.</p><p><strong>Sarah Drasner:</strong>      My first time becoming a lead was due to the fact that we got this giant Responsive project and I was the only one who had really mastered that. So I think it is good to embrace change in some ways. Too much change means you're learning too much at once. That's probably the biggest thing.</p><p><strong>Sarah Drasner:</strong>      I think the other thing that I would say to young Sarah is that there's not just one way to do things. I think I kind of understand that in a way that I didn't when I was younger. Having been like, \"This is the industry standard way of doing things.\" Which is totally cool. I think I also just thought that there was, there's one way. And that's really not true because the web is a giant tent and we're all building different kinds of applications and we're building different kinds of websites that serve different needs. So not assuming that you can take your thinking cap off when you're developing is a good idea.</p><p><strong>John Lindquist:</strong>     I totally agree with all that. That's amazing advice. It's crazy how many things keep coming out. Every time I think the web is stabilized. \"Okay, we have this new framework or this new feature. This is all we need.\" And then something else comes out, \"Well, that's way better.\"</p><p><strong>John Lindquist:</strong>     [crosstalk 00:12:54]</p><p><strong>John Lindquist:</strong>     Like Nuxt right now. I can't believe how amazing that is. It makes creating pages, navigation, everything so simple. The transitions between them so simple. And before that I would have never even thought I needed that.</p><p><strong>Sarah Drasner:</strong>      Oh, totally. I completely agree. I just love Nuxt and I feel like at any point in time, if someone's like, \"I have a problem with x.\" I'm immediately, \"Can I build you an application?\" It's become my favorite thing to do is just setting up these applications. Like little building blocks with Vue and Nuxt of just Lego's, putting things together. Just so much fun.</p><p><strong>John Lindquist:</strong>     It's funny how even things like using the terminal to build applications, using something like a CLI is so foreign to me back in the day, but now it's like, \"Oh yeah, I'm just going to open my terminal now.\" And I'm going to launch this new project and run these commands because I'm a ... It seemed like computer nerds did that, not me and my cool, flashy website stuff.</p><p><strong>Sarah Drasner:</strong>      Yeah, totally. And actually Smashing magazine asked me to write an article recently. They're like, \"You're putting out a lot of new content. We have a lot of people who are still using JQuery and aren't sure with themselves with the UCLI and stuff like that. Can you write an article that would speak to those people? And if people want to just include a script tag.\"</p><p><strong>Sarah Drasner:</strong>      And so, I did write that article, but at the end I was kind of like, when you've gotten to this point where you feel comfortable with this. You might want to check out the UCLI because I do think that the UCLI, that's my favorite and if there's just like, it's really beautifully done, it has a lot of really nice configuration options. And when I do workshops for Vue, I love to see the looks on the students' face when they realize that everything is kind of set up for them and it's set up in a way that they can handle and they understand and they can kind of move their way around. Especially with Nuxt where they realize pages are just Vue files. I can do this.</p><p><strong>Sarah Drasner:</strong>      Routing is just from a page to a page. All of that kind of stuff is really special. But I do understand for some people it's a big shift but getting to the point where you can show people, \"Now that you're familiar with this, you might want to check out this other thing. I'm not saying you need to use it, but it can totally speed up your development and just be like a [inaudible 00:15:31] to everything.\"</p><p><strong>John Lindquist:</strong>     It reminds me of one thing. I was teaching a workshop and I brought up in the workshop if you don't know this, I can't remember what ES6 feature it was. If you don't know this ES6 feature you're falling behind and then one of the students called me out on it. And like, \"Well I've been working full-time building these crazy projects. I didn't know about that.\" And just kind of laid into me. That really made me take a step back. I spend so much time in this almost future land of what JavaScript is that sometimes I lose touch of what actual rubber to the road, is that what the term is?</p><p><strong>Sarah Drasner:</strong>      Yeah.</p><p><strong>John Lindquist:</strong>     That's where development is. So I'm like, \"Thank you for humbling me. I apologize for being an idiot and for saying that sort of thing.\" Because I mean, I can't really imagine what building a JQuery site would be like right now, but I can remember what it was like and trying to empathize with that transition between JQuery and ... \"Alright, watch the terminal. If you know HTML, just type this one thing into the terminal. Give me this one thing. And then you have to type run and then create some HTML pages and then you have a navigation.\" It's crazy.</p><p><strong>Sarah Drasner:</strong>      Right. I think that some of it too, like when I've done demos for people who aren't familiar with Nuxt or something. Or even just Vue single file components. When they see it, they're like, \"Oh, I don't know if I want to deal with a new structure.\" And then I show them and it's like, \"No, it's literally like the HTML, the script and the CSS in one place and then that's a component.\" And they're like, \"Oh, I thought it was going to be something crazy scary.\" Or something like, it's not too much of a shift. It's really helpful, I feel like. But it's not throwing out everything in the entire world, which is really kind of nice.</p><p><strong>Sarah Drasner:</strong>      But yeah, having respect for people at all stages of development, I think that's always a really good thing when you're teaching. It is hard to do though because there's times when not using ES6 or something can slow you down.</p><p><strong>John Lindquist:</strong>     Mm-hmm (affirmative)</p><p><strong>Sarah Drasner:</strong>      I don't know if you feel like that. But I definitely feel like when I'm teaching the Vue class, I sometimes just say like, \"I'm going to assume the knowledge of some ES6 here because template literals really saved my life.\" And the [inaudible 00:18:09] right methods and not having the right function every time. I don't know. There's just some stuff that really is so nice to have.</p><p><strong>John Lindquist:</strong>     I taught a lot of Angular workshops and that relied so heavily on ES6 and beyond features with decorators and all that. I had to assume a base level knowledge of these things to teach anything about Angular and I think that kind of hurt Angular's adoption a bit is that there was just so many new things in there that you had to make it over that initial JavaScript hurdle so you can get to the frame work whereas REAC feels more familiar. Vue feels more like HTML and kind of sprinkling in the JavaScript.</p><p><strong>Sarah Drasner:</strong>      Yeah, yeah, and I think that all of them have their strengths for different reasons. That initial hurdle thing is an interesting one because I do feel like ... okay, so we talked about my past a little bit. I've been doing this for a fairly long time so I got to learn everything real incrementally, as things were coming out. I didn't pick up REAC and ES6 at the same time. I could learn one as they were coming out or whatever.</p><p><strong>Sarah Drasner:</strong>      I feel kind of bad for people who have to learn web now because they just must have to learn so much stuff at once that I feel like I've learned over so many years. I don't know if you feel the same way.</p><p><strong>John Lindquist:</strong>     Kind of. I've been struggling with that one. I'm trying to help my niece, teaching her JavaScript, teaching her to learn JavaScript. That's not english. Teaching her JavaScript. And I almost have to say, everything you see on the web is a legacy, JavaScript, everything on stack overflow is legacy and everything in these recently released frame works that are gaining a lot of popularity is current JavaScript are normal.</p><p><strong>John Lindquist:</strong>     That's kind of the opposite of what most people think where they think the frame works now are all new and weird, but their legacy is the comfortable place.</p><p><strong>Sarah Drasner:</strong>      Yeah.</p><p><strong>John Lindquist:</strong>     I don't know. It seems like we're kind of in between that spot.</p><p><strong>Sarah Drasner:</strong>      Yeah, and I think somebody tweeted at me and a few other people the other day saying like, \"If you're teaching people how to learn JavaScript, do you teach them from ES5 or ES6?\" Which I think is a really great question that at first I was like, \"I don't know the answer to this.\"</p><p><strong>Sarah Drasner:</strong>      What I usually do is I take it for the context of the class. Right. I will usually assume that someone who's in my Vue class probably has ES6 experience. But for my SVG animations class, that's kind of a mixture of some ... that's a really broad range of skillsets, I feel like in that class. So I don't exactly ... When I'm doing live coding, what I will do is, I will type some ES5 and then I'll translate it to ES6. And say, \"We could clean this up. If you don't know ES6, don't worry about this. But for the people in the class who are familiar with it, it might look something like this.\" That way, I'm dealing with both. I can see how that would get tiring for some people.</p><p><strong>Sarah Drasner:</strong>      What's unfortunate is if you are learning right now, you kind of need to learn both for the reasons that you said because sometimes a lot of code that I deal with and everybody else deals with is your maintaining code. You're not just ... it's not Greenfield everything. I mean, you're lucky if you're doing Greenfield everything and that's very rarely the case.</p><p><strong>John Lindquist:</strong>     Right.</p><p><strong>Sarah Drasner:</strong>      You're usually maintaining other people's code. So Kyle Simpson look this up and it was 70 percent of a developer's time is reading code not writing it. So I think you need to know both, just so that you're fluent in any kind of project that you get put into.</p><p><strong>John Lindquist:</strong>     Yeah, it's funny because there's so many new features. Speaking of, I think you just wrote an article today about JavaScript.</p><p><strong>John Lindquist:</strong>     [crosstalk 00:22:13]</p><p><strong>Sarah Drasner:</strong>      [inaudible 00:22:14] article of all time. I think I succeeded on upsetting a lot of people.</p><p><strong>John Lindquist:</strong>     No, it was great. Template literals, I couldn't like without them. All these things, they're so daily and normal now. It's funny.</p><p><strong>Sarah Drasner:</strong>      So for those who don't know the article I wrote, I came out with an article called, \"JavaScript I love you, you're perfect, now change.\" Which is really an editorial. It's just me playing but it's all of the things that I would change about JavaScript if I could. Ignoring [inaudible 00:22:53]. All of the history of JavaScript. So there's some stuff in there that's pretty controversial. I think the one that was the most controversial today was the implicit returns in functions. So I kind of talked through what I'd liked and didn't like about arrow functions.</p><p><strong>Sarah Drasner:</strong>      And one of the things was a template literal instead of using the dollar sign and the curly brackets, just using a straight square bracket, because I felt like that would be little bit cleaner, cause less cognitive load. Which definitely made people upset.</p><p><strong>Sarah Drasner:</strong>      So that's good actually. When I first thought of writing this article, I went to Brian Holt, who's a coworker and friend of mine. He does a lot of REAC courses. And I was like, \"Brian, I have a terrible idea.\" He's like, \"Okay let's hear it.\"</p><p><strong>Sarah Drasner:</strong>      I told him about the article and he was like, \"Okay I love it. I think you should do it.\" It's like, \"Get out your paint brushes, today we're bikeshedding.\"</p><p><strong>John Lindquist:</strong>     Yeah, that's a great quote.</p><p><strong>Sarah Drasner:</strong>      Yeah.</p><p><strong>John Lindquist:</strong>     It was funny seeing some of the comments I think someone brought up, \"Oh yeah, you should learn coffee script if you like all that stuff.\"</p><p><strong>Sarah Drasner:</strong>      Yeah, I think I heard a lot about coffee script today. [inaudible 00:24:15] and a few people brought up for some of the ways the syntax's clean up that I suggested. Yeah.</p><p><strong>John Lindquist:</strong>     I'm not brave enough to write something like that. I think some of those thoughts come into my head but I'm not much of a pot stirrer, I guess. I'll leave that up to you.</p><p><strong>Sarah Drasner:</strong>      Yeah, mostly it's fun. I think people definitely did respond with the kind of humor and levity that the article was written in. So that's been really nice. And just kind of fun to bat around ideas with the community.</p><p><strong>John Lindquist:</strong>     Yeah, for sure. So with all the JavaScript stuff I've been teaching my niece, it gets to another point where I need to teach her about managing state.</p><p><strong>Sarah Drasner:</strong>      Mm-hmm (affirmative)</p><p><strong>John Lindquist:</strong>     And showing that in a basic JavaScript way and well then REAC was this and the Vue was this and then there's these other libraries that do this. I think you should write this actually. What is the perfect state for everything?</p><p><strong>Sarah Drasner:</strong>      Yeah, I think that I'm attracted to Vue in part because I do feel like I really like the way it manages state. I feel like I don't think that I would have come up with that on my own but upon looking at it and working with it, especially working with it, it did feel very, very natural. And I think that that REAC, I mention they're an activity system a lot. I think the reactivity system was a really big thing for me because I feel like when I'm sorting with an application most of the things that I'm dealing with is reacting to change.</p><p><strong>Sarah Drasner:</strong>      And so reactivity is just such a natural way of doing that. And for those that don't know what reactivity is and does is it basically allows you to observe a bunch of things that are ordered and time. And it gives you these hooks with which to observe it. So kind of the normal example that people usually give is an excel spreadsheet.</p><p><strong>Sarah Drasner:</strong>      If you have this first cell that has and an input and then another cell that has an input and in the last cell you're saying the sum of these two inputs. You could actually change the first one, without rewriting the other two or the sum part and it would automatically update. So that's reactivity. Right? You're not having to imperatively go back through and say, \"Go look at this, go watch this, go update this.\" It's automatically doing that for you.</p><p><strong>Sarah Drasner:</strong>      And I was really pleasantly surprised working with asynchronous code and animations. And especially things like forms I felt were so easily built in Vue because so much of what I'm doing as a developer is honestly forms. And just like a lot of formulation.</p><p><strong>John Lindquist:</strong>     Ain't that the truth.</p><p><strong>Sarah Drasner:</strong>      So there were really nice things that keep me from yak shaving, like ME Model. Which allows you to kind of capture these key press events. And for that Smashing article that's coming out soon, I do that in JQuery and then I do it in Vue and you can kind of see the different between that imperative programing style and the declarative right away.</p><p><strong>Sarah Drasner:</strong>      Like that in JQuery you're just like, fishing things out of the DOM and asking the DOM what it's doing all the time. Whereas in Vue, you're holding it yourself.</p><p><strong>Sarah Drasner:</strong>      So that's just been great.</p><p><strong>John Lindquist:</strong>     So I just want to say, just quick, quick interrupt here that the views, the event handling of keystrokes, where you can just pass and the control modifier, Eshift modifier and all those modifiers in there. Into the template saying, \"When I mend this field and I hit Command-S, it should do this.\" And just pass that function. I think it's just one of the best arguments for Vue and the template kind of directive approach versus some of the REAC stuff because man, it's nice just to write a few characters out and be completely descriptive of what I'm doing and what I expect to happen. And I think Evan's a genius.</p><p><strong>Sarah Drasner:</strong>      Yeah, I agree there. I think that what ended up happening for me is I was a consultant and someone had hired me for this work and they were using Vue and I was like, \"I don't want to learn another framework.\" But when I dove into this project, even though I'm dealing with this giant code base and this stuff that I've never looked at before. I was surprised at how legible everything was.</p><p><strong>Sarah Drasner:</strong>      And some of what you're talking about with the shift modifier or any kind of keystroke modifier or the ability to have filters or any of these kind of things that they give you with the directives allow me to ramp up so quickly that I was immediately like, \"I really like this.\"</p><p><strong>Sarah Drasner:</strong>      I wasn't spending a lot of time digging around and trying to figure out how things work that kind of knew pretty quickly.</p><p><strong>John Lindquist:</strong>     Right. Was there a lot of forms and stuff. I mean that's ...</p><p><strong>Sarah Drasner:</strong>      Yeah, it was a lot of forms. And things like reacting to APIs. I think Vue was also really good at that.</p><p><strong>John Lindquist:</strong>     Yeah, that whole form story of, \"You're just reading HTML and the form's right there. And the properties are just right in the data. And you can see exactly where they match up.\" This is what I spend my day doing. Exactly what I'm looking for.</p><p><strong>Sarah Drasner:</strong>      Yeah, and I think because I'm interested in animation, there were a couple of things that I literally have to do for every project that I no longer had to do. One thing is transition group. And there's a transition group component in Vue that has FLIP under the hood. And FLIP is a pain. It's just like, I've implemented a million times now, but you don't have to do any of that calculation. It's already doing all that calculation for you.</p><p><strong>Sarah Drasner:</strong>      So you can write CSS or JavaScript to describe what's happening in between. And it handles a lot of that, \"Go get the bounding client REAC of this and measure it against this other thing.\" You don't have to do any of that anymore. That's so huge for me.</p><p><strong>Sarah Drasner:</strong>      And then, in terms of entrances and exits, if you have something coming into the DOM and something's leaving, you've changed the state and something is transitioning. They have a thing called transition modes. So those will allow you to say to the element, \"As soon as this thing has fully left the DOM, then we'll bring this other thing in and start transitioning it in.\" And usually the way you do that is you write a call back or you can get into these call back hell situations.</p><p><strong>Sarah Drasner:</strong>      Or if you're using something like CSS and I know a lot of people do. They do these fake delays and what that can do is if you adjust the timing of the animation, you also have to adjust the delays, structure. So you can forget to do one or the other.</p><p><strong>Sarah Drasner:</strong>      John, you do animation? But adjusting time ...</p><p><strong>Sarah Drasner:</strong>      [crosstalk 00:31:24]</p><p><strong>Sarah Drasner:</strong>      I think you're one of the people who teaches people that animate on the web the most.</p><p><strong>Sarah Drasner:</strong>      Adjusting timing is a huge thing in animation. I've never made an animation where I didn't have to adjust timing. So it sounds like I'm being picky, but that's actually a really common used case. So it allows you to get those kinds of things stated in a really declarative way. And then you just focus on the stuff that you probably want to be paying attention to. Which is like, what is happening during that time.</p><p><strong>John Lindquist:</strong>     Yeah, I think that's a great description. Oh, Vue is wonderful. Speaking of animation, I know you're a big advocate of GreenSock. What was your GSAP, I guess is the platform's name. Do you remember what kind of got you hooked on that? Was thee a first time seeing, \"Oh my gosh.\" Brain explodes scenario?\"</p><p><strong>Sarah Drasner:</strong>      I'm not sure it was a brain explodes scenario. For me. What end up happening was I was kind of condentially interested in animation. It wasn't something that I was doing that much for my work at the time. I just really liked it. Eventually it was something that I did for my work constantly because people knew I was doing it. But at first I was just managing these giant component libraries at the time.</p><p><strong>Sarah Drasner:</strong>      When I started working with animation there was just so many options so I just said, I'm going to learn as many of these as possible so I can see how they all work. So I was just making CodePen project after CodePen project. Just trying out everything.</p><p><strong>Sarah Drasner:</strong>      At one point, I was reading these articles that was like, \"This person says this is faster.\" Then, \"This person says this is faster.\" I didn't have a horse in the game. Is that how you say that? I always ...</p><p><strong>John Lindquist:</strong>     I think so, like betting tracks, yeah.</p><p><strong>Sarah Drasner:</strong>      Okay. Sometimes I mix statements up.</p><p><strong>John Lindquist:</strong>     Oh, me too. I totally know where you're coming from though.</p><p><strong>Sarah Drasner:</strong>      So I decided to run these benchmarks. Which ended up being actually my first CSS tricks article and subsequently is part of why I'm on staff there now. So I benchmarked a bunch of different ways of working with ... At first it was SVG and Canvas in a bunch of different languages and with different tools and everything. And I think when I proposed the article to Chris, he was like, \"This is just like a lot of data and maybe you want to take the Canvas part out and just focus on the SVGs side of things because otherwise it's going to be really confusing.\" Because it was really just like a mass of stuff.</p><p><strong>Sarah Drasner:</strong>      So we narrowed it down to SVG and I ran these benchmarks and what I found was that because of the way that it's implemented, GreenSock performed as well or better than some native technologies. Which I think bears repeating.</p><p><strong>Sarah Drasner:</strong>      GSAP performed as well or better than native technologies. That's really hard to do. Some of that is because the nature of SVG is that it can't be hardware accelerated in Chrome. It can be in Firefox so don't pull your hardware acceleration code out. And they're working on making it able to. There's a spec for it right now and stuff.</p><p><strong>Sarah Drasner:</strong>      So request animation frame sometimes works better that CSS. GSAP works with request animation frame under the HUD, which a lot of libraries do, but they do it really well. They handle it in a really smart way. So I saw the test results and was kind of like, \"Okay, maybe I want to spend a little bit more time learning GSAP. This looks really good.\"</p><p><strong>Sarah Drasner:</strong>      And I was really pleasantly surprised too. All of the major companies kind of used GreenSock. If you go to their examples page, it's just really mind blowing things you can do with it. And it's been around for a very long time. So they kind of have a lot of basis covered that even if you're making a new animation library, it would take you a really long time to get to where GreenSock is in development because they've been working on these problems and just living in it.</p><p><strong>John Lindquist:</strong>     So battle tested.</p><p><strong>Sarah Drasner:</strong>      Yeah. So I've been pretty happy working with it.</p><p><strong>John Lindquist:</strong>     Awesome. You know, one of the most interesting people I've ever met is a guy named Robert Penner and he wrote the easing equations.</p><p><strong>Sarah Drasner:</strong>      Easing equations, yeah.</p><p><strong>John Lindquist:</strong>     Cubic ease in out and all the Bezier quads and all that stuff.</p><p><strong>Sarah Drasner:</strong>      For people listening, if you're not familiar with the Penner easing, you should definitely check it out because that's the defacto standard.</p><p><strong>John Lindquist:</strong>     They're just math and they've just kind of sat there for 20 years or whatever. These are still the exact same things you used for animation across all the languages, across everything.</p><p><strong>Sarah Drasner:</strong>      Isn't that cool? I mean, I feel like nothing that I do is around for than three years. So I'm so impressed with people who come up with things that stand the test of time. I just don't think that ... I think that's way hard to do in technology.</p><p><strong>John Lindquist:</strong>     Yeah.</p><p><strong>Sarah Drasner:</strong>      How did you get involved with animation, John?</p><p><strong>John Lindquist:</strong>     So I'm initially a Flash guy. So one of my first experiences of doing any sort of development was moving a little red ball across the screen on an inter-frame. So from the very beginning, I was interested in having things collide together and having things bounce off each other and grow and shrink based on where the mouse is.</p><p><strong>John Lindquist:</strong>     That rat flash had it's glory days and they were wonderful. But it died a peaceful, well not peaceful death, but it died.</p><p><strong>Sarah Drasner:</strong>      I actually still get people commenting on my YouTube videos, if I do an SVG talk, \"Why don't you use Flash?\" And I'm like, \"Sorry guys I don't know if you've looked around lately but Flash doesn't have the most promising future of all technologies.\"</p><p><strong>John Lindquist:</strong>     Did you miss the memo? There was literally a memo.</p><p><strong>Sarah Drasner:</strong>      We don't often get memos like that. But we got one.</p><p><strong>John Lindquist:</strong>     Yeah. He's not around to write memos anymore, unfortunately.</p><p><strong>Sarah Drasner:</strong>      Yeah, yeah.</p><p><strong>John Lindquist:</strong>     GreenSock started back in the flash world. Jack Doyle, the author was doing flash stuff and back in ActionScript 2, which is very, very close to JavaScript, if you hate flash, but loved JavaScript. That's totally fine. You have to realize they're both based used ECMAScript.</p><p><strong>Sarah Drasner:</strong>      Just to clarify GreenSock has a JavaScript version. That's what I use. There's both versions. But obviously the JavaScript one is more heavily used now.</p><p><strong>John Lindquist:</strong>     Yeah, so I chatted with him about ... I can't remember when he first released GreenSock. He does actually wear one green sock though. I don't know if you knew that. That's his thing.</p><p><strong>Sarah Drasner:</strong>      I met him at dinner, but I didn't think to ask him what his socks looked like.</p><p><strong>John Lindquist:</strong>     Yeah, he wears that one green sock. It's kind of the same color of green that's on the website.</p><p><strong>Sarah Drasner:</strong>      That's great.</p><p><strong>John Lindquist:</strong>     But yeah, seeing that and seeing the stuff he did with it and I think I actually even had ... It wouldn't be called the polar request but because it was before GitHub but I submitted a fix for some 3D easing thing and that was the highest achievements of my life and I don't think I'll ever reach that same high.</p><p><strong>John Lindquist:</strong>     \"But Jack, you know it could do this?\" Anyway. I feel so far behind you now with all the SVG stuff and the amazing ... You have such beautiful art and your CodePens and incredible things with it.</p><p><strong>Sarah Drasner:</strong>      I appreciate that. I think it's really fun. I make a lot of really bad work that I don't show anybody. That's probably the most important part. It's like the thousands of CodePens you're not seeing.</p><p><strong>Sarah Drasner:</strong>      Also I just wanted to say, Jack is really awesome. If you do work with GreenSock they are always open to ideas, they have forums where people will help out and talk to each other. It's a really pretty vibrant community. One of the really cool things was when I was learning GreenSock and especially when I was developing materials for them, that we would have, Jack and I would go back and forth with these nerdy brain dumps for two pages and they would be at three in the morning. I would be typing to him, an email. At three-thirty he sends me a big response to.</p><p><strong>Sarah Drasner:</strong>      So they're just totally willing to be giant nerds and stuff and talk through. Especially if you're like, \"I want to do this and that's not possible. What can we do.\" And they're like totally excited about thinking about the possibilities. And that's how a lot of the new ... They have all these plugins and new features. It's usually born out of people who work with GreenSock a lot saying, \"What if?\" They spend time to make it happen. So that's really cool.</p><p><strong>Sarah Drasner:</strong>      Morph SVG, which is one of the coolest plugins in my mind. Basically what it allows you do to is, you're feeding in one SVG pass. So if you have a really complicated shape, you can just say Morph SVG 2 and go to this other path and basically they swap out the path data and animate it. So it's like easing between two different really complicated shapes, which means you can animate from a toilet to a dollar bill. I don't know why I picked those two.</p><p><strong>John Lindquist:</strong>     Oh man.</p><p><strong>Sarah Drasner:</strong>      Alchemy.</p><p><strong>John Lindquist:</strong>     Sorry I can't get my brain off animation right now. You got to give me a second.</p><p><strong>Sarah Drasner:</strong>      That's really scary that that's where my brain goes to when it's left unattended. You can basically animate that really easily. And you might be thinking like, \"Oh what's the big deal. I could probably just do that with a JavaScript or with another library ... You can't really because you can make that happen, but the animation is usually really ugly. Just doesn't fix the right path points that are closest to each other and ends up being this garbled mess in the between states.</p><p><strong>Sarah Drasner:</strong>      So using this tool, it makes this really smooth transition, but there's more. I sound like I'm in an ad for them. I don't work for them or anything. God, they should pay me. No, I'm just kidding.</p><p><strong>Sarah Drasner:</strong>      But the coolest part is you can also load up this other plugin that's not meant to be deployed and it's just to use in the moment. So you load this plugin called Sign Shape Index and you can basically feed it those two values and what it'll to is bring up this GUI, not really a GUI, but over your code it will point out the fixed point that it's going to start from and the fixed point that's going to end to and allow you to traverse all of the points in that path until you find the right movement of those in between states that you want.</p><p><strong>Sarah Drasner:</strong>      So aside from doing a really good job out of the box, before that, if you want a really refined movement there, you can totally do it. I can give you for the show notes later a demo that I did that just shows off one way of doing this. And If you just hit the plus button, you can see it the whole animation change. So that's pretty cool.</p><p><strong>John Lindquist:</strong>     Wow. Yeah, that'd be awesome. Hey, I hae one last questions I want to ...</p><p><strong>Sarah Drasner:</strong>      Yeah, let's do it.</p><p><strong>John Lindquist:</strong>     Piece of advice I want to get from you. So you released a book, let's see, end of last year your SVG stuff?</p><p><strong>Sarah Drasner:</strong>      Mm-hmm (affirmative), yeah. I think middle of last year, right?</p><p><strong>John Lindquist:</strong>     Middle of last year?</p><p><strong>Sarah Drasner:</strong>      Mm-hmm (affirmative)</p><p><strong>John Lindquist:</strong>     So I think for every book written, there's a thousand defeated aspiring authors out there. And you're able to write a book and write all these articles and produce this great written content. What sort of advice do you have for people who are looking into writing technical books, writing technical blog posts and actually getting it done versus having it stew in your head forever and ever.</p><p><strong>Sarah Drasner:</strong>      Oh, totally. So, couple of the things that I do, that I think help. One thing that's just weird, but if you can do it would be good. I actually write or code while I watch TV, to relax. So if you're able to ...</p><p><strong>John Lindquist:</strong>     What shows specifically?</p><p><strong>Sarah Drasner:</strong>      Right now, Dizzy and I are watching Dexter. He had never seen it before. I watched it a long time ago. So that's really fun. I think before that ... what were we watching? Dark. That was on Netflix. That one was really cool.</p><p><strong>John Lindquist:</strong>     Oh yeah that was good.</p><p><strong>Sarah Drasner:</strong>      We have to do dubbing instead of the subtitles though because I need to be able to hear it because I'm not always looking at the screen if I'm typing. So not everybody can do that kind of stuff I've heard that some people can really focus when something's on and some people can't.</p><p><strong>John Lindquist:</strong>     And you were writing timeline code while watching Dark, right? Is that ...</p><p><strong>Sarah Drasner:</strong>      Yeah, yeah. Exactly.</p><p><strong>John Lindquist:</strong>     I see how your brain works.</p><p><strong>Sarah Drasner:</strong>      Nice catch up there. That's really good. I like it.</p><p><strong>Sarah Drasner:</strong>      So I do that. Another thing is that, I feel kind of weird if things are half done, I don't feel as good, sometimes I imagine how I'm going to feel when it's done. Which is usually pretty good. It's like this dopamine rush of that feeling. So I remind myself ... I just kind of picture what I'm going to feel like if I get finished with it. And then I kind of chase that carrot, you know.</p><p><strong>John Lindquist:</strong>     Interesting. Is that something you learned from someone? Or you just come up with that on your own?</p><p><strong>Sarah Drasner:</strong>      Yeah, I just do that.</p><p><strong>John Lindquist:</strong>     I don't know. There's so many people pitching techniques on how to not procrastinate whatever I don't know.</p><p><strong>Sarah Drasner:</strong>      Yeah, no, it's just something I've been doing for a while now. Oh, another thing is to set other things up in a way that's kind of a reward for you. If I'm working on a thing that is kind of taking me a while and I'm not sure if I'm looking forward to working on it again, sometimes I'll reward myself with a mimosa or sit in a place, a comfy chair that I really like or some other kind of creature comforts that make me feel happy. And that also associates the activity with that thing that you like, which is kind of nice.</p><p><strong>Sarah Drasner:</strong>      And probably the last thing, now I forgot the last thing.</p><p><strong>John Lindquist:</strong>     Uh oh.</p><p><strong>Sarah Drasner:</strong>      Maybe we'll come back to it. I don't remember what the last thing was. I'll let you know ... [crosstalk 00:46:16]</p><p><strong>John Lindquist:</strong>     Sounds really important though.</p><p><strong>Sarah Drasner:</strong>      There was something else.</p><p><strong>John Lindquist:</strong>     We should just end right now. What's the last thing?</p><p><strong>Sarah Drasner:</strong>      And the last thing is a secret that I don't remember.</p><p><strong>John Lindquist:</strong>     For five dollars more ... [inaudible 00:46:34]</p><p><strong>Sarah Drasner:</strong>      There's got to be one more thing. I'll give it to you for the show notes, I guess.</p><p><strong>John Lindquist:</strong>     All right. Awesome. Well thank you so much, Sarah. That was a pleasure chatting with you today.</p><p><strong>Sarah Drasner:</strong>      Yeah, thanks for having me on.</p><p><strong>John Lindquist:</strong>     Thank you for all you do and share and I look forward to seeing more of your amazing CodePens in the future.</p><p><strong>Sarah Drasner:</strong>      Yeah, thank you so much for having me on. I really appreciate it. I'm such a fan of Egghead and your work, John, that I'm just really flattered and excited to be here.</p><p><strong>John Lindquist:</strong>     Thanks.</p><p><strong>Sarah Drasner:</strong>      Thanks.</p><p><strong>John Lindquist:</strong>     All right we'll see you.</p><p><strong>Sarah Drasner:</strong>      Bye.</p>",
    "slug": "sarah-drasner-talks-about-svg-animation-with-greensock-and-vue-js",
    "description": "<p>John Lindquist interviews Sarah Drasner, a senior cloud developer over at Microsoft and a Vue core team member. She is also known for making super cool animations. Today they discuss what got her from an art background to a full-time developer, resistance to change, why Vue is terrific, and the GreenSock animation platform (GSAP).</p><p>Sarah's background was very unusual for a developer. She graduated with a major in printmaking and became a scientific illustrator for a nature museum. She relates drawing to program in that it's just a series of formalized steps. Many people say they can't draw, but if they just opened up and learned the process they would become technically proficient in drawing!</p><p>Sarah also talks about how awesome GSAP is. Through benchmarking, she found that GSAP performed even better than native technologies when working with SVGs. She then gets into MorphSVG, and how it lets you transition between two SVGs and all sorts of things to create transitions.</p><p>Finally, she discusses how she stays motivated on all the many projects she works on. She likes to imagine the feeling she'll get when she finally finishes it and lets that drive her. She also uses positive rewards for little milestones, such as eating a treat she enjoys or sitting in her favorite chair and relaxing.</p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/e1ffe803/transcript\">\"Sarah Drasner talks about SVG animation with Greensock and Vue.js\" Transcript</a></p><h3>Resources</h3><ul><li><a href=\"https://egghead.io/courses/develop-basic-web-apps-with-vue-js\">egghead: Develop Basic Web Apps with Vue.js</a></li><li><a href=\"https://css-tricks.com/intro-to-vue-1-rendering-directives-events/\">CSS Tricks: Intro to Vue</a></li><li><a href=\"https://greensock.com/\">Greensock</a></li></ul><h3>Sarah Drasner</h3><ul><li><a href=\"https://sarahdrasnerdesign.com/\">Website</a></li><li><a href=\"https://twitter.com/sarah_edo\">Twitter</a></li><li><a href=\"https://github.com/sdras\">Github</a></li><li><a href=\"https://egghead.io/instructors/sarah-drasner\">egghead</a></li></ul><h3>John Lindquist</h3><ul><li><a href=\"https://twitter.com/johnlindquist?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor\">Twitter</a></li><li><a href=\"https://egghead.io/instructors/john-lindquist\">egghead.io</a></li><li><a href=\"https://github.com/johnlindquist\">Github</a></li><li><a href=\"https://johnlindquist.com/\">Website</a></li></ul>",
    "duration": 2839,
    "episode_number": 11,
    "contributors": [
      "John Lindquist"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/23cdb",
    "path": "/podcasts/sarah-drasner-talks-about-svg-animation-with-greensock-and-vue-js",
    "published_at": "March 6th, 2018",
    "url": "https://egghead.io/api/v1/podcasts/sarah-drasner-talks-about-svg-animation-with-greensock-and-vue-js",
    "edit_podcast_url": "https://egghead.io/podcasts/sarah-drasner-talks-about-svg-animation-with-greensock-and-vue-js/edit"
  },
  {
    "id": "podcasts-00000000000000000048",
    "title": "Reactive Programming and the P2P Web with André Staltz",
    "summary": "Joel Hooks interviews Andre Staltz, an open-source hacker, and creator of Cycle.js. Andre quit his job to become an open-source hacker and now spends 30% of his time on open-source development and 40% on the Scuttlebutt project.\r\n\r\nToday they discuss the current web's stagnation, the vision of the peer to peer web, and what André is doing to reach that goal. \r\nThey'll also discuss things that are more in Javascript land, such as Cycle.js and the callbag spec.",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/4c524f70-8425-4096-ab39-c623789397ff/c2aaec7d_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/4c524f70-8425-4096-ab39-c623789397ff/1534346472artwork.jpg",
    "simplecast_uid": "4c524f70-8425-4096-ab39-c623789397ff",
    "transcript": "<p><strong>Joel Hooks:</strong>         Hi, Andre.</p><p><strong>Andre Staltz:</strong>       Hey, Joel.</p><p><strong>Joel Hooks:</strong>         Yeah, so I wanted to catch up with you. You've had an interesting ... 2017 seems like it was really interesting to you.</p><p><strong>Andre Staltz:</strong>       Indeed, yeah.</p><p><strong>Joel Hooks:</strong>         Yeah, you quit your job, so you could work on open source and be an open source hacker as a career. How's that going?</p><p><strong>Andre Staltz:</strong>       So, basically, it's not that simple that I quit my job because prior to quitting, I actually was part-time. So, the other time, I was actually doing open source maintenance and doing Egghead instructions, like courses, and also doing workshops here and there. So, I was transitioning quite gradually and not sudden. But yeah, I basically wanted to do even more open source. One of the ways I'm getting income is through Open Collective. The other way is workshops here and there and Open Collective ... I mean, Egghead. So, all these different types of incomes is what keeps me alive.</p><p><strong>Andre Staltz:</strong>       Yeah, and then I'm doing a bunch of open source stuff that doesn't make money as well, not that it doesn't make money, but in the sense that it doesn't have funds like Open Collective.</p><p><strong>Joel Hooks:</strong>         Right, yeah. So, what are you working on? What are your favorite projects?</p><p><strong>Andre Staltz:</strong>       I tried to put something like 30% or 35% of my time to open source Cycle.js with funds, and then something like 45 or 40% of my time goes to a project called Scuttlebutt, and I'm building a mobile app for that. Scuttlebutt is like a distributed or decentralized social network. It's pretty much a social network in the style of Facebook or Twitter, but it's like it's fully local. You have all of its database on your computer. So everything that you say, everything that your friends said are stored on your computer and that's pretty cool. It actually works really well already. A lot of people are using it.</p><p><strong>Andre Staltz:</strong>       I think a lot is actually hard to measure because there may be people who are using it, who are not attached to my friends, my friends of friends. But last time I checked, I have stored on my computer about 2,400 people. That's just like what I want to store on my computer. So, yeah, and it's pretty cool.</p><p><strong>Joel Hooks:</strong>         They're fully anonymous though if they want to be, right? Is that part of the point of decentralize? Is it part of it or-</p><p><strong>Andre Staltz:</strong>       Not necessarily. I mean, some people want to be anonymous; some people want to be just tell who they are. The point is not so much about being anonymous. The points is about just having power over the medium really when you think about it. It's disappointing that one person could be banned forever from a platform. I mean, these kind of things happen, and that's not our main concern, like avoiding people being banned by decentralizing. Our main concern is mostly like, \"Hey, I just actually want to own my data, and I don't want to have any intermediates.\"</p><p><strong>Andre Staltz:</strong>       Then on the other hand, Scuttlebutt also enables a lot of stuff because it's not centralized, and that's related to different patterns that we could build with, like the social protocol. So, for instance, you could build pretty much anything, but just as an example, people have built already a chess app on top of that. They've built a small blogging platform like Medium. One subproject is building a democratic voting system on top of it and a bunch of things. But everything's like ... Imagine if there would be no restrictions on what kind of social features you can build because now, we're just dependent on what Twitter corporation decides to roll out as a feature and whether the favor is going to be a heart or a star. That kind of stuff.</p><p><strong>Andre Staltz:</strong>       But imagine really if you could just do anything, and we're exploring that kind of possibilities as well. It's pretty cool.</p><p><strong>Joel Hooks:</strong>         It's kind of like protocol, I guess, XMPP or something like that. Is that fair to say but for a social network, like a social network protocol?</p><p><strong>Andre Staltz:</strong>       Sure, yeah. So, it's a protocol. When I say Scuttlebutt, it's basically just a protocol and then there are apps that use that protocol. Sort of like HTTP is a protocol, and then the browser is one of those things that use HTTP. But the protocol is actually a pretty simple idea. It's basically everything that you say in a news feed or basically your timeline, you could say. That's just like a huge array of JSON objects and one object is one message that you said and that's it. Then your friends will replicate that, copy-paste that whenever they can sync with you through the internet or through LAN.</p><p><strong>Andre Staltz:</strong>       So, basically, it's a way of syncing all of these arrays so that you can copy-paste whatever your friend said and keep it locally. This local thing is pretty awesome as well, because then you can read it on the plane, or you can read it when you're offline. There may be thousands of stuff, and I mean a lot of content, and you can read that all offline. Yeah, the protocol just dictates how to do that syncing and how to avoid problems with, let's say, tampering of the content. So there's also some cryptographic hashing and signatures going on there in order to keep it safe even if you don't trust the medium, let's say.</p><p><strong>Joel Hooks:</strong>         Yeah, this all gets into the idea, to me, anyway, and that you use this term. It's the first time I think I've ever heard it. But the peer-to-peer web versus the internet that we all know and love. I was just wondering your take on the differences and why we need a peer-to-peer web at this point in our technology.</p><p><strong>Andre Staltz:</strong>       Yeah, so I think we're reaching a point with the internet where innovation is starting to die, I would say. There's a lot of services that are now just enough, like it's basically becoming enough to have just Google, Facebook, and Dropbox, and that's it. There's little innovation going on. I think we reached the peak, and it's not really evolving beyond that when it comes to the web. One of the things that was missed with the web from very early on is that it didn't guarantee peer-to-peer connections pretty well.</p><p><strong>Andre Staltz:</strong>       I mean, we only started having that with WebRTC, which is still not great. So, one of the good examples of the peer-to-peer web is the Beaker browser, and it's pretty awesome and also a pretty simple idea. It's just that your browser will communicate to other browsers directly, and there's no servers in between. They're just like finding each other through a so-called distributed hash table. It's the same idea as, let's say, BitTorrent. So, if you've ever seeded a large file, then imagine your browser seeding a website and then people can leech that website from you, and that's a very amazing idea because we never had that before.</p><p><strong>Andre Staltz:</strong>       Now, it also enables a bunch of innovation, and I think that's something quite awesome to explore given that ... There's a problem that the web is not innovating because of the tech giants. But there's also the problem that the tech giants are behaving like police nowadays in the sense that you can't watch something on YouTube if you're in a specific country, but if you're in another country, you can, and all kinds of things going on, which remove that freedom and that chaos that existed in the early internet and the early web.</p><p><strong>Andre Staltz:</strong>       That chaos created a lot of innovation, so I think it's becoming necessary to go back to that chaos period, that good type of chaos where we're just really trying to rebuild or come up with new ideas on top of this cool foundation.</p><p><strong>Joel Hooks:</strong>         Yeah, because it feels like the Facebooks and Google and these guys, they figured it out, right? They know what they're doing and how they're going to do it and how they're going to capitalize on the internet in its current state. It's understood and limited, and everybody understands the limits, but can we push that? And how do we push that? It's a really interesting question. I think in the next 10 years, it's going to go from question to reality to how it has to be.</p><p><strong>Andre Staltz:</strong>       Yeah, actually, one of the interesting things is that for the non-technical person, they are already living the peer-to-peer internet because they don't really ... The point is that they can do something from person to person, and they're already doing that just on a level that is not on the infrastructure. So, basically, something like Facebook basically hides as well as it can the idea that it's actually centralized. So it gives you this idea that you're connecting directly with your friends, and it tries to make the layer below it hidden or irrelevant.</p><p><strong>Andre Staltz:</strong>       So then people who are not technical already think that they're living the P2P web, but it's on a different level. So then there's always this hidden middleman in between, and we're starting to see the problems with that middleman. I think one of the nice ways of putting that problem is just basically you have a single point of failure, and that failure is usually described in distributed systems as just, \"What if a server crashes?\" But in this case, we're starting to see different types of failures, and one of them is basically a single point of abuse. Let's say some kind of election hacking.</p><p><strong>Andre Staltz:</strong>       So, it's like a single point of hacking elections basically or a single point of trusting the directors of that company who manage that thing. You see, it's a single point of whatever, and since we're living in a such huge planet with a lot of people, it's quite risky to have a single point of anything in that sense. So it's more safe in general also for the very long term. Let's say your children or children of your children live in a world where there's not a single point of whatever, you know?</p><p><strong>Joel Hooks:</strong>         Yeah, I mean, you notice that a lot, and I've seen more presses like the world's biggest online retailer. You can no longer trust their search results because they're pushing garbage, because people have figured out their system, and what happens when you can no longer ... You rely on this so much to run your household or whatever or your business. Then all of a sudden, it's garbage now just like overnight it feels, or our last election and Facebook and some of the press that's gone around that. If we put all our eggs in this one basket, then the whole thing is likely to just become problematic.</p><p><strong>Andre Staltz:</strong>       Yeah, and I mean, we could trust the directors of the company now. Maybe there are angels. Maybe there are great people that just want to do great stuff for us. But that's usually not the case in the very, very long term when they die, and who comes after that. I mean, we've seen this happen many times in history, let's say with dictators or kings. Maybe there was one king that was good, but then there's 10 kings that are not good after that, and that's basically what we have on the internet right now is basically have kings or emperors. So, it's not a good thing to keep.</p><p><strong>Joel Hooks:</strong>         Now, they're like little mini-governments in ways. It's not the exact [crosstalk 00:12:02]-</p><p><strong>Andre Staltz:</strong>       Yeah, yeah.</p><p><strong>Joel Hooks:</strong>         ... and they're not elected. They're more like dictatorships or some of them might be philosopher kings. I don't doubt that some of these folks are super smart and have made the world better in what they do, and they're not be trying evil, like they're not trying to do evil. But intentions versus what actually occurs is often different too, so it's slippery slopes. So the Beaker browser I think is interesting. I actually installed it and played around with it. What it looked like to me was a normal browser that I could just use, but it has some additional features. Is that true to say?</p><p><strong>Andre Staltz:</strong>       Mm-hmm (affirmative). Yeah, so Beaker browser, it basically works with HTTP and HTTPS, but it adds one more protocol, which is called Dat. So just like you have https: lala, you could also put dat: and et cetera. So Dat is basically like a magnet link of torrents. It's similar, but it's not torrent. It's like another thing, which is called Dat. Then you just start leeching that file, and it shows on your browser. So, basically, you could also just say, \"Hey, I have a website here, and I want to start seeding it.\" So then your browser will start hosting it to the rest of the world.</p><p><strong>Andre Staltz:</strong>       It may seem that, okay, you may get a lot of people using your computer, like a lot of requests coming in. But due to the nature of peer to peer, the more people you have downloading your website, the more people you also have uploading your website. So, actually, it's the reverse effect of a distributed denial-of-service, because then it's a better case when there are many downloaders. So that's actually really nice, and Beaker is great for prototyping things, and they also announced that the Brave browser is about to support for that as well. It's not there yet, but Firefox whitelisted Dat, so that extensions could support caching that Dat link whenever you insert it and then loading that site.</p><p><strong>Andre Staltz:</strong>       So there's a lot of innovation going on in that space, and I'd recommend people to give it a try. One of the examples is actually an app called Fritter that only works on Dat, and it's basically like a Twitter clone. But the idea is that you download the front end just like you do with any other website. You also download JSON files that represent content, people, what people said, and news feeds, and you could fork the front end just in the browser. You could literally press the fork button, and then you have that in your computer. You can change how the front end looks. So then it's like a super easy way of customizing your own social network site.</p><p><strong>Joel Hooks:</strong>         Sounds like it might just be fun too just to hack on and explore these new technologies, which I think is a great thing to do too.</p><p><strong>Andre Staltz:</strong>       Yeah, so it's a really good space of innovation as well, and I think it's basically like front end on steroids, because it basically takes back end and says like, \"Hey, nice to meet you,\" but now go alone, you know?</p><p><strong>Joel Hooks:</strong>         Yeah.</p><p><strong>Andre Staltz:</strong>       It's just front end talking to front end literally. There's nothing else.</p><p><strong>Joel Hooks:</strong>         That's cool.</p><p><strong>Andre Staltz:</strong>       It's awesome.</p><p><strong>Joel Hooks:</strong>         You said you spent 30% of your time on a library called Cycle.js, which is a stream-based reactive and functional programming framework.</p><p><strong>Andre Staltz:</strong>       Framework.</p><p><strong>Joel Hooks:</strong>         Yeah, so how's Cycle going and why should people check it out?</p><p><strong>Andre Staltz:</strong>       So Cycle is going good. We're three people in the core team. Me, Jan, and Nick, and we're constantly improving the framework. It's like bug fixes and that type of stuff. But recently ... Well, not that recently, but in the last CycleConf, we sat down, and we talked about how to support push and pull. It's like a new big thing that's coming. It was like really long discussions on how to support different types of, let's say, data sources, and we're getting there.</p><p><strong>Joel Hooks:</strong>         What does push and pull mean just in terms of ... What is push and pull?</p><p><strong>Andre Staltz:</strong>       Push is like a type of data source that comes by itself. Let's say like click events and that kind of stuff. Everything that RxJS covers is basically push. Then pull is basically like passive data sources that just sit there, waiting for you to do stuff, and JavaScript already has a lot of pull data sources, and those are the iterables. So let's say whenever you create a generator, it's basically just sitting there, waiting for you to get more data out of it, and then it resumes that stuff, and it gives you data.</p><p><strong>Andre Staltz:</strong>       But it's just there sitting. You can't actually write a generator that will give you click events, let's say.</p><p><strong>Joel Hooks:</strong>         Right.</p><p><strong>Andre Staltz:</strong>       So then there's these two different worlds, two different types of data sources, and then we're thinking how to support properly the pull type of data source. It's more like a corner case that we want to support, but it's something big, and it's making us think how to support this properly. Then we also thought of how to support WebWorkers in the middle because we're doing a re-architecture of the framework, and then we basically found like, \"Hey, this is actually a good case for just making things work with WebWork really easily.\"</p><p><strong>Andre Staltz:</strong>       So you can say you run that part in WebWork or run that other part in WebWork because everything is message passing. So, WebWorkers were a good fit for that. So yeah, there's a lot of progress going on, and we're just doing work as we can. All of us three in the core team have jobs, and we basically also work part-time on Cycle. That's kind of the deal.</p><p><strong>Joel Hooks:</strong>         Yeah, I've always said that there's two types of developer on the planet, and there's a lot more, but those that will write a framework and those that will never write a framework. I'm definitely in the never camp. It wouldn't occur to me, but it's really great, and I love that folks like you aren't satisfied. You probably could be satisfied if you really wanted to be but aren't satisfied with the status quo, like it isn't ... I don't get the impression like you think react is really horrible. But it's just not how you want to develop your application, so you give us this amazing tool, and Cycle is really, really great.</p><p><strong>Andre Staltz:</strong>       Yeah, sure. So, I believe I'm an idealist in the sense that I'm really not satisfied with how things are. But it's not also, like I'm not angry at the things how they are. I'm just thinking like, \"Okay, this is good, but how can we make things better?\" So I'm basically, like I don't think I see things how they are. I think I see things how, like where they're going. So if some tool is going somewhere, then I judge it basically on where it's going and not like where it is. I think that's a different way of thinking.</p><p><strong>Andre Staltz:</strong>       I thought it was normal, but then you encounter people, and you see that, \"Okay, people think in a different way.\" But yeah, I think I ended up building libraries and frameworks just because I was always trying to find that ideal thing. I was imagining this ideal thing and trying to bring it to today. That's what I want.</p><p><strong>Joel Hooks:</strong>         Yeah, and it's true even not just for other people's frameworks, but it's your own tool kits that you build, because you released xstream, which is a reactive programming stream management library. Then last week, you announced Callbags, which is another ... Feels similar, but it's different, and I was wondering Callbags actually looks really cool, and I looked at it and it was probably ... In terms of readability and the ability to understand what I was looking at, it really jumped out to me to be simpler, I guess maybe, than RxJS or other kind of libraries. So why does Callbags exist? I guess is my question.</p><p><strong>Andre Staltz:</strong>       So, Callbags was like an accidental discovery. As I told, like we're planning some things for the Cycle.js framework, and we wanted ... So, Cycle.js uses as an engine the xstream library. So, engine, as in everything, is stream based, but we also want to support RxJS and stuff. So we used to have RxJS inside the framework, and RxJS is big, which is okay. But as an engine for a framework, we want to keep it very small, and then we made xstream has helped us quite a lot. But it's still not small enough, and it has these particularities.</p><p><strong>Andre Staltz:</strong>       So then I started thinking like, \"Okay, let's just use callbacks just to send stuff back and forth,\" just message passing, and that's what I did. But I also wanted to support just like RxJS has next, error, and complete. I want to support those. I just put a number in front of it. Then I started making this abstraction just basically Callbags, but it's basically streams. Then I just said, \"You know what? I'll just make a small library and see what happens.\" Then I was actually quite happy with it, and yeah. So, I think it's really good as a foundational thing.</p><p><strong>Andre Staltz:</strong>       So for instance for frameworks or libraries, I think it's better to use Callbags because it's not even like a core library. Because when you look at it, it's just a bunch of utilities, and there's no core around those. I mean, there's no core where the utilities are surrounding. So it's just like a spec, you could say. So, then I just decided to know open source, the spec, or basically just write it down and put it as public creative commons public stuff, and that's it. It's a spec. So, if people want to follow ... Like if you want to play by these rules, then you're going to be in the game called Callbags. That's the idea.</p><p><strong>Joel Hooks:</strong>         Thought it looked like a great teaching tool as well, like just because of at its core, right? Like in it. Sometimes, these concepts are difficult for people that if we can simplify it, that's always a great thing. John and I have talked a lot of times that Cycle in itself seems like a good way to teach the principles of front end and JavaScript in terms of ... Just like giving people this core functional experience and put them in a container. Always thought that was a solid thing to do.</p><p><strong>Andre Staltz:</strong>       The interesting thing is that I've been also teaching RxJS, and also Ben has been teaching, Ben Lesh. When we're teaching, we're usually going through this process where we start with almost nothing, and then we add a function, and then this function is called subscribe. That takes an observer. At some point, we just say, \"Okay, but we're going to put all of this inside an object.\" Then you get to RxJS API. So, I've done this quite a lot in conferences and workshops. The other day I just thought, \"Why am I putting it in an object?\"</p><p><strong>Andre Staltz:</strong>       I'm doing that just in order to get to the RxJS API. But what if I would just not put it in an object and just keep it as a function? Then I came up with the Callbags specific, and it turns out that it can do everything that RxJS can do. So I was like, \"Huh, this is interesting.\" So, for now, I'm actually not using Callbags in anything big, but we will use it soon in Cycle.js as the new engine basically. So it's just callbacks. It's very light, very small, and there's basically no dependency that that's one of the things.</p><p><strong>Andre Staltz:</strong>       So, for now, xstream has been the only dependency that is in every Cycle app, and it would be nice if we wouldn't have that. So, it's just like-</p><p><strong>Joel Hooks:</strong>         Just some utility functions, right? Like at the end of the day.</p><p><strong>Andre Staltz:</strong>       Yeah.</p><p><strong>Joel Hooks:</strong>         Well, Andre, it was great to catch up with you. I'm looking forward to see what you come up with next, and we'll talk soon.</p><p><strong>Andre Staltz:</strong>       Yeah, cool. This was great, and thank you.</p>",
    "slug": "reactive-programming-and-the-p2p-web-with-andre-staltz",
    "description": "<p>Joel Hooks interviews Andre Staltz, an open-source hacker, and creator of Cycle.js. Andre quit his job to become an open-source hacker and now spends 30% of his time on open-source development and 40% on the Scuttlebutt project.</p><p>Today they discuss the current web's stagnation, the vision of the peer to peer web, and what André is doing to reach that goal. They'll also discuss things that are more in Javascript land, such as Cycle.js and the callbag spec.</p><p>Scuttlebutt is a web protocol, like HTTP. It's like a vast array of JSON objects that sync between two computers whenever they are both on the same network; this enables data to never reach an outside server, a true peer to peer network! Andre goes into his work on the project and why he believes it is necessary for the future of the web.</p><p>But what is the peer to peer web and why is it better/different than the internet as we know it? Andre says that we are reaching a point where innovation is beginning to stagnate, where it is just enough to have Google, Amazon, and Facebook. We have reached a sort of peak, and things aren't evolving further. Andre goes on to say that one of the fundamental things that the internet missed early on was that it didn't guarantee a p2p connection.</p><p>Andre gives some examples of how you begin to use the p2p web today. The Beaker browser, for example, can still access HTTP and HTTPS connections. However, it can also use the DAT protocol. What is DAT? Well, it allows you to directly \"seed\" your website out, and others can \"leech\" it. Like torrents, the more peers there are accessing your website, the better! He also talks about Fritter, a twitter clone that only runs on DAT. You download the front-end and JSON files of what people are saying. You are even able to fork the front end and customize it for yourself!</p><p>Back in Javascript land, Andre talks about how he plans to properly support the Pull data source in Cycle.js, as well as having web-workers in the middle. He also talks about why he's removing the last library dependency from Cycle.js, xstream, in favor of just using a set of callbag utilities.</p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/5167f749/transcript\">\"Reactive Programming and the P2P Web with André Staltz\" Transcript</a></p><h3>Resources</h3><ul><li><a href=\"https://github.com/dominictarr/scuttlebutt\">Scuttlebutt on Github</a></li><li><a href=\"https://github.com/beakerbrowser/libfritter\">Fritter on Github</a></li><li><a href=\"https://github.com/callbag/callbag\">Callbag Spec on Github</a></li><li><a href=\"https://github.com/beakerbrowser/beaker\">The Beaker Browser</a></li><li><a href=\"https://cycle.js.org/\">Cycle.js</a></li></ul><h3>André Staltz</h3><ul><li><a href=\"https://staltz.com/\">Website</a></li><li><a href=\"https://twitter.com/andrestaltz\">Twitter</a></li><li><a href=\"https://egghead.io/instructors/andre-staltz\">Egghead</a></li><li><a href=\"https://github.com/staltz\">Github</a></li></ul><h3>Joel Hooks:</h3><ul><li><a href=\"https://twitter.com/jhooks\">Twitter</a></li><li><a href=\"https://joelhooks.com/\">Website</a></li></ul>",
    "duration": 1478,
    "episode_number": 10,
    "contributors": [
      "Joel Hooks"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/27kgz",
    "path": "/podcasts/reactive-programming-and-the-p2p-web-with-andre-staltz",
    "published_at": "February 26th, 2018",
    "url": "https://egghead.io/api/v1/podcasts/reactive-programming-and-the-p2p-web-with-andre-staltz",
    "edit_podcast_url": "https://egghead.io/podcasts/reactive-programming-and-the-p2p-web-with-andre-staltz/edit"
  },
  {
    "id": "podcasts-00000000000000000049",
    "title": "React Router with Michael Jackson",
    "summary": "John Lindquist, co-founder of egghead.io, interviews Michael Jackson, co-creator of react-router and co-founder of React Training. Michael talks about his experience with running a massively popular repo with a relatively small code-base, pioneering of new features, and the future of CDN based importing.  \r\n",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/f0ab25b1-6422-4f36-a43e-b92346412805/c3762ff2_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/f0ab25b1-6422-4f36-a43e-b92346412805/1534346483artwork.jpg",
    "simplecast_uid": "f0ab25b1-6422-4f36-a43e-b92346412805",
    "transcript": "<p><strong>John Lindquist:</strong>     All right. Michael, why don't you go ahead and introduce yourself for everyone.</p><p><strong>Michael Jackson:</strong>    Sure. My name is Michael Jackson. I am a software developer by trade. I am currently the co-founder of React Training. Our website is reacttraining.com. I've done a ton of JavaScript in my career primarily JavaScript as well as like some PHP and Ruby and stuff. I spent a few years in the San Francisco Bay Area startups scene, worked at Twitter for a while and tried a few startups on my own and I now live in Carlsbad, California with my wife, and two boys and two little girls. That's me in a nutshell.</p><p><strong>John Lindquist:</strong>     Nice. Two boys and two girls. That's a good balance.</p><p><strong>Michael Jackson:</strong>    Yeah, it is. 11 and nine are the boys and then six and two are the girls. So, it's a good spread.</p><p><strong>John Lindquist:</strong>     Yeah, my kids are real close to your kids' ages. We'll have to hang out sometime. Hey, so I got the React Router site open in the GitHub page. I just want to run a couple of numbers by you and get your reaction here. Right now you have 25 open issues and 4,268 closed issues. How does that make you feel?</p><p><strong>Michael Jackson:</strong>    You know what's funny? React Router was like one of the very first popular opensource projects around React.</p><p><strong>John Lindquist:</strong>     Yeah, for sure.</p><p><strong>Michael Jackson:</strong>    React itself debuted to a lot of criticism. A lot of people didn't like React, it looked strange having this HTML in your JavaScript. So, when Ryan and I started working on React Router, a lot of people weren't really using it at the time. So, that repo, specifically the React Router repo is, I feel like where a lot of people learned about React. Andrew Clark the other day tweeted at me and said that React Router ... Andrew Clark is obviously one of the coauthors of Redux and work at Facebook now, and he works on React itself. He tweeted at me the other day and said that React Router was the first React library he ever used.</p><p><strong>Michael Jackson:</strong>    Jedwatson said something very similar to me. Jed, of course, has worked on React-Select. He's the founder of Thinkmill in Sydney, Australia. So, a lot of people who have been around the React scene for a while got exposed to React on the router. So, a bunch of those issues, those 4,000 somewhat issues, it's really just a lot of people like, \"How do I do this? What is the component? What is an element? How does this work?\" And so, yes, it was issues for the router, but it was also like everybody just learning React together, which was pretty cool I thought.</p><p><strong>John Lindquist:</strong>     But how does that feel for you managing such a largely dependent on opensource product? That's a ton of people asking you a ton questions, probably feedback, both wanted and unwanted.</p><p><strong>Michael Jackson:</strong>    Absolutely.</p><p><strong>John Lindquist:</strong>     What's that like for people who've never done open source or had success or, I don't know if you'd call it success, but a popular opensource.</p><p><strong>Michael Jackson:</strong>    Yeah, absolutely. First of all, I'm still learning about it. I'm still learning the best ways to be a good steward of this project. I've had a lot of great help along the way. It's kind of funny that the Router has kind of now gotten to this point where it's such an integral part of the ecosystem and a lot of people depend on it, a lot of people use it and you can't really do anything without a lot of people in favor and a lot of people against it, right?</p><p><strong>John Lindquist:</strong>     Yeah.</p><p><strong>Michael Jackson:</strong>    There's hardly any issue that comes up where everybody is all on the same side. In fact, there was an API change that we wanted to make just recently. We got one of the ... it's just a prop. We got the default value of one of the props wrong on one of the components. Well, it's a Boolean props. So, in order to change that is gonna be a breaking change. It's not like we can just introduce some other prop and change it. And so, but it was wrong and so we got to move it forward. We gotta we gotta fix it and make a new release and move the library forward.</p><p><strong>Michael Jackson:</strong>    We'll do our best along the way to provide an upgrade path or anything and everything and deprecation notices and to be good stewards of the library. But the very, very first comment ... So, one of our contributors open a PR to get the ball rolling. The very first comment was, \"Please don't do this.\" I thought, if you put that in context, what this person is asking is ... essentially, I know what he's saying. He's saying, \"Please don't make this breaking change.\" But at the same time he's saying, \"Please don't fix your mistakes. Please don't move this library forward.\" Right?</p><p><strong>John Lindquist:</strong>     Right.</p><p><strong>Michael Jackson:</strong>    In the end, we have to sort of own up when we make mistakes, we have to move the library forward. We're going to do so in the friendliest way that we possibly can for consumers of the library as it is depended on.</p><p><strong>John Lindquist:</strong>     Yeah, it's so hard.</p><p><strong>Michael Jackson:</strong>    We're gonna fix it. We're not just going to sort of leave things out there forever. But yeah, you do have to take comments like that with a grain of salt. There's empathy that has to be there. You have to say, \"Okay, I realize that this person ...\" They're saying that because they've felt some pain in the past when we've made changes. I get it. But on the other hand, the future is always brighter than the past, and we just keep learning more, we keep getting better. Software in particular, I don't think is ever really done, is it?</p><p><strong>Michael Jackson:</strong>    There's always something that you can make better, faster, more efficient or some feature that you can add. So, that's just kind of the nature of software and we're doing our best to be good stewards of the software. But yeah, when it does get you to this kind of scale, it does get controversial sometimes, just because it is so widely used.</p><p><strong>John Lindquist:</strong>     Yeah, I imagine the whole process of opensource, you don't think you're gonna ... or you think you're just gonna be coding all day and working on the product itself, but then you realize, wait, I'm setting up some sort of CI build, now I have to ask people to submit tests, I have to manage all these pull requests and do all these things that are just ... well, you probably just want to work on the product itself. Right? And it turns into its own living thing.</p><p><strong>Michael Jackson:</strong>    You know what's funny about the Router code is, it's only a couple of hundred lines. People think like React Router is big. It's not a big code base. It's really not [crosstalk 00:07:29].</p><p><strong>John Lindquist:</strong>     So, here's a number for you. You have 505 contributors. Do you think you have more contributors in lines of code?</p><p><strong>Michael Jackson:</strong>    Oh, I'd say probably about the same. Probably about the same. If you took our actual-</p><p><strong>John Lindquist:</strong>     So, you pull one like of code, Ryan's [inaudible 00:07:43] one line.</p><p><strong>Michael Jackson:</strong>    Yeah, exactly. We'll just put every [inaudible 00:07:46] on one line. I got this if statement.</p><p><strong>John Lindquist:</strong>     That's pretty cool.</p><p><strong>Michael Jackson:</strong>    It's not a ton of code. The vast majority of the work is people work, is communicating with people with the community, with the core React team. The core react team is they're trying to move React forward as well. I was talking about moving the Router forward. They're trying to move React forward. They're trying to introduce some really cool things like async mode, which is something that they actually shipped in fiber, but they haven't been able to turn it on yet. By default, because for fear that everybody's apps are going to break.</p><p><strong>Michael Jackson:</strong>    We're communicating with them. We're communicating with a lot of people. And just trying to kind of set expectations and organize things, and honestly times that I actually get to get into the code of the Router, that's such a small percentage of actually running the Router project. It's kinda funny.</p><p><strong>John Lindquist:</strong>     I want to talk to you, you probably have a unique perspective on this, on moving a project forward or like JavaScript itself moving forward. Comparing that to, like you spend a lot of time training so you get to work with a lot of beginners. How do you manage that? There are so many latest and greatest new things that everyone should be learning versus the ... I know you're just getting started, just accept these basic things. Don't worry about all these things you should be learning, just to work with the accepted guidelines and practices that have been established.</p><p><strong>John Lindquist:</strong>     Do you find that difficult when helping New People get started? There's just so much new stuff out there.</p><p><strong>Michael Jackson:</strong>    It is. I think the difficult part, it's totally understandable, but the difficult part is that, let's say somebody is new to React today. They just want to learn about it. In fact, I was on the phone with someone the other day. He was an engineering manager at a very large company here in the U.S. He has 30 developers on his team that he wants to train. He's trying to get a feel for what this even is. And so, you go out and you Google and you find, oh, React. Well, okay. Maybe React as a good thing. Oh, well, I hear about the Router. And there's also Redux and we should probably be doing our build with webpack.</p><p><strong>Michael Jackson:</strong>    Oh look, you can do a hot reloading with webpack and code splitting. Should we be code splitting? And you get this sort of laundry list of stuff that you want to do it all. So, he was on the phone with me, and you'll go and reach out to a trainer and say, \"Can you train us on all of this? Can you tell us about Redux? Can you tell us about webpack and the router and everything else?\" My response is always, let's just start with React because React, even without anything else that that comes with it, is actually really, really cool.</p><p><strong>Michael Jackson:</strong>    Like the technology, just the paradigm of React and the way that they did functional programming and the component model and encapsulation and how do we put multiple components together? Sometimes people will say something like, \"Oh, well React doesn't have state management built in. And it kind of blows my mind because I'm like, \"That was the thing that got me excited about React. It absolutely does. I think the fact that there is so much stuff out there causes people sometimes to overlook just how great React really is. There really is a lot there to know and understand. I feel like if you get really proficient with it, then you can evaluate all of the other pieces a little bit better.</p><p><strong>Michael Jackson:</strong>    Because you'll have a sense of what you've already got and what your missing instead of buying into everything up front and then not really ever knowing what you have. You know what I'm saying? Does that make sense?</p><p><strong>John Lindquist:</strong>     I do, yeah. I think you guys on the Router team have been pioneers for a lot of these newer concepts as far as render props or using components for routing or components for everything. I think it goes along with the pushback that React saw with JSX in the beginning. Like you come up with these new ideas and you get really passionate about it and it's ... I think what you keep on landing on is an amazing developer experience, which by the way, kudos to you guys for innovating in that space. Have you found that that pushback? Do you feel like you need to be an advocate or like, that you're arguing for these approaches or that people have a hard time? Yeah, go ahead.</p><p><strong>Michael Jackson:</strong>    Yeah, as I was going to say, sometimes I do. Sometimes I feel like I need to speak up about it. I feel like the React community is a pretty awesome community. There are a lot of people in the community who either work at Facebook or who are working on other kind of high profile projects in the community. I feel like we've got a pretty healthy respect for one another. And so, even if, like for example, Kent did something the other day with Babel. He had like a babble macro thing that he was doing, a macro plugin. I saw it and I was like, \"I don't get it. It looks like ...\"</p><p><strong>Michael Jackson:</strong>    I'm programming with strings and he's like, \"No, you misunderstood me. What I meant was this, it's cooler than you think. It was like, as soon as he explained that to me, it was like, \"Oh yeah, that is cool. You're right.\" And I was able to, to sort of expand my mind a little bit and learn from him. I feel like everybody in the community, for the most part, tries to do that with each other. Mainly I'm talking about like, you know, people who are leading the community. I feel like we do have a pretty good dialogue and a pretty healthy respectful for another.</p><p><strong>Michael Jackson:</strong>    Where it's difficult, and where I tend to see a lot of the arguments happen is, whenever, 'cause React is so huge that when the broader community gets involved and that's when you get random people showing up sometimes saying like, \"Well, I don't agree with this, and I hate this.\" Most of the time, it's just because they haven't given it five minutes and they haven't really taken some time to let it simmer and figure out why that's a cool approach.</p><p><strong>Michael Jackson:</strong>    The render props thing was actually a really ... it was actually just indicative of this question that you just asked me. We saw a lot of people were using higher order components. Higher order components were very well documented in both the React docs and also in the things like the flow docs and big popular libraries like Redux use higher order components. It was something that my business partner, Ryan and I kind of looked at. And we were just like, \"This higher order components thing, it's ...\" The first red flag for us was that it was difficult to teach. It was difficult to teach people about that pattern and how to use it and what's going on exactly.</p><p><strong>Michael Jackson:</strong>    And then, there were also just some technical drawbacks, some technical limitations of that pattern. When we saw the render props pattern, which by the way, it wasn't something that I invented. It was something that was ... the first time I ever saw it was in the react-emotion API. When we saw that, I thought, and we just connected the dots and we said, \"You know, this is a pattern that really can do ... It can solve all of the same problems that people are solving with the higher order components. So, couldn't we just use this?\"</p><p><strong>Michael Jackson:</strong>    And it was like, as soon as we put it out there, I feel like a lot of the people who I really respect and admire in the React community, there wasn't like a backlash, but it was like, \"Huh, that's interesting.\" And then, once it started getting adopted more, I started hearing lots of feedback from people where they're like, \"This is actually gonna make typing things a lot easier. If I'm using flow type or typescript, this is actually gonna make typing things a lot easier.\"</p><p><strong>Michael Jackson:</strong>    I was just talking to Sebastian the other day. He's one of the core committers on React. He's like, \"Render props are actually ... We're starting to see some nice downstream effects from that.\" I was talking to Dominic who's working on a part of the core React team as well. When you're just using these functions, I think it's going to be a little bit easier for them to sort of optimize some things in React core. And now, in fact, there was a proposal by Andrew Clark again on the core React team. The first core proposal that I've ever seen for a core React API that actually used a render prop, which was the new context RFC. That was exciting to see.</p><p><strong>Michael Jackson:</strong>    I feel like we went from a place where hardly anybody was using it to now, a place where, even the core team themselves are like, \"This is great. We're seeing good downstream effects from this. Here, let's incorporate this into the core React API.\" Without too much friction from any of those sort of people, it was more sort of from a community standpoint. It was more like, \"What is going on? What is this? Why can't we ...?\" I've kind of got like this list of people whose opinions I'm like, \"Okay, if this person says something, I really need to listen. I really need to listen really, really carefully because that is very high signal.\"</p><p><strong>Michael Jackson:</strong>    It's mostly people who have ... they've just proven in the past that they're willing to listen to me and they're willing to be thoughtful about the things that I say. Again, there's a healthy respect there and I think a pretty good dialogue that's happening in the React community, which I personally really appreciate and really have benefited from being somebody who tries to contribute ideas.</p><p><strong>John Lindquist:</strong>     Yeah, I think it's amazing, and I don't think React as an idea gets enough credit for being flexible enough to introduce a pattern like render props versus a higher order component because higher order components, it's such a common thing in functional programming to create a function that returns a function. So, it's a natural evolution to think, \"We'll just do that for components as well.\" And then, but React's like, \"Well, we're just JavaScript. Why don't you try something else?</p><p><strong>Michael Jackson:</strong>    yeah, like a callback. I feel like that's the equivalent, like in your node code, you say fs read file, and then you give it a callback. What do you want me to do with the contents of the file? Right?</p><p><strong>John Lindquist:</strong>     Yeah, and because it was just JavaScript, it enabled that. Whereas, I think another libraries and frameworks, there's that one blessed path and there's not a lot of room for innovation and invention inside of the library itself.</p><p><strong>Michael Jackson:</strong>    I totally agree. That's actually one of, and I'm not trying to, I really do not want to have this come out negative in any way, but there's .... because there's been a lot of like sparring between the JSX and the templates camp, but that was one thing that I personally felt when I was using templates. I actually wrote the current implementation of mustache.js. I wrote a couple of years ago when I was at Twitter. And so, I had a lot of experience working with templates.</p><p><strong>Michael Jackson:</strong>    The limitation of that approach was that if somebody wanted a feature in Mustache, because it wasn't JavaScript, I, as the maintainer had to evaluate that need and say, \"Well, is this a feature that they really need? How are we going to implement this? Okay, it is a feature that we want. We're going to put it on our roadmap. This will be in the next release in six weeks.\" They were essentially, I was the bottleneck at that point, right? As the person who had to implement this thing into my template, I was the bottleneck.</p><p><strong>Michael Jackson:</strong>    Whereas, when you just use JavaScript ... I don't have anything to do with JavaScript. The TC39 folks are doing that. Heck, yesterday they told me I needed to put semi-colons in all of my code. I was like, \"Fine, whatever. You guys control that. We've got bigger fish to fry.\"</p><p><strong>John Lindquist:</strong>     Yeah, that's another conversation for another day.</p><p><strong>Michael Jackson:</strong>    Oh gosh. I couldn't believe we were there yesterday on Twitter talking about semi-colons. I was just laughing my head off the whole time. I was like, a bunch of people who've been using JavaScript for the past 15 years and we're still talking about semi-colons. But yeah, it definitely did come I think out of the fact that, this JSX, it's a light kind of syntax enhancement on top of just JavaScript. And so, we can find other ways to sort of stitch these things together and because hey, I can pass a function here or I can create a function that wraps another function.</p><p><strong>Michael Jackson:</strong>    There are lots of different ways that I can write JavaScript code, right?</p><p><strong>John Lindquist:</strong>     Yeah. So, I would like to talk about unpkg. It's one of your range on projects, which I absolutely love. unpkg is basically a CDN for npm. Now, the presentation you gave at React rally talked about how unpkg can serve up, not just the libraries, but modules and how you showed you could do a React project with, I'm going to use the term zero-config, which has been a term floating around with webpack and parcel and all these things.</p><p><strong>John Lindquist:</strong>     Do you have like an ultimate vision of what zero-config means and what something like unpkg can do to enable it? Is that ...?</p><p><strong>Michael Jackson:</strong>    I don't have like the full vision yet. I think I've got pieces of it. I think we're starting to see people experimenting with it. There are a lot of people obviously who are doing interesting things in the JavaScript community, but a couple of the people who I follow on Twitter, and particularly Andrea Giammarchi, I say that with a bit of an accent because I actually spent [crosstalk 00:23:46] ...</p><p><strong>John Lindquist:</strong>     Better than I would.</p><p><strong>Michael Jackson:</strong>    ... in Italy on my mission. So, Andrea though, he has been experimenting a lot with unpkg. There's another guy, Matthew, I'm spacing on his last name right now, but his Twitter handle is [@matthewCP 00:24:01]. But anyway, he actually just published a package the other day where he's like, \"You don't have to npm install my dependencies.\" He's just getting his dependencies straight from the network, straight from unpkg, straight from the CDN. I'm starting to see a lot of discussion around, what is the future of JavaScript application delivery look like?</p><p><strong>Michael Jackson:</strong>    JavaScript was born on the web. Inherently, the way we get things on the web is from the network. There has never been a time where we passed around the Internet on floppy disks or CDs. It's always inherently been networked. I guess you could say that was AOL, right? AOL was the internet on a CD.</p><p><strong>John Lindquist:</strong>     Sure.</p><p><strong>Michael Jackson:</strong>    You know what I mean? That the applications and anything you've ever built on the web was made for an environment where there's a client and there's a server and there's a network and there's some latency. Right now, the way that we deploy our applications, the state of the art is, npm install everything to my local machine, webpack it up, bundle it up, deploy those codes to a CDN. And then, hopefully, they've got some kind of a hash and the file name or something so that the next time somebody hits our server, they can reuse a lot of the stuff ... sorry, the next time we deploy, they can reuse a lot of this stuff from our previous deploy, assuming we've done our code splitting correctly and that we don't have new bundles.</p><p><strong>Michael Jackson:</strong>    I think that there could be some kind of a future where we all just get our dependencies, at least from the network, from unpkg, where we've got a globally shared CDN. So, we can say, anybody who needs react, anybody in the world who needs the React Library to run it on a webpage, whether that pages pinterest.com or netflix.com or twitter.com, they're only going to have to load at once.</p><p><strong>John Lindquist:</strong>     Yeah, totally agree.</p><p><strong>Michael Jackson:</strong>    Maybe even we can go further than loading the entire library. Maybe even we can go and just load individual modules. So, I can say, \"Hey.\" Who was doing this the other day? Oh, the Hyperapp. I think I saw you tweeting about that John. Were you using Hyperapp?</p><p><strong>John Lindquist:</strong>     Yes. Yeah, I was thinking HyperTerminal, Hyperapp.</p><p><strong>Michael Jackson:</strong>    It's like the npm package [crosstalk 00:26:55].</p><p><strong>John Lindquist:</strong>     Yeah, Hyperapp. Yeah, the one kilobyte library.</p><p><strong>Michael Jackson:</strong>    Yeah, it's like a one kilobyte vidom thing.</p><p><strong>John Lindquist:</strong>     Yeah, it's cool.</p><p><strong>Michael Jackson:</strong>    Well, I think they say it's vidom, but anyway, I haven't used it a ton. But anyway, I saw that they were ... you literally just put a script tag on your page and then boom, off you go. You're developing, and you're Hyperapp. I actually have a few demos in a repo on the unpkg called unpkg demos. You can go in there, and actually I did a lot of these at the React rally conference as well. There are a lot of different ways that we could possibly use this.</p><p><strong>Michael Jackson:</strong>    You could use a SystemJS, you could use ESM modules in the browser, script type module. You could use, I think I saw a couple of months ago from ... the StackBlitz people released a basically a fully in browser npm client that works on top of unpkg.</p><p><strong>John Lindquist:</strong>     Yeah, I saw that.</p><p><strong>Michael Jackson:</strong>    Which was amazing, right?</p><p><strong>John Lindquist:</strong>     Yeah.</p><p><strong>Michael Jackson:</strong>    The Polymer folks I know are experimenting with pulling things down from unpkg. I've had quite a few conversations with them talking about, oh, how we're gonna load polymer. Polymer I think is actually a really interesting project. They've always been one step ahead of the game, I feel like when ... just with everything that they're trying, the HTML imports and the custom elements and things. I've been really impressed with just kind of that project for a long time. I've been a distant admirer. I think I want to get to know it better this year though. If I was going to pick one project that I would want to get to know better, I think it'd be polymer.</p><p><strong>Michael Jackson:</strong>    But those people, they're already like experimenting with ways to load all of polymer from the network, and that's possible if you ship modules all the way down. First of all, what needs to happen is people who are publishing to npm need to start publishing ECMAScript modules, ES modules. So, CommonJS has traditionally been the bread and butter of npm. That's fine. You can ship a CommonJS built for people who are gonna use your stuff and node, which by the way, I think CommonJS is still the right approach for node.</p><p><strong>Michael Jackson:</strong>    But I think if you're doing stuff for the browser, I think you should be shipping ES modules. Browsers are getting script type module. Once more people actually start shipping modules, then I think tools like unpkg are really going to start to shine in that kind of a situation because it's just a module server, you know?</p><p><strong>John Lindquist:</strong>     Yeah. It's funny to me because if I stop and think about how recent the development it is that client side packages are even available on npm, like when Browserify, I think they were first, I'm not sure. Like Browserify coming out and saying, \"Hey, you can actually grab client side stuff off of npm. Have you considered using npm install to install a library?\" It was like, \"Whoa, that's crazy. Let's do that now.\" They like, well, maybe that wasn't right. Maybe we should have focused our efforts on the traditional way of just loading off the network. It's one of those Jurassic Park, we never stopped to think if we should sort of things, right?</p><p><strong>Michael Jackson:</strong>    Yeah, no, sorry, I interrupted you there. I was just going to say, I still remember the first time I NMP installed jQuery, and I was like, \"What am I doing? npm installed jQuery, what does that even mean?\" But yeah, I know what you're saying. We just sort of went down this path, or at least I think I know what you're saying. We just sort of went down this path, well, we're gonna npm install this stuff and then Browserify was like, \"Well, what if we built these bundles and I'll give you a couple of shims for node modules that you can use in the browser?\" And then, webpack took that to the logical conclusion, which is, you can literally customize anything about your build but we're gonna use a bundler.</p><p><strong>Michael Jackson:</strong>    I think that script tags are cool, man. I think that Command-R to refresh your page. I think that's pretty cool too. I think it's really cool to just have this kind of like nice lightweight way to develop apps. unpkg, the domain name is so short and the URL scheme is so predictable that I don't have to open anybody's documentation or anything to find out what I need to type there. I just say unpkg.com/react or unpk.com/reactdom or React Router or whatever. And I can just really quickly in a development environment type out that stuff and hammer it out. I can put the Babel standalone up there. And now, I've even got Babel and React and React Router and everything right in a page and I can develop something really, really quickly like that without having to worry at all about going and npm installing things and get my build set up and bundling and stuff.</p><p><strong>Michael Jackson:</strong>    So, it brings back this fresh perspective. It's just a way of using the web in a way of sort of being fluent with it that I feel like we got disconnected from with the bundlers and stuff. I'm not trying to dig on webpack. I love me some webpack, is an amazing tool. But I look at the webpack bundles and they're just sort of [shores 00:32:38]. I'm like, \"What's in there?\" I'm not sure. Which is, again, that's totally fine, but I do think there's a little bit of a disconnect there. It's a machine. It's generating stuff for machines. When it's time for humans to interact with this stuff, I feel like ... I think maybe that's why I like script tags. I just like to be able to just manipulate my code with my own hands.</p><p><strong>Michael Jackson:</strong>    It feels a little bit more like it's my product instead of ... I don't know. I'm just rambling at this point. You I know what I mean?</p><p><strong>John Lindquist:</strong>     No, I agree. There's-</p><p><strong>Michael Jackson:</strong>    I feel like we kind of lost something when we went away from that.</p><p><strong>John Lindquist:</strong>     I think we're at the point, there's so many loaders and so many variations of configuration options that there's a certain amount of trust that I just put into other people's hands. Taking that confidence and that trust and putting it back into myself where I'm writing the script tags and I know what module I'm expected to load and how it's gonna load and all those things, there's a certain [foreign language 00:33:48], there's a certain ownership of that, that I think is kind of lost.</p><p><strong>Michael Jackson:</strong>    Yeah, I agree. I totally agree. I'm not the only one who feels this way. It might be hard to explain, but a lot of the people that I talk to, that's precisely the reason that they're excited about unpkg because it's like, \"This feels like the way that the web kind of should have been. Maybe writing your own script tags, maybe that was the right API.\" Maybe the Bundler API is ... obviously, it's good. It's nice. I'm not trying to say anything bad about it, but what if we could just write script tags and it would do as efficient a job as what the bundlers are doing or maybe even more efficient of a job? Because it's-</p><p><strong>John Lindquist:</strong>     Those browsers, they're pretty powerful these days. I mean, Chrome's an entire operating system known.</p><p><strong>Michael Jackson:</strong>    Yeah.</p><p><strong>John Lindquist:</strong>     They have some features in there that I think we haven't quite fully understood yet.</p><p><strong>Michael Jackson:</strong>    Yeah. Well, and couple that with the power of a truly global CDN. Cloudflare's network is absolutely amazing. I saw a stat the other day, so Cloudflare is the CDN that hosts unpkg. They run 10% of the Internet's traffic, runs through Cloudflare's servers. That number just blows my mind when you think about how much stuff that they're sending. They've gotten so good at it and they are so fast at it. And of course, I can take advantage of that as an individual, right. I'll put my application code in a bundle or whatever and I'll put it on Cloudflare or whatever other CDN I'm using.</p><p><strong>Michael Jackson:</strong>    But if we had a shared place, just one place where we're all going to get our dependencies. Right now, it is the npm registry. That's the single place where we all publish our code and just like GitHub is the single place that we all develop our code. But if we had a single place to actually get the code from when we deploy our apps, I think that would be really cool. I think our apps could get ... man, they could get so fast. I think they could get ... we talk a lot about native versus web. If we were able to deploy these things instantly, just like booting a native app on your desktop, I think that's where we get really competitive.</p><p><strong>John Lindquist:</strong>     Yeah. Bundles can get so big if you don't know what you're doing. And then, if you just take that concern out of that completely, where only your project code is being loaded and everything else is cached, that's pretty fast.</p><p><strong>Michael Jackson:</strong>    I totally agree. You John, you were like one of the very first people using unpkg. I was saying that before we started recording the show. So, thank you. Thank you for your influence. I think you actually took the server down one day, didn't you? Like really early on?</p><p><strong>John Lindquist:</strong>     You're welcome. You are very welcome.</p><p><strong>Michael Jackson:</strong>    It was like the second or third month I think that ... it's been running now for about two and a half years. But I think I remember ...</p><p><strong>John Lindquist:</strong>     You give me something shiny and new and I will break it. I guarantee.</p><p><strong>Michael Jackson:</strong>    I think I remember just seeing this sort of massive spike in the traffic and I was like, \"John, is that you?\" And you're like, \"Oh yeah, I was playing around with it.\" It's fun to have people like you who kick the tires. So, thank you, I appreciate that. It's hard to break it now, but in those days, I think it was pretty easy.</p><p><strong>John Lindquist:</strong>     Yeah, it's fantastic. Thank you for making it.</p><p><strong>Michael Jackson:</strong>    Yeah, no worries.</p><p><strong>John Lindquist:</strong>     Okay. Let's go ahead and wrap this up. Is there anything you want to want to pitch? Any upcoming trainings or anything?</p><p><strong>Michael Jackson:</strong>    Yeah, sure. So, let's see. So, React Training, again, is my company. That's how I make a living and pay for all the work that I do. We have a few trainings coming up, so go ahead and check out reacttraining.com. In particular, we are going to be in the Bay Area at Nvidia next month in February doing a workshop at their brand new campus, so that should be really cool to go and check that out. They just moved into a brand new building last year, and it's a super big campus. Anyway, go ahead and check that out and a hope to see you there at one of our other workshops this year.</p><p><strong>John Lindquist:</strong>     Cool. Thanks so much, Michael.</p><p><strong>Michael Jackson:</strong>    Awesome. Thanks, John.</p>",
    "slug": "react-router-with-michael-jackson",
    "description": "<p>John Lindquist, co-founder of egghead.io, interviews Michael Jackson, co-creator of the react-router library, and co-founder of React Training. Michael discusses his experiences with running a massively popular repo with a relatively small code-base, pioneering of new features, and the future of CDN based importing.</p><p>Michael gets into the early days of the react-router repo, and what he had to do to steward the library. \"In open-source, you are not just coding all day.\" It's mostly management, with it being a relatively small code-base that had a lot of users created a situation where you had to have excellent communication and a lot of deliberateness with what you change.</p><p>React is just Javascript, meaning that it enables multiple solutions and allows innovation within the library. It also means that there will be some discourse in the direction that things should go. Michael also discusses how to keep an open dialogue with the React community, even though doing so may pose some challenges.</p><p>Michael is extremely excited about the future of the CDN and unpkg. He says that it would be awesome if Facebook or Pinterest only needed to load the package once, or even if individual modules were loaded instead of entire libraries. unpkg is excellent and predictable. No need to read the documentation on how to include the library in your app. No need to worry about builds, webpack, bundling. It brings back a fresh perspective and lets you just use the web!</p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/cef87f81/transcript\">\"React Router with Michael Jackson\" Transcript</a></p><h3>Resources</h3><ul><li><a href=\"https://reacttraining.com/\">React Training</a></li><li><a href=\"https://unpkg.com/#/\">unpkg</a></li></ul><h3>Michael Jackson</h3><ul><li><a href=\"https://medium.com/@mjackson\">Medium Blog</a></li><li><a href=\"https://twitter.com/mjackson?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor\">Twitter</a></li><li><a href=\"https://github.com/mjackson\">GitHub</a></li></ul><h3>John Lindquist</h3><ul><li><a href=\"https://twitter.com/johnlindquist?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor\">Twitter</a></li><li><a href=\"https://egghead.io/instructors/john-lindquist\">egghead.io</a></li><li><a href=\"https://github.com/johnlindquist\">Github</a></li><li><a href=\"https://johnlindquist.com/\">Website</a></li></ul>",
    "duration": 2320,
    "episode_number": 9,
    "contributors": [
      "John Lindquist"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/1abrt",
    "path": "/podcasts/react-router-with-michael-jackson",
    "published_at": "February 19th, 2018",
    "url": "https://egghead.io/api/v1/podcasts/react-router-with-michael-jackson",
    "edit_podcast_url": "https://egghead.io/podcasts/react-router-with-michael-jackson/edit"
  },
  {
    "id": "podcasts-00000000000000000050",
    "title": "Data Viz using D3 with Ben Clinkinbeard",
    "summary": "John Lindquist interviews Ben Clinkinbeard, a veteran developer and egghead instructor. He currently works as a consultant, focusing on data visualization. Ben discusses his career path, the benefits of having a mentor, and the importance of Data Driven Documents. ",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/9b81fb2d-b39a-44c3-9480-a28e95a0b808/9f7142a8_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/9b81fb2d-b39a-44c3-9480-a28e95a0b808/1534346493artwork.jpg",
    "simplecast_uid": "9b81fb2d-b39a-44c3-9480-a28e95a0b808",
    "transcript": "<p><strong>John:</strong>               All right, Ben, why don't you go ahead and introduce yourself?</p><p><strong>Ben:</strong>                Sure. My name is Ben Clinkinbeard, and I've been working as a developer for about 15 years now. I do a lot of consulting and some teaching and some training. And my focus for the last six or seven years has been largely around data visualization.</p><p><strong>John:</strong>               What sort of data-vis stuff have you done? Anything public that people could check out?</p><p><strong>Ben:</strong>                You could, but you probably haven't. The thing that really sort of got me into it was a multi-year project back when I was still doing Adobe flex development. I did a major project for the Colorado Department of Education, which was then sort of adopted by other state departments of education. I think it ended up in five or six states. And we were essentially visualizing aggregate standardized test data for students in the various states, and so we were working with statisticians and policy people to sort of help them comb through their data and say, \"Are girls doing as well as boys in this district over here and are certain grades in certain districts doing better than others?\" Sort of trying to enable smart decisions by nontechnical people and I was in that for a few years and it's just sort of stuck and evolved into other data visualated stuff. So, I've always enjoyed it.</p><p><strong>John:</strong>               Cool. So with the data-vis stuff you've done, is there a super huge data set you've ever had to tackle that you thought was just super fun to deal with or have you found the data to always have been messed up and unorganized?</p><p><strong>Ben:</strong>                The data is usually pretty decent by the time it gets to the application or at least to the front end of the application, which is where I've spent most of my time. Data cleaning and prep and formatting and things like that has definitely been a major task that's sort of behind the scenes and you don't always think about, but that's definitely a major major source of the time that gets put into projects like that. It's just making sure that the data is right and usable and suits your needs.</p><p><strong>John:</strong>               That's the kind of stuff I've had to deal with so my mind always goes there when thinking about data is cleaning it up. Clean it up, clean it up.</p><p><strong>Ben:</strong>                Somebodies gotta do it, I'm just glad it's not usually me. So.</p><p><strong>John:</strong>               Right on. So let's talk about what you're working on now. You wanna kinda introduce it a bit, the D3 and 5 days and all the related bits?</p><p><strong>Ben:</strong>                Sure. So about three years ago, I went out on my own to be an independent consultant and part of that has been in effort to create my own info products and things like that. The bulk of my work is direct consulting with clients, but I've started to build up sort of some content and not surprisingly, I've chosen to focus on the data visualization space and in particular D3.js, which I always refer to it as the defacto standard data-vis library.</p><p><strong>John:</strong>               I can't think of any others.</p><p><strong>Ben:</strong>                There are plenty of things out there if you want charts out of the box. If you want to be able to say, \"Give me a new bar chart,\" and that be the end of it. There's plenty of options, but if you really want that low level control to build your own visualizations and sort of go beyond the basic chart types, you're right. There's not really another choice that comes to mind besides D3.</p><p><strong>John:</strong>               Can you give a bit, if people haven't heard of D3 before, is there a ten second intro to it of what it is?</p><p><strong>Ben:</strong>                Sure. So the name D3 comes from data driven documents and it really sort of lives up to that name behind the scenes because the way D3 tends to work is it has you write declarative code sort of about what you want to do to morph your data into a document of markup, which usually takes the form of SVG. And so you essentially tell D3, more or less, \"Here's this place on the page that I want to build something, here's the data that I want to build into it, and then here's a set of steps that I want you to take to...\" Well, I shouldn't even say that. You don't tell it the steps to take, you just tell it how you want your data to map into those visual properties.</p><p><strong>John:</strong>               Well, cool. So the D3 in 5 Days in the info stuff you're working on, what kind of gave you that idea? What sparked the interest in actually going out and doing that? Cause I think a lot of people have that similar desire of \"I know this thing, I should share this thing, I should capitalize on this thing.\"</p><p><strong>Ben:</strong>                It was really Egghead that sort of, I feel like, gave me a taste of info products and sources of revenue that aren't, \"I spent and hour today, so you're gonna pay me x dollars for those sixty minutes I spent.\" So actually, I was thinking about this before we started talking. I think, I'm not positive, but I think I was the first Egghead instructor that wasn't you or Joel.</p><p><strong>John:</strong>               I believe so. I think if you go to Egghead.io/instructors and put in either /0 or /1, I think it's you.</p><p><strong>Ben:</strong>                Okay, that was at least four years ago now, maybe a little bit more than four years ago. And I think either you or Joel had specifically asked me to do a D3 video just because I guess I had somewhat of a reputation then as having known it and D3 is sort of interesting in that it seems to pop up all the time on lists of like, when you're looking at a job posting it's like, \"It would be nice if you had this.\" It's in the sort-of-the-nice-to-haves. But not a lot of people seem to know it because it sort of has a reputation for being hard to learn, which it can be. Anyway, that was sort of how I got into the idea of creating content, was I created a short, probably terrible if I went back and looked at it now, set of screen casts about D3 and they were pretty well received and I think I eventually expanded that into a course that I wasn't totally embarrassed by and then I did other topics.</p><p><strong>Ben:</strong>                But I always sort of came back to it as again, this skill that seems to be pretty popular in terms of being sought out in the market, but not a ton of people have it. The way that I've tackled that over the last seven to eight months is I started out by creating a free five day email course called D3andfiveDays.com where you just go there, you sign up, and then I'll send you one lesson a day for five days and my intent is to take a different approach to teaching the topic than people have traditionally taken and struggled with. And so I try and really break it down by concept. Cause there's two or three main concepts in D3 that once you understand those and get your head around those, it makes everything else a whole lot easier. But those few concepts are unique enough in the front end space that if you haven't seen them before, they can be sort of hard to grasp.</p><p><strong>John:</strong>               Right, right. So after you had the idea, what sort of research or what do you think you found that has worked the best? Did you take some sort of boot-strap class? Is there something that's helped you along the way?</p><p><strong>Ben:</strong>                Yeah. So when I got that taste from my early Egghead stuff and was like, \"Man, you know, I wanna do this on my own,\" I started reading everything I could in that boot-strapping space. There's Amy Hoy and Brennan Dunn, Nick Disabato, and Jonathan Stark, and all these people that sort of operate in that space and share their knowledge about how to build those things and I read everything I could get my hands on and spent a lot of time thinking and planning and thinking and planning and reading. Then I looked up and it had been like three years and I basically hadn't accomplished anything, but I read a lot of stuff. I knew how I was gonna scale my traffic and my marketing once I had all these customers, but the thing that was missing was actually content.</p><p><strong>John:</strong>               Content and an audience. Those two things are not easy.</p><p><strong>Ben:</strong>                Those things are surprisingly important pieces of supporting yourself with content.</p><p><strong>John:</strong>               Why don't random people show up and give me money? I don't understand.</p><p><strong>Ben:</strong>                It's a mystery. It's a mystery. And so about halfway through 2017, somewhere around June, I was basically like, \"You know what? It's been long enough. If I don't do something now or in the next six months or so, I need to just shelf it.\" Because basically, I'm just wasting my time and brain cycles thinking about all this stuff. And so I hired a private mentoring coach from that group of experts that I was talking about.</p><p><strong>John:</strong>               Oh yeah, that's right. I remember that.</p><p><strong>Ben:</strong>                Yeah, I hired Jonathan Stark and did his private mentoring program and the last six to seven months have been the most productive in years for me, obviously. And that's sort of why I'm here now. I had gotten to the point where the problem for me was no longer a lack of information or knowing what the options were, or how you could do these things, it was picking one. I was just totally paralyzed with do I create a book, or an email course, or a video course, or a cheat sheet, or a this? You go through all these options and then it's like \"Whoa.\" You just gotta pick one and do it.</p><p><strong>Ben:</strong>                And so basically the first thing, once Jonathan sort of helped me choose D3 as \"Yes, I definitely want to go that way,\" he helped me [inaudible 00:10:26] that space and make sure that would make a good niche to focus on. Then he was basically like, \"Okay, step one is do an email course.\" I paid a lot of money for him to just tell me to do the email course, but just having someone there to say, \"Do this, and after that we're gonna do this. And then you'll do this, this, and this. And hopefully that'll lead to this.\" Just having that there was super.</p><p><strong>John:</strong>               That's so amazing that mentor, someone, just make these decisions for me. I'll do it. Just stuff for me to do.</p><p><strong>Ben:</strong>                Yeah.</p><p><strong>John:</strong>               Do you recommend that?</p><p><strong>Ben:</strong>                Yeah, I mean it you can afford it and you can put the time into it. I was sort of lucky that I had a nice alignment of I had enough funds to afford it and I had a work schedule coming up that was going to allow me to devote some time to my own stuff. That's, of course, always an option for everybody. When do you find the time? But I had been lucky enough to have at least a few months lined up where I knew I wasn't going to be working five days a week for clients. I think some weeks were like three days and some were four. So I was like, \"Alright, I have the time to do it, I have the money, let's just take this last stab and if it doesn't work out, then I'll give up on the whole info product idea.\"</p><p><strong>Ben:</strong>                So I did what I was told and created a five day email course. Then once people complete that initial course, they move on to my regular email list and I send out a weekly tip once a week. It's usually five hundred to a thousand words, so it's not long, but it's a little tip that just basically tries to answer a question of \"How do I do x in ten minutes?\" or whatever. So I send out those weekly tips and then sort of through some research and talking to my coach a little more and trying to observe some of the questions and things that you see in the wider learning community around D3, we sort of identified SVG knowledge as one of the pieces that was lacking as well. Because a lot of front end developers, I think, don't really come across SVG a whole lot outside of you might have used an SVG icon system or SVG fonts.</p><p><strong>John:</strong>               Copy and paste [crosstalk 00:12:47]</p><p><strong>Ben:</strong>                Yeah, exactly. There's a lot of copy and pasting goes on in the SVG space. And so we identified that as sort of skill that is key to being productive with D3, but that a lot of people might not necessarily have. So the next identified product to create was a book that covered D3 as well as an introduction to SVG. What I ended up with was a book that I basically just referred to as \"D3 with SVG\" and it's starts out the first, I think, four chapters are just an introduction to SVG and how it works, how it's different than regular markup and all those things. And then after that first half of the book is over, then we move into actually using D3 to create SVG programmatically rather than having to do it all by hand and then how you use those APIs to create common charts, like column charts, and line charts, and area charts, and scatter plots.</p><p><strong>John:</strong>               Nothing like a scatter plot. That's a great word. Scatter plot.</p><p><strong>Ben:</strong>                Bubble chart, if you're not into the technical term.</p><p><strong>John:</strong>               So just to confirm, you still own a hundred percent of what you produce, right? As a hiring a mentor or a coach, you're just kind of paying them a monthly fee to help push you along so it's not like you took on a business partner or anything.</p><p><strong>Ben:</strong>                Yeah. No, exactly. It's just, I think he works exclusively on like six month chunks. So I did a six month mentoring program and during that time we met every two weeks and then, you know, we would trade emails and Slack messages and everything whenever. And then the biweekly call, but I definitely own everything I create. He's just sort of there to provide advice and direction.</p><p><strong>John:</strong>               No, that's awesome. It blows my mind that I think so many people share that same story of \"I've been sitting on this idea for years and years and I know I can do it because I am an expert. But I can't make those decisions.\" And it just seems like you did just the perfect thing to get past that point.</p><p><strong>Ben:</strong>                Yeah. I mean, everybody's different. I think I often felt like, \"What sort of personal deficiency do I have that I know all this information, but I can't put any of it into action?\" Whatever it takes, man. If you really wanted to try something or get it out there, find whatever sort of cheat you have to to get it done.</p><p><strong>John:</strong>               Right. For sure. So how did, in that same vein, how in the world did you actually finish a book? Because I know I've tried starting books before, I know lots of people who've taken advances on books and they had to give advances back because they could never get it finished or they had to hand it off to someone else. How did you write a book, Ben? What's the secret?</p><p><strong>Ben:</strong>                That's a nightmare scenario. I've heard enough horror stories from traditionally published books that that's not surprising to me, but I cringe every time. So, I have also almost written a book before. Probably a year and a half or so before I did this one. I wrote, I don't know, eighty percent of a book or I thought it was eighty percent of a book, but then when I sort of stepped back and looked at it, I was like, \"Nobodies gonna read that. Nobody cares.\" I may not have been right about that. Maybe I should have just stuck the rest of it in there and hit publish and seen what happened, but I didn't.</p><p><strong>Ben:</strong>                So this time, obviously having a coach there to say, \"Now it's time to write a book,\" help me decide what topic to do it on, that kind of thing, and I think I sort of wavered for a little while. Or not wavered, but I was making progress very slowly. And I think we got to a certain point and he basically said, \"When are you gonna launch your book?\" Whatever my answer was, he was like, \"No, like what day? Because we need to pick a day and say that that's launch day and that's what we're targeting.\" So we did that. I think I ended up writing the last half of the book or the last sixty percent of the book probably in the final three weeks. And it was just another one of those things where I sort of had a good opportunity for it, because I think my client work had even gone down to two days a week at that point. So I had a lot of time available and I basically just shut out the world during the day and said, \"I'm gonna crank on this book.\"</p><p><strong>Ben:</strong>                Actually, I did a lot of the writing at night, sort of after everybody else goes to bed I'm usually the last one up. And so I did a lot of writing at night and then I would do things like editing and all the sort of support tasks around a book during the day. That was one of the things that sort of blew my mind was leading up to the launch and when I launched the book, that's the first time I've actually ever sold a product on my own.</p><p><strong>John:</strong>               How did that first sale feel?</p><p><strong>Ben:</strong>                It was amazing. It was like ten minutes after I opened it. I had sort of recruited a small list of people who wanted early access or were interested in the book from my existing list. And I launched to them, I think two weeks before the general public launch. But, ten minutes after I sent out an email to, I don't know whatever it was, twenty three people or forty two people that have expressed interest. Ten minutes later I had a sale. And I'm like, \"Whoa, what is going on?\"</p><p><strong>Ben:</strong>                Now, the public launch was not quite as exciting. I launched it and there was basically crickets until sort of some marketing activities caught up and things like that.</p><p><strong>John:</strong>               Still, the simple act of making something and then having someone else buy that thing you made. We don't really experience that much in the development world where you're on a contract, or consulting, or whatever you go in and you go help build something with large teams and all that sort of stuff. And you're being told what to do versus the \"Ben went out there, Ben decided to write a book on D3, Ben wrote a book on D3, he put it out there and someone bought it.\" From idea to execution, that was all you and someone decided that was value.</p><p><strong>Ben:</strong>                Yeah, I mean, it's a pretty cool feeling. That's a cool feeling, that's also an even better feeling when you get somebody that did that, you know, they sort of put the trust in you and were like, \"Alright, I'm gonna give you my money for something.\" And then they actually send you an email later and like, \"Hey, this thing's great,\" or \"I love it,\" or \"this really helps,\" or, you know, whatever. It's like, that's a cool feeling. And it's also a cool feeling to wake up and see an email that says, \"Hey, you just made a little bit of money.\" It's like, but I was just sleeping. I made money? I was asleep. That's great. So yeah, it's a lot of fun and there's a lot of thrills to it.</p><p><strong>Ben:</strong>                There's also a ton of prep and support work that I didn't, I shouldn't say support, supporting work that goes in around it. I was just sort of amazed when I launched it, like how many little tasks there were to do, right? You gotta pick what site are you gonna sell it through, and what site are you gonna use for your email list, and how are you gonna follow up with buyers, and how are you gonna deliver the files, and how are you gonna send updates? There's just like a hundred and fifty tiny decisions to make and none of them are hard, but it's a totally different kind of work flow and work day [crosstalk 00:20:57] couple of weeks.</p><p><strong>John:</strong>               Did you still have your mentor at that time to help make those choices?</p><p><strong>Ben:</strong>                I did, yeah. Most of them were sort of, you know, I shouldn't even call them choices. They were just tasks. There was a couple of those choices like what are you gonna use to sell it? He recommended SendOwl, cause that's what he used. That's what I picked and it's been good, but then a lot of it's just like, \"Oh yeah, I need that too, and I need that, and I gotta set that up, and connect these things to these.\" And so it's just a really different work flow when I was in that two or so week period where it was really all book stuff, all day. It just, it felt like a totally different experience than spending the day writing code. Because instead of one or two sort of really deep tasks in a day, which was sort of always my best. You know, if I got two really big things solved in a day of programming, that's a pretty good day. Whereas this was \"I didn't get any big things done, but I literally got thirty five small things done.\"</p><p><strong>Ben:</strong>                I sort of ended up connecting it to, part of the appeal for a lot of people in programming is all those little small winds, that they add up throughout the day. You're like, \"Oh, I got that to work, I got that to work.\" And this is sort of the same thing. It's like, \"I've got that piece working and now I've got that in place. And now I can do this with that.\" There's a lot more to it than I sort of realized in the beginning.</p><p><strong>John:</strong>               Right. And I'm sure, we were joking about automation before we started the podcast, but you were able to take some of your programing skills, and at least the way you think about things, to automate some of those things?</p><p><strong>Ben:</strong>                Yeah, that's been a good way to sort of scratch the programming itch while doing this more content focused stuff, is like building little things for myself. Which I've heard a lot of other people that started doing this kind of work say the same thing. But yeah, so I've sort of spent a little bit of time getting my content production process in place because I felt like a lot of times when I set out to do things before, I would be sort of nervous that I was gonna - when you're writing content as opposed to developing code. For some reason I just feel less secure and like, what's being produced. Especially if you end up sending it somewhere. Say you write an email to a subset of your list and then you want to use that content somewhere else. It's like, where does the single source of truth end up being?</p><p><strong>Ben:</strong>                So I just had sort of a lot stress about how was I gonna set up this work flow so that it felt as solid to me as working on code does? So I basically just used a couple of off the shelf things and a little bit of home grown stuff to whip up something where, essentially everything I do is all markdown source files and then I've got this hodgepodge build process that essentially can spit a single markdown file out into one html document that will get sent through my email marketing software and sent to the list, and then it'll get turned into another page on my website that's got some different formatting and different layout and things like that. And so, being able to scratch those kinds of itches has been a good way to not get totally rusty on the code while I'm neck deep in content stuff.</p><p><strong>John:</strong>               Yeah, for sure. So, let's go ahead and wrap up here. Would you like to pitch anything? Any links you wanna shout out?</p><p><strong>Ben:</strong>                Yeah, so if you have wanted to add data visualization in general or D3 specifically to your skillset, D3and5Days.com is a great place to start, in my totally unbiased opinion. Both of the numbers there are actual numbers, so it's D3 and 5 Days, and yeah, you'll get one free email a day for five days, and then after that you'll get a weekly tip for free. And I will only, very occasionally, bother you about things that you can actually buy from me.</p><p><strong>John:</strong>               Go buy Ben's stuff, it's awesome.</p><p><strong>Ben:</strong>                Thanks, John. It was fun.</p>",
    "slug": "data-viz-using-d3-with-ben-clinkinbeard",
    "description": "<p>John Lindquist interviews Ben Clinkinbeard, a veteran developer and egghead instructor. He currently works as a consultant, focusing on data visualization. Ben discusses his career path, the benefits of having a mentor, and the importance of Data Driven Documents.</p><p>Ben talks about how he worked on a multi-year project for the Colorado Department of Education where he was visualizing aggregate standardized testing data. He discusses his experience there and how it left a long lasting enjoyment of the craft. He also talks about why he chose D3 for his data visualization work, and how he feels that it's the best option in the JS space.</p><p>A lot of companies have D3 as a \"nice to have\" but not many devs have that skill. There is a lot of demand but not enough supply. Seeing this, Ben created a screencast for egghead as our very first instructor! His interest in info-products sparked and he talks about his experience and the challenges he faced building his email course and then a full-fledged D3 and SVG book.</p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/d2851987/transcript\">\"Data Viz using D3 with Ben Clinkinbeard\" Transcript</a></p><h3>Resources</h3><ul><li><a href=\"https://benclinkinbeard.com/d3in5days/\">D3 in 5 Days</a></li></ul><h3>Ben Clinkinbeard</h3><ul><li><a href=\"https://egghead.io/instructors/ben-clinkinbeard\">Egghead</a></li><li><a href=\"https://github.com/bclinkinbeard\">Github</a></li><li><a href=\"https://twitter.com/bclinkinbeard?lang=en\">Twitter</a></li></ul><h3>John Lindquist</h3><ul><li><a href=\"https://twitter.com/johnlindquist?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor\">Twitter</a></li><li><a href=\"https://egghead.io/instructors/john-lindquist\">egghead.io</a></li><li><a href=\"https://github.com/johnlindquist\">Github</a></li><li><a href=\"https://johnlindquist.com/\">Website</a></li></ul>",
    "duration": 1502,
    "episode_number": 8,
    "contributors": [
      "John Lindquist"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/1p97m",
    "path": "/podcasts/data-viz-using-d3-with-ben-clinkinbeard",
    "published_at": "February 12th, 2018",
    "url": "https://egghead.io/api/v1/podcasts/data-viz-using-d3-with-ben-clinkinbeard",
    "edit_podcast_url": "https://egghead.io/podcasts/data-viz-using-d3-with-ben-clinkinbeard/edit"
  },
  {
    "id": "podcasts-00000000000000000051",
    "title": "12-factor Javascript Applications using Docker with Mark Shust",
    "summary": "John Lindquist has a conversation with the Mark Shust, an expert with Git and Docker. They talk about the 12-factor style of building an application and why devs should have a standard method. ",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/826f1b9f-3c99-4712-919a-03cbad5356ac/d035ba36_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/826f1b9f-3c99-4712-919a-03cbad5356ac/1534346494artwork.jpg",
    "simplecast_uid": "826f1b9f-3c99-4712-919a-03cbad5356ac",
    "transcript": "<p><strong>John Lindquist:</strong>     All right, I'm here with Mark Shust. Mark, why don't you go ahead and introduce yourself?</p><p><strong>Mark Shust:</strong>         Sure. I am a full stack developer. Mainly have a background in PHP and e-commerce. Yeah, I work a lot with Node, and Git, and Docker.</p><p><strong>John Lindquist:</strong>     Sweet. When was the switch from PHP to Node?</p><p><strong>Mark Shust:</strong>         I still work primarily with PHP, actually.</p><p><strong>John Lindquist:</strong>     Okay.</p><p><strong>Mark Shust:</strong>         But I work on, actually, a side project that runs with Meteor, React, and Node, so some experience there.</p><p><strong>John Lindquist:</strong>     That's an interesting stack. I just wanna say first off that I absolutely love your 12 Factor course that you're releasing, or that was released I guess. It's just like the perfect, for me, for someone who's a front end JavaScript developer, and who's not very confident in the whole Docker. I use Git, just the basic Git push stuff. I don't follow really a lot of the guidelines, but just to have something really laid out for me like, \"here are the best principles\". Then you go and show it, like that just ... Anyway, thank you for making this.</p><p><strong>Mark Shust:</strong>         Sure, yeah. I've always been a big thumper of best practices. I think they really help streamline and guide you in how to do things.</p><p><strong>John Lindquist:</strong>     Yeah, for sure. Let's go ahead and talk about Git and Docker and kinda the 12 Factor stuff. It starts with a lot of Git information, like best practices around Git. What sort of experiences do you have with Git around using the tools and shortcuts? Do you use just terminal-based stuff? Are you advocating Git flow to everyone you meet?</p><p><strong>Mark Shust:</strong>         Yeah. I primarily use command line and terminal for everything around Git. There's a GUI out there called Sourcetree, but I kind of always had problems with it. I use Git flow, it's a branching model for Git. It's basically a way of working on features and managing how that feature gets into the code base. I actually came up with a simplified version of Git flow, because there are a lot of complexities with managing the branches. It seems like you're always merging branches into another branch constantly.</p><p><strong>John Lindquist:</strong>     Okay, I can see that, yeah.</p><p><strong>Mark Shust:</strong>         Yeah, so I actually like, call it Git ship, and it's basically Git flow without the develop branch, and without hot fix branches.</p><p><strong>John Lindquist:</strong>     So features are just based on master?</p><p><strong>Mark Shust:</strong>         Yep, features are based on master. Then you create release branches at the start of every development period. And then you're just really doing merges into those release branches. It greatly simplifies things.</p><p><strong>John Lindquist:</strong>     Have you seen devs struggle with the Git model, or have you seen Git flow kind of fix that for people?</p><p><strong>Mark Shust:</strong>         A lot of the problems I see with developers working with Git is they don't have a specific way to manage their Git process. You need a way to manage your code base and kind of guide your code through the whole process. Git flow is typically used by everyone. It's kind of like the standard for a normal deployment process, so that does fix a lot of things. There's some complexity of merging branches, and all of that, but other than that it works quite well.</p><p><strong>John Lindquist:</strong>     I think if just you open the Git docs and you see the crazy amount of commands you have available you're like, \"Well, I don't even know where to start\". Git flow gives you that nice, \"Well, first you're gonna work on a feature, so let's make a feature branch. Then commit to that, then push, and then merge it back in\". It's like I think that's what people need to understand about Git is \"Start here, do this, move it back over here, release it, test i\". I think you explained that really well.</p><p><strong>Mark Shust:</strong>         And there are really so many commands with Git. I typically use about four or five of those during normal working process. There are some very helpful commands like Git bisect, and Git blame, but typically you're using just commit, merge, push, you know all the normal, basic things. So I wouldn't get overwhelmed with all of the commands with Git.</p><p><strong>John Lindquist:</strong>     Compared to what SVN and CDS and the stuff I've used in the past, and the catastrophic merge failures we used to have, Git seemed pretty stable and reliable.</p><p><strong>Mark Shust:</strong>         Yeah. I got started with my repository tracking on SVN, pretty much. And that was just a nightmare with a lot of folders being created with that SVN directory. The size of those repositories was huge. Always merge conflicts, things like that. But Git seems to solve all those.</p><p><strong>John Lindquist:</strong>     Yeah I think where people think, or JavaScript devs think now, \"well just rm-rf the node_modules directory\". You used to do that with your SVN directories. You're like, \"well, I'll just blow it all away and check it out again, because that's the only solution that's gonna solve it\". I don't think I've done that with Git.</p><p><strong>Mark Shust:</strong>         I've done Git push to SF quite a few times in the past. But I guess there's always a situation where you're gonna have to do that eventually, but for the most part not.</p><p><strong>John Lindquist:</strong>     Can you think of any good war stories around merges and releases with Git?</p><p><strong>Mark Shust:</strong>         Not really. I think the biggest faux pas I remember is trying to delete all of the folders in a certain directory. I do rm-rf.*, thinking that would delete all of the files and folders in that local directory, but what that actually does is wipe out your whole computer. Luckily I caught it before it erased everything, and it had time to process all the files.</p><p><strong>John Lindquist:</strong>     That's kind of a rite of passage, though. I mean we've all been there.</p><p><strong>Mark Shust:</strong>         Oh yeah. Especially on a production server.</p><p><strong>John Lindquist:</strong>     Yeah. If you haven't done it yet, just go do it tomorrow. Like if you're listening, and you haven't deleted everything off your computer or production, just go do it tomorrow, and get it out of the way, so you can experience it. Just get through it. And thank me later.</p><p><strong>Mark Shust:</strong>         Get it through when you're still a junior or middle developer. If you do it as a senior, you're done for.</p><p><strong>John Lindquist:</strong>     How about so 12 Factor also talks about dependencies, configuration, environment variables, all those sorts of things. Any good stories or advice around managing dependencies and environment variables and all that? That sort of seems to me like the, \"I know front-end development, now the next step for me is I'm gonna have to manage my app as it updates, and getting it to a remote environment\", and all these things.</p><p><strong>Mark Shust:</strong>         You know what, Docker actually makes all that very easy. So I remember working in the past, I went into a big dependency hell with Python and HiP. It's known for having dependency problems. I was building a POS system at the time, that used a Django back end with a package called Tastypie. The front end was JavaScript and VC. This is back in the day, I think it's called Dun-js now. It was kind of about jQuery and JNVC. I was trying to, I remember working and I was trying to assimilate instant reactivity with the RESP API. I was using stuff like, this was before redux and everything. I was using local storage and the firebase and web sockets and all sorts of things. Yeah I had a lot of dependency problems with that. This was before Docker was really released, but now if I had Docker, I'd just deploy an image and not have to worry about anything. Really never ran into any issues with Docker or using it with MPM or Yarn.</p><p><strong>John Lindquist:</strong>     Alright so, on the topic of Docker, How would you explain Docker to a junior JS developer who's never heard of it. Like, what's the- that you really need to start, like this is important to your career.</p><p><strong>Mark Shust:</strong>         Sure, I'd see it like a virtual machine, but without the memory and overhead, and the large footprint of a VM. You have your Docker demon that runs locally on the host, but that just takes whatever memory you set it at. And then you can run as many Docker images as you want at a time. As opposed to a VM where you can only run really one or two VM's at a time because they run, usually you know, two gigs or higher of RAM.</p><p><strong>John Lindquist:</strong>     You're buying more RAM. Literally purchasing more RAM so you can setup VM's like this.</p><p><strong>Mark Shust:</strong>         Yeah. I mean, the running unit of Docker is an image, so I'd see an image kind of like a VM in that aspect. And then images are built from containers. So a container is really a skeleton blueprint of the operating system and a list of instructions built from what's called a Docker file. And those instructions build that image. It's like your baking an image from those instructions. The Docker file's kind of the equivalent of a package JSON file, you're just defining everything you want to install and how to run it just like MPM run. It's pretty amazing that you can run Docker run, Dash IT, Ubuntu, Bash, and then you're in the Bash prompt in less than a second. As opposed to a VM where you have to actually boot it up and shut it down, and everything just works very quickly.</p><p><strong>John Lindquist:</strong>     Yeah, I think the most magical experiences I've had with that were working on Windows and doing that, and then putting whatever Postgres or anything into Docker, and just accesing it through ports on Windows. And like, wait a second, it almost felt like having a home brew or whatever on Windows, where I could just create these images, launch all these services, and just magically having them behind these ports.</p><p><strong>Mark Shust:</strong>         Very similar, yeah.</p><p><strong>John Lindquist:</strong>     So, how did you get started with Docker? What turned you on to it?</p><p><strong>Mark Shust:</strong>         Actually, again my background is like PHP and E-commerce, so, I work naturally with a platform called Magento, it's kind of the standard in that field. A few years ago, in I believe it was the summer of 2015, Magenta 2 was under heavy development, and it was very hard to install. So, I was working with Magenta 1 at the time, which ran on PHP 5, and Magenta 2 was built really for PHP 7. So I had that problem where I have a version mismatch, and I can't easily switch versions on my machine and run both of them at the same time. So I was passively following Docker for a while, and thought I'd give it a shot. I kind of went underground for like a month, and learned Docker. It was a bad month for me, because I have one year old twin girls at home, and I work from home doing my own kind of consulting agency, and yeah, it was kind of hectic and I really needed Magenta 2 to start running so I can kinda get a head start from everyone else. So yeah I came out of it a month later and I had a working Docker image set up, and yeah it's now the number one Docker set up for Magenta 2 still, a couple years later, and I still maintain it.</p><p><strong>Mark Shust:</strong>         Without Docker, I would have had a really rough time there. There was people delayed a good six months because they couldn't get it up and running.</p><p><strong>John Lindquist:</strong>     I love those brute force learning, or whatever you want to call it, where you're like \"well, this is not working, I have no other option\".</p><p><strong>Mark Shust:</strong>         It's learn by fire, as we're programmers and I think the more experience you have programming, you kind of have to learn sometimes you just have to learn by fire, and just pile through it.</p><p><strong>John Lindquist:</strong>     There's something about those, and as much as I hate and don't recommend all nighters, or writing code all night or anything, but every now and again there's times you just have to shove that information into your brain and have it all in there, no distractions, and just let your brain tear it all apart until it makes sense.</p><p><strong>Mark Shust:</strong>         Yeah, it seems like that happens to me every two years. It's not a common thing for me at all, I'm a big proponent of work life balance and everything, but yeah there are times you just have to plow through and do it.</p><p><strong>John Lindquist:</strong>     The whole, I'll throw out the paradigme shift, even though that's one of those buzz words, but you have to change your way of thinking to a new way, and that somehow requires a baptism of fire or whatever you want to call it, through those late nights. So how has, since your initial experience with Docker, have you seen it evolve and change, simplify, or anything?</p><p><strong>Mark Shust:</strong>         Yeah, so mainly it's just matured. A lot around networking capabilities and volumes, I'd say the volume improvements will affect a local developer more than anything else. But not too much has changed, it's really just gotten better. The final system has gotten quicker, more needed speed on Lenox for Mac and Windows. Yeah, and a lot of additional support for Mac and Windows. It runs kind of natively on Lenox, but you need a damon on Mac and Windows to connect it all.</p><p><strong>John Lindquist:</strong>     Yeah, I remember my initial struggles with it on Windows, but I think Microsoft kind of put some backing behind it and we worked Windows a bit to support it better.</p><p><strong>Mark Shust:</strong>         Oh, it's been great since the betta real, Docker for Mac I believe. The betta release, it's been fantastic, versus what it was before.</p><p><strong>John Lindquist:</strong>     Yeah, there's so much support behind it, so much momentum, and it's lovely seeing people work together that way. So, deploying an app with Docker, how do you go about that, compared to just having a Node index.js file?</p><p><strong>Mark Shust:</strong>         Sure, so there's another software package that Docker creates called Compose, and it allows you to run multiple containers at once very easily, so you basically set your config and enamel file, and then you do Docker Compose commands like Docker [00:16:16], and up and things like that. And your environment is set from a dotenv file typically, so you can use Compose to deploy containers. The more popular option, especially lately, has been Kubernetes. So Kubernetes is a platform that was developed inside of Google, it was originally named Borg. It ran all of their internal infrastructure, so that's kind of where Kubernetes, and really, Docker, was born from. There's a lot of complexities around Kubernetes and Clusters, and Nodes. It is complex to run, and there's a lot of additional terminology you have to learn on top of Docker.</p><p><strong>Mark Shust:</strong>         So I'd say a more basic version of deploying your software is Docker Swarm. It's greatly matured in the last year, and it's really just like Docker Compose, with just a few changes. So if you can run Docker Compose, you can most likely run Swarm, and deploy your whole fleet of containers out there.</p><p><strong>John Lindquist:</strong>     I think there, on the Docker website, Swarm and Kubernetes are side by side, and if you want to learn one or the other they'll kind of guide you through it.</p><p><strong>Mark Shust:</strong>         Yeah, Docker actually just built in the official support for Kubernetes. I don't think they really promoted it, they were promoting their swarm package instead. Yeah, Kubernetes has been just, very, very popular, so, yeah it's very cool.</p><p><strong>John Lindquist:</strong>     That's from Google right?</p><p><strong>Mark Shust:</strong>         Mm-hmm (affirmative).</p><p><strong>John Lindquist:</strong>     Because they're, I think on Google Hosting they're always pushing the Kubernetes options.</p><p><strong>Mark Shust:</strong>         Yep, because you have to run at least three [00:18:01] senses, to clear run it so. Yeah, Google cloud has a fantastic cloud service to let you set up and manage your whole Kubernetes Cluster, if you're looking into where to host it.</p><p><strong>John Lindquist:</strong>     Have you used Google Cloud much? Or other services?</p><p><strong>Mark Shust:</strong>         Yeah, I typically run everything on Google Cloud lately. When I started using it, it was very basic and it didn't do a lot of things that ajobs did, but yeah that's completely changed, it's a great platform to run on. It's very cheap.</p><p><strong>John Lindquist:</strong>     They have a CLI now, right?</p><p><strong>Mark Shust:</strong>         Oh yeah, they have a G cloud coming in that you could deploy your whole Kubernetes fleet with command line from your local environment, so it's awesome.</p><p><strong>John Lindquist:</strong>     My history with Google Cloud hosting and services and everything, have been just terrible UI's through their websites, and as soon as they released, I think Firebase did a similar thing, where they released CLI, and I'm like \"finally, just give me a simple command and a couple flags\", compared to some of the UI's they try and build around these commands and flags just boggle my mind.</p><p><strong>Mark Shust:</strong>         Yeah, Google Cloud got tremendously better once they re did everything on material design. It happened a couple years ago, but it's matured and I think it's actually easier that a UBS right now.</p><p><strong>John Lindquist:</strong>     Alright, so any other recommended tools for a Docker?</p><p><strong>Mark Shust:</strong>         Not too much, I typically run everything from command line. If you wanted a GUI aspect, there's something called Portainer, so you can run that locally or in production, or both. It pretty much overlays a GUI for your, like a whole overview of your app, what containers are running, what images are persisting, and everything. I'd say probably a more basic version is their package called Kitematic.</p><p><strong>John Lindquist:</strong>     Isn't that Docker's in house solution?</p><p><strong>Mark Shust:</strong>         Yeah, I believe so. We work with SVN so if you remember tortoise SvN, where they put little check marks on the files and folders. So I kind of see Kinematic kind of like that, where it's very basic and very simple. It doesn't allow you to do a whole thing, or a whole lot. But for a started, if you're just getting started and looking for something really basic, check out Kinematic, it's Mac and Windows.</p><p><strong>John Lindquist:</strong>     My experience with Kinematic has been, after installing it you see all these images, and all these wonderful options, and then you pick something to install, and it looks like its working, and then you go and try it and you can't figure it out past that. Like it's just full of potential and excitement, and then it shows that it's running and you're like, \"well, I can't get to that port\".</p><p><strong>Mark Shust:</strong>         Yeah, you saw the overhead, you should still, it doesn't prevent you from learning Docker. It's kind of like, just a very lightweight gate weigh into Docker, but yeah, once you're doing anything customizable at all, it's not useful.</p><p><strong>John Lindquist:</strong>     It seems like the idea is there, the execution is off, and I'm sure they're improve.</p><p><strong>Mark Shust:</strong>         Yeah, if they make it better that'd be great. Yeah, there is some over head with Docker, I don't think it's too bad, but you set a peradoxime shift of how you think.</p><p><strong>John Lindquist:</strong>     But do you see people making big mistakes with Docker? Common mistakes?</p><p><strong>Mark Shust:</strong>         Yeah, I mean, the number one thing I see is people trying to squash everything in one image, in one container. So, you take your Monolid thick app. It might be okay to do that, just getting started. If you wanted to kind of start getting into Docker and didn't want a full set up, or if you had a really hard time managing all your dependencies and installing everything, it might be an option. Typically, you want to run things like a micro services, architecture where you have one service for one container. And that's kind of utilizing the true nature of Docker, so you can scale serves independently of each other.</p><p><strong>John Lindquist:</strong>     I think if you don't know Docker Compose, you wouldn't think that way, right? Like you wouldn't think, I should launch all of these, because you're just thinking \"I just need to shove everything into one, and then I'll deploy that one.</p><p><strong>Mark Shust:</strong>         Yeah, and you can, but when you're doing that, you don't have too much more benefit over running something like a VM on production. So if you build everything service oriented, you can deploy and scale those services independently one another.</p><p><strong>John Lindquist:</strong>     So let's just, just to clarify for people listening, can you give an example of services, like an example of what they do in Docker Compose, what they'd separate out.</p><p><strong>Mark Shust:</strong>         Lets say, you have a Nginx load balancer, so that could potentially be a service. And then you have, lets say you have one note app under it, so that's another service. So, typically front ends, front end load balancers like Nginx they don't require a whole lot of computing power. You know, one load balancer might be able to manage 100 times of the request of that one load balancer, on the up side. But, let's say your note app is utilizing a lot of memory or CPU, you can actually deploy many, many, note apps, behind that load balancer. And configure engine x to look at those note apps. So you could scale your note app independently of Nginx. So that's probably a pretty basic example.</p><p><strong>John Lindquist:</strong>     No, it sounds fairly complicated when you say it like that. I highly recommend watching Mark's course because he shows just how simple that can be, with a couple flags and a number, like of how many you want.</p><p><strong>Mark Shust:</strong>         That's a problem I have, you know sometimes write ups you find online look so confusing, there's so many steps. But, to set up an engine X Proxy, the proxy requests a note, it's actually like two or three lines, not too complex so. A lot of it's probably just copy and paste from [00:24:48] Can't blame them but.</p><p><strong>John Lindquist:</strong>     I've personally never set up anything in Docker without having some sort of a reference or other example project open, because I just don't want to get it wrong.</p><p><strong>Mark Shust:</strong>         And the same thing with Nginx configs, I don't know how many configs I see with all these values changed, and I come across another blog post with those same values and actually could look into the Nginx documentation and find out, \"what do these do, like why are these here?\" So, I'm always questioning why things are dawn, and rather than just blindly copying things, but sometimes you have to just to get started, but it's a good idea to really digest and dig everything, especially with Docker. You might find another image out there that does what you need it to do, but it might be completely over blown, you might be able to do the same thing with one - two lines yourself.</p><p><strong>John Lindquist:</strong>     I have a friend who, if he answers something on Stack Overflow, or puts it on GitHub, and there's configuration in there, he'll add in some non nonsensical configuration option in there, that won't affect anything, it has nothing to with it, just to see if people copy and paste, and leave that in. And you can google that, and see how many people are using it, as a way of tracking it.</p><p><strong>Mark Shust:</strong>         Oh that's great. Number one thing I see also is people copying commands, but they're setting the default value so, they have no reason to set it, because it's set by the default, so that's like, I see that 90% of places.</p><p><strong>John Lindquist:</strong>     No judgment here!</p><p><strong>Mark Shust:</strong>         Aha, I do that too sometimes. Lets get her done.</p><p><strong>John Lindquist:</strong>     So, the 12 factor absent general, have you seen a large adoption from the community once this got written up as kind of guidelines?</p><p><strong>Mark Shust:</strong>         Yeah, initially it had great feedback everywhere, but it's around the same time that micro services were getting a lot of great press, and you had two sides of the field here where some people were against micro services and some for. So, I think Docker naturally aligns with the micro service side, because it's a service oriented architecture and it just plays right into that. So I think, if you like micro service you're probably going to like Docker and the 12 factor concepts. So yeah, there's kind of a split way of thinking, I'm more on the service oriented architecture side, where you just have that ability to scale everything independently, so if you had a large app I don't see why you wouldn't move to it.</p><p><strong>John Lindquist:</strong>     Right, even we use some of those services for a few things.</p><p><strong>Mark Shust:</strong>         Yeah, and what's great about Dockers, you can use even different programing languages for different sections of your app, so. If you think of, I can run something and go, and expose a APIN point, and deploy with Docker, and my note app doesn't have anything to do with go. So it's really great if you have teams that are multi versed in different programing languages.</p><p><strong>John Lindquist:</strong>     Or go is the right solution for [the 00:28:19] we've had.</p><p><strong>Mark Shust:</strong>         Yeah, you have different problems and you have different ways of solving them, maybe better than using no for everything.</p><p><strong>John Lindquist:</strong>     Right on. Do you think anything is missing from the 12 factor principles?</p><p><strong>Mark Shust:</strong>         I don't think so, I don't think I'm that much of [00:28:37] to realize that there's something missing there. Yeah, I think the guidelines are pretty solid.</p><p><strong>John Lindquist:</strong>     I would never have the guts to write something like the 10 commandments of development or anything like.</p><p><strong>Mark Shust:</strong>         Yeah, whoever wrote 12 factors knew what they were doing.</p><p><strong>John Lindquist:</strong>     I missed their name, I just read their name when I looked at it this morning but, thank you to the person who wrote 12 factor, it's an incredible guide for people of my level.</p><p><strong>Mark Shust:</strong>         Absolutely, and it's something too, you can pull in three or four of these concepts and start applying them, rather than switching everything at once. You can kind of start digesting the micro service, and service oriented might have thought around that.</p><p><strong>John Lindquist:</strong>     Alright, any closing words of wisdom you'd like to share with everyone?</p><p><strong>Mark Shust:</strong>         No, just go forth and Dockerize. It's really great for a lot of applications so, I highly recommend it.</p><p><strong>John Lindquist:</strong>     Thanks a lot, Mark.</p><p><strong>Mark Shust:</strong>         Alright, thanks John.</p>",
    "slug": "12-factor-javascript-applications-using-docker-with-mark-shust",
    "description": "<p>John Lindquist has a conversation with the Mark Shust, an expert with Git and Docker. They talk about the 12-factor style of building an application and why devs should have a standard method.</p><p>Often developers don’t have a standard process with git. Mark talks about the gitflow workflow, a way of working with features and managing how that feature gets merged into the code base.</p><p>Though due to working with so many branches gitflow has its complexities. So, Mark trimmed it down and created a new workflow he calls <strong>git ship</strong>, which is gitflow without the development and hotfix branches.</p><p>Before <strong>Docker</strong>, Mark was running through a dependency hell. Though with Docker Mark was just able to deploy an image and not have to worry about anything. Docker is like a VM but without all the memory overhead! You can even deploy as many images as you want at a time. You can run Postgres, Node servers, and also use entirely different languages in each image!</p><p>Check out Mark’s course which covers all mentioned topics, <a href=\"https://egghead.io/courses/build-a-twelve-factor-node-js-app-with-docker\">Build a Twelve-Factor Node.js App with Docker</a></p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/56952ca4/transcript\">\"12-factor Javascript Applications using Docker with Mark Shust\" Transcript</a></p><h3>Resources</h3><ul><li><a href=\"https://github.com/nvie/gitflow\">Gitflow</a></li><li><a href=\"https://www.docker.com/\">Docker</a></li><li><a href=\"https://egghead.io/courses/build-a-twelve-factor-node-js-app-with-docker?utm_medium=podcast&utm_term=docker&utm_content=12-factor-node\">Mark’s 12-factor egghead Course</a></li></ul><h3>Mark Shust</h3><ul><li><a href=\"https://github.com/markoshust\">Github</a></li><li><a href=\"https://egghead.io/instructors/mark-shust\">egghead</a></li><li><a href=\"https://twitter.com/markshust\">Twitter</a></li><li><a href=\"http://markshust.com/\">Website</a></li></ul><h3>John Lindquist</h3><ul><li><a href=\"https://twitter.com/johnlindquist?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor\">Twitter</a></li><li><a href=\"https://egghead.io/instructors/john-lindquist\">egghead.io</a></li><li><a href=\"https://github.com/johnlindquist\">Github</a></li><li><a href=\"https://johnlindquist.com/\">Website</a></li></ul>",
    "duration": 1801,
    "episode_number": 7,
    "contributors": [
      "John Lindquist",
      "Mark Shust"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/1zcq8",
    "path": "/podcasts/12-factor-javascript-applications-using-docker-with-mark-shust",
    "published_at": "January 26th, 2018",
    "url": "https://egghead.io/api/v1/podcasts/12-factor-javascript-applications-using-docker-with-mark-shust",
    "edit_podcast_url": "https://egghead.io/podcasts/12-factor-javascript-applications-using-docker-with-mark-shust/edit"
  },
  {
    "id": "podcasts-00000000000000000052",
    "title": "Angular Web Applications with Juri Strumpflohner and Rob Wormald (Angular Core Team)",
    "summary": "John talks with Juri Strumpflohner, an industry expert and angular trainer; and Rob Wormald, a developer on the Angular core team, getting into how Angular has evolved with the 2.0 release, powerful new features, their favorite libraries, and where the future is taking it. ",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/40817670-ab99-4af0-b5e7-04ea07c2d458/cdb64b58_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/40817670-ab99-4af0-b5e7-04ea07c2d458/1534346510artwork.jpg",
    "simplecast_uid": "40817670-ab99-4af0-b5e7-04ea07c2d458",
    "transcript": "<p><strong>John Lindquist:</strong>     All right, I'm here with Juri and Rob so let's go ahead and introduce ourselves. Juri, let's start with you. What's your background experience with Angular, that sort of stuff.</p><p><strong>Juri S.:</strong>            Yeah, cool. My name is Juri Strumpflohner. I am actually from the north of Italy, a very small region there called South Tyrol, it's in the middle of the Alps basically. I've been doing software development professionally for around probably ten years. I started on the backend side with .Net, HP.net and also some Java. I think around six, seven years ago or something I then dove more into the front end kind of stuff because the company I was working at really wanted to create more balanced applications, more dynamic ones with JavaScript so we dove into that at that time, still jQuery, so we're really jQuery heavy. We had some kind of JavaScript and [MVZ 00:00:57] framework on top of that.</p><p><strong>Juri S.:</strong>            Then we switched over to Angular JS then later I got involved much more with Angular itself, so Angular 2 and onwards. Yeah, that's where I'm currently in. I'm doing some front end development on Angular. I'm also doing some freelance training and work with some companies. Yeah, enjoying it basically.</p><p><strong>John Lindquist:</strong>     That seems to be a very common story, the backend developers around that time of Angular 1 coming out like, well we need to build more dynamic apps and they start learning Angular. All right Rob, what's your name, where are you from?</p><p><strong>Rob Wormald:</strong>        My name is Rob Wormald. I'm a developer advocate ... No, that's not true. I'm a developer program engineer at Google on the Angular team, it's a pretty new change.</p><p><strong>John Lindquist:</strong>     Nice.</p><p><strong>Rob Wormald:</strong>        I've been here at Google for about a year and a half, almost two years now, all of that on the Angular team. Previous to that I was sort of just an independent developer. I ran a consultant shop for a little while. I've done training, I've done teaching. I actually come from really ... I guess I really originally started programming iOS kind of when the first iPhones came out and the app store came out, which is almost ten years ago now. That's kind of when I got started with programming and did some iOS stuff, did some backend stuff, learned some Java and then moved to the front end to Angular.</p><p><strong>John Lindquist:</strong>     All right. Let's just start with a broad question. Angular, the 2.0 release was a big one, had all the fanfare. Since then with the version control changes and everything I think it's up to 5.1 now. How have either of you seen Angular evolve since the major change at 2.0.</p><p><strong>Juri S.:</strong>            I think it's from a feature perspective there have been a lot of features since 2.0 but for most people at least that's what I experience also when I do workshops in companies. They see it like it went quite on like smoothly so there have been obviously new kind of features they have introduced or have introduced for me personally the biggest features are for sure the new HTTP client, also improvements in the router, but mostly the bundle size improvements. That's also what I heard a lot from people already using Angular 2 and then jumping on to Angular 4 and now 5. They really reported and it was also seen on Twitter a lot basically how much the bundle size shrank down by just basically doing nothing and then router just upgrading to Angular 5, so that's really some of the things hear most when I talk to people.</p><p><strong>Rob Wormald:</strong>        Yeah. I think we went through a fairly major evolution from 2 to 4 under the hood and I think that's been the biggest changes I've seen under the hood. As Juri said, things like HTTP client, nice little simple AVIs we've added. One of the things that we like to point out and that probably we don't point out enough is that one of the reasons it took so long for the first version of Angular 2.0 to come out was that we wanted to make sure that we got the public API right.</p><p><strong>Rob Wormald:</strong>        Since we released 2.0 we've pretty much left that public API alone but we've been able to sort of under the hood evolve how Angular works completely. We've completely changed the way that we generate code between version 2 and version 4. That really is going to be the philosophy of Angular going forward that we want to keep this public API pretty stable, not have to rewrite your own application code and then we can go back under the hood and optimize it. For me, seeing that evolution happen, and really we had to prove it to ourselves between 2 and 4 that we could do it.</p><p><strong>Rob Wormald:</strong>        I think it worked pretty well, most people were very happy with it. As Juri said, they just recompiled and saved some bundle size. I think for us being able to see that kind of silent evolution happen, if you like, is pretty cool to see and it gives us confidence to do a lot more interesting stuff in the future.</p><p><strong>John Lindquist:</strong>     I have to ask, do you have any cool under the hood stories of something that was really surprising or something that the team fought over, things like that?</p><p><strong>Rob Wormald:</strong>        I think that one of the interesting things has been that really we optimized, we kind of designed Angular. We very much optimized for what we call the update case, which is that your application is up and running and then how fast can we update records or rows or a table, whatever. That was one of the larger issues we ran into with AngularJS in the later days of it. We optimized for that, but obviously it kind of turns out that as people are moving more and more towards mobile devices and as the front end of the ecosystem shifted, it turns out that often that update performance is not always the most important metric or not the only metric that people are working on.</p><p><strong>Rob Wormald:</strong>        We continually have this tension between making it easy to use, making it small, making it fast, and they kind of go in different dimensions. It's kind of a continual, evolving discussion on our team about where do we optimize for X or Y. You only have so much you can do and so deciding which axes you want to push along. Again, that Angular 2, Angular 4 change was really that, was us kind of coming to this realization that actually probably it was better to make the code size smaller than it was to make the execution of that code faster.</p><p><strong>John Lindquist:</strong>     Interesting.</p><p><strong>Rob Wormald:</strong>        We still debate that, we still kind of slide that dial back and forth on a daily basis as we're experimenting and developing new APIs.</p><p><strong>John Lindquist:</strong>     Yeah. I can only imagine the outside voices you guys hear demanding you be pulled in one way, smaller, faster, faster execution, all those things.</p><p><strong>Rob Wormald:</strong>        Yeah. I think that we'd love to solve all of the problems but there are only so many hours in the day, there's only so many people on our team, we're not a huge team. Of course, internal teams have often different requests and different needs than the external community does. It's very interesting trying to balance these opposing forces on a daily basis, for sure.</p><p><strong>John Lindquist:</strong>     Yeah. Juri, is anything new and exciting in Angular that if people that aren't on Twitter constantly following on the conversations they might not know about? I think I saw Material got it's first official stable release and things like that.</p><p><strong>Juri S.:</strong>            Yeah. Personally, actually I have to say what me excites most about what's coming up or what's already been announced, actually Rob, I guess, announced it that Angular Connect or Angular Mix already is Angular Elements and Angular CLI schematics. Those two things which I'm actually most excited about because I think, especially Angular Elements but as well also the schematics part, they really open up a whole new world actually because if we think about ... I was last week at the conference where I gave also a talk at the NGB in Belgium and Pascal Precht actually had a talk there also on Angular Elements where he did some live coding demos which were really exciting.</p><p><strong>Juri S.:</strong>            What he actually did is he went basically and took the Angular Material radio buttons and he compiled them down using the Angular elements basically to native web components and then reused them basically on a simple HTML page and that was really cool to see and follow along because you can now really imagine, okay I like those drop-down lists from Angular Material just to name some of these or an attached component, and you could compile those down to Angular Elements and then [triage 00:08:16] on all our applications. I think that will really be some exciting stuff when that comes out. I think it's currently a lapsed product, right Rob? It's not really introduction-ready.</p><p><strong>Rob Wormald:</strong>        That project is actually something that I've been thinking about/annoying the Angular team with for probably the past 18 months or so.</p><p><strong>Juri S.:</strong>            Thanks a lot for that.</p><p><strong>Rob Wormald:</strong>        Yeah, I know. It's taken some time to get there. For me there's two parts to it. The first is obviously the re-usability factor I think is major, the first time I introduced it and every time I introduce this idea. To me it's very sad that we have to write the same datepicker in different frameworks again and again and again. We spend a lot of time, and certainly my job is being out at our customers right, seeing who's using Angular, being at big companies and seeing how they're using it.</p><p><strong>John Lindquist:</strong>     Solving the same problem over and over.</p><p><strong>Rob Wormald:</strong>        Yeah, solving the same problem again. It's kind of sad. It's something that ... And I've done it myself, I've probably written half a dozen datepickers in my career and I would like to never write a datepicker again. The Chrome team and the web community as a whole, web components have been around for a while. They've gone some evolution and I thin some of the latest evolutions of web components are why we're beginning to look at them, it opens up some things that have been Angular to use web components before.</p><p><strong>John Lindquist:</strong>     Such as what? I haven't followed the web components.</p><p><strong>Rob Wormald:</strong>        One of them is ... Custom Elements went through ... They had this kind of V0 spec and this V1 spec. They're kind of functioning the same but they give us ... In terms of understanding what's going on at the component level, observing attributes changing and some tweaks to the way that life cycles work. Also the ability to actually create a custom element just by calling new on the constructor is not something we could do previously, so that's useful for us. Really the other thing, kind of the Shadow DOM API catching up as well, that introduces Slots and a bunch of thing that Angular sort of already does. Slots are very much like content rejection or transclusion.</p><p><strong>Rob Wormald:</strong>        The observed attributes on Custom Element are very much like Angular's inputs. The latest specs really align very closely with the Angular model and so it makes it reasonably straightforward to actually make elements a thing. That's the interesting thing of elements is that really the whole code base is maybe 200 lines of code, 250 lines of code. It's not a major thing, all we're really doing is bridging this native world to the Angular APIs. Angular was always built with this in mind. The early phase of API was baked around this idea so it's made it reasonably straightforward to actually close the loop so that Angular Component can just be sort of a custom element.</p><p><strong>John Lindquist:</strong>     I think you guys are one of the last remaining champions of the web component ideas.</p><p><strong>Rob Wormald:</strong>        Yeah. Certainly I think we were involved in the early design phases. Some of the opinions differ and really, to be honest with you, a year ago it was a much harder sell with web components not being in most browsers. Now that Safari has picked them up and Chrome has already implemented them. Firefox is in the process of implementing, we hope Edge is doing the same thing. We're sort of pitting this critical mass where they're available in enough places, there's enough companies who have this problem and so for us it seems like it's time to do it.</p><p><strong>Rob Wormald:</strong>        I should say that even internally at Google we have the same issue where we have teams who want to share code, we have a few internal frameworks here at Google and they have the same thing that they don't want to be reinventing the wheel. For Angular to become, if you like, the kind of tool for building those kind of sharable components we think is a pretty compelling idea.</p><p><strong>Juri S.:</strong>            Yeah. I think it's really powerful because, for instance, we had at the company where I was working we developed an AngularJS application at the time which was basically like on top of open layers, we developed some kind of geographical information system, which was like blocked in and could add some stuff on those maps if we capture it. Our idea was actually you had the full-blown application, which was an Angular application with some tools on it like drawing on a map and setting layers and so on, basically some configuration. But you also really wanted to give the opportunity basically to take that map and embed it with some more kind of our applications and just through some configurations like some inputs of the components basically to steer that configuration so that we know what the map should show on that page.</p><p><strong>Juri S.:</strong>            We at that time did it actually with AngularJS and that was really a hard thing because internally we structured it already using the components style of fashion like component architecture and the map was really also in the main application nicely basically separated from the whole rest of the application just steered through those input parameters but obviously in Angular 1 extracting such a component and then have it like a standalone into another page was really difficult.</p><p><strong>Juri S.:</strong>            Also, we actually ignored basically the problem what would happen if another AngularJS application would actually run on that page because that would probably have messed up everything. But now actually having these kind of elements coming along that would really solve that problem actually because people can develop their applications just as they are normally accustomed and they don't really have to know all the details which are behind the web components and that kind of stuff, and then just compile them down to single components, compile them out into reusable web components basically. That's actually why I'm really excited about that kind of stuff.</p><p><strong>Rob Wormald:</strong>        One of the cool things has been since we announced that we were looking into this and we've got in labs is that I've had, I don't know, a dozen, a couple dozen companies contact me with really interesting cases. This mapping one is actually one that comes up fairly reasonably often.</p><p><strong>Juri S.:</strong>            Yeah, I can imagine.</p><p><strong>Rob Wormald:</strong>        That's pretty validating to hear that there are lots of teams who when we presented here's this possibility they said, \"Oh yeah, we've been trying to do that for a while.\"</p><p><strong>Juri S.:</strong>            Exactly.</p><p><strong>Rob Wormald:</strong>        It's something that's going to be quite useful for our community and we hope as well that it brings in people from outside the Angular community because the other part of it is that it allows you to think about just Angular components as kind of a standalone thing, and then if and when you need the rest of Angular, routing and HTTP and all these cool things, then we have that available for you. But certainly the ability to use a component as a component by itself, again makes Angular much more flexible, makes it much more useful in a lot of different scenarios.</p><p><strong>Juri S.:</strong>            Yeah, totally.</p><p><strong>John Lindquist:</strong>     Yeah. I think for a lot of people it's one of those things they don't know they want it because it has that kind of taste to it where once you see it you're like, oh wait a second, I've been looking for that solution but I didn't know that it was even possible.</p><p><strong>Rob Wormald:</strong>        Yeah.</p><p><strong>John Lindquist:</strong>     All right. Juri, question for you. You've done a lot of trainings and speaking at conferences. Since Angular 2 has come out have you seen people as they pick up Angular 2 struggle with certain aspects of it and do you have any advice for people who have had those sorts of issues?</p><p><strong>Juri S.:</strong>            I think initially it was definitely tooling because many people when I started the workshops they were really afraid because right now, I have to say that as well, I did mostly workshops for people which really started in front end development and they wanted to start with Angular 2 directly because they mostly came from backend sites, so .Net and Java were those cases which I had most right now. They were really scared first of all about JavaScript in general because they were like, okay it's a dynamic language and you don't know. They were accustomed to the static type language and when you introduce them to types that they really feel immediately at home, so that's a big plus actually.</p><p><strong>John Lindquist:</strong>     Yeah, for sure.</p><p><strong>Juri S.:</strong>            I usually also show them quite quickly the Angular CLI. I get them set up already with the product, I tell them too, I make them install it, so they install it on their machine and they start basically playing around with it and they already immediately see something on the screen and can work with it. With that basically ... For me it's like an icebreaker to get ready to work because they then see, okay it works, I'm already able to accomplish some stuff, and so they're quite happy. But in general I think once they get basics, what I often see is basically they struggle with architectural patterns, like how do I componentize my application, because that's often a pattern which they don't really know from the backend side because they are mostly ... Okay, you've got some REST APIs and you have to always structure applications.</p><p><strong>Rob Wormald:</strong>        Service oriented.</p><p><strong>Juri S.:</strong>            Yeah, exactly. It's more service oriented and that kind of thing and when you come to the front end you really have to think about how do I divide my application? Do I have different kind of modules, especially when you kick in a new router and kind of stuff. That's where they mostly struggle. I mostly try to explain to them the difference, like how should they split up the front end side, like in container components, presentation components, so that somehow they get some kind of picture in their brains, okay these kind of components should solve these kind of problems and the other kind of components, like the presentation components, would be more like UI components which I can reuse across my application.</p><p><strong>Juri S.:</strong>            I try to basically give them these directions and input. And then obviously there's NgRx as another way of structuring applications, but that's something actually I have not brought up yet because, as I said, mostly those kind of workshops have been for beginners, or let's say mid-advanced, so not really advanced. And then NgRx, if I give them an introduction it's mostly on a high level because that's usually a bit overvaluing for them initially. But I think there's actually a lot of potential in there so once you really get a grasp on how Angular works or in general how you should structure applications, NgRx can really help you there.</p><p><strong>John Lindquist:</strong>     I think what you described is what I've seen as well where I found Angular to be probably one of the most opinionated frameworks on how components should be written and modules organized and how you rate your services and dependency injection with those and everything. Once you get the hang of where everything goes you kind of get in that groove of, well this is a component and this is a service and register it here. You just kind of get your work done. It can be so nice to have those guidelines, especially with TypeScript in the game, the errors start disappearing and you just get productive.</p><p><strong>Juri S.:</strong>            Yeah. That's really something actually which people like a lot, I've seen.</p><p><strong>John Lindquist:</strong>     Yeah. Nice error messages. I think we undervalue how pleasant it can be to get a good error.</p><p><strong>Juri S.:</strong>            Yeah.</p><p><strong>John Lindquist:</strong>     I love a great error, a great descriptive error and it's always an afterthought on so many things. How about you Rob, what's your most frequently asked question recently from your many journeys?</p><p><strong>Rob Wormald:</strong>        I think probably at the long-term one of the more challenging things for people has been kind of Angular's compiler metadata AOT kind of story. Again, we've got this compiler in the middle and we have a lot of really good reasons for this compiler and this ability to evolve the framework. It's kind of a first class important system for us. But it can be rather opaque. There are these rules that are sometimes a little bit esoteric and, again, it's one of those things that if you understand the mechanisms then it's reasonably straightforward to work around some of these issues, but again it's one of those things that, as John said, if you don't have good error messages, if you don't have the mental model in your brain, then it can be difficult to debug, it can be difficult to understand how it works.</p><p><strong>Rob Wormald:</strong>        Angular is unique from many JavaScript frameworks in that we have this compiler, your code goes to this kind of magical, invisible step and that can be kind of intimidating for people, that can be sort of confusing for people, especially if it's something that you're adding in later in the game that can be challenging. I think we've heard that feedback fairly well. A lot of the stuff we're working on at the moment is trying to make that easier, trying to make that a little bit more forgiving, a little bit easier to share code.</p><p><strong>Rob Wormald:</strong>        The other thing is our application architecture. It's funny that people don't really remember that in the AngularJS days we never really gave any guidance on best practices. We didn't really have that on the Angular website.</p><p><strong>John Lindquist:</strong>     NG controllers all the way down.</p><p><strong>Rob Wormald:</strong>        Exactly, right. And certainly ...</p><p><strong>John Lindquist:</strong>     That's just what you did.</p><p><strong>Rob Wormald:</strong>        Totally.</p><p><strong>John Lindquist:</strong>     You got on the homepage and you just go to NG controllers and one giant HTML file.</p><p><strong>Rob Wormald:</strong>        I think really as a ... Before I joined the Angular team I think many Angular developers, and what I mean is people who have used Angular for a while, would have told you that AngularJS docs are probably not the thing you should be reading. John Papa's style guide and all this other really good information the community built for AngularJS is really the primary point of reference. When we went to Angular 2 we wanted to be sure that we thought about this and we gave you some better guidelines, we gave some better ideas on this.</p><p><strong>Rob Wormald:</strong>        Again, this is something that evolves. NgRx is kind of a late entry to the Angular ecosystem and so that's not really discussed in the documentation about how to think about things like NgRx. Really I think we've got a pretty good set of documentation on how to get started with Angular, how to get your head around these concepts, but I think that we can do a better job and it's something that we increasingly want to look into of teaching you about true application architecture, how you should think about these things, trying to take, again, some of that decision overhead away from you.</p><p><strong>Rob Wormald:</strong>        Again, a lot of that comes from feedback from teams internally, teams externally, who are really using Angular much more than we are. That's almost the thing to keep in mind is that while we write the framework we're typically not writing big apps like our teams are so we rely on a lot of this feedback from teams to know what's working, what's not working, what we could be clearer on and that's the thing that I think we certainly want to continue doing to meet these other people.</p><p><strong>John Lindquist:</strong>     Yeah, totally. Juri, what sort of Angular libraries ... I watched your courses which are coming out pretty soon. I saw you use NGX formally in your forms lessons. Are there any other libraries that Angular developers should know about that have come out recently or that you've been using or that you would advocate for?</p><p><strong>Juri S.:</strong>            Yeah. NG ... Actually there are quite a lot of libraries out there to be honest.</p><p><strong>John Lindquist:</strong>     I know the NARWHL guys are doing stuff.</p><p><strong>Juri S.:</strong>            Yeah, exactly. NGX formerly was one I actually mentioned in one of my courses, as you said. It wasn't a course where I actually tried to teach how you can do dynamic forms in Angular because I think in Angular 2 or Angular 4 and onwards it has been made actually very easy to do that kind of thing. Reactive forms are really powerful and just today in the workshop I also gave people who did some live coding about an hour or an hour and a half, together in the workshop where we started with a simple reactive form and then we step by step basically, as I showed basically in that video course on iCAD, we incremented that kind of four-week standard and made it more dynamic so in the end we actually had a singular Angular component where we could patch in a data model which obviously had a different, a certain kind of structure and then then basically change itself automatically without actually changing HTML part and the whole random part with also supportive validation and that kind of stuff.</p><p><strong>Juri S.:</strong>            Obviously we did not cover all cases but that really is interesting to see how people, when they approach a problem they're really like, wow that's a cool kind of thing because you can change the HTML actually and form just the DOTs. NGX Formly is actually something that implements that kind of thing. I think in Angular 1 there was already Angular Formly, if I'm not wrong, which [crosstalk 00:24:08]</p><p><strong>Rob Wormald:</strong>        [crosstalk 00:24:08]</p><p><strong>Juri S.:</strong>            Exactly, by [inaudible 00:24:10] dots. NGX Formly is actually an extension for Angular 2 so to code that idea from Angular Formly, so reliably from Angular 1 to X and brought it over with Reactive Forms for Angular. Yeah, that's the library. If you're interesting in having dynamic forms because your backend API has some fields, some models which like the user could effectively design or configure, then you'd definitely need some dynamic behavior in creating those forms and editing those kind of data. There Angular Formly or NGX Formly is definitely what you should look at.</p><p><strong>John Lindquist:</strong>     I have a good friend who is a huge advocate of React and will build absolutely everything in React, but he says as soon as a site gets form-heavy I will automatically switch to Angular Reactive Forms.</p><p><strong>Juri S.:</strong>            Yeah, they're really powerful.</p><p><strong>John Lindquist:</strong>     Because it's just the best. If you're doing anything form-heavy in any of your sites, the reactive forms in Angular are one of the best things on the internet right now.</p><p><strong>Juri S.:</strong>            We basically ...</p><p><strong>Rob Wormald:</strong>        I think we're finding that ... We have both of these forms APIs, we have this Reactive Form and we have this more traditional AngularJS style form. I think that one of the interesting things about Angular's Reactive APIs is they really came later in the design phase of Angular. People like Victor Savkin joined the team and then I joined the team and people who are really, really deeply into this reactive programming stuff. I think we're finding that in some cases it is more confusing for people, there's some mental overhead to learn Rx, but we also find that this kind of reactive API, if you can understand how it works then a lot of things in Angular really link together very well. I mean the ability to take out a reactive form and plug it into a reactive HTP request, then plug that into the view and have all that stuff work nice and seamlessly is pretty cool but also something that we, if you like, have only recently discovered as a thing.</p><p><strong>Rob Wormald:</strong>        Increasingly we've decided that it works better for Angular developers, we find that it's a faster way to do things, it's an easier way to maintain things and I think you'll find that we optimized Angular in general going forward for the sort of reactive case because reactive forms, people tend to love them and we think that if that's the model that people tend to like, that's the one we should optimize for. Whereas right now a lot of the reactive APIs, if you like, are kind of pasted on top of some of the poorer APIs and I think you'll see us invert that over time with the reactive stuff at the core and the traditional stuff becomes layered on top of it.</p><p><strong>John Lindquist:</strong>     Cool. Yeah, I kind of get that feeling with the Angular forms with the reactive forms have this beautiful story kind of written that feels like it's reactive first and, like you mentioned, some other parts are reactive second.</p><p><strong>Rob Wormald:</strong>        I think as we've been designing things like the data table and material and and the tree views, we keep using this API that is very much reactive based and it turns out that it works in all kinds of different places. It's really quite cool to see these really common patterns emerge from both the Angular community, the Rx community, other framers who are using Rx to kind of see those emerge and that they're working for people will continue to optimize for that case.</p><p><strong>John Lindquist:</strong>     Awesome. Any other libraries, other than Formly libraries, that people should know about?</p><p><strong>Rob Wormald:</strong>        I think the one that everybody should check out is our new schematics library. One of the big requests we get is: I want to do custom code generation and I want to be able to extend the Angular CLI. Schematics, they are actually the mechanism we use inside of the CLI to generate new projects and components and all these things, but they're designed to be very, very flexible and very extensible. One of the common cases we talk about is you might go to a team and they might have a slightly different set of style guidelines or they might want to have the copyright notice at the top of every file like we do at Google.</p><p><strong>Rob Wormald:</strong>        Really the idea of schematics is that you can take our base set of generators and override them and make them custom to your own case, to your own company, to your own organization and then allow you to really build a set of tools that allow you to generate and move very quickly on your own application code. This is actually how the NARWHL Nx project works, they're using schematics under the hood. We're working on a schematics integration for NgRx right now so you're going to be able to generate some of the boilerplate form use so you don't have to write out actions and introducers line by line.</p><p><strong>Rob Wormald:</strong>        Schematics is a very low-level but very, very powerful kind of cogeneration tool. That, we think, is going to be pretty major and again there's nothing Angular-specific about it, it's not restricted to Angular at all so we hope that it becomes a usable tool for the entire web ecosystem.</p><p><strong>John Lindquist:</strong>     Is the feel there ... Sorry, I haven't looked into the schematics at all. Is the feel there that you're still using the Angular CLI and then you're writing a template that extends the current template?</p><p><strong>Rob Wormald:</strong>        Yeah, you can do that. Part of the ... There is an option when you go to CLI config to just say use this set of schematics instead when it does code gen, so when you do NG create component or whatever it can actually create your own custom flavored version of that, but you can use it as a standalone tool as well so you can just run schematics by itself outside of the CLI for other cases. One of the good cases that somebody talked me to the other day about was using schematics to read in their backend database schema and API and then actually use that to do code generation of TypeScript so they're kind of generating their API client with backend information.</p><p><strong>Rob Wormald:</strong>        That's the kind of thing that schematics, I hope, becomes more and more useful to people. Stuff like Swagger, where you have this kind of machine readable schema for the server side, it's really pretty straightforward to kind of ingest that and then generate TypeScript code for that or generate API clients or whatever you want to do.</p><p><strong>Juri S.:</strong>            Nice. In fact, I've seen Manfred Steyer also wrote in Angular schematics where he basically scaffolds out a crowd application for Angular. I'm not sure basically whether he checks the backend or whether it's something like you have to tell the schematics which kind of entities to generate and so on, but that would be actually a really cool idea to hook up with some Swagger API, as you said, would be really nice.</p><p><strong>Rob Wormald:</strong>        Yeah. It's sounds like something that we ... This is one of the cool things that TypeScripts will give us is because it's such a static [inaudible 00:30:23] language we can do very clever things with it and code gen. I think we're really only scratching the surface of some of the integration stuff that we can do, which we ... That's the front and the backend, various different teams, all this stuff. We have these problems at Google, we have these big scale issues at Google. We have teams who build, if you like, the kind of boilerplates for other teams at Google and so those sorts of teams we really want to give a powerful set of tools to allow everybody that consumes their work to be equally sufficient.</p><p><strong>John Lindquist:</strong>     On the topic of TypeScript, this is kind of a tangent but have you seen anything added to TypeScript that really helped out Angular or vice versa or anything coming up in TypeScript that either of you are excited about.</p><p><strong>Rob Wormald:</strong>        Certainly a lot of the new type inference stuff has made ... The two things that I think have been really affected more than Angular itself are the RxJS libraries, a lot of the new type information makes RxJS work a lot better, especially if you're into the more kind of functional style of using RxJS or rather than dot chain syntax, being able to do composition and [creating 00:31:27] and piping and all of that. A lot of that was really enabled by some new changes in TypeScript 2.4 and 2.5. That one's fun because Ben Lesh actually put up a test case and Anders Helberg from the Microsoft team fixed it in the night. It was really cool and it really opened up a whole bunch of new, really much better type inference inside of Rx. Of course, NgRx gets that benefit too. We rejiggered some of NgRx to make sure that type information flows through better.</p><p><strong>Rob Wormald:</strong>        The other thing I think is dynamic import coming in that I think will be very, very interesting. That's just landed at TypeScript, we're just seeing it land in Chrome and I think that will ... Having kind of a baked-in, lazy loading mechanism in the language will make a lot of what we do a lot easier, it will make a lot of the kind of dynamic cases that people want to build in Angular easier.</p><p><strong>John Lindquist:</strong>     Does that mean SystemJS goes away?</p><p><strong>Rob Wormald:</strong>        In theory, yes. SystemJS was always kind of developed to mimic the native API as much as possible.</p><p><strong>John Lindquist:</strong>     Right.</p><p><strong>Rob Wormald:</strong>        In theory that's the kind of working theory. There's a lot of gotchas and edge cases and things for people to really start using ES6 modules in Angular, the big one being that nobody has written .js on an important for two and a half years, three years, in any language in anything. That's going to be required to run another browser. Yeah, it's certainly ... I guess the thing is for me what that really enables is rather than having to use a Webpack specific idiom, which we don't think is a good idea. We love Webpack, we don't think you should have Webpack in your code.</p><p><strong>Rob Wormald:</strong>        We have a bunch of abstraction in there and inside the CLI to make all that work and that's code that we have to maintain. Having a really baked in language primitive for lazy loading of code will make everybody's jobs a lot easier, it makes your code a lot more long-term safe and takes a lot of the onus off of Webpack so that you don't have to use Webpack specific idioms in your code.</p><p><strong>Juri S.:</strong>            That's something that is just about to be released? Did I get you right on that? Because I didn't get look into this.</p><p><strong>Rob Wormald:</strong>        Yeah. I believe it is in Chrome Canary, it's already in Safari Technical Preview. It's all ratified and seems to be good to go. TypeScript already supports it, Webpack already supports it. Again, it's that ... You can start using the syntax today and then if and when the browser specialty lands that then you can maybe one day turn off Webpack.</p><p><strong>Juri S.:</strong>            Yeah, for sure.</p><p><strong>Rob Wormald:</strong>        But we don't see that happening in the near future but certainly it's nice to be able to write code that you know you're not going to have to go and rewrite at some point in the future.</p><p><strong>John Lindquist:</strong>     Yeah. It's always weird when those features actually do release in browsers, like when classes finally came or arrow functions. You open up the Chrome console and start using it and like, wait a second.</p><p><strong>Juri S.:</strong>            It just works.</p><p><strong>Rob Wormald:</strong>        I took an Angular app the other day and I manually built everything from the ES6 so all of our source code is written in TypeScript. I had to do some hacks and I had to go manually rename some things. But to have an Angular application running pure ES6, pure ES6 modules using ES6 module loading in the browser, using dynamic loading in Safari was really super cool. Just to see it work and to see it in this kind of untransformed kind of form was really validating. I think it's going to be cool if and when we can get to a point where everybody can do that.</p><p><strong>John Lindquist:</strong>     Yeah. It's almost like this prophecy is being fulfilled.</p><p><strong>Rob Wormald:</strong>        I'm like oh my God, this is [crosstalk 00:34:50]</p><p><strong>John Lindquist:</strong>     A long time ago a wise woman once said this and like, yay these are finally here.</p><p><strong>Rob Wormald:</strong>        I have to say, in the defense of the people who run these specs there was a lot of blow back early on that they sort of figured out how to write modules but not how to load them. There's been such a shift in a couple of years about how we think about loading code and the lazy loading is such an important thing. I think they got it right, getting the stack out there so that people could begin to write code. It's not going to bite too many people in terms of having to actually use the native syntax. I think they got that right and yet it's nice to see these things finally begin to actually land in the browser area.</p><p><strong>John Lindquist:</strong>     Yeah, for sure. All right. I'll toss one last question out there. Any other tools or ID extensions or things you guys are using for productivity that you think everyone should know about?</p><p><strong>Rob Wormald:</strong>        I think Stackblitz, if you haven't seen it, is rad. Stackblitz was the thing I [shut down 00:35:45] in the office and literally the entire Angular team stopped what they were doing for 20 minutes and played with Stackblitz.</p><p><strong>Juri S.:</strong>            Yeah, I think this is really cool.</p><p><strong>Rob Wormald:</strong>        [crosstalk 00:35:52] We have a bunch of really smart nerds who have their own opinions but everybody was universally impressed with Stackblitz. It does Angular, it does React, it does Iconic. I think that actually Stackblitz for me, it was that same kind of thing of seeing, oh this is what web dev could be like. I've said to the guy who runs Plunker for a while, if I could give you 25 bucks a month for Plunker Pro and I never had to have a local installed IP then I would do that. Stackblitz is in the same kind of fashion. Being able to do this web-based development where you don't really have to worry about tooling so much, you just get to start writing code, I think is mega.</p><p><strong>Rob Wormald:</strong>        The thing that actually inside of Google we have this cloud-based editor that's not all that indistinct from how Stackblitz works and really there's a fair portion of internal development at Google that happens using that cloud IDE. To have that as a real thing I think is pretty cool so I hope that Stackblitz and things like Stackblitz become more and more prevalent because the barrier to entry for people, the difference between ... We do a lot of work to make sure that Angular is easy to use, to make sure that the CLI does everything you need it to do, but it's still the difference between going to a website versus having to read a bunch of instructions on how to do NPM and all these other things. With one click I'm in and I'm immediately productive is as very, very powerful thing, so much that we're actually switching Angular's documentation over to use Stackblitz.</p><p><strong>John Lindquist:</strong>     Oh, cool.</p><p><strong>Juri S.:</strong>            Yeah. For me, Stackblitz has really made it easy to do workshops because I had usually the slides where I would explain some kind of topics and then I had a kind of demo link on there directly on the slides especially as a reference material for the attendees afterwards and usually initially obviously I had their Plunkers linked. It was kind of weird because you explain to them the whole stuff and how Angular works, how it loads up, and then they see SystemJS inside those Plunkers and it was always kind of a shift you nearly had to explain then that as well.</p><p><strong>John Lindquist:</strong>     Yeah.</p><p><strong>Juri S.:</strong>            Now I simply embed some Stackblitz links, they can play around with that and they can even download it, so that's the most cool thing I think because they can download it, it's a fully computed Angular CLI application already so they can just use their local Angular CLI and boot it up and it works just as in the browser so that's really, really cool.</p><p><strong>Rob Wormald:</strong>        Yeah.</p><p><strong>John Lindquist:</strong>     We live in exciting times.</p><p><strong>Juri S.:</strong>            Yeah.</p><p><strong>John Lindquist:</strong>     Closing thoughts from either of you?</p><p><strong>Rob Wormald:</strong>        Yeah. I think from our end we are pretty stoked to see ... We hit a million monthly active users on Angular's website for the first time.</p><p><strong>John Lindquist:</strong>     Oh nice. Congrats.</p><p><strong>Juri S.:</strong>            [crosstalk 00:38:16]</p><p><strong>Rob Wormald:</strong>        That's a big milestone for us and so we're super stoked that the community is not giving up on us. I say this fairly often, that we very much feel like we are only just getting started. There is a lot of really, really cool stuff coming down the pipeline. I think that we more or less kind of built Angular's public API the way we like it and now a lot of what we're doing is based on feedback we're getting from developers, these new use cases. For us I think the next couple of years of Angular will be very, very exciting.</p><p><strong>Rob Wormald:</strong>        Again, we're not going to change Angular for everybody. You will be able to continue to use Angular in the way that you use Angular today, that's the guarantee that we're making, but certainly we want to begin to open the doors to a whole variety of different use cases, a whole variety of different skill levels and backgrounds and all these different things. Certainly from our perspective, stay tuned.</p><p><strong>John Lindquist:</strong>     Great. Juri and Rob, thanks for all you do in the community.</p><p><strong>Rob Wormald:</strong>        Same to you. I don't think we would be where we are without Egghead and the coursework that you guys do, so thank you.</p><p><strong>John Lindquist:</strong>     All right. Happy holidays.</p>",
    "slug": "angular-web-applications-with-juri-strumpflohner-and-rob-wormald-angular-core-team",
    "description": "<p>John talks with Juri Strumpflohner, an industry expert and angular trainer; and Rob Wormald, an Angular core development team member, getting into how Angular has evolved with the 2.0 release, powerful new features, their favorite libraries, and where the future is taking it.</p><p>Angular has gotten much better under the hood. Rob talks about how the Angular team is working on really improving the code while still keeping the public API stable. He also talks about the team's ongoing debate on where to improve the code. Faster? Smaller? Currently, the team has chosen to work on making it smaller and has improved the bundle size of Angular.</p><p>One of the new things about Angular that people are most excited about is the Elements and CLI Schematics libraries. Juri talks about how Elements opens up a \"whole new world,\" allowing people not to have to resolve the same problems over and over again by letting them create reusable angular components.</p><p>One of the hardest things to learn with Angular was the design and architecture patterns. Rob goes into how the team has improved the documentation, now actually getting into best practices and giving architecture guidelines.</p><p>Finally, our guests get into their favorite Angular libraries. NgRx Formly being the big favorite. NgRx Formly is a beautiful library that allows devs to create powerful reactive forms. Rob also highly recommends the Angular Schematics library. It is a powerful low-level tool that allows you to create templates and code generators. You can even use it in conjunction with the Angular CLI to extend it or modify it for your own needs!</p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/b58b2c84/transcript\">\"Angular Web Applications with Juri Strumpflohner and Rob Wormald (Angular Core Team)\" Transcript</a></p><h3>Resources</h3><ul><li><a href=\"https://angular.io/\">Angular 2</a></li><li><a href=\"https://github.com/robwormald/angular-elements\">Angular Elements</a></li><li><a href=\"https://www.npmjs.com/package/@angular-devkit/schematics\">Angular Schematics</a></li><li><a href=\"https://github.com/ngrx/platform\">NgRx</a></li><li><a href=\"https://angular.io/guide/reactive-forms\">Angular Reactive Forms</a></li></ul><h3>Rob Wormald</h3><ul><li><a href=\"https://twitter.com/robwormald?lang=en\">Twitter</a></li><li><a href=\"https://github.com/robwormald\">Github</a></li><li><a href=\"https://egghead.io/instructors/rob-wormald\">Egghead Courses</a></li></ul><h3>Juri Strumpflohner</h3><ul><li><a href=\"https://twitter.com/juristr?lang=en\">Twitter</a></li><li><a href=\"https://juristr.com/\">Blog</a></li><li><a href=\"https://egghead.io/instructors/juri-strumpflohner\">Egghead Courses</a></li></ul>",
    "duration": 2367,
    "episode_number": 6,
    "contributors": [
      "John Lindquist"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/fggp3",
    "path": "/podcasts/angular-web-applications-with-juri-strumpflohner-and-rob-wormald-angular-core-team",
    "published_at": "January 17th, 2018",
    "url": "https://egghead.io/api/v1/podcasts/angular-web-applications-with-juri-strumpflohner-and-rob-wormald-angular-core-team",
    "edit_podcast_url": "https://egghead.io/podcasts/angular-web-applications-with-juri-strumpflohner-and-rob-wormald-angular-core-team/edit"
  },
  {
    "id": "podcasts-00000000000000000053",
    "title": "Learning React with Kent C. Dodds",
    "summary": "Kent C. Dodds, a leading React expert, speaks with John Lindquist and Joel Hooks, the co-founders of egghead, about how React is a fantastic technology to learn for both newcomers to programming and Javascript grey-beards alike. ",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/8bfe6e5d-d2c2-4acd-965c-77494518fe5a/b16e94da_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/8bfe6e5d-d2c2-4acd-965c-77494518fe5a/1534346535artwork.jpg",
    "simplecast_uid": "8bfe6e5d-d2c2-4acd-965c-77494518fe5a",
    "transcript": "<p><strong>John Lindquist:</strong>     This is an Egghead.io podcast on Transducers, with Paul and Brian. All right, I'm in here with Joel Hooks and Kent Christoper Dodds. This is John Christopher Lindquist. We're going to go ahead and introduce ourselves first. We're going to have Joel, go. Joel, what's your experience with React? What have you done with it in the past and anything about yourself that's interesting?</p><p><strong>Joel Hooks:</strong>         Yeah, that's a tough one, interesting. So, with John, I co-founded Egghead.io and it's built on rails, but over the last year we've switched it over to, for the most part, being a React front-end which has been a very interesting experience to move from the world of templates into an API-driven React page. So, we've been busy at that and then kind of building the features and stuff that you see on Egghead and building components and spent a lot of time in React over the last year and really love it.</p><p><strong>John Lindquist:</strong>     Sweet, Kent?</p><p><strong>Kent C. Dodds:</strong>      Yeah, so I'm Kent C. Dodds. My background with React, I actually remember listening to JavaScript Jabber, the episode about React. The first episode they did about React. When I was on my way to the first NG-Conf in 2014 and just like, \"Oh, whatever this React thing. I'm going to Angular Conf. This is going to be sweet.\" It was a while later, a couple months later that I decided to just give it some time and I think we're going to talk about this some more but I've got a little bit of a story with my experience with React.</p><p><strong>John Lindquist:</strong>     Are you guys soulmates now, you and React?</p><p><strong>Kent C. Dodds:</strong>      Yeah.</p><p><strong>John Lindquist:</strong>     No, I love when people find technology they love and it's something that they feel they can evangelize and get behind. It's great. So, yeah, tell me more about that first experience with React. When you first started playing with it, was it the automatically fall in love with it or was it \"Wait, this is so different than the directives and components I'm used to?\"</p><p><strong>Kent C. Dodds:</strong>      Yeah. It was kind of like a mixed bag. When I first looked at it, I was kind of thrown off like everybody else, I think. I was thrown off by the JSX stuff. Screaming in my head was this separation of concerns, which is something I didn't actually understand at the time, but thought I understood a little bit. Then Hunt gave a talk at JS-Conf in 2014 or something where he kind of picks apart the separation of concerns. I think that was really good talk and that smoothed things over for me.</p><p><strong>Kent C. Dodds:</strong>      So, when I finally actually tried out React-Fold, along with the docs, there was one section in the docs that said give it five minutes. I was like, \"Okay, I'll give it five minutes.\" And it was literally five minutes in to trying out this JSX thing. I was like, \"Oh, yeah, this is awesome.\" I was really heavy into Angular still and this was like late 2014 I think. Actually, if you go back in my Tweets around that time, as I was reading through the docs, there were just a whole bunch of hidden gems in the docs of good software principles that I just thought were so good.</p><p><strong>Kent C. Dodds:</strong>      So, I Tweeted out quotes from the docs, which was not easy to do back in the good old days of 140 characters.</p><p><strong>John Lindquist:</strong>     Oh yeah, a long time ago.</p><p><strong>Kent C. Dodds:</strong>      Yeah, it was not easy. But I was just really impressed by the principles but it still was another year or so before I started to actually use React regularly. I was still very heavy in to Angular One and loving it there. I finally, totally switched over when I started working at PayPal. That was actually part of the motivation was ... The job I was at, there was no way we were going to be able to rewrite or even start using React. So, I started looking around because I really liked the idea of using React for my day job and found PayPal. So, anyway, now I'm doing React and that was about two years ago.</p><p><strong>John Lindquist:</strong>     It's funny for me, because I was doing Angular, too. Angular, also but I saw Pete Hunt actually give a talk at Strange Loop and it was the first time I really looked at React and was like, he's amazing. You can watch him talk and he'll convince you that, \"Hey, just give it a try.\" And at the time I was like, \"Huh, that's interesting. I knew there was something there, but the Thinking and components, that article that was in the docs, was like this is really how I feel you should be writing software. I actually took that and while I was giving Angular training for a year and a half, two years I'd reference that document. I'd be like \"We're going to build our Angular directives in this approach.</p><p><strong>John Lindquist:</strong>     We're going to use components and we're going to do it in this of react style component architecture and it worked really well there and to me, that was the big thing. We're thinking about components, we're composing things and structuring our application in this component driven so we have these independent, everything's a component and the application's just a big component and that's all the way down to the bottom. Like I still to this day love that and Thinking and Components that article was really something that stuck with me and almost changed how I thought about developing applications. This was pretty cool.</p><p><strong>Kent C. Dodds:</strong>      Yeah, man. I felt the same way and it changed ... I remember tweeting something like just trying React out for a couple hours has made me a better Angular developer or just a better java script developer because applying those same principles in my angular stuff. Actually, kind of a funny story, during this period of time that I was starting to like React a little bit, I proposed a talk to Jay Focus, which is in Sweden. I wasn't aware of that at the time that I proposed, but it was a talk that I actually ... It was using React inside an Angular application was the title of the talk. I had never actually done that before, but I saw a video on Egghead where, oh shoot. Who Was it? Joe did that in a video on Egghead. He rendered a D3 chart with React inside of Angular or something like that. So I was like, \"oh dude, I could make a talk out of that.\" And I got my first international speaking gig, but still having, not ever actually used React seriously. So yeah, it's kind of funny.</p><p><strong>John Lindquist:</strong>     I think it's cool seeing the evolution and the velocity ES6 kind of going alongside of React at the same time where like Angular 1 was ES5 and everyone was still doing the ... everyone was writing regular functions. No one knew what object spread was, and then it seems like React helped push ES6 forward, even that, you know, it's pushing features forward because people want to write in a more functional components style and seem in your intro course, you almost take for granted that you're doing an object spread on with prompts or that you're writing the Arrow function. Like that's so natural for you now whereas it's just ... how many years ago or last year, that's brand new stuff. But for people just starting out now, they get all these helpful features that are [crosstalk 00:08:04].</p><p><strong>Joel Hooks:</strong>         Like modules and I love that Arrow functions and spreads, they're just like normal, right? That's code normal. Now if you're doing it the other way then it's probably not as normal. I know it depends on your code base, but if you're writing new software right now, then you're probably using these things. I remember the transition, it was tough cause I was traveling around and doing these trainings and the developers are ... Everybody's just kind of confused as what's what and ES6 2016/2015, what am I supposed to do? And now we're a little bit past that hump in general though most tutorials on the internet are still in the old fashioned way. We're trying to change that obviously, but it's been an interesting transition and like that and typescript and pushing the envelope and all these cool tools that we have and seeing JavaScript mature in a lot of ways as the language has been a lot of fun to watch.</p><p><strong>Kent C. Dodds:</strong>      Yeah. I kind of take for granted that not everybody understands or is used to the latest features in JavaScript, but the fact that they're actually running in browsers and everything just makes me feel like people should know and understand what the default params are and just as well as they know how to declare a variable or use a try catch or something. It's all just as much a part of the language now. I mean you compare something like default params to the alternative and clearly in it's so much better. So I don't mind, I'm really excited to be able to use this in newer syntax even if it may be a little unfamiliar to people because I think like you catch on pretty quick, like maybe you need to watch the video again or something if you're not familiar, but like ultimately the alternative would be to do all this weird old stuff that we used to do to get that same functionality.</p><p><strong>John Lindquist:</strong>     You probably [crosstalk 00:10:06] or something.</p><p><strong>Joel Hooks:</strong>         Yeah. We had the transition at Egghead, right? Because we're recording video and video just by its nature, it's immutable, right? We can't change it but at the end of the day, once you record a video it's a pain and like text or whatever. So it was like ES6 comes around and we're like, \"Well, what do we do?\" And the general rule is we use ES6 and it doesn't become normal and people don't get used to it until [crosstalk 00:10:32].</p><p><strong>John Lindquist:</strong>     Yeah, with tracer. I recorded all those tracer lessons [inaudible 00:10:36].</p><p><strong>Joel Hooks:</strong>         Yeah, exactly. Like how do we be part of the solution. Because there's a lot of places you can go learn to Code Java script on the Internet that are still using the old syntax and not using the new syntax and that's fine, but at the same time how do you push that forward? You have to be vocal and kind of stick to it, but then also at the same time provide the resources and help and understanding that folks don't know this and they might need some extra help so we can push the envelope that way too.</p><p><strong>John Lindquist:</strong>     Yeah. I think Kent, what you did was it was perfect. You have to treat that. If it's a language feature, you have to treat it as a normal thing and make that assumption that this is what Java script is. We use const now, we use objects spread, we use Arrow functions. That's just normal things to do that normal developers do every day and you don't pause every time and say, \"I'm going to write an Arrow function now. If you haven't seen it before, it's just like a function and it automatically returns.\" I think the more you do that, the more you turn people away from it. That it's some weird thing that they don't need to other with.</p><p><strong>Kent C. Dodds:</strong>      Yeah, totally. I think that for anybody who's listening and not familiar too with ES6, there are a lot of resources to go learn it. I mean it's a lot of new features and so if you've been using JavaScript a long time and you're not used to these new features, like I think it behooves you to learn these things because eventually your coworkers are going to start using these features and you want to use these features because they're legitimately useful. If you're not super familiar with these things, then a couple of the things that I do in my courses are going to be a little confusing. So I definitely suggest brushing up on at least ES6 staff before jumping into the courses.</p><p><strong>Joel Hooks:</strong>         There is of course, an Egghead course on learning ES6 that covers the new feature and it gives you a nice little translation to [inaudible 00:12:40].</p><p><strong>John Lindquist:</strong>     Kent, you want to talk about some of the goals of the beginner course, where people like [crosstalk 00:12:50].</p><p><strong>Joel Hooks:</strong>         Kent has two new courses that he's putting out on Egghead, one of them is a beginner's course. So like you mean jumping right into React with without a bunch of prior React knowledge and then an advanced component course, which are both excellent.</p><p><strong>Kent C. Dodds:</strong>      Yeah. Thanks Joel. My goal of the beginner courses that like, lots of times I'll see \"beginner courses\" for React or beginner material and they jumped right into custom components and state management, and sometimes they even include something like Redux, which totally blows my mind. Why would you teach a brand new beginner Redux?</p><p><strong>Joel Hooks:</strong>         To make them sad?</p><p><strong>Kent C. Dodds:</strong>      Yeah. So the goal of the beginner's guide to React is to start right from square one and to not have any superfluous tools. So the entire thing is like every single lesson in both courses with the exception of one is an index html file. So you can literally copy, paste the code into your text editor and pull that up in a browser and it'll work. And so yeah, you don't need Webpack or even create React app as easy as that makes things. It's still a barrier to people's learning and it's just an extra abstraction. Uh, so it's all just one file.</p><p><strong>Kent C. Dodds:</strong>      And so I think that that makes things simpler and then also the very, very first lesson, it starts with a totally blank file. So you watch the entire thing progress from absolutely nothing, which I think is an important piece as well. Before we even get into React, I show, \"Okay, so here's how you create DOM.\" This is like using regular JavaScript, we're going to write our own little tiny implementation of creating an element and rendering that to the page.</p><p><strong>Kent C. Dodds:</strong>      And now let's refactor that too React's APIs which provide a couple [niceties 00:14:54] there. Then we'll refactor that to JSX and I have a lesson all about what JSX is? How it differs from regular html? I show what the [inaudible 00:15:12] Transpiler does to the JSX as well. So I feel like it's more beginner than most beginner courses that I have seen and so that's why I created it because I feel like people need ... It's not just like people need to be able to write React components. I want people to understand what's happening when they write JSX and what's happening when they render certain things and why you need a key on an element when it's rendered as an array. What does the key property do and what happens if you don't include the key, what do you use for the key, those kinds of things which I think are a mystery for even advanced React developers. So getting this really basic fundamental understanding of what React is, what it's doing was kind of my goal for [crosstalk 00:16:10].</p><p><strong>Joel Hooks:</strong>         It was funny when you pitched it. I was like, \"Well, that's kind of nuts. Like why would we do that? Why won't you just use create React app?\" It's there, we can use it and then as I watched it and then like took a second to listen to you and understand your motivations, I was like create React APP, it's wonderful, right? It's a wonderful software. Dan Abramoff gets to maintain my build for me and that's how I look at that and that's fantastic. I still actually understand what's going on with create React APP. Then sometimes when you've been doing this for a while, you take that for granted, right? Like, I get it, I get Webpack, I get, [inaudible 00:16:45], I don't want to do that, right? I don't want to maintain that or I know when I need to inject or whatever.</p><p><strong>Joel Hooks:</strong>         But when you're starting that just ... it looks simple but it's not, it's just easy, right? Like typing, create React APP is easy, but it's intensely complex where when you take this approach where, \"Hey, I just start with a blank page, here's some html and I'm going to drop a script import in there and we're going to go to town and write some React without all that complexity.\" That is truly simple and it's actually a pretty nice and takes a lot of the initial kind of fog of war dissipate for you.</p><p><strong>Joel Hooks:</strong>         And you're like, \"Oh, okay. Well, I know html and I know some JavaScript so I can get in here and I can start learning this thing without a bunch of ... You don't have to have node or NPM or any of that even installed. You can just get in there and start learning. And that's a great approach. After consuming it, I was like, I really appreciate that you did it that way versus the more complex way.</p><p><strong>Kent C. Dodds:</strong>      Good. Yeah. Thanks Joel. I'm glad to hear that feedback. Yeah. So I do understand and realize eventually, you are to want to ship something for real. I mean, most of the little toy apps that we build like that people are using create Ceact app to build, they could probably just use an index html file and to build those little toy apps. And honestly, I don't know why we don't because yeah the experiences is pretty good. But in any case, there's actually a tool that sits between index html and create React app that I think is just so good and it's code sandbox.io.</p><p><strong>Kent C. Dodds:</strong>      So for the last lesson in the beginner's guide to react, I show you CodeSandbox IO, what its role is in your development workflow and how you could actually build and deploy an APP all right within CodeSandbox. And then you can ... if you really want to get serious about things and like have a team work on it and whatever, then you can, you can pull it down and what it gives you is actually create React App. So you start with your index html, you build something, a little prototype, then you want to share with people or something. So you go to code sandbox, you copy paste all this stuff into CodeSandbox and then you want to like really get serious about those. Maybe you want to inject or something then you pull it down and it's just a create React app for you.</p><p><strong>Joel Hooks:</strong>         But export to GitHub too, which I think is pretty new. I saw something just in the last couple of days where you can push a button and then all of a sudden you have a repo and you're going to town and have version control. It's like what?</p><p><strong>Kent C. Dodds:</strong>      Yeah, man. I actually just used that last night and I'm totally blown away. You can make commits, you can make pull requests. You can do all kinds of stuff. So, like now I'm thinking maybe I should get that pixel book from Google and I don't even need a local environment anymore. [crosstalk 00:19:36].</p><p><strong>Joel Hooks:</strong>         That's when the dream, I've seen developers wishing that they could do that, that they could just have the Chromebook or the new pixel book or something and it's all in the cloud and you're just going to town and developing. They've been doing cloud IDs for a few years, but it keeps getting closer and closer and especially when you have people doing the innovative work that I think CodeSandbox is totally doing. It's really pushing the envelope of having this online code being type thing and it's just great to see that, that could be a reality. You can have this ultra light thing, you can just fire it up and code anywhere, fix a bug or do whatever in the environment that I'm really just functions as you'd hope it would.</p><p><strong>Kent C. Dodds:</strong>      Yeah, exactly.</p><p><strong>John Lindquist:</strong>     It's funny thinking back to like you started the course just writing html. And it's funny thinking back to actually writing html and using jQuery with selectors to add functionality to little pieces of the DOM and it just, so how it's flipped it on its head now and my index html pages, one div with ID on it usually, and then all the script tags underneath it. That's all it is anymore. The change we've gone through over the past five, 10 years, whatever it's been, and thinking about what that could turn into in the future blows my mind.</p><p><strong>Joel Hooks:</strong>         Yeah, it's weird. I read a lot of JSX but not very much html and they're so similar. So sometimes you kind of forget that they're two different things, but it's literally how the root file and the rest of these package components where my styles and my markup and my JavaScript are all sitting there in the same file. Which if you had to tell me I would be doing that five years ago, I would have thrown up in my mouth a little bit and laugh at you a little bit before. Just kind of staring blankly into space. I wouldn't believe it, but it's weird to see it.</p><p><strong>John Lindquist:</strong>     Yeah. I mean, we used [crosstalk 00:21:29]. We used to talk about importing html into html on including that inside of itself and writing more and more DOM. Like that's kind of silenced and now it's just one html file with a thousand JavaScript files. Just kind of makes me chuckle.</p><p><strong>Kent C. Dodds:</strong>      Yeah, it's pretty cool. And actually, another motivation to using the index html for all the lessons was to kind of stick it to the man a little bit. A lot of people complain that React is really hard to get started with because there's all this tooling around it and stuff. So I was like, \"No, listen, it is not hard to get started with.\" I can tweet to you what you need to start out with using React. It's really easy and I think that it's cool because we can build little toy apps like that, but the APPs of five years ago are not the Apps of today and that's why we are writing our mark up and our JavaScript NRC assess in a single file.Whether it's React or [crosstalk 00:22:41]</p><p><strong>Joel Hooks:</strong>         We're building applications now.</p><p><strong>Kent C. Dodds:</strong>      Yeah. It's not like a little page that's rendered on the server and sprinkle a couple interactive pieces and then full page refresh everywhere you go. But it's an actual full application running on the client. So yeah, sure. Things are going to be a little bit more complicated, but that doesn't mean that like when we're getting started into it, it needs to be complicated.</p><p><strong>Joel Hooks:</strong>         I still want to call him rich internet applications sometimes. I don't because [crosstalk 00:23:07].</p><p><strong>John Lindquist:</strong>     So let's talk about some of the advanced stuff. Before we get there, what have you seen during the history of react? Do you think there's like these patterns that have been discovered or were they always there and people just didn't use them because it seems like some of these higher order components and render prompts and all these things that people are talking about and using now, like a couple of years ago, it just wasn't ... It never even came up in conversation.</p><p><strong>Kent C. Dodds:</strong>      Yeah. I think that the React to community ... This is one of the exciting things about it too like it's still up. Well, just in general, the JavaScript community is still growing up and still exploring and reinventing things that existed 20 years ago or whatever, but just in a JavaScript context. And just that's super exciting to me. Actually, none of the patterns in my advanced react component course were impossible a couple of years ago.</p><p><strong>Kent C. Dodds:</strong>      I can't remember exactly when React context was a thing, but I'm pretty sure that was like at least 0.14. So it's been a long time that you've been able to do all this stuff, but back in the day we had stuff like [Nixons 00:24:26] and that was the blessed way to create or to share code between components but then there were a whole bunch of problems with Nixon's and then ES6 classes were coming, and so they thought, \"Okay, we want to get rid of this react.create class thing and just have people define their components as a class that extends the React component, a base class and then they can add their lifecycle hooks and whatever.</p><p><strong>Kent C. Dodds:</strong>      And then they added function components and oh, my goodness, that was really nice. Makes it a lot easier to just create one off components really quickly. So, yeah, like none of these patterns are ... They're kind of new, but they're kind of like discoveries of recent years. Just out of like necessity basically. When they were getting rid of create class, they needed a new way to share code and so they ... Sebastian [Markbash 00:25:31], one of the core React members just thought, \"Hey, maybe we could use this thing.\" And it got called higher order components or just kind of a misnomer because the higher order component is a function which returns a component and neither the function ... the function is not a component and the component that it returns has nothing, like it's not higher order at all. So it's kind of weird, but that's what it's called.</p><p><strong>Joel Hooks:</strong>         For me, I always look out and all I can think of is the gang of four design patterns with a decorator and like it's this decorator pattern that we're using. I know decorator is a loaded term because we have decorators also, but that's basically what that particular piece does too. Right? Just wrap this thing and decorates it and makes it have new functionality.</p><p><strong>Kent C. Dodds:</strong>      Yeah. Exactly. So, so higher order components kind of took off and especially in lots of popular libraries, and so lots of people started using them, but actually there were a lot of fundamental problems with Nixon's that like even when we had make sense, we were like struggling with, and then higher order components solve some of those but aggravated a few and left several problems unsolved. So then, I'm not sure when exactly this was, I feel like it was quite awhile ago, but React to emotion came out with this thing called ... Well, I don't know what they called it at the time, but it's what we now know as a render prompt. And so for the like in React JSX, the stuff you put between the opening tag and the closing tag is called the children prompt and normally you would just put more JSX in there.</p><p><strong>Kent C. Dodds:</strong>      Well, when you do the curly braces and JSX that you exit JSX land and enter JavaScript land and you can put any expression in there that you want to. So React in motion was like, \"Oh, hey, why don't we put a function in there and then we'll call your function with the coordinates or whatever are we're animating here and then you can return JSX and we'll render that.\" That was actually quite a while ago and it took a while for this idea to catch on. But for a long time it was called a function as child components because the child prompt was a function.</p><p><strong>Kent C. Dodds:</strong>      Then I think the first one to really call it a render prompt was, Ryan Florence. We had a Twitter conversation about it a while back but, anyway, it was kind of like, When you put a function inside of that children, it kind of breaks your mental model of JSX or html inside of the opening closing tank are going to put some more html look like staff or XML like stuff in there. And when you put a function in there, kind of is confusing for people. Ryan Florence, who's taught countless people in this particular pattern, saw the look on people's faces when he introduced it as the children prompt like that or as just an irregular prompt that you assigned to a function and he called that prompt rendering [crosstalk 00:28:39]</p><p><strong>Joel Hooks:</strong>         And you give it a name and people are like, uh.</p><p><strong>Kent C. Dodds:</strong>      Yeah. It was more straightforward for people. I think because lots of people still don't quite understand that that children area is just another prompt. So anyway, it eventually made its way to being called a render prompt. I used a render prompt for my library downshift and that helped get it some steam, get the idea some steam and then a couple of months later, Michael Jackson gave this talk basically saying, \"Hey, never use a higher order component. You can always do everything with a render prompt. You never need a higher order component.\" And that, that I think is really what pushed the render prompt pattern forward.</p><p><strong>Joel Hooks:</strong>         What's funny to me is it's the most JavaScript thing you can do, right? Because you're effectively passing a callback and as a property, right? So you callback and it does what you want it to do and you get all the closure space over your function and then you get those properties back in and you can just go to town. You're totally right, the children thing ... I know this is why people are confused as you put it in there and it's like behind the scenes and naming it children. But if you give it this explicit name, now it's like, \"Oh, that's my render function. It's not some weird dangling bit of JavaScript that sits between two curly braces in between two what looked like html tags.</p><p><strong>Joel Hooks:</strong>         This is the thing that I pass in and I own and control and know the name of. It really did. It pushed it forward and it's clear and just the flexibility you get versus you like you talk about a namespace collisions and that sort of things that happens with higher order components. And you used to avoid this whole multiple classes of problem if you approach it in this respect. And that's a really ... Honestly, I haven't done that a lot in my own code and having watched this, I'm like, I'm kind of eager to go implement and start doing it for some of the components that I've written recently. I can really use this and start doing this and like my code better, like immediately.</p><p><strong>Kent C. Dodds:</strong>      Yeah, that's what I hope is that people, after watching this are just like, \"Oh, snap, that component I wrote last week, I could rewrite it as a render proper or use the provider pattern.\" Or, \"Oh, I can use a state initializer here and that'll just make it so much better.\" I'm hoping that these patterns will make their components better and more flexible and ultimately make it more enjoyable to develop their applications. So that's good to hear Joel.</p><p><strong>Joel Hooks:</strong>         Yeah, I was on lesson three and I sent a message to John on slack. I was like, \"I think I've already learned five things.\" Oh Man, I've been doing this for a while, right? Like I've been programming computers for a decade and I've been doing React for well, over a year and I've done this quite a bit and like watch this and really, really learn some stuff. So that's just cool. Like I did that when learning is one of my favorite things. So when somebody shows me something new, I think it's ...and especially when it rings true and ... it really did for me.</p><p><strong>John Lindquist:</strong>     So yeah, it's really easy to get comfortable with the way you currently do things and then just to kind of shut out new things.</p><p><strong>Joel Hooks:</strong>         My joke is they're all code normal which like I own that codenormal.com and normal's always relative, right? That's kind of my joke. I tell people to code normal and it always depends and normal in one organization or one individual is it's always different and totally subjective. But once you get into that, once you have what your normal is, you just kind of it's habitual. It's what you do. You wake up and brush your teeth and that's just how it is. Like to have it shaken up a little bit and then see something that's like, \"Oh, if I did it this way, then everything's better. That's how it like the epiphany's of software. They seem to kind of be never ending to me. That's why one of the things I enjoy about it. It's like a puzzle that's always shifting and showing new facets.</p><p><strong>John Lindquist:</strong>     I mean, you'll see so many people fight against a JSX or a community fight against JSX and then finally they're like, \"Well, I guess everyone's doing it and it's working for everyone so I'll give up that fight and people find that [crosstalk 00:33:02]</p><p><strong>Joel Hooks:</strong>         If you're still on the fence on JSX, it's fine. It really is. After like Kent said, after reading that I was like, \"Give it five minutes.\" Like literally, it just goes away and the tools are there. At first it was like a string and it was really weird because the tools didn't support it, but now like it's like [inaudible 00:33:18] code and Webstorm and whatever your tool of choice is probably understands it and gives you code hands and all of those goodies and highlighting and it's the new normal. It's just how it is and I don't know. It's been been great for me. I like the shorthand and it really works out.</p><p><strong>Kent C. Dodds:</strong>      Yeah, definitely. Tools will follow good ideas, that's for sure.</p><p><strong>Joel Hooks:</strong>         Yeah, that's a good one. I like that.</p><p><strong>John Lindquist:</strong>     It'd be nice if tools stayed ahead of good ideas, but it requires some fortune telling.</p><p><strong>Joel Hooks:</strong>         Yeah, that's a real trick. I'd like to see that.</p><p><strong>John Lindquist:</strong>     All right. Kent, anything else you want to share before we wrap up here?</p><p><strong>Kent C. Dodds:</strong>      I think that's pretty much it. Again, the whole idea of these courses is I want you to come out of it a better React developer than you were before. And so even if you're not a beginner to React, I think you'll be able to get a couple of gems out of the beginner's guide because it really gets into the fundamentals of what react is doing and how the JSX stuff is all working. I think that's a really critical part to you understanding and being able to be more productive with React. Then the advanced patterns, I really hope that people come out of that making their components better and making it more enjoyable to work in their own components. I want to see a lot more open source solutions that use a render prompt to render an accordion or to make a date picker or something like that because I feel like this pattern makes it easier to make our stuff more generic and generally, useful and simple at the same time. So I'm really looking forward to these courses, getting into the hands of people who are going to build awesome stuff with it.</p><p><strong>John Lindquist:</strong>     And the beginner's course is interesting to me. Like even if you have experience like watching this, like the way you approach to teaching React and showing React, like as an experience developers, it's our job to show newcomers the ropes and this gives us this really super approachable way that you can explain, React and explain what JSX is doing. And demonstrate it without a lot of rigamarole to other people too. And it's always good to revisit your fundamentals, anyway. Thanks for listening. You can learn more about transducers from Paul and more about functional programming from Brian on Egghead.io.</p>",
    "slug": "learning-react-with-kent-c-dodds",
    "description": "<p>Kent C. Dodds, a leading React expert, speaks with John Lindquist and Joel Hooks, the co-founders of egghead, about how React is a fantastic technology to learn for both newcomers to programming and Javascript grey-beards alike.</p><p>Kent talks about how great componentizing your code is. No longer are you going in and writing HTML for all your pages, you are now writing powerful and useful javascript components.</p><p>The concepts that React got built upon don't just apply to React code. Joel talks about how he taught the React style of componentized code, but using Angular in the workshops he has run.</p><p>Kent and Joel also discuss the importance of ES6. There are still new Javascript tutorials that are get written in ES5, Joel explains why this is shortsighted. The future of Javascript is moving to ES6. Not only that but ES6 is an excellent improvement over ES5.<br />New and powerful features can be leveraged with it, spread syntax, arrow functions, modules. These features are the direction Javascript is moving.</p><p>So check it out. Learn this new technology and see that it's not so weird, with Kent's new courses <a href=\"https://egghead.io/courses/the-beginner-s-guide-to-reactjs\">The Beginner's Guide to ReactJS</a> and <a href=\"https://egghead.io/courses/advanced-react-component-patterns\">Advanced React Component Patterns</a></p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/learn-react-with-kent-c-dodds/transcript\">\"Learning React with Kent C. Dodds\" Transcript</a></p><h3>Resources</h3><ul><li><a href=\"https://egghead.io/courses/the-beginner-s-guide-to-reactjs\">The Beginner's Guide to ReactJS</a></li><li><a href=\"https://egghead.io/courses/advanced-react-component-patterns\">Advanced React Component Patterns</a></li><li><a href=\"https://egghead.io/courses/learn-es6-ecmascript-2015\">Learn ES6</a></li><li><a href=\"https://codesandbox.io/\">codesandbox.io</a></li><li><a href=\"https://reactjs.org/docs/hello-world.html\">React Documentation</a></li></ul><h3>Kent C. Dodds</h3><ul><li><a href=\"https://kentcdodds.com/\">kentcdodds.com</a></li><li><a href=\"https://twitter.com/kentcdodds\">Twitter</a></li><li><a href=\"https://github.com/kentcdodds\">Github</a></li></ul><h3>John Lindquist</h3><ul><li><a href=\"https://twitter.com/johnlindquist?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor\">Twitter</a></li><li><a href=\"https://egghead.io/instructors/john-lindquist\">egghead.io</a></li><li><a href=\"https://github.com/johnlindquist\">Github</a></li><li><a href=\"https://johnlindquist.com/\">Website</a></li></ul><h3>Joel Hooks</h3><ul><li><a href=\"https://twitter.com/jhooks\">Twitter</a></li><li><a href=\"https://joelhooks.com/\">Website</a></li></ul>",
    "duration": 2131,
    "episode_number": 5,
    "contributors": [
      "John Lindquist"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/169yx",
    "path": "/podcasts/learning-react-with-kent-c-dodds",
    "published_at": "December 29th, 2017",
    "url": "https://egghead.io/api/v1/podcasts/learning-react-with-kent-c-dodds",
    "edit_podcast_url": "https://egghead.io/podcasts/learning-react-with-kent-c-dodds/edit"
  },
  {
    "id": "podcasts-00000000000000000054",
    "title": "Dan Abramov, co-author of Redux",
    "summary": "Joel Hooks co-founder of egghead.io, interviews Dan Abramov, co-author of Redux. They discuss the \"Redux phenomenon\" and the notion of improving the developer experience.\r\n\r\n",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/af64d009-6ac5-4d0d-8652-3acb7469e6a1/bf19ba1a_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/af64d009-6ac5-4d0d-8652-3acb7469e6a1/1534346546artwork.jpg",
    "simplecast_uid": "af64d009-6ac5-4d0d-8652-3acb7469e6a1",
    "transcript": "<p><strong>Joel Hooks:</strong>         So, today, I'm sitting down with Dan Abramov and we're going to talk about the overwhelming success of his Redux library.</p><p><strong>Joel Hooks:</strong>         Hi, Dan.</p><p><strong>Dan Abramov:</strong>        Hi.</p><p><strong>Joel Hooks:</strong>         So, I was going through the end of the year stuff and I was doing some database queries. And you're Getting Started with Redux course on Egghead has, for the last two years, consistently, month over month, been head and shoulders above every other course we have on the site, in terms of popularity.</p><p><strong>Joel Hooks:</strong>         We track usage and people have spent six years, six years, Dan, watching that Redux course.</p><p><strong>Dan Abramov:</strong>        Oh, man.</p><p><strong>Joel Hooks:</strong>         And that's only the people that are logged into our site. That does not include all the free views, which are astronomically high as well. I didn't get into that to calculate it, which is nuts to me.</p><p><strong>Joel Hooks:</strong>         We pay royalties. It's into the six figures over the last two years. To me, it's amazing, this Redux phenomenon. And so, I was kinda thinking about it. And have you thought about why Redux has blown up in the way that it has?</p><p><strong>Dan Abramov:</strong>        Yeah. I'm not sure, really. I think I'm surprised by it, as well. Both by the popularity of the course and my popularity of Redux.</p><p><strong>Dan Abramov:</strong>        I think the Redux phenomenon is weird to me because it relies on some concepts that I don't think have been mainstream. I think they were on the verge of becoming mainstream and, actually, Redux kinda helped to push them to mainstream.</p><p><strong>Dan Abramov:</strong>        Like using immutability in client side, kinda Javascript code. Obviously, there was a lot of prior work. And it's not an innovative project, in terms of it uses ideas from Om and Elm and a bunch of other projects that are a little bit less mainstream than Redux.</p><p><strong>Dan Abramov:</strong>        And I was just chatting, actually. I was just chatting with somebody from a code in boot camp a few months ago. And so, this is a guy who learned web development, basically, during the last year.</p><p><strong>Dan Abramov:</strong>        And so, he told me that all these things like immutability and the kind of approach that Redux uses, this is natural for him. This is like what he learned. And this is so strange for me, because when I was learning, everything was object-oriented.</p><p><strong>Dan Abramov:</strong>        And there was a lot of dogma around it. And functional programming has seen something that's not really accessible to most people. And it seemed more kind of academic. And it's so strange how the tide has turned.</p><p><strong>Dan Abramov:</strong>        So, I think, getting back to your question, I think it's just ... Redux just happened to be at that point in time when functional programming concepts were becoming more mainstream. And it just happened to kind of give a name to some of these patterns, even though he did not really invent those patterns.</p><p><strong>Dan Abramov:</strong>        And I think people find these patterns useful, even if they don't use Redux. So, there was this entry React project, which is inspired by Redux that's popular in the angular community.</p><p><strong>Dan Abramov:</strong>        There is React itself, which is obviously not inspired by Redux. But some of the things we did in Redux are kind of slowly making their way into React itself. So, I think it's like its success is just because it gave a name to something ... To some things that already existed and that people find valuable to these concepts.</p><p><strong>Dan Abramov:</strong>        And people just want to learn these concepts.</p><p><strong>Joel Hooks:</strong>         Yeah. You mentioned object-oriented programming. And I came up the same way, right? It was all ... I remember when I was starting to learn how to program. It was the Gang of Four. I was reading it like it was the Bible and trying to really get in and understand these concepts.</p><p><strong>Joel Hooks:</strong>         Do you think any of that carries over though into Javascript? It's totally different and people have almost stopped using the terminology from that book. But at the same time, if you read it, you see some of these patterns.</p><p><strong>Joel Hooks:</strong>         And even with Redux and this React programming that we do, I see some of those patterns. Have you seen anything? And would you say there's a thread that goes through those?</p><p><strong>Dan Abramov:</strong>        Yeah. I have a history with that book. So, when I was learning development, I really liked making notes. So, I had this book, A Gang of Four book, and I ... It has these examples in Java and small talk.</p><p><strong>Dan Abramov:</strong>        And I didn't know either of them. I only knew virtual basic at the time. So, it was a bit hard to get through it. But I was fascinated by [inaudible 00:05:03] coding and programming at the time.</p><p><strong>Dan Abramov:</strong>        And I would try to create a concept of the book. And I used different colored pens to draw all these diagrams and stuff. That was fun. In terms of how these concepts apply, I think, one way of saying it is like a lot of people say that, I think, that it's ... A lot of these concepts are less necessary.</p><p><strong>Dan Abramov:</strong>        They just disappear, at least their structural form disappears a little bit with functional programming. Because once you have function as a first-class concept, a lot of these things are just like ... It's just functions that you can pass around.</p><p><strong>Dan Abramov:</strong>        And a lot of the complexity in how these patterns are described, I think, disappears if you have function as a first-class value. But I do think that some of these, I don't know, factory come out as just a function that you can poll.</p><p><strong>Dan Abramov:</strong>        But I think that some of these, definitely, are still valuable as ideas. And I think, it's good to know them. And I think that some of them also translate to either functional world. Some of them translate less.</p><p><strong>Dan Abramov:</strong>        There is a good book called Game Programming Patterns, I think it was called.</p><p><strong>Joel Hooks:</strong>         Deje Chanel, I think is his name. Is that the one?</p><p><strong>Dan Abramov:</strong>        I'm not sure. I think he's currently writing another book about creating VM's. So, that's the same author. I don't remember his name. But basically, there's a book that's ... There's a little bit more water in it, compared to design patterns I would say.</p><p><strong>Dan Abramov:</strong>        But I found it enjoyable. And I think it revisits some of these patterns. But from perspective of a game programmer and think in terms of the game loop and how to structure your logic in a game.</p><p><strong>Dan Abramov:</strong>        And I think modern front-end development, especially like React and the React-like libraries and this kind of mindset, I think it has a lot to do with game development, as well.</p><p><strong>Dan Abramov:</strong>        Because you have this complicated state and you have these many actors that, components, that have to talk to each other, but you want to render them efficiently. You want to separate this state from the drawing logic.</p><p><strong>Dan Abramov:</strong>        And that's kind of what React does under the hood. You don't really think about it much. But I found that the patterns described in that book, and it sometimes references the [inaudible 00:08:00] book, as well.</p><p><strong>Dan Abramov:</strong>        But I found it more relatable to what I do today. So, I would recommend anyone to read it.</p><p><strong>Joel Hooks:</strong>         Yeah. We'll get the title of that too, and put it in the show notes. Yeah. And it's interesting to me, too. And if you think about a game and how a game's built, because it's a very visual aspect of it.</p><p><strong>Joel Hooks:</strong>         But then, you also have the world, right? You have the state of the world that has to change at every frame, which is ... That's effectively what Redux has done for us. And that was the thing that blew my mind actually with Redux was that the single, immutable state was just like the sky is open for me, in terms of how I thought about my applications.</p><p><strong>Joel Hooks:</strong>         And it's really, really been a benefit since then. So, you talk a lot ... Or, you have talked a lot in the past about developer experience and what we go through, kind of the experience we have as developers.</p><p><strong>Joel Hooks:</strong>         Which, to me, relates to user experience in some ways. But I was wondering where this idea of developer experience kind of came from and what you've done since you started working on that to kind of push that forward?</p><p><strong>Dan Abramov:</strong>        I don't think I'm doing a great job at it. It's like there's a bunch of projects that I started that I didn't really follow through with. And it makes me feel a bit guilty, but also I feel like I'll fix them eventually.</p><p><strong>Dan Abramov:</strong>        It just takes time. So, where does this come from? I think a part of this is just like I hate keeping things in my head. Like, I'm not a very great learner. Or, it's hard for me to take a complicated application and try to remember everything that happens to it and try to remember what might be causing bugs, these kind of things.</p><p><strong>Dan Abramov:</strong>        So, I need any kind of debugging tools that I can get. And so, I think it ... So, I was working on an application a few years ago, before joining Facebook, before Redux. And it was a really complex, client side application with a lot of state and a lot of interactivity.</p><p><strong>Dan Abramov:</strong>        And we wanted to cash state very aggressively and try to fetch as little as possible and tr to make sure that it's consistent across. As you navigate through the app and you do something, we want to make sure that anything you do is reflected in the widgets you see and so on.</p><p><strong>Dan Abramov:</strong>        And so, we were using Backbone at first. And I found it very limiting, in terms of ... It was hard for me to avoid phrase conditions and avoid the kind of bugs where you do something and some part of the UI gets into an inconsistent state.</p><p><strong>Dan Abramov:</strong>        And you're like, \"How do I reproduce this? I'm not sure.\" Because it happens only once in a while, or you don't really have log-in in place to tell what is mutate. And every object mutates another object.</p><p><strong>Dan Abramov:</strong>        And I found that really difficult to work with, especially in the Async world where you have Async graphs coming in. And you have these promises. And they have objects set in fields on each other.</p><p><strong>Dan Abramov:</strong>        And I think, monkey patched some Backbone matters just to kind of log average when that happens. But that was still frustrating. So that was one of the reasons why I wanted to centralize the mutations.</p><p><strong>Dan Abramov:</strong>        And when I saw Flux pattern, I was like, \"Yeah, this is actually the problem that we're trying to solve in our product.\" So, this is a good answer to how do I avoid all these objects that modify each other?</p><p><strong>Dan Abramov:</strong>        Why don't we just put all modifications in a single place called an influx. Influx, it was achieved with different stores. But still, each store only mutated the parts that are relevant to it.</p><p><strong>Dan Abramov:</strong>        So, I wanted to have a higher visibility into all the mutations that happen and all the changes and to be able to debug them better. But I also had this project called React Hot Loader, which is just ... I came up with it pretty randomly.</p><p><strong>Dan Abramov:</strong>        I think I was inspired by watching Brad Victor's invention on principle talk. And I have a disclaimer that I'm pretty sure Brad Victor hates everything that people do, after watching his talk.</p><p><strong>Dan Abramov:</strong>        Because he shows a big vision. And then, people chase after the five percent that's easy to implement, but forget about the rest of his vision. But yeah, I did what I could. He had this, that won't work.</p><p><strong>Dan Abramov:</strong>        He would change the code and the change would be reflected in real-time and around the application. And that was really inspiring to me, considering that I had to ... Every time I would change a file, I had to wait for Grunt, or whatever I was using at the time, to finish building.</p><p><strong>Dan Abramov:</strong>        And in a deepliness that kind of central application. If you're working on comic books or on some widget that only makes sense in the context of your distant data in your app. And you don't want to build separate fixtures for it.</p><p><strong>Dan Abramov:</strong>        It was really annoying to have to refresh all the time, get the app into the same state and kind of iterate on it. And when I was ... We migrated to Webpack, because they required ... Oh, yeah. We were using required JS, but it was too slow.</p><p><strong>Dan Abramov:</strong>        So, I migrated to Webpack and I noticed there was this page about hot model replacement. Which I had no idea what it is. So, I just asked on the Stack Overflow, what is hot model replacement in Webpack?</p><p><strong>Dan Abramov:</strong>        And Tobias Koppers, the author of Webpack, actually replied to that and he gave an overview. He said, \"This is like a system that lets you ...\". In a very convoluted way, he explained it like ... I mean, he always goes a bit deeper, in terms of implementation details than people usually expect.</p><p><strong>Dan Abramov:</strong>        But he really explained what it does. And it reminded me, when I was 14, I read a book about Erlang. And it had this sentence that since Erlang is a functional language, it's easy to replace modules at one time.</p><p><strong>Dan Abramov:</strong>        So, it can do deployments of specific modules. If I remember correctly and just kind of replace them on the fly and run an application. And this is how ... If I remember it right, I think this is how some of the networks like telecommunication, like GSN networks, worked at least at the time.</p><p><strong>Dan Abramov:</strong>        So, a lot of them were using Erlang. And it was easy to deploy nowadays, because you can kind of hot swap it.</p><p><strong>Joel Hooks:</strong>         I think they still are.</p><p><strong>Dan Abramov:</strong>        Yeah. This came to my mind and I was like, \"Yeah, this is a similar system, but for Javascript.\" But obviously, Javascript has side effects. So, how do you deal with that? But then, I realized that in the case of React, most of the modules that act with React components don't actually have side effects.</p><p><strong>Dan Abramov:</strong>        So, what if I could kind of replace a React component on the fly, but trigger React into thinking it is the same component so it would not throw away the dominant state. But somehow monkey patch the matters to point to the right version.</p><p><strong>Dan Abramov:</strong>        So, you could add it to file and see the changes reflected in a running application without throwing the component away. And this idea fascinated me. And I kind of just sat down one evening and I just ... I think I finished at six in the morning.</p><p><strong>Dan Abramov:</strong>        My wife was like, \"What is going on here?\"</p><p><strong>Joel Hooks:</strong>         You're a maniac.</p><p><strong>Dan Abramov:</strong>        Yeah. I mean, it's not very healthy. But at that point, I was really fascinated with this idea. And I couldn't stand the thought of not doing it and then, somebody else would do it. And I would feel very silly.</p><p><strong>Dan Abramov:</strong>        So I was like, \"Yeah, I got to do it.\" So, at seven am, I had a working prototype, which was super hacky. I had to change some coding. React to write to Window variables, stuff like this.</p><p><strong>Dan Abramov:</strong>        But it was enough to make a video. So, I made this video where I'm editing JSX and seeing the changes reflected in the live running application. And Christopher Shadori tweeting that. And so, this is how I got my first followers.</p><p><strong>Dan Abramov:</strong>        I think, before that, I had about 20 followers.</p><p><strong>Joel Hooks:</strong>         I'm almost sure that's when I contacted you and asked you about making videos too. It was probably that retweet that caused that first interaction, I would think.</p><p><strong>Dan Abramov:</strong>        Maybe, yeah. I'm not sure. But I think it was Christopher who kind of introduced me to the React community this way. And yeah, and this tweet was retweeted 50 times. And it seemed like a lot for somebody who doesn't have an audience at all.</p><p><strong>Dan Abramov:</strong>        And I realized this is something people want. And so, I just continued working on it, basically. And it was super hacky. And due to some edges, it's even more hacky now. But, I think, eventually, it will be less hacky.</p><p><strong>Dan Abramov:</strong>        But I just felt like this is something I really enjoyed. On the one hand, I like to work on user experience and on polish. I really liked working polishing things and making them pleasant to use, kind of finding those small things that annoy you and try to eliminate them.</p><p><strong>Dan Abramov:</strong>        So, I try to do that as a developer. But also, I'm really selfish and I kind of want to do things better for myself or for other developers who are like me. So, I think this is why I was moderated to work on this kind of developer experience projects.</p><p><strong>Dan Abramov:</strong>        Because I just like to polish things for people whose workflow I understand. So, I do this for developers.</p><p><strong>Joel Hooks:</strong>         Ultimately, to me, the end user experience, at least in part, developer experience is responsible for that, right? If we, as developers, can have a pleasant experience in why we're writing software.</p><p><strong>Joel Hooks:</strong>         And we should, right? We are users and we're using this software. And we should have a pleasant experience. And we should enjoy our jobs. And we should wake up and be excited about our code, instead of waking up sad that you've got to go, whatever Maven process or some sort of horrible developer experience that you have to suffer through every single day of your life.</p><p><strong>Joel Hooks:</strong>         That is ridiculous to me. And user experience starts at the coders. We're down at the foundation of it. There's a lot of work down there, but I think we're getting-</p><p><strong>Dan Abramov:</strong>        Oh, yeah. I think there's ... I don't understand some people are trying to present this as some kind of ... I think it's a false dichotomy. It's not like you need to subtract from developer experience to get a better user experience.</p><p><strong>Dan Abramov:</strong>        This doesn't make any sense to me. I think, if you improve the developer experience, it's just ... You need to be conscious about how you're improving it and how it's going to have the downstream effects.</p><p><strong>Dan Abramov:</strong>        You want to make it easier for developers to create good products, right? So, you want to make sure that you spend less time on obvious things that are obvious in retrospect, but it's hard to find the issue.</p><p><strong>Dan Abramov:</strong>        They spend less time on typos. They spend less time on raise conditions, on all these hard to debunk things. You want them to see the issues clearly. If they don't see what's happening in the app kind of like its data flow, it's harder to fix issues, right?</p><p><strong>Dan Abramov:</strong>        And you also want to have an opportunity. If the reason is you want to have a way to ensure that it's reproducible, so that's another thing that I really was fascinated by. When I was talking to Jen Chan and she told me that flux architecture allowed us, at Facebook ... At the time, it allowed them to reproduce some back reports.</p><p><strong>Dan Abramov:</strong>        Because they would just realize the actions and the action of those kind of tell a story of what the user was doing before the back happened. And you kind of can get close by replaying the same actions.</p><p><strong>Dan Abramov:</strong>        And this was really ... This felt really powerful to me, this idea of having actions be plain objects that you can serialize. You can pass between clients. You can record and then, replay.</p><p><strong>Dan Abramov:</strong>        And I think, this is another reason why I wanted to work on Redux is I wanted to have this baseline for ... Ensure that there is a baseline for more apps to be able to build tools like this on top of them.</p><p><strong>Dan Abramov:</strong>        And obviously, if you have tools that let you reproduce the issues your users are having, you're going to have better products. It directly impacts the user experience.</p><p><strong>Joel Hooks:</strong>         So, I work with basically two environments. We use React on Rails. And we have a big Rails app. And it's like I refresh and I have to wait. But then, when I'm working on a component, a specific component, I like to fire up Create React app.</p><p><strong>Joel Hooks:</strong>         And more than anything I can think of in the last couple of years, Create React app has positively affected my development workflow. It's really great. And I was just kind of curious, how did that come to be?</p><p><strong>Joel Hooks:</strong>         Was it just kind of a natural progression of this work around developer experience? Or what's the story with that?</p><p><strong>Dan Abramov:</strong>        That's pretty random. I guess, there was a lot of frustration in the ecosystem, because of all ... There were a lot of changes going at the same time. There was the Babel 5 to Babel 6 transition.</p><p><strong>Dan Abramov:</strong>        There was the ... In general, the idea of compiling your Javascript code kind of went mainstream. And together with Babel, it was a big step for a lot of people. And at the same time, you had this ... The ES 6 final specification.</p><p><strong>Dan Abramov:</strong>        And people were just starting to learn ... The first big update in 10 years and it's a lot to learn. And so, people felt like they were kind of behind. And when they were trying to follow tutorials and examples, a lot of these would be broken because they specified different version of Webpack than the one that is current, or a different version of Babel.</p><p><strong>Dan Abramov:</strong>        And it felt like a train wreck. Where there is so much potential in these people who are trying to learn all these technologies, but we just screwed up. We didn't provide them with an environment that they can learn in.</p><p><strong>Dan Abramov:</strong>        And we didn't provide them with a way to get started that's working. So, it was really frustrating to me personally, I guess. And I was seeing a lot of these bullet point projects which tried to mitigate the problem.</p><p><strong>Dan Abramov:</strong>        But I think some of them actually made it worse, because now, you had ... Every time a clone a bullet point, you end up with all these conflicts in your project, whether you want them or not.</p><p><strong>Dan Abramov:</strong>        And even if you're a complete beginner and you don't care about customizing anything, now you're left to maintain all of these kind of infrastructure that you have no idea how it works and all these dependencies.</p><p><strong>Dan Abramov:</strong>        And if you're trying to update any one of them, the rest of them break because they're not compatible. And it takes a lot of effort to learn how to update them. So, I think this was a big anti-barrier to the React ecosystem.</p><p><strong>Dan Abramov:</strong>        And this was one of the reasons why it got such a ... I wouldn't say bad reputation. But yeah, it partly was a bad reputation for complexity. But I don't think that throw in the build tools of the Windows is the solution.</p><p><strong>Dan Abramov:</strong>        So, I was just chatting about this with Christopher Shadori again. This person's responsible for many of my projects, it seems.</p><p><strong>Joel Hooks:</strong>         He's awesome.</p><p><strong>Dan Abramov:</strong>        Yeah. And so, he was just ... They had a hackathon there in the [inaudible 00:25:11] Park Office. Which I don't usually participate in hackathons, because I'm like ... I don't know. I just hate context switching.</p><p><strong>Dan Abramov:</strong>        I prefer to work on one thing at a time. That's just the thing that I'm working on. But he was like, \"We should do something. Let's do something for a while, for a week.\" And he was talking about this idea of doing that, like a generator for React projects.</p><p><strong>Dan Abramov:</strong>        And I said that, \"I don't want it to be a generator, because it's just directing the problem back to the user.\" Okay, you're going to create a project. But then, you have all these the banners that you have to maintain and all these tools and configuration that I have to do.</p><p><strong>Dan Abramov:</strong>        And so, I suggested that, \"What if it was a separate kind of ... A single dependency that you just ... You use this dependency and it builds the project for you, tests the project. It runs the line chart. It consolidates all these different tools under a single package.\"</p><p><strong>Dan Abramov:</strong>        And if there is a new integration of some of the underlying tools, we can update the package ourselves and make sure that all of them work correctly together. And if you are not happy with the tools that we've chosen, you can run a check. And then, it will copy the build configuration and the dependencies into your project.</p><p><strong>Dan Abramov:</strong>        And this point is the same as a bowl, a plate. So, there is like this escape hatch. And I got this idea from another project called Enclave created by Ian Pletter. And so, we thought that maybe this will fly.</p><p><strong>Dan Abramov:</strong>        I don't know. I felt like this is either going to be a disaster, or it's going to be really helpful. I wasn't sure, because there were like four or five projects that attempted to do this before and they failed.</p><p><strong>Dan Abramov:</strong>        So, there was React CLI, React CLI, WRB. There was an internal phase of projects that did that. So, there were a bunch of projects that tried to create an entry point to React and like a curated project generator, or something like this.</p><p><strong>Dan Abramov:</strong>        But they were all too opinionated about the project structure or about specific tools, and so on. And they didn't really catch on. And yeah, we just kind of tried to release it and see what happens.</p><p><strong>Dan Abramov:</strong>        And it has its share of issues. I won't deny it. A lot of people wanted to customize some things. Some of the things are awkward. People are coming up with workarounds that are weirder than the problem that we were solving in the first place with like-</p><p><strong>Joel Hooks:</strong>         It's so weird. I've seen some of them.</p><p><strong>Dan Abramov:</strong>        Yeah. But then, on the other hand, I like that there is a way to create a project and it will work. And it will be optimized for production correctly. You will not shape the development version of React by mistake.</p><p><strong>Dan Abramov:</strong>        And I've seen people type the command. It works. They have a thing that they can learn React with. And later, if they feel like, oh, I want to do things differently. Like, if you want decorators, you probably know enough to go on your own.</p><p><strong>Dan Abramov:</strong>        And I don't know. I can discuss specific decisions we made there. But overall, I think, it's been healthy for the ecosystem to kind of ... It pushes hard into the opposite direction from other tools.</p><p><strong>Dan Abramov:</strong>        So, it's not moderate. It's a little bit on the extreme side of not allowing you anything at all. And I think that's healthy to shift the overall balance to the middle. And I see us moving closer towards the middle in the future.</p><p><strong>Dan Abramov:</strong>        But I think it's been a helpful kind of purge for the ecosystem.</p><p><strong>Joel Hooks:</strong>         It's opinionated. You all did this and made certain decisions for specific reasons, which gave it an opinion. I don't know that it's too opinionated. And for us, we try to use Create React app up 'til the point where we just can't anymore.</p><p><strong>Joel Hooks:</strong>         And then, we eject and we have a really nice boiler plate that is sanctioned, right? You and your team have sanctioned this for us and we can use it. And it's been really great in our day-to-day development.</p><p><strong>Joel Hooks:</strong>         Aside from people constantly asking you to add SAS support, have you noticed a positive change in terms of the support you have to give for React and kind of in that general space in the community?</p><p><strong>Dan Abramov:</strong>        I don't have to ... I don't see a lot of questions like how do I create an app anymore. So, I think that's a really positive change, considering that we had a lot of those questions in the past.</p><p><strong>Dan Abramov:</strong>        And it felt like people were just kind of blindly trying to make different tools work together and they didn't. And they spent a lot of time with that. So, I think that, alone, is valuable. And I think it also helps to kind of standardize on the language features that we think are solid enough to be enabled by default.</p><p><strong>Dan Abramov:</strong>        And I know we're kind of taking liberties there. And we say, \"Yeah, class properties are fine. But decorators are not.\" But in practice, it's just some things are going to involve more churn in the future.</p><p><strong>Dan Abramov:</strong>        So, if class properties proposal changes, we're going to write a code mod for it. Because we are the ones who depend on it. Like, on Facebook, co-bases are using the class properties. There is a guaranteed liberation path, in case something happens.</p><p><strong>Dan Abramov:</strong>        But the decorator's proposal has already changed. Like, Babel implements the old version. And maybe the new version six and Babel seven, I'm not sure. But in any case, there will be breaking changes there.</p><p><strong>Dan Abramov:</strong>        And people who depend on decorator's proposal, or on the legacy one, are going to have to figure out how to update their code. And in some case, they might not even be able to because some pattern may not be supported anymore.</p><p><strong>Dan Abramov:</strong>        Or, it may have ... Somebody may have to update the libraries to be compatible with a new syntax. So, it's like is it worth the community churn in this case, considering that Facebook is not going to provide a code mod for this.</p><p><strong>Dan Abramov:</strong>        Because we're not using this, or we're not even sure how to write this code mod. I think it's not worth it for the ecosystem. And I found, I think, the positive change here is that if some code doesn't work in the Create React app, in the Stack Overflow answer, people are going to rewrite it.</p><p><strong>Dan Abramov:</strong>        And people are going to use the subset of features that we support. And this kind of ensures that everybody speaks the same language, despite everybody using Babel. And so, I think that's a good thing.</p><p><strong>Dan Abramov:</strong>        And it also helped, I think, less libraries force people to change Webpack configs now. There are some cases where we made the situation worse. With modules that are written in for more recent versions of Node, than ... So, we don't compile Node modules.</p><p><strong>Dan Abramov:</strong>        And obviously, if somebody publishes something that uses CSS syntax, there's going to be a problem. So, we'll be looking at that. But, I think, what's been helpful for the ecosystem is that less libraries now say, \"Oh, you need to use me. You also need to go into your Webpack config and change this.</p><p><strong>Dan Abramov:</strong>        Because this was not really sustainable. It's very easy to break something if you change the Webpack config. It's hard to do this. It can depend on the version of Webpack. Not everybody uses Webpack.</p><p><strong>Dan Abramov:</strong>        So, I'm happy that more libraries now work without configuration. I think that's a good thing.</p><p><strong>Joel Hooks:</strong>         Yeah, definitely. So, I had one last question. I'm a self-taught coder also. I think you are, too. And one of the pieces of advice I always give people that are trying to learn to code is read GitHub like it's a blog.</p><p><strong>Joel Hooks:</strong>         Reading source code and reading issues, going in there and just really digging in. And that's been wonderful to me. And I think it's a real opportunity for people to learn. And I was wondering if you had any kind of top tips or advice for people that are out there and they're struggling ... Learning to code is kind of a hard uphill climb.</p><p><strong>Joel Hooks:</strong>         And I was wondering if you had any advice that I might be able to pass along to people that are trying to just get started and learn how to be a web developer.</p><p><strong>Dan Abramov:</strong>        I don't know if I had any good advice, because it took me a really long time to learn development. Even not web development, but general. I think people are learning much faster than I did in my days.</p><p><strong>Dan Abramov:</strong>        It took me maybe two years to really understand what code blocks are and what Async ... Before Async/Await existed, which is like how to write asynchronous code and what it really means. So, I could pass functions around and this kind of stuff.</p><p><strong>Dan Abramov:</strong>        It took me a few years to really get it and I'm a very slow learner, really. But I think what's been helpful to me is just trying to build things, I guess. I learned everything on the job really.</p><p><strong>Dan Abramov:</strong>        I was hired to write an iPad app. And the middle, it was like, \"Hey, we're going to write a web app now.\" And so, I had to throw what I knew, just kind of throw it away and learn it on the go.</p><p><strong>Dan Abramov:</strong>        And so, I was just kind of forced to ... I have these requirements. I have these screens that need to work this way. I need to figure out the way to make them work this way. And it was stressful, but that's basically how I learned.</p><p><strong>Dan Abramov:</strong>        I just kind of kept trying to do it. And obviously, I had this background of the things that I read before. It's helpful to read blogs and it's helpful to learn about design patterns, and all this kind of stuff.</p><p><strong>Dan Abramov:</strong>        But it's also just by building things, like real things, that you learn how to do it. I would suggest to focus less on best practices, because a lot of these are not really valuable. And I think people are way more dogmatic than they need to be.</p><p><strong>Dan Abramov:</strong>        So, don't focus too much on that. But just try to focus on kind of making your code easy to change, I guess, but not too flexible. Yeah, that's not really helpful. I think it's just a lot of ... As you work on some code and you come back to it once in awhile, you learn how things work and what things don't work.</p><p><strong>Dan Abramov:</strong>        And that's really the experience that you need to get to be productive. You want to get a feeling for what you're good at and what you're bad at. And what are your kind of weak spots. And if you need to, write some code and then, see.</p><p><strong>Dan Abramov:</strong>        Oh, I haven't come back to this page in two months, because it just looks fine. So, I guess, this is a good way to write the code. And you may write something smart and think like, wow, I was so smart.</p><p><strong>Dan Abramov:</strong>        But then, you come back to this piece of code every week. And you're like, oh, there is a block here. There is a block here. And you learn from more things about yourself and your workflow and how to structure things by understanding how the code changes all the time.</p><p><strong>Dan Abramov:</strong>        But in terms of the open source, I think your advice is as good as it gets. Just pick a project that you're using that you enjoy using, or that looks fun to you. And just try to ... At least, for me, a lot of knowledge comes ... It doesn't make sense at first.</p><p><strong>Dan Abramov:</strong>        So, you kind of have to build a tolerance for not understanding things and getting through them anyway. I did that by answering questions. So, I think, the way I learned programming had a lot to do with just answering people's questions, even when I didn't know the answer.</p><p><strong>Dan Abramov:</strong>        So, I would just hang it ... Before Stack Overflow existed, I would hang in local programming forums. And somebody would ask, \"How do I screenshot the screen in C#?\" And I have no idea how to do that, but I can Google it.</p><p><strong>Dan Abramov:</strong>        So, I'm like, \"How do I screenshot?\" So then, I found some solution and I tried locally. It doesn't work and figure out what's wrong. I read about these API's and this kind of stuff. And that's how I get something working.</p><p><strong>Dan Abramov:</strong>        And I post it as an answer. And I did the same, after Stack Overflow existed, so I would try to answer Javascript questions I don't really know the answer to. Like, questions about ... I think I answered some questions about angular, just by Googling things and trying to figure them out.</p><p><strong>Dan Abramov:</strong>        It makes it uncomfortable, but it also ... Eventually, you realize that the people who have liked this code pages. And I don't know. Like, 100 case of reputation, and this kind of stuff. They're not really much better than you.</p><p><strong>Dan Abramov:</strong>        They're just really good at finding things. And then, trying to form a theory based on incomplete data. And then, explaining what they learned to other people in a way that is more digestible.</p><p><strong>Joel Hooks:</strong>         It's like programming in a nutshell though, right? Like-</p><p><strong>Dan Abramov:</strong>        Yeah.</p><p><strong>Joel Hooks:</strong>         That's what you do everyday. I don't know the answer. I have no idea. We're going to figure it out though. And by the end of the day, hopefully we'll have this thing working and maybe not.</p><p><strong>Dan Abramov:</strong>        Yeah. I think, I get a lot more productive after I realized that. That, yeah, you just need to start doing it and try to figure it out. If it seems ... It's not effortless. Right now, I'm rewriting some parts of React's build system, just refactoring them because I don't really understand them.</p><p><strong>Dan Abramov:</strong>        I'm just trying to understand them. And in the beginning of the day, I was like, \"Oh, this feels so daunting. I don't know where I should start.\" And I just deleted all my code and I just started from scratch and kind of copy and pasting the things that kind of make sense to me.</p><p><strong>Dan Abramov:</strong>        And I get to the point where it actually works now. And so, it always feels daunting. This feeling, it never goes away. You always feel like, \"Oh, well, I don't know what's going on.\" The only thing that changes is you kind of learn to get through it, I think.</p><p><strong>Joel Hooks:</strong>         Yeah. And you get those endorphin hits where you feel like a super genius once you've beat the computer for the day. And then, the next minute, you're back to your normal kind of dumb self.</p><p><strong>Dan Abramov:</strong>        Yeah. And that's what keeps a lot of people going, I think, is just this kind of random reinforcements.</p><p><strong>Joel Hooks:</strong>         Yeah, stubborn tenacity, right? That's one of the core elements. At least, for me, that's kept me going.</p><p><strong>Dan Abramov:</strong>        Yeah. It's the same in open source. You just read through the issues, try to help the people who ... Even if you don't know how this project works, try to reproduce the issue they're having.</p><p><strong>Dan Abramov:</strong>        Try to help them, try to form theories about what can go wrong. It's just code, right? You can trace every line and you can see what's really going on if you want to. And eventually, you'll gain enough context into a specific library so you're able to contribute with, maybe, tests or code or documentation or easier triage, which is underappreciated.</p><p><strong>Dan Abramov:</strong>        But this is the thing we want you to help us with. It's like you don't need to go, I don't know, write a new feature. That's valuable, but it's five percent of what we're doing. But I think it's way more valuable to go ahead and help the people who are struggling who have less experience than you.</p><p><strong>Dan Abramov:</strong>        And help, because as you help them, you contribute to this ecosystem of people who can explain things to each other and help each other. And maybe, they'll create projects that people use eventually.</p><p><strong>Dan Abramov:</strong>        So, it's also selfish in a way. But, yeah, and as you do the easy triage and go through the source code and try to read it, even if you don't understand what's going on, still you can read the changes.</p><p><strong>Dan Abramov:</strong>        You can read the commands. And eventually, it will start making some sense to you. Especially, if you use the project and you know the bugs and the issues that are currently here.</p><p><strong>Dan Abramov:</strong>        And I started open source this way. I just tried to find the fixes for the problems that I was dealing with. And some of these fixes were not reviewed for a year and nobody cared about my PR's.</p><p><strong>Dan Abramov:</strong>        But some of these were and it's just a matter of volume, I think, before people really kind of notice you.</p><p><strong>Joel Hooks:</strong>         Yeah. The instinct is probably, \"Oh, I'm going to go do that with React.\" React may not be the best place to start. And the React project, itself, is-</p><p><strong>Dan Abramov:</strong>        Yes, it's too-</p><p><strong>Joel Hooks:</strong>         And there's a lot of work there. Don't get me wrong. But in terms of projects, there is a lot of work there. And it's kind of more maybe on the advanced side, just in general. I think there's a lot of small projects in the ecosystem that are related to React and we might use on a day-to-day basis that-</p><p><strong>Dan Abramov:</strong>        Yeah, I think it's easier. I think I started contributed to React cloud or actually, that was one of the first open sourced projects that I really tried to contribute to, because I was using it. And it was not working the way I wanted it to work, so I tried to fix things there.</p><p><strong>Dan Abramov:</strong>        But also, so when we're doing the React is we tact ... We have this tact called Good for Us This Year. So, if you want to help with the development of React, which might evolve react itself, might evolve our build system, all kinds of infrastructure we built around it for ourselves.</p><p><strong>Dan Abramov:</strong>        There's always something that we need help with. You can go to our GitHub repo at github.com/facebook/react. Go to interest app, filter them by label called Good For Us This Year.</p><p><strong>Dan Abramov:</strong>        And they're not all beginner friendly, because some of them are complicated. But they all have the difficult label. So, there is like difficulty starter, difficulty medium, difficulty advanced, difficulty maybe impossible, something like this.</p><p><strong>Dan Abramov:</strong>        And regardless of your experience level, you can look at those different issues and just keep track of the label and when we add it, or something. You can take a look and if you are interested, you can comment, saying, \"Hey, I'm interested.\"</p><p><strong>Dan Abramov:</strong>        And we're going to assign that issue to you. And you can always contact us on that issue by commenting and say, \"Oh, is this the right approach? Is it a good way of doing it? How do I do this or that?\"</p><p><strong>Dan Abramov:</strong>        We're happy to answer those questions. And also, you can always reach out to me directly in Twitter or direct messages. I don't always reply, because it's a bit overloading. But I try to, especially if you start by saying that you're trying to contributory add.</p><p><strong>Dan Abramov:</strong>        I'll try to prioritize that. But it's easier to start with smaller projects. I think you're right.</p><p><strong>Joel Hooks:</strong>         And I will say, it never gets old, having your PR's merged into an open source project. It's one of the best feelings. I always love it. I had like two lines of code and the angular JS code base, and I was always patting myself on the back.</p><p><strong>Joel Hooks:</strong>         It's just nice, right, when you get to feel like you're giving back to this community that gives so much to you.</p><p><strong>Dan Abramov:</strong>        Yeah, yeah.</p><p><strong>Joel Hooks:</strong>         Alright, Dan. Well, I really appreciate it. Thanks for talking to us.</p><p><strong>Dan Abramov:</strong>        Thanks for having me.</p><p><strong>Joel Hooks:</strong>         Yeah, cheers.</p>",
    "slug": "dan-abramov-co-author-of-redux",
    "description": "<p>Joel Hooks co-founder of egghead.io, interviews Dan Abramov, co-author of Redux. They discuss the \"Redux phenomenon\" and the notion of improving the developer experience.</p><p>Dan's Redux course has been the most popular course on egghead.io for years. What caused Redux to blow up as it did? Dan is here today to talk about the problems he faced that inspired him to write this framework, and all the experiences he had that led to it.</p><p>Joel and Dan talk about how quickly functional programming concepts pushed their way into the mainstream. When they were younger object oriented was how you programmed, Gang of Four was like their bible. However, Dan talks about the problems he was facing and how they inspired him to create Redux.</p><p>Dan's belief that user experience starts with the developer also inspired Redux. The notion that a developer should suffer is silly. Having a tool that is a joy to use and allows a programmer just to create things is invaluable.</p><p>The frustration of getting started with React was enormous. You had to deal with Webpack and install packages manually and hope that you didn't mess up. All this was hugely daunting for beginners especially. create-react-app was the solution for that. Allowing an easy way to get React going with a dev server and all, it let you just get in there and start building components.</p><p>Finally, Joel and Dan leave us with a note to those seeking to learn to program well. Read GitHub like it's a blog. Read the commits, the issues, the PR's, all of it. You might not understand what is going on now, but you will build fluency and eventually you'll understand well enough that you can start to answer questions and contribute.</p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/e5759ea0/transcript\">\"Dan Abramov, co-author of Redux\" Transcript</a></p><h3>Resources</h3><ul><li><a href=\"https://egghead.io/courses/getting-started-with-redux\">Getting Started with Redux</a></li><li><a href=\"https://egghead.io/courses/building-react-applications-with-idiomatic-redux\">Building React Applications with Idiomatic Redux</a></li><li><a href=\"https://en.wikipedia.org/wiki/Design_Patterns\">Gang of Four</a></li><li><a href=\"http://gameprogrammingpatterns.com/\">Game Programming Patterns</a></li></ul><h3>Dan Abramov</h3><ul><li><a href=\"http://twitter.com/dan_abramov\">Twitter</a></li><li><a href=\"https://github.com/gaearon\">Github</a></li><li><a href=\"https://medium.com/@dan_abramov\">Blog</a></li></ul><h3>Joel Hooks</h3><ul><li><a href=\"https://twitter.com/jhooks\">Twitter</a></li><li><a href=\"http://joelhooks.com/\">Website</a></li></ul>",
    "duration": 2741,
    "episode_number": 4,
    "contributors": [
      "Joel Hooks"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/2593e",
    "path": "/podcasts/dan-abramov-co-author-of-redux",
    "published_at": "December 22nd, 2017",
    "url": "https://egghead.io/api/v1/podcasts/dan-abramov-co-author-of-redux",
    "edit_podcast_url": "https://egghead.io/podcasts/dan-abramov-co-author-of-redux/edit"
  },
  {
    "id": "podcasts-00000000000000000055",
    "title": "Getting into Python",
    "summary": "Will Button and Miller Hooks, two experienced Python developers, have a conversation about the differences between Python and Javascript, and what that means to a new programmer. ",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/68e16bbd-bd6c-4447-8d06-92a2846882ac/379dc40d_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/68e16bbd-bd6c-4447-8d06-92a2846882ac/1534346544artwork.jpg",
    "simplecast_uid": "68e16bbd-bd6c-4447-8d06-92a2846882ac",
    "transcript": "<p><strong>John Lindquist:</strong>     Welcome to an egghead.io podcast on Python for JavaScript Developers, featuring Will and Miller. Alright let's go ahead and get started by introducing ourselves. We got Will and Miller. Will if you wanna go ahead and go first; name, experience with the Python, all that sort of fun stuff.</p><p><strong>Will Button:</strong>        Yeah. My name's Will Button. I work with tech startups on scaling automation and currently working with Active. I've been working with Python for a few years now and have used it in all sorts of interesting applications as background scripting engine for servers, for a deployment process, lots of ETL tasks and some websites, and even done some cool stuff with it in AWS Lambda.</p><p><strong>John Lindquist:</strong>     That's a wide variety of stuff. Miller, go ahead.</p><p><strong>Miller Hooks:</strong>       Yeah. I'm Miller Hooks. I am a software developer. I've been doing it for 15 years. About 10 of that's with Python. A lot of GIS mobile development, RESTful interfaces. In the last few years, more machine learning, SciPy, NumPy and I'm an engineering manager over at Graphistry where we have a really great Python library for doing interesting visualizations.</p><p><strong>John Lindquist:</strong>     Awesome, I'll have to check that out. Our audience is mainly JavaScript, egghead has been JavaScript in the past, and we're branching out into other things. Let's just go ahead and do some Python, JavaScript comparisons. What do you guys love about Python and what do you think JavaScript could learn from what Python does well? Kind of big broad question.</p><p><strong>Will Button:</strong>        I think for me, the big difference that stood out for me, in going from JavaScript to Python was just the asynchronous behavior. Async has a definite place in JavaScript's origin of the browser but then whenever I try to use it for things like ETL processes, or things that had to go very sequential in nature, that's whenever JavaScript became less fun and Python seems to have a natural fit in that environment.</p><p><strong>Miller Hooks:</strong>       I would say that the zen of Python has made me a better programmer in all spaces. Python casually enforces you to think about the readability and the future people that are going to touch it. Naming conventions, the DRYs. It's not so much enforced, but it's just part of not only the language itself but the culture around the language. JavaScript, without that sort of guidance can turn into ... it takes a lot of care to be able to organize a JavaScript project and have it not eat you alive over time.</p><p><strong>John Lindquist:</strong>     Oh man, ain't that the truth. Yeah, I love the stupidest things. I love PEP 8, where mostly everyone agrees on how Python should be formatted and maybe if the JavaScript community could come together and say, \"Hey let's all agree on something.\" That way would make it so much easier for beginners and so much easier for maintainability and readability and I assume, do you guys use PEP 8?</p><p><strong>Miller Hooks:</strong>       Yeah, absolutely. There's no Guido for JavaScript, we have to deal with JavaScript, it's thrust on us design by committee but Python really was able to grow from that by having one ideologue to build it up into the tools today and it really benefits from that but you can apply all that straight over to JavaScript, it helps.</p><p><strong>John Lindquist:</strong>     Will were you going to say something?</p><p><strong>Will Button:</strong>        I think the one thing that on the readability thing, I think just how open Python is about \"Hey this is how ... These are our naming conventions and these are how you maintain readability.\" It's straight up front and you don't have to look for it and you don't get surprised about it and I think that's one of the cool things that you can do in JavaScript is just to make it much, much more accessible and easy to identify that there are standards for certain things.</p><p><strong>John Lindquist:</strong>     The example of showing a beginner a JavaScript book and then having them read some framework code from today in JavaScript. They look like completely different languages both because JavaScript has evolved so much and because of the many varying ways people write in JavaScript.</p><p><strong>Miller Hooks:</strong>       Functionally, they almost are. Angular and React, all these things are under the JavaScript moniker but when you say you know JavaScript that's not really a solid descriptor because there is so much variant in the particular silo that you're in just because of the nature of it.</p><p><strong>John Lindquist:</strong>     Yeah. I 100% agree and I think a lot of people learn a particular framework or something and just stick to that and they're more an Angular developer than they are a JavaScript developer. Have you seen that sort of case in Python, where someone's like a Django Developer rather than a Python Developer or do you think if you know Django, you know Python?</p><p><strong>Miller Hooks:</strong>       No, Django has definitely broken some rules as it's evolved into what it is today. For the most part, one of the ways that Python is designed is that it is very assessable on the surface because it reads like English and it's very functional but it goes as deep as you wanna go. It doesn't have that context switching really anywhere in it. There's been a lot of care to maintain that for sure.</p><p><strong>John Lindquist:</strong>     Let's do a comparison like, developing a node versus writing the server or whatever in Python. What do you find so appealing about Python in those scenarios?</p><p><strong>Miller Hooks:</strong>       Well for me, they really work in tandem but I live server side Python. If there is a server side task, if it's data based interfacing or operational scripting, Python is where I go to. Node is getting a lot better, I was just introduced to Lerna the other day and using that is now going to be a part of my server side operational stuff. Python as is, either 2.7 or Python 3 hopefully, is on almost every system. It's just as available and reliable as Bash probably is.</p><p><strong>Miller Hooks:</strong>       The early days of Node and NPM, specifically things like versions were really, really hard to work with and manage and through the original predecessor to NVM actually used Pythons virtual M to make versions of Node and I think their package manager takes lots of cues these days from ground that was set up by PIP after easy install. It really is, I would say even in the last six, seven months as the new Angular stuff and the eco system is maturing, they are starting to look similar but I couldn't say the same thing a couple years ago.</p><p><strong>Will Button:</strong>        Yeah, I think using PIP for deployments and just managing your dependencies is so much easier using Python and then just ease of deployment because, like Miller said, Python's already out there and it's just ready to go. The deployment process has a lot less friction, which isn't necessarily true for Node on the back end.</p><p><strong>John Lindquist:</strong>     Yeah, I think some people listening to this podcast might not know that your OS probably has Python on it, right. Any time you wanna start with a Node project, you have to first download and install Node, or include it in some sort of bundle or something.</p><p><strong>Miller Hooks:</strong>       And that is because there's fragmentation in every point version, which is inherent with the fact that our browsers are evolving so fast, and the tools around JavaScript ecosystem, which are so powerful and varied, but part of the Python deal is consistency and backwards compatibility. If you've got a Mac in front of you, or a Linux computer, it's just gonna be there waiting to operate and that's why it is one of my favorite intro languages, because it's on that computer.</p><p><strong>Miller Hooks:</strong>       I introduced my girlfriend to the Python interpreter, and I didn't realize she had a Netbook, but she was able to get it installed on her Windows Netbook and run through, learn Python the hard way, which that's really, really the hard way. I was really proud of her for getting after that. I had to open up the computer to realize it did not have a hard drive but it's still there, and just you can open up the interpreter, and walk through the lessons.</p><p><strong>Miller Hooks:</strong>       Part of getting good at JavaScript is a large obtuse understanding of operations, which isn't something a person who's just starting out to learn necessarily needs as a hurdle.</p><p><strong>John Lindquist:</strong>     Yeah, I 100% agree with that. You mentioned versions. I haven't touched Python in a little bit, and I know Python 2 versus 3 had been a thing back when I used it last. I think it's still a thing, right?</p><p><strong>Miller Hooks:</strong>       No, not really. Python 3 is everywhere. If a package hasn't upgraded, it's probably because it's dead and we even have a tool that comes with Python 3 that will convert a project for you, and lint it, and let you know if anything you need to address directly. So even a large project can be converted almost instantly. It also will help you if you have specific context switches, that it might be deployed on both, to be able to work with that. But largely, the entire ecosystem of anything that's even slightly actively used is imported.</p><p><strong>Will Button:</strong>        I think the only you still see Python 2 anymore is just in a case where people ... I think CentOS and AWS Linux still default to Python 2, and so if you have someone that doesn't know, or hasn't been experienced with Python, they may end up running Python 2, but those are pretty few and far between and Python 3 is just ready to go and everything is set up for it on almost all the modern OS'.</p><p><strong>Miller Hooks:</strong>       It's very good at error readability as well, which was always one of my biggest ... when I first started doing Node was ... and I'm still unimpressed at the signal-to-noise ratio and error messages, even though it has been getting steadily better with the newer versions but if you are running the wrong package on Python, you've got four or five lines that are gonna be pretty clear.</p><p><strong>John Lindquist:</strong>     Yeah, errors are so important. It's funny how often I just get used to them in JavaScript and I forget how nice they can be in other environments. Let's talk about what Python does really well that the JavaScript audience might not be familiar with, such as machine learning, or other areas. Are there things you guys are playing with or really enjoy that you'd recommend? Like, \"This is a great reason to use Python.\"</p><p><strong>Miller Hooks:</strong>       I would say especially to the audience for this podcast that you'd be hard to be Django, and Django REST Framework for your backend. There's this great tool called Cookiecutter that has an intro Django, and there's a decent advanced one by Pydanny that literally with just one command, Django Cookiecutter, you can ... it'll ask you a handful of questions and it'll deploy you Django with Django REST Framework in and an angular setup, so you've got an API, and you can set it up for Heroku or Docker deployment.</p><p><strong>Miller Hooks:</strong>       Django can get out of your way and be the tool that you need to get to your ideas faster and with that ORM, you can start getting your blog handed over to your single-page application, and have things like token authentication, and a nice robust API, without spending all of that time because still in the JavaScript world, when you try to say, interface with Postgre or MYSQL, and you're trying to write an API, you're going to be doing it sort of piece meal.</p><p><strong>Miller Hooks:</strong>       Django has been designed from the get go for publishing and Django REST framework is really, really hard to beat, and I'd say anyone who's been doing JavaScript work for a little while can jump right into that tool and have robust backend with authentication, email, and easy data models that in JavaScript would be a piecemeal operation and harder to maintain. You really have to know where you're going.</p><p><strong>John Lindquist:</strong>     Right, and it has an admin section where you can just go in and ... with the GUI.</p><p><strong>Miller Hooks:</strong>       It is hard to beat that Django admin. I don't think anyone has that. It is zero to go. That was the original impetus of designing Django, it was designed for publishing and they wanted to get apps up with a backend so content producers could start adding content and the models could be flexible while the front-end was still being completed. It was about that speed of release and I will say that another thing that I'm sure exists in the JavaScript world but Django's had down for a long time is schema migration.</p><p><strong>Miller Hooks:</strong>       As we're gonna change our database tables, and you don't want to think about that, and you want to be able to roll them back and roll them forward, and that's built into the application so you can be adding or removing tables, doing data entry through the admin, creating fixtures for that data so you don't lose it and redeploying it very, very quickly.</p><p><strong>John Lindquist:</strong>     I think basically anything database related is better in Python with my experience. I remember just plugging in database names and table names as a string and then it just worked and in node, we'll have to install, this thing, that thing, that thing and then wait. What's this one? What's that? And, yeah.</p><p><strong>Miller Hooks:</strong>       I found Django 9.6 after I was Drupal developer. I'd been doing PHP for most of my career so it was quite a while ago. Drupal and WordPress and one of the largest automated attacks in history happened at the time and all of my websites were compromised all at once, and it was replaced with a man with a sword and some scary chanting music and all of my clients were sad and I mean, it's because the eco system of WordPress and PHP are huge attack factors, extremely vulnerable and it was very, very scriptable.</p><p><strong>Miller Hooks:</strong>       I had been looking at other Python frameworks, a friend had shown me the interpreter and then I found Django and as soon as I saw that ORM, I never looked back. I've done a little bit of WordPress since but I was able to port my customers over easily and I wasn't even proficient at Python.</p><p><strong>John Lindquist:</strong>     That's a great story. Will what are your thoughts on-</p><p><strong>Will Button:</strong>        I think that's one of the cool things you can learn from Django if you haven't been programming a lot, if you're just getting started with programming. Firing up Django and going through that process, it actually exposes you to a lot of things that you may not even realize or things you should be thinking about like the schema migration and how easy it is to get an admin interface up.</p><p><strong>Will Button:</strong>        It's a way to quickly and easily start testing out your idea, see instant results but at the same time, learning about some of the higher level concepts that are gonna be important for you to know as your project progresses and becomes more advanced.</p><p><strong>Miller Hooks:</strong>       Especially for people that are used to doing all the JavaScript, I mean, Django REST framework has been just an amazing project. It's exemplary and with 2.0 where it's integrating with channels, so we have sockets as well, but it's really turnkey. You add in Django REST framework, or you can use a Cookiecutter that already has it and so when you create your models, you get a REST interface with authentication so now your promises and everything just works.</p><p><strong>Miller Hooks:</strong>       Something that I've really been playing with this year is adding in Graphene or GraphQL. You can add that and for JavaScript people, that means there's no model duplication and that's been something that's been really hard to avoid is recreating the same code in two places and so if you can just make your models in your Python and then query it directly with GraphQL, it's fast and easy to maintain and get the information you want.</p><p><strong>John Lindquist:</strong>     That's something I need to try now. I needed something else to do. Any other things that new Python users should look into. I know that Django for sure is a ... the greatest feeling of learning something is producing something and going from zero to Django app for beginners is an amazing experience, which I wish we could replicate in JavaScript land but is there-</p><p><strong>Miller Hooks:</strong>       I would recommend the IPython notebooks, which are called Jupyter notebooks. Jupyter with a Y. If you have Docker installed on your computer, you don't have to know anything about Docker, but you can go look up the IPython notebook for data science NumPy, SciPy or just Python and you run one command, and it pulls down this container that gives you the IPython notebook is a web address, you can just browse through it in your browser, and it saves a specific type of file called Py ... I don't know. It's got a couple of letters in it but it's a ... it gives you a web interface where you can chunk out different cells of Python and hit run right there in the browser.</p><p><strong>Miller Hooks:</strong>       You can switch between two or three, you can have access to the data science tools, you can open up a terminal in the browser and install new packages with PIP. Without configuring your interface or your computer, you can get in and use some data science tools that otherwise you wouldn't have to and I think this really couples well with starting to learn because you can spin up an IPython notebook instance right there on your computer, you get this webpage that works just like a notebook and then you can open up learn Python the hard way and just go and work through those exercises and you can just replay each cell and then you can open up a new one and play with some of the harder tools, which leads itself right into being able to set up a Django site easily.</p><p><strong>Miller Hooks:</strong>       It's just an amazing set of tools. I use it all the time when I need to scratch pad something. I just open up the container and play around with it.</p><p><strong>Will Button:</strong>        That's great. One of the cool things I like about that as well is you can have not only your Python code in there, but you can also have documentation in there. You can add markdown or HTML and so you have this little running transcript of here's the chunk of Python code, you can run it and then just have the documentation of this is what we expected the outcome to be or here's what we're gonna do next with it and then another chunk of Python code and it's actually been really helpful for me, working with finance departments because they question everything, they question every assumption.</p><p><strong>Will Button:</strong>        Where did you get this data from? What assumptions did you make in cleaning the data? How did you model it out? And you can just create this whole beautiful step by step interactive document to give to them and they can reproduce your results and see the documentation in line with it.</p><p><strong>John Lindquist:</strong>     That sounds awesome. Have you guys seen Python influence JavaScript in any way? Do you think any of the ideas in-</p><p><strong>Miller Hooks:</strong>       NVM for sure because it started out as that and the isolation that comes with that I do believe is fairly Pythonic.</p><p><strong>John Lindquist:</strong>     Anything from the language itself? When you get into JavaScript land, is there something you just miss dearly from Python, just simply cranking out code?</p><p><strong>Miller Hooks:</strong>       Probably not intro but Lambda functions and generators, being able to have the tuple data type and also nothing is statically typed. Everything is everything, which has its own pitfalls too, but it does ... when I can just change up a variable and its contents easily and be able to overload it, which there's definitely ways to do it, it's just in JavaScript, it's just the way that Python does that I think really lends itself especially early on when you're trying to learn.</p><p><strong>Miller Hooks:</strong>       Sometimes all the different data types can get really confusing and it doesn't mean you don't need to know about them but Python gets that syntax out of the way, so you can move your things around and I think that's something that ... because it's from the paradigm of Python readability and I do miss that and it encourages me to be more fastidious in my JavaScript. That's for sure.</p><p><strong>Will Button:</strong>        Yeah. I think the readability of Python is just something that I don't see whenever I look at JavaScript, even whenever I write my own JavaScript, it just feels really hard to get that level of readability into JavaScript as you get by default with Python.</p><p><strong>Miller Hooks:</strong>       One of the jokes with Python is that it's self-documenting because the code is the documentation obviously, auto doc is still important, but it does just read. If you have a problem you can just jump in there where it can be a little esoteric in most other languages.</p><p><strong>John Lindquist:</strong>     Is there any concrete examples you could give of that? Some put a comparison between what in Python ... what does a call back look like in Python?</p><p><strong>Will Button:</strong>        You just don't have them. If you write a function that has to go off and query a server and return results, you just handle the results on the next line because the code doesn't progress until that line of that code above it completes.</p><p><strong>Miller Hooks:</strong>       Async Python is pretty cutting edge and people that are really looking for an asynchronous Python experience, if you're really interested in digging into the nuts and bolts of Python, look at the debate about the GIL which is-</p><p><strong>John Lindquist:</strong>     The GIL?</p><p><strong>Miller Hooks:</strong>       GIL yeah, the Global Interlock, which is why Python doesn't do asynchronous well. We have some async tools and there is a project called the GIL-ectomy about removing this I think the Global Interpreter Lock from Python, so it can work concurrently and one of the debates about that is if you need concurrency, then we have Rust and Go and those play fine with Python but traditionally, the async tasks that are some of the hardest things in other languages because they inherently involve not really knowing what's going on on the other side, Python avoids for the most part.</p><p><strong>Miller Hooks:</strong>       If you've got a bunch of async calls in your Python, either you know what you're doing or you're very frustrated.</p><p><strong>John Lindquist:</strong>     Yeah, I can get that. One thing I've noticed with Python is one of my friends, she's a ... she does data entry and as part of her job, she had no experience programming whatsoever and then as part of her job, just as she got into it, they were like, \"Well, is there any way to automate any of these things?\" She was introduced to Python through just automating her daily routine data entry points and similarly, I have another friend who's working on his engineering degree where they needed to compute some sort of physics whatever, I'm not into Math and the first thing he turned to was Python because that had the best Math libraries for calculating all these interactions in the physical world.</p><p><strong>John Lindquist:</strong>     It seems like there's so many day to day things where JavaScript seems to have focused on the web but there are so many day to day things that Python solves so well that people just stumble onto to use it.</p><p><strong>Miller Hooks:</strong>       Over the last few years it really has become the darling of data analysis. It started in academia but now it's moving into big data which before had preferred things that were more esoteric and that has a lot to do with IPython notebooks and a project called Pandas and then also the readability and accessibility like we were talking about the ability to share these things but I use Python every day to script out annoyances. If I have to repeat something too much and it's complicated, I open up some Python and if I'm on a new job or something, I automate the hardest parts of it with Python fast and that's because-</p><p><strong>John Lindquist:</strong>     Give me a good example of that. What's something you've automated?</p><p><strong>Miller Hooks:</strong>       Sure. I was at a large video streaming company and they were an entirely PHP shop and everything had to be routed through a VPN and the VPN was all the way to Luxembourg and it would go down a lot and one of the things ... They said it was basically impossible to do local development using Docker and a few other things, I was able to get that going but a constant problem for me was this Mongo service that I didn't have access to but it relied on through the VPN.</p><p><strong>Miller Hooks:</strong>       Through some man in the middle attacks on my own stuff, I was able to dump that data, parse it and create a fake service but there's easier day to day tasks like for instance, you have a ... someone gives you a giant spreadsheet and you could load it into Google Docs, the G spreadsheet package for Google Docs. If you've just got a quick ... You don't even need an API key, Google gives you a special email address and you dump that as the string. You open it on IPython notebook and then in that IPython notebook, you now have access to that total ... that Google sheet where you can reference the columns by name and if you start playing with Pandas or any of the libraries there, you can parse all that data out and do exactly what you need and then from Python, you can have ... just make a separate cell with a play button that will push that out to a CSV or your other server.</p><p><strong>Miller Hooks:</strong>       That's without knowing anything about network infrastructure. You can automate a task that would be manual. A lot of hidden data in and out of spreadsheets that we deal with on a daily basis can be very kludgy.</p><p><strong>John Lindquist:</strong>     That's so cool. I take that for granted so often. Just the automation of simple spreadsheet things that my parents try and deal with all the time and just waste so much time with and-</p><p><strong>Miller Hooks:</strong>       So much of large enterprise operations run on two women above 70 years old sitting in a room with dusty books and spreadsheets and hold all the institutional knowledge and a lot of it is emailing spreadsheets around and when you really get into those businesses, a lot of their cost are out the window for that. Now, we do have tools for that sort of thing and at any new job, that's the first thing I look for is ways I can script easily the hardest parts and then just let people know that I'm very efficient and they don't have to see the scripts, they just think I manage it.</p><p><strong>John Lindquist:</strong>     Sounds like you should charge more.</p><p><strong>Miller Hooks:</strong>       I do okay.</p><p><strong>Will Button:</strong>        I think that's a [inaudible 00:26:37]. One of the things that you can do is that any time you have this daily repetitive task, if you have to move this file or copy and paste this data or run this report they're all tests that can be really easily automated by Python and a great learning experience to. You can take this task and you can automate it and then the deployment of it makes it easy because Python is gonna exist somewhere in your environment where you can push that and just have it run every day and completely automate that task away and it's pretty amazing when you dig it's pretty amazing when you dig and just do a little bit of research.</p><p><strong>Will Button:</strong>        The libraries that already exist for Python that read spreadsheets or write spreadsheets or send emails. All of those daily tasks that people build their whole jobs around can just be automated away.</p><p><strong>Miller Hooks:</strong>       I don't know how many times before I really discovered the power of Python, how much time I would spend with things like figuring out how to parse things like figuring out how to parse CSV and figuring out how to parse CSV delimiters. Who really needs to hold that knowledge in their head [inaudible 00:27:42]? A good tool for intro to just that process. People are looking to use that as kind of an entry way into ... it's called Fabric. It's a Python library you create as fab file py and I do this in just a working directory and kind of similar to bash.</p><p><strong>Miller Hooks:</strong>       You can just execute commands in the terminal with it and you create functions with them and then you just end up with little keyboard shortcuts. So, you do fab, the name of the function and you can set it up to execute remotely or locally, it can access other servers and it's continuous integration to use a big annoying word but at a level that's really accessible. You don't any infrastructure and I'll use it for producing reports for people. I think that's a pretty good swath on what it is and what the introduction is.</p><p><strong>John Lindquist:</strong>     I think for our audience it's pretty much ... I don't like to go too deep into-</p><p><strong>Miller Hooks:</strong>       I can annoyingly talk about really esoteric stuff but everyone in my life has told me to stop.</p><p><strong>John Lindquist:</strong>     That's for listening. For more information, check out will's intro to Python course on egghead.io.</p>",
    "slug": "getting-into-python",
    "description": "<p>Will Button and Miller Hooks, two experienced Python developers, have a conversation about the differences between Python and Javascript, and what that means to a new programmer.</p><p>Python is downright awesome for a beginner, due to it being more readable and there not being a mountain of frameworks that all seem like completely separate languages. Not only that but there are amazing tools that enable a beginner to just jump right in and <i>create</i>.</p><p>Python is learnable to the point that even people outside of software development are using it as a tool to automate annoying manual tasks. Scripting away all the hard repetitive tasks at work until everyone thinks they are some kind of wizard.</p><p>One of the tools mentioned in the podcast is the wonderful <a href=\"https://github.com/pydanny/cookiecutter-django\">Cookiecutter Django</a>. A great tool for beginners who don't want to deal with a million installs and an array of different skills just to get a project deployed.</p><p>The other tool mentioned, <a href=\"http://jupyter.org/\">The Jupyter Notebook</a>, gets python up and running right in your browser. Inline code and rich text documentation allow you to write code and see the results inline, even giving you the power to write documentation around the output.</p><p>Check out Will's <a href=\"https://egghead.io/courses/intro-to-python\">new egghead course, Intro to Python</a>, and jump into this rich, beginner-friendly world.</p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/96e8088d/transcript\">\"Getting into Python\" Transcript</a></p><h3>Resources</h3><ul><li><a href=\"http://jupyter.org/\">Jupyter Notebook</a></li><li><a href=\"https://github.com/pydanny/cookiecutter-django\">Cookie-cutter Django</a></li></ul><h3>Miller Hooks</h3><ul><li><a href=\"https://github.com/millerhooks\">Github</a></li></ul><h3>Will Button</h3><ul><li><a href=\"https://willbutton.co/\">willbutton.co</a></li><li><a href=\"https://twitter.com/wfbutton\">Twitter</a></li><li><a href=\"https://github.com/rekibnikufesin\">Github</a></li></ul><h3>John Lindquist</h3><ul><li><a href=\"https://twitter.com/johnlindquist?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor\">Twitter</a></li><li><a href=\"https://egghead.io/instructors/john-lindquist\">egghead.io</a></li><li><a href=\"https://github.com/johnlindquist\">Github</a></li><li><a href=\"https://johnlindquist.com/\">Website</a></li></ul>",
    "duration": 1737,
    "episode_number": 3,
    "contributors": [
      "John Lindquist"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/ssc1n",
    "path": "/podcasts/getting-into-python",
    "published_at": "December 8th, 2017",
    "url": "https://egghead.io/api/v1/podcasts/getting-into-python",
    "edit_podcast_url": "https://egghead.io/podcasts/getting-into-python/edit"
  },
  {
    "id": "podcasts-00000000000000000056",
    "title": "Functional JavaScript with Paul Frend and Brian Lonsdorf (Dr Boolean)",
    "summary": "John sits down with Paul Frend and Brian Lonsdorf (aka Dr Boolean) to talk about functional programming concepts like transducers.",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/e1d13435-f5fe-401c-934c-27c445aa1e57/0ee89b39_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/e1d13435-f5fe-401c-934c-27c445aa1e57/1534346592artwork.jpg",
    "simplecast_uid": "e1d13435-f5fe-401c-934c-27c445aa1e57",
    "transcript": "<p><strong>John Lindquist:</strong>     This is an Egghead.io podcast on 'Transducers,' with Paul and Brian. So welcome, everyone, let's start by introducing ourselves. We've got Brian and Paul on the call, so, you know what? Paul, if you want to go first and introduce yourself, your experience, where you're from, all that?</p><p><strong>Paul Frend:</strong>         Sure. Thanks, John. It's good to be here. So, I'm from Sweden, or Stockholm, Sweden, originally.</p><p><strong>John Lindquist:</strong>     Nice.</p><p><strong>Paul Frend:</strong>         And I'm now living in Brisbane, Australia. I've been here for about ten years. I've been working as a developer slash software engineer, whatever you call it nowadays ...</p><p><strong>John Lindquist:</strong>     Yeah.</p><p><strong>Paul Frend:</strong>         ... for around ten years. Mainly working with single-page applications, sorta started in in-house CMS management, then moved on to 'digital agency land,' where I work mainly in front and back end applications.</p><p><strong>Paul Frend:</strong>         And I'm now working for a startup called Console Connect. I'm just building a product that automates network connections off the public internet, [twin-data 00:01:10] centers ... layer two, layer three connections. Those type of things, but I mainly work on the front end, there. A little bit on the back end, so mainly work in react and load. And ...</p><p><strong>John Lindquist:</strong>     Okay. That sounds like a fun problem to solve.</p><p><strong>Paul Frend:</strong>         Yeah, it's very interesting. It's a lot of novel problems that haven't been solved, I guess.</p><p><strong>John Lindquist:</strong>     Yeah, cool.</p><p><strong>Paul Frend:</strong>         In terms of my style, I'm not a hardcore functional programmer. I use both object-oriented and functional programming concepts. I don't try and be very opinionated, just whatever gets the problem done, type of thing.</p><p><strong>John Lindquist:</strong>     Yeah? So you're a mature programmer, then. Is that what ... ?</p><p><strong>Paul Frend:</strong>         Yeah.</p><p><strong>John Lindquist:</strong>     Have you ever seen that graph of how you accept your own programming style over time? Or ...</p><p><strong>Paul Frend:</strong>         Maybe. Yeah, I don't know if I would ever call myself 'mature,' but ...</p><p><strong>John Lindquist:</strong>     Whatever gets it done.</p><p><strong>Paul Frend:</strong>         Yeah, exactly. It's probably just too much pain in my past, of ...</p><p><strong>John Lindquist:</strong>     Right.</p><p><strong>Paul Frend:</strong>         ... trying to stick to a specific type of solution. You end up accepting something that works, that isn't too bad, and moving on.</p><p><strong>John Lindquist:</strong>     Amen. Yeah. All right, Brian, how about you?</p><p><strong>Brian Lonsdorf:</strong>     Hey! So, I'm Brian. I'm trying to think about ... I know I know the answer to this question ... I've been writing programs for ten years or so. Yeah, about like ... first five years was 'OO,' and then the last five have been hardcore 'FP,' I suppose. But, yeah. It's been ... just ... I get really into exploring things and totally agree that there's never one 'right' solution. But I'm still in my 'vast ocean' of, \"How do I figure out how to work in a profunctor today?\"</p><p><strong>John Lindquist:</strong>     Yeah.</p><p><strong>Brian Lonsdorf:</strong>     So, it's the way I am right now. But anyway, I've been programming for a while. I work at Salesforce now, on tooling and other ... actually a design system, trying to do things like prove properties for all Salesforce designs and whatnot. It's pretty fun.</p><p><strong>John Lindquist:</strong>     Cool. I always enjoy working on tooling, where you're using buttons to make buttons.</p><p><strong>Brian Lonsdorf:</strong>     Yeah.</p><p><strong>John Lindquist:</strong>     You're writing code to make more, yeah.</p><p><strong>Brian Lonsdorf:</strong>     Yeah, it's trippy that way. And also, we're transcending Ui's these days, with chat and whatnot, so, it gets interesting.</p><p><strong>John Lindquist:</strong>     Are you doing any voice recognition ... style ...</p><p><strong>Brian Lonsdorf:</strong>     As a matter of fact, yeah, we're trying to do some stuff with that at Salesforce, now. And transducers are a pretty interesting fit for that topic, so ...</p><p><strong>John Lindquist:</strong>     A transducer? Well, what is that? Thanks for the segue!</p><p><strong>Brian Lonsdorf:</strong>     Yeah, you know. So, I guess ... in the ... voice control and chat, a lot of it is state machines. You can kinda model things with state machines really well, and get into substates, and kinda keep going down these ... this graph of transformations. And you have finite state transducers, and I think that's where this kinda comes from, but this podcast is probably more about the JavaScript transduction stuff, where you have a pipeline of functions ... and you can ... it's like a streaming fold.</p><p><strong>John Lindquist:</strong>     Yeah.</p><p><strong>Brian Lonsdorf:</strong>     So, I don't know. I bet you Paul has a much better definition.</p><p><strong>John Lindquist:</strong>     Yeah. Hit us, Paul. Enlighten us.</p><p><strong>Paul Frend:</strong>         No, I like that.</p><p><strong>John Lindquist:</strong>     What is a trans-</p><p><strong>Paul Frend:</strong>         He can elaborate on that. Where ... how ... using that with the state machines on Salesforce, as well, later on. That would be really interesting. But yeah, from my understanding of it, a ... well, the best description I've seen of a transducer is a composable perform or transform that doesn't create intermediary collections between operations. So, like Brian said, being able to compose transforms together and then you have the reducer as the underlying operation that makes sure you only [need to rake 00:05:04] through your collection once. And it also decouples you from the collection type that you're working on, so ... those transforms don't care if you're working on array, or objects, or generators or whatever it is you want to operate on, in terms of the collection.</p><p><strong>John Lindquist:</strong>     Right.</p><p><strong>Paul Frend:</strong>         There ... I'll stick to that.</p><p><strong>John Lindquist:</strong>     I was thinking, earlier today, about this question, \"If a transducer uses transforms, does a reducer use reforms?\" I just sat there and I was like, \"Wow.\"</p><p><strong>Brian Lonsdorf:</strong>     Word play. I like it.</p><p><strong>John Lindquist:</strong>     I think there's something to it, right? Or if a reducer reduces, can you 'duce' something? But then that took my mind in a completely different direction.</p><p><strong>Brian Lonsdorf:</strong>     I'm just 'duce-ing' it again!</p><p><strong>Paul Frend:</strong>         Yeah, that's another lesson.</p><p><strong>John Lindquist:</strong>     Yeah, a reducer that does one pass is just 'duce-ing' it, right?</p><p><strong>Brian Lonsdorf:</strong>     That's ... exactly. There's an old joke in category theory, because if you say 'co,' it's the opposite. So you have like a ... you know ... monad and a comonad ...</p><p><strong>John Lindquist:</strong>     Yeah.</p><p><strong>Brian Lonsdorf:</strong>     So the joke is 'Cocoa Puffs' are just puffs.</p><p><strong>John Lindquist:</strong>     Whoa. Mind blown. Yeah.</p><p><strong>Brian Lonsdorf:</strong>     But yeah, one more definition of a transducer I wanted to throw out there is, you can think of them as fold transformers, because they take a fold from ... if you're thinking at the type level, a fold, or if you think of a fold as a reducer ... takes our accumulator and some 'x'. Returns the new accumulator, if you compose it, you'll just change that 'x,' not the accumulator. So, it's like a pre-composition of a fold, which is just a fold transform. Kinda fun.</p><p><strong>John Lindquist:</strong>     Yeah.</p><p><strong>Paul Frend:</strong>         Nice.</p><p><strong>John Lindquist:</strong>     Yeah, no, I like both of those. I think ... I really like Paul's, just because it ... I watched his course on Egghead just recently, and it lined up with everything he said and it was all fresh in my mind.</p><p><strong>Brian Lonsdorf:</strong>     Yeah.</p><p><strong>John Lindquist:</strong>     So, what exactly ... what problem does a transducer solve? Why should we know about them? Open question.</p><p><strong>Paul Frend:</strong>         I'll go first, with the simple answer, because I'm sure Brian has a more complex one.</p><p><strong>John Lindquist:</strong>     No pressure.</p><p><strong>Paul Frend:</strong>         Well, the instant benefit, which is like the one you grab first at, I think, when you first come across them, is the performance. And that you don't induce a memory penalty by building up all these intermediary connections. So, if you think of operating on an array and using built-in operations on that. So, my collection .map, .filter, might do another map and whatever other operations, you know, you've defined. Every time you call that, it's gonna iterate through your whole array and create another collection that then gets passed to the next operation.</p><p><strong>Paul Frend:</strong>         Which, if you're new to JavaScript, might not be very clear, as you start chaining these things together. That you're actually creating all of these intermediary collections. So, the transducer will ... since we're just reducing over the collection once ... will skip all that. And that also gives you the benefit of short-circuiting that operation that you've composed, since you've only been through ... or, I'll rephrase that. Since you've composed transform, every element in the array, as soon as you've gone through one of the elements, it's gone through all of your transforms.</p><p><strong>Paul Frend:</strong>         That means you can stop whenever you want. There's no operation that's waiting, further down the line.</p><p><strong>Brian Lonsdorf:</strong>     Yeah. I would have to add to that wonderful explanation ... if you're kinda championing the declarative approach and more of a high-level programming approach where you capture patterns of loops in these functions that are reusable and composable, this ... enables performance, first and foremost, in a language like JavaScript that doesn't automatically do loop fusion via the compiler. So, in functional language, you do maps and filter ... it's just gonna fuse them together, and you really don't need a transducer for that. It just does that. Right?</p><p><strong>Brian Lonsdorf:</strong>     But yeah, as it enables you to have a different type ... your output type, that you're building, as separate from your input type ... it gives you that, but something that distinguishes it from just folds, which, you can make folds compose quite easily. And, actually, you can write a transduce that works across folds. And folds are really, really powerful. They let you ... it's like you think of a reducer with one extra clean-up function and a tally function at the end? That's what I mean when I say, 'fold.'</p><p><strong>Brian Lonsdorf:</strong>     And what you get is the ability to combine multiple folds together in one pass, you can do stuff like streaming averages or ... you could extend folds, all sorts of stuff. But transducers have a more powerful element to them in that you can break. You can actually just stop whenever you want. Folds cannot do that. I mean, they'll still run. I guess you can ... you can't short-circuit it or have mutable state. Well, I guess you can do mutable state in JavaScript ... or Haskell or something.</p><p><strong>John Lindquist:</strong>     Yeah. So ... [crosstalk 00:10:23] ... with that definition ... with those definitions ... so, at what point do you start thinking the transducer is the solution, versus, \"I wrote a map, then I did a filter. Okay, did another map. This one might be expensive. Then chain on another filter, and maybe another reduce. Well, maybe ...\" Do you start cringing every time you chain on something else and you chain on another reduce? Or is it ... do you think, \"Wow, we have a lot of data here. We have to think of performance, first thing.\"</p><p><strong>John Lindquist:</strong>     How do you ... when do you think, \"This is the ... let's reach for a transducer now.\"</p><p><strong>Brian Lonsdorf:</strong>     I can just extend what I was just saying, in that I will immediately reach for folds. Particularly something they call 'beautiful folds.' It's just a type-</p><p><strong>John Lindquist:</strong>     Ooh.</p><p><strong>Brian Lonsdorf:</strong>     Yeah, it's beautiful. And-</p><p><strong>John Lindquist:</strong>     It makes you think of those people who can fold t-shirts really well. You watch a .gif of it ...</p><p><strong>Brian Lonsdorf:</strong>     Yeah. It's the crease. It's because they're using starch in their wash, I know it!</p><p><strong>John Lindquist:</strong>     Oh, okay. Beautiful folds? C'mon, Sir.</p><p><strong>Brian Lonsdorf:</strong>     KonMari style, you roll it ... but, so, the thing is there's a few different tools in the belt, right? You can reach for really heavy-handed recursion schemes, which, they do allow you to short-circuit with Elgot algebras and do all sorts of crazy stuff, but most of the time you don't need that. And it's a lot of work for, you know, if you don't need it. Same thing with a lens library. Lenses, or optics in general, can do all this stuff too, with traversals and folds and [inaudible 00:12:02], you know, kinda make these streaming compositions.</p><p><strong>Brian Lonsdorf:</strong>     But transducers have this sweet spot where, you're writing map, filter, whatever, after each other and you haven't really brought a library in. And you do need that boost in either composability or performance, or both, and you can bring that in if you're not ... you don't need anything more than those, right? Whereas if you start to get ... if you're like, \"I want to do something that returns a streaming average or some kind of multi-pass loop.\" It's ... or do two loops at once and things like that. Transducers have this really, really easy, lightweight solution to solve that problem without having to learn some serious library.</p><p><strong>John Lindquist:</strong>     The way you think about transducers and composability makes them ... once you learn them, makes them really easy to think about. Or to ... makes them really easy to solve complex problems. So, if you've ever used a transducer before and you take the time ... take ten, fifteen minutes to dive into them, you can ... it can be a good extra tool in your belt to think, \"Oh, that's that multi-pass problem I'm gonna have to solve with whatever.\" And ... with ... the transducer is an easy way of solving that, so I can just compose these three things together and done. Versus, you know, recursion makes my brain hurt and anything else. So. All right.</p><p><strong>Brian Lonsdorf:</strong>     What do you think, Paul?</p><p><strong>John Lindquist:</strong>     What do you think, Paul?</p><p><strong>Paul Frend:</strong>         Yeah, I really like that explanation. No, I agree and I'll add to that, just to clarify, as well. Coming from the JavaScript side, I guess as soon as you want to bring in more complex containers and using other libraries to support the type of operations that you explained, that is instantly an overhead in additional libraries, so I think ... I like the fact that you're using ... you can get away with just using built-in JavaScript to build up the pattern of a transducer.</p><p><strong>Paul Frend:</strong>         And, especially if you're on a big team that might not be that functional, everyone doesn't even have to understand what they do, because they read like normal built-in transforms.</p><p><strong>John Lindquist:</strong>     Yeah. Composed functions, yeah.</p><p><strong>Paul Frend:</strong>         Yeah. Exactly. It's a good intro to composition, I think.</p><p><strong>Brian Lonsdorf:</strong>     [Scrap your for 00:14:21] loops.</p><p><strong>Paul Frend:</strong>         Yeah, yeah.</p><p><strong>John Lindquist:</strong>     I was just going to say, I've been working with my niece. It's her first ... she's never done any programming before, and I'm looking at every ... all these programming books on JavaScript and things, to introduce her to JavaScript. And ... all the for loops in there and all the state being mutated and these things ... I'm like, \"How do I get her from zero to composing a couple functions together?\" Versus-</p><p><strong>Brian Lonsdorf:</strong>     Lambda calculus.</p><p><strong>John Lindquist:</strong>     Sure. But I think there's another ... and that's something I've been writing is like this other path of going from zero to composable functions and [gareen 00:15:05] and things like that. Where you introduce those early, because they are simple and easy concepts, just as easy as changing something or mutating some property or whatever. Anyway, that's a huge tangent. But I think going from zero to learning a transducer, if you don't have any other mutable logic polluting your mind, is a fairly easy path, but ...</p><p><strong>Brian Lonsdorf:</strong>     Yeah, I totally agree with you on that. In fact, so ... when I think of iteration, or the iterator protocol, and I'm like, \"Okay.\" You know, when you go to solve a problem, you're like, \"Well, I need to do something to these collections, so I'm gonna take ...\" Write the code that says, \"Give me each one.\" And then I'm gonna change it and I'm gonna make sure I perform some operation on each thing, and then I get this new thing back ... You don't really ... that's not how you begin thinking about this stuff.</p><p><strong>Brian Lonsdorf:</strong>     You can just say, \"Well, I have an array. I want to map it to this new array.\" I just wanna ... it's totally a mapping from one to the other, and that is really natural to think about ...</p><p><strong>John Lindquist:</strong>     Yeah.</p><p><strong>Brian Lonsdorf:</strong>     ... up front, then the ... but as soon as you start thinking in terms of iteration in a mutable sense, then you start to lose all that beautiful abstract thinking that you kinda just, would be natural, for sure.</p><p><strong>Paul Frend:</strong>         Exactly.</p><p><strong>John Lindquist:</strong>     But one last thought on that, is the ... if you look at code.org and the little exercises that I've had my kids walk through, where you drag little blocks of code around ... move, rotate, jump and all these? And they make a chain of functions and attach them together, I'm like, \"These kids are dragging little blocks of code and composing functions into a stream that will execute one after the other, with the same input.\" I'm like, \"That's the very first thing they're learning.\" But in ... a lot of people for JavaScript land, that's ... you don't learn how to compose functions until years into your career. I ... anyway ...</p><p><strong>Brian Lonsdorf:</strong>     Yeah, after you've had the pain ... actually, I watched this study ... it was somebody who did this long study, and what they came up with is the hardest program problem in programming, which is not 'how to name something.' But people are like, \"Well, I see this variable right here. Why can't I have it down here?\" They're looking at the same page, or the same class, or the same module or whatever, and they just don't understand 'scope,' in general. So ... and understanding scope in different languages, different contexts and that's really complex, but you just remove that whole problem altogether if you just have this pipeline of transformations, because you know what you have available. It's [passed in 00:17:40].</p><p><strong>Paul Frend:</strong>         It's funny how you have to learn abstraction. You learn abstraction, naturally, first. Then you have to forget all about it. Then you have to learn how to extract yourself from the inner-workings of something you really don't care about to then be able to apply all the abstraction logic again. It's like this weird circle, right?</p><p><strong>Brian Lonsdorf:</strong>     Yeah.</p><p><strong>John Lindquist:</strong>     I love that. It's funny how sometimes a beginner will ask you, \"How do I do this one thing this way?\" And I'm just like, \"I don't remember how to do it that way.\" I understand your question and I remember approaching a problem like that before, but you just hadn't thought that way in a long time. Anyway, that was a fun tangent. Well yeah, let's kinda circle back to how you're using transducers in everyday stuff right now with what you're working on.</p><p><strong>Brian Lonsdorf:</strong>     Well Paul's working on a video series on Egghead as a ... everyday ...</p><p><strong>Paul Frend:</strong>         Yeah, that's [crosstalk 00:18:41] my everyday involvement at the moment. Yeah, I haven't actually used them much in production, apart from replacing importing maps and filters and other collection operations from Lodash and replacing it with transducer calls. And, if anyone's interested in trying it out, I think that's a good place to start. Go into your application and find your 'black box' place that does the transformations. And just have it play and see what it feels like, because, it will read nicely and it's probably not going to upset other developers. I hope.</p><p><strong>John Lindquist:</strong>     Yeah, I think that's great advice.</p><p><strong>Brian Lonsdorf:</strong>     Oh, they'll be upset. And if it does, you can be like, \"Well, if you wrote all these with loops and then you came back and tried to refactor this, it would be a nightmare. But if it's a streaming composition, you can just move everything around, like Legos. And it's really easy to refactor.\" Probably the easiest selling point for that is you don't lose any of the speed, the perception of speed from a for loop, right? So you're ... they don't really have ground to stand on, except for like, \"I don't like things that are different.\"</p><p><strong>Paul Frend:</strong>         Yeah, good point. Yeah, if you're battling against the programming that's saying, \"Don't use your maps and filters because of performance reasons.\" Well, now you can show them this and they should go quiet.</p><p><strong>Brian Lonsdorf:</strong>     But yeah, as far as usage goes ... and yeah, I feel comfortable using this at work, as well. It's not ... sometimes I go a little overboard, so I'll use some abstraction. Like, just when I was learning Gang of Four, right? I'd use every single design pattern ever. For no reason. It doesn't ... this isn't gonna work, but I'm gonna just shove it in here anyway, because I really want to use this.</p><p><strong>John Lindquist:</strong>     Like, I just command pattern the heck out of everything.</p><p><strong>Brian Lonsdorf:</strong>     Yeah, that's the best one. That and interpreter. Those are the two. Anyway ...</p><p><strong>John Lindquist:</strong>     And I'll find excuses for visitor because I just like the concept of ...</p><p><strong>Brian Lonsdorf:</strong>     Hey! Visitor, turns out, is an F-algebra, which is a fold.</p><p><strong>John Lindquist:</strong>     Hey!</p><p><strong>Brian Lonsdorf:</strong>     Which is an interesting thing, yeah! You're passing a function into the object-</p><p><strong>John Lindquist:</strong>     Maybe that's why I liked it so much.</p><p><strong>Brian Lonsdorf:</strong>     Yeah, there you go. So functional programming inherently gives you this inversion of control, right? Everything kind of gets pushed to the caller and given to the functions, the higher-order functions that you're using at the caller. The visitor just flips that on its head, really enables that, by letting you jump into the method.</p><p><strong>Brian Lonsdorf:</strong>     But, in any case, there's a cool ... if you google F-algebra and visitor pattern you'll see a nice little proof of it. At work we do a lot of DOM stuff and, if you're traversing a DOM tree, it is a great place to do this kind of stuff. Because you might want to be filtering things and mapping things and ... especially if you just do a querySelector*, get yourself a list.</p><p><strong>John Lindquist:</strong>     Yeah.</p><p><strong>Brian Lonsdorf:</strong>     You can start kinda doing all sorts of fun stuff with transducers without losing any speed. And I was just doing something like this for our CSS ... what we were trying to do with our design system is, say ... we have this thing, kinda like Bootstrap, but we say for all of Salesforce UX, if you're using an input, it should have these properties, it should have this accessibility on it, and ... so we're just kinda consuming the DOM and accumulating values and flipping switches, like flags. Like saying, \"Oh. We have a violation here.\"</p><p><strong>Brian Lonsdorf:</strong>     And it's amazing for that kind of thing. You can start with a list of DOM notes and build up a tree or a data structure, a map, whatever you'd like with the output ... of like error messages or whatever. So, good stuff there.</p><p><strong>John Lindquist:</strong>     Yeah. For sure. Did you say you were using it as part of some voice recognition ... ?</p><p><strong>Brian Lonsdorf:</strong>     Oh yeah, so ... that's an interesting concept. So it turns out a fold is the same ... is isomorphic, or equivalent, to a Moore machine, which is a state machine. Kind of think of it as an infinite recursive reducer kind of thing ...</p><p><strong>John Lindquist:</strong>     Okay.</p><p><strong>Brian Lonsdorf:</strong>     ... that can return a reducer, the same reducer back or a new reducer back. So you kinda get into these new states as you go. But if ...</p><p><strong>John Lindquist:</strong>     I'm nodding my head like I understand what you're saying. This is fine. This is my audio nod.</p><p><strong>Brian Lonsdorf:</strong>     Well ... see ... so you've used Redux, right?</p><p><strong>John Lindquist:</strong>     Yeah.</p><p><strong>Brian Lonsdorf:</strong>     Okay, so if you have a reducer that's for your ... that says 'login,' right? Or it's got your ... so that reducer returns itself at the end, along with state.</p><p><strong>John Lindquist:</strong>     Okay.</p><p><strong>Brian Lonsdorf:</strong>     And this is the Moore machine version of it, is that it could return the new state, gets that state and the payload, and returns the new state. But instead of just returning the new state, it also returns ... actually, returns it ... type holding that new state and the next reducer, whether that's going to be itself ... so, if the login was wrong, it would just keep returning itself. Or if it was right, it could return the application reducer. Now that you've logged in, this is the next reducer that's gonna happen.</p><p><strong>Brian Lonsdorf:</strong>     So you kind of have this continuation that kinda gets itself into different states. And you can do the same thing with voice control, right? Saying, \"Every time it hits my reducer, I'm gonna say ...\" if someone's trying to ... let's say we have a To-Do app and they want to add a 'to-do,' it would reduce ... it would do the switch on the action. Like, \"I'd like to add.\" And it'd say, \"Okay, boom! I'm gonna return the 'adding to-do reducer'.\" Right?</p><p><strong>Brian Lonsdorf:</strong>     And that's like ... puts your application in a new state, looping there. Unless ... if you cancel, you go back. And, otherwise, you can transition or you can keep accumulating the text. And you do cool stuff with real voice recognition that way, too. Taking each phonetic sound to the next graph [crosstalk 00:24:36]. Well, you think it'd be a graph.</p><p><strong>John Lindquist:</strong>     Yeah.</p><p><strong>Brian Lonsdorf:</strong>     Yeah, it'll just take each path. And there's all sorts of cool stuff. But with transducers, which is a more Mealy machine version of state machines, you do a state transducer where each node in your state machine, which is a state or text, is connected via a path. And those paths can have weights, so maybe something's more probable than another path, or perhaps if they took this path we want to remember something.</p><p><strong>Brian Lonsdorf:</strong>     And so, each of those paths that you take has an extra value associated and we can accumulate the paths along the way, and the values of those paths. And run transformations over these accumulators, right? It's just a streaming fold. So, it's a really interesting way to model your application and have this really composable pipeline of transformations, without too much overhead. It sounds really complex, it's not that complex.</p><p><strong>John Lindquist:</strong>     Yeah, I can see where you're going with it. It'd be fun to sit down and read through some of that.</p><p><strong>Brian Lonsdorf:</strong>     Yeah, definitely. I'm obsessed with it now.</p><p><strong>John Lindquist:</strong>     Yeah.</p><p><strong>Brian Lonsdorf:</strong>     I actually might even be trying to put together some Egghead videos. Maybe, maybe not.</p><p><strong>John Lindquist:</strong>     We'll see.</p><p><strong>Brian Lonsdorf:</strong>     Put a robot thing on my voice. Make everybody angry.</p><p><strong>Paul Frend:</strong>         And my brain is officially empty from that.</p><p><strong>Brian Lonsdorf:</strong>     Food for thought, you can take any non-deterministic action and turn it into a deterministic action, just by doing all the non-deterministic stuff. So, if you're doing voice, you can't necessarily map intent, right? And so if someone's like, \"I want to add a to-do.\" And maybe they didn't actually mean that. Maybe they were like, \"I want to add something.\" And they wanted to add a setting, or whatever.</p><p><strong>Brian Lonsdorf:</strong>     So you can take all the paths out of that node and do all the computation, and just keep whittling it down. And that is more efficient, usually, than backtracking and starting again. So essentially, what you can do is, especially with voice recognition, you can take all the phonetic sounds and just compute each step along the way, until we realize ... we have enough information to understand what he actually meant and we'll just throw away the rest.</p><p><strong>Paul Frend:</strong>         Like a constantly evaluating stream to decide which action to take next.</p><p><strong>Brian Lonsdorf:</strong>     Yeah, yeah. But it'd be like multiple stream paths, all at the same time.</p><p><strong>Paul Frend:</strong>         Yeah, very cool.</p><p><strong>John Lindquist:</strong>     That reminds me of some A* path stuff I did, back when I was programming games. We were trying to figure out the quickest way from point A to point B-</p><p><strong>Paul Frend:</strong>         That's exactly where my mind went, as well. It's like, \"How do I get to Canada?\" Or whatever it was.</p><p><strong>John Lindquist:</strong>     Yeah.</p><p><strong>Paul Frend:</strong>         Find the quickest path to Canada.</p><p><strong>Brian Lonsdorf:</strong>     Yeah, no. That's totally right. And there's really great papers about using rings and semi-rings over graphs to accumulate it and stuff. Dextrous algorithms and ... stuff that you don't really ... sounds really intense, but it's like, \"Isn't that these two functions, right?\"</p><p><strong>John Lindquist:</strong>     Right.</p><p><strong>Brian Lonsdorf:</strong>     [CONCAT and CONCAT 00:27:30]. You're like, \"Oh, okay.\"</p><p><strong>John Lindquist:</strong>     Yeah, but they use a lot of words to say that?</p><p><strong>Brian Lonsdorf:</strong>     Yeah, yeah. It sounds real fancy.</p><p><strong>John Lindquist:</strong>     Yeah.</p><p><strong>Brian Lonsdorf:</strong>     Before that thought is up, I do want to say one thing. At work, if you are using these kind of folds and stuff and doing things like that, you should really look into monoids because they capture accumulation so well. And reducing is ... can be formulated with a monoid really nicely, so ... I'm not sure ... Anybody who cares can go google monoid, but it's the best. Because, essentially, what you do is take ... you can take an accumulator and some 'x', right? Your reducer takes the accumulator and some value ...</p><p><strong>John Lindquist:</strong>     Yep.</p><p><strong>Brian Lonsdorf:</strong>     ... and returns the new accumulator. Well, if you flip the two arguments around, it takes the value, then the accumulator. Returns the new accumulator. And the function that takes one type to the next type, accumulator to accumulator, is called Endo, and it can be infinitely composed because it never changes types. And essentially, what you can do is ... so if you just flip the arguments around, you get this really nice type that allows you to infinitely compose anything, which is kind of amazing. So, check out monoids for that. Sorry. Little plug.</p><p><strong>Paul Frend:</strong>         Have you got ... you've got a section on monoids, don't you?</p><p><strong>John Lindquist:</strong>     No, I mean ... [crosstalk 00:28:45] ...</p><p><strong>Paul Frend:</strong>         ... guide to functional programming? If anyone's listening and you haven't read that ...</p><p><strong>Brian Lonsdorf:</strong>     I do.</p><p><strong>Paul Frend:</strong>         ... you should check that out. Make sure it's in our show notes.</p><p><strong>Brian Lonsdorf:</strong>     Yeah.</p><p><strong>Paul Frend:</strong>         That's awesome.</p><p><strong>Brian Lonsdorf:</strong>     Yeah, there's a ... yeah, there ... it even shows Endo in there. And you can formulate a reducer with Endo and then you could ... you get composition through [concatenation 00:29:03]. And then you can do all sorts of stuff that you can't do with the arguments the way they are.</p><p><strong>Paul Frend:</strong>         Nice.</p><p><strong>John Lindquist:</strong>     Tell you what, Man. Just changing arguments around, sometimes, opens whole new worlds of programming you didn't know about before. And it's so weird how that happens.</p><p><strong>Brian Lonsdorf:</strong>     Seriously.</p><p><strong>John Lindquist:</strong>     Just flipping arguments. Like, \"What's this brand new thing that you did?\" Well, I took the first argument and I made it the second one. \"Whoa!\" That's what a lot of these functional programming concepts are. But ...</p><p><strong>Brian Lonsdorf:</strong>     Really. Really, truly. And there's a whole theory behind it. It's wild.</p><p><strong>John Lindquist:</strong>     Yeah. All right. Let's see. What else have we got on my list, here? So, performance. We've been talking about performance. You guys have any recommended performance-measuring tools you use? I'm sure people would be interested in that. How are you measuring performance at work? And how does ... how do you know if something's fast enough?</p><p><strong>Paul Frend:</strong>         Well, I think the first thing you've gotta do is define what's fast enough. I've been caught a few times in briefs that say that something's too slow, but not explaining what adequately fast is, if that makes sense. You've gotta have a goal first, to make sure you know when to stop. 'Cause otherwise you can lose a lot of time on it. I'm by no means a performance guru or anything, but, that's one lesson it did me.</p><p><strong>Paul Frend:</strong>         And, for me, I've got no real stories. I just use built-in browser, Chrome DevTools has gotten really far in its abilities to measure performance, I think. And apart from that, it's just timing functions with different input, see how they scale.</p><p><strong>John Lindquist:</strong>     Are you satisfied with what the Chrome DevTools offers, as far as the performance analytics?</p><p><strong>Paul Frend:</strong>         Yeah. For my purposes they've been fine.</p><p><strong>John Lindquist:</strong>     Okay. Cool.</p><p><strong>Brian Lonsdorf:</strong>     Yeah, I'm kind of in the same boat. I've been programming for a while and I've run into some awful situations, but it's very few and far between, right? And it's to the point where people are writing ... they're just scared, right? They're writing stuff that's just horribly unmaintainable because they're afraid of it being slow.</p><p><strong>John Lindquist:</strong>     Yeah.</p><p><strong>Brian Lonsdorf:</strong>     And it becomes this much bigger problem than performance ever was. It's more of the boogeyman of performance is always looming around the corner. It's gonna ruin your day. But ... we use ... it turns out Jest is an amazing tool for that.</p><p><strong>John Lindquist:</strong>     Really?</p><p><strong>Brian Lonsdorf:</strong>     Yeah, if you have a ... if you write applications, like I do, which I'm sure you do, you probably want to write a lot of your ... as much of your code, as much as possible, outside of whatever framework, whatever you're using. Keep it in a nice, pure model. So that, you know ... even if it's react, which is great, get it out and keep it in a model. And so, if you're testing all this stuff, and you're writing these nice tests for your code, Jest tells you how long it took to run.</p><p><strong>Brian Lonsdorf:</strong>     It'll also cache after the first time, so you really get a ... I don't want to say reasonably accurate, but you get a test every time that you run your test. Like a speed test, just kinda for free, by how long it took to run the test suite. And you can just write, tell it to target one test or whatever. And ... so if you're doing something like I was just doing the other day, which was we were doing this whole comparison thing. It took a really long time, the way I wrote it.</p><p><strong>Brian Lonsdorf:</strong>     I wrote it with monoids, funny enough. Turned out to be really slow because I was-</p><p><strong>John Lindquist:</strong>     Wait a second. [crosstalk 00:32:40].</p><p><strong>Brian Lonsdorf:</strong>     And this is not the normal case. But it's not the normal case, I was creating hundreds and hundreds of objects, because the way you can do this is you make a ... I made a little factory function as my monoid, so I could implement CONCAT. And I didn't make a class because I hate classes. No, I just didn't feel like it.</p><p><strong>John Lindquist:</strong>     [crosstalk 00:33:01] Tell us more.</p><p><strong>Brian Lonsdorf:</strong>     Yeah, I didn't feel like going through the ceremony of making a whole class. I made a little factory function and you run it through and ... who knows what the JIT is gonna do, right? It doesn't ... you don't know if it's gonna be fast or slow. But just by having a Jest test, I was able to acquire a full second of my test suite by just switching to a class. And I was like, \"Oh, I see. I see why this is important.\" But ... it's pretty useful.</p><p><strong>John Lindquist:</strong>     So classes are faster. Class all the things. Is what you're saying.</p><p><strong>Brian Lonsdorf:</strong>     Yeah, exactly. The performance boogeyman is gonna get you. You have to write classes.</p><p><strong>John Lindquist:</strong>     You know if you're making-</p><p><strong>Brian Lonsdorf:</strong>     There can be thousands of options-</p><p><strong>John Lindquist:</strong>     If you make that rhyme somehow, it makes it more believable.</p><p><strong>Brian Lonsdorf:</strong>     Right.</p><p><strong>John Lindquist:</strong>     I've heard studies that people will accept it as true if it rhymes, so ...</p><p><strong>Brian Lonsdorf:</strong>     Oh, I like that. Yeah. So ...</p><p><strong>John Lindquist:</strong>     So work on that.</p><p><strong>Brian Lonsdorf:</strong>     I like it. No, but for real, I was making hundreds of objects, thousands of objects. You would want a class if you're doing that. That's an optimization on that exact thing, right? Where I was taking each ... so many things and putting them in objects. And the other ... you know, thing that we use, of course, is some internal Salesforce-like thing they call SOLE that runs through the page and tells you the bootstrap of the page and certain Ui rendering things, and ... Yeah, we just spent weeks on IE11. Oh my gosh. My arm's tired.</p><p><strong>Paul Frend:</strong>         Really?</p><p><strong>Brian Lonsdorf:</strong>     Yeah, so I much prefer to write this stuff in a pure model and just use Jest to kind of give me ... I mean, if we're talking about transducers and for loops, you don't really need to care about ...</p><p><strong>John Lindquist:</strong>     Yeah. I know Paul and I have both been playing with Wallaby.js as a measurement tool. It does ... it'll do ... you can just add comments to specific /?* something type comment that will execute the block of code underneath it, or in front of it. And can do an inline performance measurement and show you how many milliseconds it took. It can also ... you can also feed some arguments into it, execute it and see what the outputs are, to kinda do a pre-unit test, of sorts.</p><p><strong>Paul Frend:</strong>         Yeah, that was very [crosstalk 00:35:14] exploratory. Really changed how I programmed. I really liked it. 'Cause you just get that instant feedback and you can sort of [sign 00:35:22] by, not necessarily for performance, but by just having the output of the function logged out straight away. It's like ... I really liked what you said, John. It's like your pre-unit test.</p><p><strong>John Lindquist:</strong>     Yeah, it's really a ... it's a very friendly, easy inline, surprising ... in a good way ...</p><p><strong>Brian Lonsdorf:</strong>     That's awesome.</p><p><strong>John Lindquist:</strong>     Yeah, way of testing your code or showing what it does. And I've really liked it so far, but it's one of those small projects that I hope I can trust what it's telling me, sort of thing.</p><p><strong>Brian Lonsdorf:</strong>     [inaudible 00:35:54].</p><p><strong>Paul Frend:</strong>         Yeah, exactly. It is funny though, just talking about performance issues. While recording this course, one of the things I tried was just that. Is timing these operations with millions of records, but I couldn't find a place ... the setting for it. Maybe there is one, hidden somewhere that ... you can't time the function just once, so every time you save or write some new code, it'll execute all of those comments. So it'd be like write a bit of code, save, and then it would run all the functions that had time and comments against it. And I would sit and wait, there, for ten seconds.</p><p><strong>John Lindquist:</strong>     Oh, so it's like a cache flag or something?</p><p><strong>Paul Frend:</strong>         Yeah, exactly. That would be really cool.</p><p><strong>John Lindquist:</strong>     Well, let's send him a message on Twitter, just like every other bug report I've ever filed.</p><p><strong>Brian Lonsdorf:</strong>     Fix it now! But you know, I do want to mention one cool trick you can do that's very similar to that is ... if you have a unit test suite, there's a library ... there's a bunch of libraries out there that do a style called QuickCheck, which will check that a property holds for any input. And what you do is, you have these little, composable reverse scaler or whatever. Basic data types that generate stuff, so bool would be true or false, right?</p><p><strong>Brian Lonsdorf:</strong>     And string would just be this infinite amount of random strings that are arbitrarily created. And then you can build up bigger data types from those smaller data types. But basically, you say, \"Check that this property holds for all ... of the type of input that my function takes.\" And if you're doing functional programming, it kinda opens up that possibility. So, stupid example is to say, \"For all reverse ...\" If I reverse an array and reverse it again, I should get the same array back. But it'll throw out arrays with bignums in there, and crazy stuff in there, empty arrays and whatever.</p><p><strong>Brian Lonsdorf:</strong>     And so, that's another cool way to get this generative testing. Jsverify is a good library for that ... and well, it plugs right into Mocha, or Tape, or Jest or whatever, so ...</p><p><strong>John Lindquist:</strong>     Cool.</p><p><strong>Paul Frend:</strong>         Awesome.</p><p><strong>John Lindquist:</strong>     Cool, well thanks, guys. Is there anything else you want to add before we just kinda wrap up here?</p><p><strong>Brian Lonsdorf:</strong>     Let's see ...</p><p><strong>John Lindquist:</strong>     Just open ...</p><p><strong>Brian Lonsdorf:</strong>     Please, please don't try to optimize your code until someone tells you you have to. I just want to throw that out there.</p><p><strong>John Lindquist:</strong>     That's excellent advice. I've been on a project where there was one developer who could not stop optimizing things, and they never got anything done. And it brought down the team, you know? It hindered a lot of progress, because their task was to make this thing smooth, this infinite list of sorts, kinda smooth really ... sorry, scroll really smoothly. And load data smoothly and all these things. And they just could not get it done. Yeah. Very upsetting.</p><p><strong>Paul Frend:</strong>         Yeah, what is a good closing statement here?</p><p><strong>John Lindquist:</strong>     I should have prompted you guys on a closing statement, sorry.</p><p><strong>Paul Frend:</strong>         It's like in front of the jury.</p><p><strong>John Lindquist:</strong>     Think of something really smart to say.</p><p><strong>Paul Frend:</strong>         That's why I'm nervous right now.</p><p><strong>Brian Lonsdorf:</strong>     Closing statement! Yeah, well, if you're interested in transducers and you're enjoying them and want to take it a step further, check out lenses, which has the power of transducers, but even more. So, you can kinda start with this really lightweight library and if you're enjoying the composability and the ability to traverse stuff, if you look into optics ... there's different libraries available, but that's a cool next step if you need more power.</p><p><strong>Paul Frend:</strong>         Have you got any examples of library names for optics?</p><p><strong>Brian Lonsdorf:</strong>     Let's see, I think there's flunc optics? Is that ... is that ... no, it's Flunc is the guy? Or no, flunc is the library. F-l-u-n-c optics. Done by Scott Christopher, who's also, I think, in Australia?</p><p><strong>Paul Frend:</strong>         Oh really?</p><p><strong>Brian Lonsdorf:</strong>     Yeah, he's in Sydney.</p><p><strong>John Lindquist:</strong>     I've used partial.lenses. Have you seen that library? It's part of a bigger suite around the React streaming variation called Calm.</p><p><strong>Brian Lonsdorf:</strong>     Oh no. I'm looking at it right now, though. Power of the internet.</p><p><strong>John Lindquist:</strong>     Yep. Partial.lenses is my favorite lens library right now. But it's one of those where I feel like I'm one of twelve people using it, so ... I don't ... I try to stay on the common, code normal path. Otherwise ... I don't want to be the lone nomad out in the middle of nowhere who has his own way of thinking.</p><p><strong>Brian Lonsdorf:</strong>     Right, right. And this is definitely ... yeah, this definitely does what I promised. It will take transducers to the next level.</p><p><strong>Paul Frend:</strong>         Wicked.</p><p><strong>John Lindquist:</strong>     Yeah, it's ... I ... maybe I recommend against looking into that ... if you're not ...</p><p><strong>Brian Lonsdorf:</strong>     Yeah, this is definitely way too much. This is the sledgehammer bazooka. A 'bazooka that shoots sledgehammers' solution.</p><p><strong>John Lindquist:</strong>     Yeah, but it ... the lenses support traversals, and then the other lenses ... libraries I looked at didn't, and ... anyway, that's all.</p><p><strong>Paul Frend:</strong>         Okay, I've got my closing statement.</p><p><strong>John Lindquist:</strong>     All right, Paul. Paul, what's your smart thing?</p><p><strong>Paul Frend:</strong>         I'll get my five seconds of language. I guess I would finish with ... if you're gonna optimize, if you're not gonna optimize for performance, try and optimize for the relationship between your code. So, transducers is one way to do that by decoupling those transforms and setting up pipelines. You can use ... they work together, it's very easy to create code that focuses on the verbs, or things, and not so much on the relationships. So, transducers is one way to let you name how things relate together, as well. So, I'll end on that.</p><p><strong>John Lindquist:</strong>     I like that. More verbs, less [inaudible 00:41:48].</p><p><strong>Paul Frend:</strong>         Yeah.</p><p><strong>Brian Lonsdorf:</strong>     Gerunds.</p><p><strong>John Lindquist:</strong>     All right, we'll end there. I'm gonna hit the big, red 'stop recording' button. Thanks for listening. You can learn more about transducers from Paul, and more about functional programming from Brian, on Egghead.io.</p>",
    "slug": "functional-javascript-with-paul-frend-and-briand-lonsdorf-dr-boolean",
    "description": "<p>In this episode John sits down to talk to Paul Frend and Brian Lonsdorf (aka Dr Boolean) about functional programming, and its practical use cases on the job. Paul has released <a href=\"https://egghead.io/courses/quickly-transform-data-with-transducers\">a new course on egghead.io covering the topic of transducers</a> that is the spark for this conversation.</p><p>Transducers are a a useful pattern that can deliver performance and readability, but are often misunderstood or obscure to many programmers. Along with transducers you'll learn more about monoids, folds, lenses and so much more.</p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/df1a6deb/transcript\">\"Functional JavaScript with Paul Frend and Brian Lonsdorf (Dr Boolean)\" Transcript</a></p><h3>Resources</h3><ul><li><a href=\"https://egghead.io/courses/professor-frisby-introduces-composable-functional-javascript\">Professor Frisby Introduces Composable Functional JavaScript</a></li><li><a href=\"https://egghead.io/courses/quickly-transform-data-with-transducers\">Quickly Transforming Data with Transducers</a></li><li><a href=\"https://github.com/flunc/optics\">flunc optics</a></li><li><a href=\"https://github.com/calmm-js/partial.lenses\">partial.lenses</a></li></ul><h3>Brian Lonsdorf</h3><ul><li><a href=\"https://twitter.com/drboolean?lang=en\">Twitter</a></li><li><a href=\"https://github.com/DrBoolean\">Github</a></li><li><a href=\"https://egghead.io/instructors/brian-lonsdorf\">egghead.io</a></li></ul><h3>Paul Frend</h3><ul><li><a href=\"https://twitter.com/pfrendly?lang=en\">Twitter</a></li><li><a href=\"https://github.com/pfrend\">Github</a></li><li><a href=\"https://egghead.io/instructors/paul-frend\">egghead.io</a></li></ul><h3>John Lindquist</h3><ul><li><a href=\"https://twitter.com/johnlindquist?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor\">Twitter</a></li><li><a href=\"https://egghead.io/instructors/john-lindquist\">egghead.io</a></li><li><a href=\"https://github.com/johnlindquist\">Github</a></li><li><a href=\"https://johnlindquist.com/\">Website</a></li></ul>",
    "duration": 2533,
    "episode_number": 2,
    "contributors": [
      "John Lindquist"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/2eyzp",
    "path": "/podcasts/functional-javascript-with-paul-frend-and-briand-lonsdorf-dr-boolean",
    "published_at": "November 22nd, 2017",
    "url": "https://egghead.io/api/v1/podcasts/functional-javascript-with-paul-frend-and-briand-lonsdorf-dr-boolean",
    "edit_podcast_url": "https://egghead.io/podcasts/functional-javascript-with-paul-frend-and-briand-lonsdorf-dr-boolean/edit"
  },
  {
    "id": "podcasts-00000000000000000057",
    "title": "Using TypeScript with Basarat and Marius Schulz",
    "summary": "Two leading TypeScript experts, Marius Schulz and Basarat Ali Syed, discuss their initial reactions and excitement for TypeScript and how it has evolved and earned their trust over the years. TypeScript has been the main focus of many of their products and trainings and they’ve gained their expertise by closely following the project and digging deep into the TypeScript compiler code. As TypeScript continues to improve with features, tooling, and performance they share their opinions on what they’re most looking forward to in the near future.",
    "media_url": "https://dts.podtrac.com/redirect.mp3/cdn.simplecast.com/audio/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/acc5791c-bffc-44ef-8174-422e5fba884b/1c98ec65_tc.mp3",
    "image_url": "https://cdn.simplecast.com/images/2ac34c/2ac34cab-4949-40aa-bac7-d7e3a70f0a39/acc5791c-bffc-44ef-8174-422e5fba884b/1534346596artwork.jpg",
    "simplecast_uid": "acc5791c-bffc-44ef-8174-422e5fba884b",
    "transcript": "<p><strong>John Lindquist:</strong>     This is an egghead.io podcast featuring Basarat, Marius and John discussing TypeScript. So to start off, let's introduce yourselves. Marius if you want to go first since you're at the top of the list on my screen here. Watch it. Why don't you introduce yourself with your experience, where you're from, that sort of stuff?</p><p><strong>Marius Schulz:</strong>      Yeah. So, my name is Marius Schultz. I live in beautiful, Munich, Germany, and I've been doing this JavaScript development thing for almost 11 years now. And yeah, for the last two years I've been getting heavily into TypeScripts. So this is why we're talking about TypeScript today, I guess.</p><p><strong>John Lindquist:</strong>     Yeah, you've been around for 11 years. That's a lot of change.</p><p><strong>Marius Schulz:</strong>      It is. And it has been. Yeah.</p><p><strong>John Lindquist:</strong>     And Basarat. How about you?</p><p><strong>Basarat:</strong>            So, my name is Basarat, I live in Melbourne. Just another day really, nothing special about me, just a little writing code.</p><p><strong>John Lindquist:</strong>     Oh, come on.</p><p><strong>Basarat:</strong>            Having been born [inaudible 00:00:58] I guess.</p><p><strong>John Lindquist:</strong>     You don't have to be modest.</p><p><strong>Basarat:</strong>            No, honestly that's pretty much it, I'm just a dev.</p><p><strong>John Lindquist:</strong>     Okay. Maybe you should put that into your Twitter bio, just saying, \"Hey, just a Dev.\" I smashed my keyboard and hopefully stuff shows up. Well, cool. So we're talking about TypeScript today. So what is, just to kind of open question to either of you, what's your initial experience with TypeScript and how did you kind of get hooked on it and why are you all in TypeScript right now?</p><p><strong>Basarat:</strong>            You want to go first Marius?</p><p><strong>Marius Schulz:</strong>      Yeah, sure. So, I think it was October 1st or October 2nd in 2012 when Anders Hejlsberg announced TypeScript. And I remember watching his presentation and I was the worst fan girl in the room at that day. I don't know, I was immediately hooked by TypeScript, it sounds really cheesy I know. But I have a C# background. I come from a statically type world. I love what Anders Hejlsberg has been doing. So I was really excited to see what he has been doing to JavaScript.</p><p><strong>John Lindquist:</strong>     So you knew him before TypeScript because if his C# work and all that?</p><p><strong>Marius Schulz:</strong>      Yes, because of his work on .NET and C#. Yeah.</p><p><strong>John Lindquist:</strong>     Awesome. So, there was no convincing you, you saw Anders, you saw JavaScript, make my JavaScript life better and you just went for it.</p><p><strong>Marius Schulz:</strong>      Yeah, I went for it and I thought it was good that we finally get static types in JavaScript land. I'm used to really good tooling in the C# world. So, this is what I hope to get from JavaScript and TypeScript as well.</p><p><strong>John Lindquist:</strong>     All right, Basarat. How about you?</p><p><strong>Basarat:</strong>            So I was working with .Net at the time, again like in October, 2012 when TypeScript released. You really have to know Anders to jump into it that fast. So, I knew that ended had released it, he was a part of the team, it was his new baby. So I got myself involved as much as I could. I opened up the language Spec, read the whole thing cause that was the only docs available at the time.</p><p><strong>Basarat:</strong>            Summarize this into my own little word document to know all the points that people might have questions about. Introduce this to our team. Then started helping people on stack overflow, and that's pretty much the reason why I'm known in Tech is because of my contributions there. Found a lot of common questions going around, starting to write notes about that, that got converted into TypeScript dev. But really like the initial reason and the reason why I jumped in has to be Anders.</p><p><strong>John Lindquist:</strong>     I totally get that. And yeah, by the way, thank you for every time I Google something TypeScript, your name comes up.</p><p><strong>Basarat:</strong>            Thank you.</p><p><strong>John Lindquist:</strong>     So, thank you for saving me a bunch of time. It's anyone listening out there. If you just get involved with a project and you answered questions on stack overflow and write up what you learn, I mean it, it opens up so many doors for you. It's a perfect way of helping out, especially if you don't want to get in and start writing your own open source projects and all that. So what have you guys seen from other people adopting TypeScript? Have you seen them hesitant to start with it or that they love it, they hate it. What have you seen other people using or their experience adopting it?</p><p><strong>Basarat:</strong>            So, originally the companies that I was working with were all .Net shops and Microsoft shops. So convincing them to use TypeScript was definitely not a problem. And as I wanted to evolve in my career, the jobs out there were all about JavaScript and I was so spoiled with TypeScript that I really didn't want to jump anywhere else. So I held onto that job for around four years and stuff, even though I was possibly not as happy as I wanted to be.</p><p><strong>Basarat:</strong>            But recently since England adopted TypeScript that's when I was like okay the world is open to me. Anybody who is going to do any fund in Dev is definitely going to be exposed to TypeScript and would be at least willing to explore that with me. So then like right now after Angular is written in TypeScript and there are a lot of React TSS that are using TypeScript attached again as I mentioned in the react docs as well.</p><p><strong>Basarat:</strong>            A view is adopting TypeScript for a number of it's sub projects as well. It's not even a question anymore. I don't see any hesitation from anybody that I work with. Outside of my circle that people do sometimes complain about TypeScript, but there're mostly people that haven't actually tried it seems to be the case.</p><p><strong>Marius Schulz:</strong>      Yeah. That's my experience as well. So once people try TypeScript, they're convinced pretty fast I would say. But many people have initial, I don't know, they're careful about it. You know, they still think, \"Oh it's a Microsoft product. It must be super commercial and closed source and proprietary,\" and that's just not the case.</p><p><strong>John Lindquist:</strong>     Yeah. I think initially when it released, it seemed like there was that migration happening of okay, everyone needs to learn front end dev now. And there was that all the Java people, all the C# people wanting to get on the Front End Bandwagon and TypeScript was just the, almost the bridge to get there because otherwise what are you going to do without types when you come from a type background and-</p><p><strong>Marius Schulz:</strong>      Yeah, I think angular too was the big-</p><p><strong>John Lindquist:</strong>     It feels like you're missing an arm or something. Sorry. I think Angular two was the big push for TypeScript to be honest. So just to be clear, because I get this question a lot in my workshops, TypeScript is in no way tied to Angular, not an in any way.</p><p><strong>John Lindquist:</strong>     But it's the default language. It can use Angular two or angular four, Angular five, whatever the current version is. Five, just today.</p><p><strong>Marius Schulz:</strong>      Yeah. It was released two hours ago when we recorded this. Yeah. So, it is a no way specific to angular, but Angelo was the big push because they doubled down on TypeScript and I think this just helped TypeScript spreads so, so, so much.</p><p><strong>John Lindquist:</strong>     Yeah. I remember that when Angular tried to introduce its own, can you remember though the name of it?</p><p><strong>Marius Schulz:</strong>      A Script. It was called script.</p><p><strong>John Lindquist:</strong>     Yeah, tried to introduce that, then TypeScript was growing at the same time and they just, they need a decorator's like decorators were the just, it was how you're going to configure a class.</p><p><strong>Marius Schulz:</strong>      Yeah, I remember.</p><p><strong>John Lindquist:</strong>     And so they were so set on decorators that they wanted to do ad script and then TypeScript came along like, well it's just, you know, Google and Microsoft. Yeah, let's do this together.</p><p><strong>Marius Schulz:</strong>      I remember the big revelation, at script is TypeScript. I think it was a couple of months after they initially introduced ad script and then decided to drop it. So, they decided not to develop their own language. And then there was the big slogan ad script is TypeScript.</p><p><strong>John Lindquist:</strong>     So I think that leads well into my next question. So, how have you seen type script evolve and grow since its initial release?</p><p><strong>Basarat:</strong>            So we've seen three or I guess four complete compiler rewrites and they've mostly been around performance. So it used to be really slow. It used to take around three seconds for three files or something like that. And now it takes two seconds for 100 or 200 files. It's just crazy how fast they've made it. The tooling has improved a lot and I guess it's at a stage where it's a fairly mature ecosystem in terms of they can add new features quite easily.</p><p><strong>Basarat:</strong>            As new ECMAScript features come out, they can add those to touch it quite easily. At least that's my external perception of how the team is operating. So they really have built a very solid foundation there, and what they are focusing on now is adding a lot of refactorings and good analysis tools into the language services that come with a compiler. And that's when I studied the original compiler and found some value in it doing my own open source work.</p><p><strong>Basarat:</strong>            It was in use the compiler and then built tooth that use the analysis that the compiler has done to do further analysis on probably like the dependency deed, creed to the user or quick, smarter refactorings, five baht imports. But all of these things that I did, they are actually now being done by the TypeScript team themselves because they've got the base so solid that they can use their resources towards helping developers use those solid base features of the language into more intelligent good tooth.</p><p><strong>Basarat:</strong>            And I'm really excited for it. They've added this thing called code actions, which is essentially a quick fix and I think they've also done, they've integrated fall system handling quite a lot into the compiler. Like blobbing is something that is traditionally done with a lot more code than is probably required. They analyzed what globe that the standard node module did and wrote something that does a subset of that but does it really well, and quite commonly when I want to use just clubbing in my notebook as well, I actually just input TypeScript and use their glove functionality.</p><p><strong>Basarat:</strong>            But again, so it's evolving into more code analysis tools and I love that.</p><p><strong>John Lindquist:</strong>     Yeah, I think of it as I've seen it evolve. They've been pretty patient as far as not rushing out features and really making the base fantastic to build. Like you said, tools on top of, and I'm glad my initial experience was there aren't enough features in here to be worth it for me to adopt right now. And but I'm glad that they took kind of a slower approach so that they could get everything a really solid and now it just seems like it's exploding with tooling around VS code and like you mentioned, auto importing and they've had completion for a while and all that stuff.</p><p><strong>Marius Schulz:</strong>      Yeah, the completion is just fantastic and it just keeps getting better, especially with TypeScript 2.6 now, we can get even better auto completion, but this is the tooling side of things. But since TypeScript 2.0 which I think came out late last year, so late 2016, maybe Octoberish timeframe, they introduced big changes and additions to the type system that are really, really worth it.</p><p><strong>Marius Schulz:</strong>      So I disagree a little bit with the definition that you just gave that they weren't really hesitant to add features. I think 2.0 in 2.1 we're crammed with good type system features. So they introduced non nullable types. The best thing that has happened to TypeScript since the one old then they did control flow based type analysis, which is just a really, really clever control, slow tracking mechanic of the compiler and the the type checker to really deeply understand what you're doing in your JavaScript code.</p><p><strong>Marius Schulz:</strong>      So we can keep riding idiomatic JavaScript the way you would write JavaScript and have the compiler understand all the effects of things like brakes and continues and ifs and else's, and that is just really, really powerful and it makes her code looked like Java script and not so much like a different language. Which is really, really valuable I think, because you don't have to teach people so much about TypeScript.</p><p><strong>Marius Schulz:</strong>      So I often get the question in my workshops, how do I do this and TypeScript? And I always answer that this is sometimes the wrong question. The correct question would be, \"How do I do this in Java script,\" right? And then you just do it the exact same way in TypeScript.</p><p><strong>Basarat:</strong>            I love that question though.</p><p><strong>Marius Schulz:</strong>      This is, this is one of the things that I see people struggle with a little bit because I have a lot of devs that have a Java or .net background. And they tried to ride their Java script and type script code the way they would write their Java code, which is not always perfect. You have this impedance mismatch or what do you call it? So, they tried to build deep class hierarchies and sometimes TypeScript encourages that because if it does have keywords like abstract and public and private.</p><p><strong>Marius Schulz:</strong>      So it's kind of reminiscent of C#, although it's really not. So my point being here, we have plenty of powerful features in the type system and I think that the best ones are not nullable types and control flow analysis. And on top of these features we can do so much.</p><p><strong>John Lindquist:</strong>     Yeah. I'm always amazed that if you get into like a switch case and then you have some sort of conditional logic deep in there and it's like this shouldn't be a number, and like, \"Well, I didn't even know that's what I had written.\" Like how does TypeScript know that that should be a number when it's so deeply nested into some of my spaghetti code or whatever-</p><p><strong>Marius Schulz:</strong>      Do you want to hear a funny anecdote.</p><p><strong>John Lindquist:</strong>     It's amazing.</p><p><strong>Marius Schulz:</strong>      Yeah, after they finish this feature, they found a bug in the compiler itself. I don't recall exactly what it was. I think it was about parsing octal literals or something, so a really, really, an edge case if you will, and control flow analysis. I don't want, I don't want to say something wrong here. I think it was control flow analysis. Anyway, one of the futures they build surface bugs in the compiler itself, which is I think just proves the point that even the TypeScript compiler developers who really know JavaScript well, who know TypeScript as well as as you can, even they make mistakes and TypeScript helps them find them much earlier and much cheaper.</p><p><strong>John Lindquist:</strong>     That's kind of awesome. I like that a lot.</p><p><strong>Basarat:</strong>            I've done a few open source projects where I've just gone in and converted existing JS files to DS and I always find back, it makes me feel really happy because it means that-</p><p><strong>John Lindquist:</strong>     Oh yeah, I'm sure.</p><p><strong>Basarat:</strong>            And it helps convince them as well that this is going to provide you some value. Another thing that is quite commonly on stack overflow. People will ask how do I do this in TypeScript and I just answer it, even though the question is really about how do I do this in JavaScript. So I love getting those questions because they're easy to answer.</p><p><strong>John Lindquist:</strong>     Easy points for Basarat.</p><p><strong>Basarat:</strong>            Yes. Literally. Another thing about going back to, your statement John about like TypeScript figures out this cannot be a number over here. That's sort of why I love JSX in TypeScript as well because when I'm writing JSX it's, and thought as the tooling is concerned, for TypeScript is just JavaScript.</p><p><strong>Basarat:</strong>            And if you have a dairy operator with one thing you want to render one item with the other choice, you want to render something else and you try to use available that might have been ruled out based based on previous conditions that should be pointed out. It cannot possibly be a number of overhead and you're trying to pass it as the number two or this component innocent error. So I love that.</p><p><strong>John Lindquist:</strong>     Yeah that sounds, honestly even if I have not used TypeScript with JSX yet. So, that's something I definitely need to check out. I've been using it a bit with some of the view features where some of the decorators you can put on the class properties are just so helpful as far as shorthand, like mapping a class property to like your story state is just a decorator with like a string key in there versus writing a method which returns an object, which returns the key, your turn.</p><p><strong>John Lindquist:</strong>     So my typical usage of TypeScript has been the like the helpful shorthand stuff. And I think that's what angular was kind of going for when they adopted it was they really wanted the decorators for the easier to map components for injection and for linking the class to a template and all that sort of stuff. Like that's honestly, that's been my exposure to TypeScript. I haven't dove super deep into the type systems and using all the features. But I've always thought of it as just JavaScript with additional features.</p><p><strong>Marius Schulz:</strong>      Yeah, I kinda like to use TypeScript for exactly the cases that you describe to you weren't using so much. So, I love to use, let me put this differently. I like to leverage as much as I can from the type system and the types that we have available to tailor my statically type models as well as I can. So, the idea is that I want to make illegal states on representable and the type system that doesn't always succeed to 100%, but you can get really, really close with the most recent TypeScript versions.</p><p><strong>Marius Schulz:</strong>      So if I can already express the type system that a certain combination of properties can never occur at the same time, then I can have the TypeScript compiler check that these bugs just don't occur. So to make this a little more more concrete to them, I have an example for you.</p><p><strong>Marius Schulz:</strong>      So oftentimes when you get an API response, you either get some sort of positive status code, so say 200 and a value or you get a bad status code like 400 or something and an error message, right? And previously in very early types of versions, you would model this as well. You get a response type and it has an optional property of type, some generic value and maybe an arrow string, right?</p><p><strong>Marius Schulz:</strong>      But they can never be set at the same time, because you either get an error or you get the value, but not both. So the way I model this today, I model exactly the two cases I can have. I can say, I have the success case where the success property is true and I have a value or I have the failure case where success is false and I have the error message and that is really valuable if she can do this to a great extent.</p><p><strong>John Lindquist:</strong>     Yeah, I haven't used it that way, but I can definitely see the appeal there. I mean it's to know that it's a fail type or if their request game or response came back as something not working.</p><p><strong>Marius Schulz:</strong>      Yeah, and the beautiful thing is, the compiler will not expose the properties so it will not make them show up in the auto completion lists until you've checked in which case you are. So, until you've checked that success is true. You cannot access the value property. It just doesn't show up in the auto completion list and it'll get the red squealy if you try it. So this is really, really powerful because it just can't forget it.</p><p><strong>John Lindquist:</strong>     That is cool, forcing you to handle the state before you write the code for it.</p><p><strong>Marius Schulz:</strong>      That's exactly.</p><p><strong>Basarat:</strong>            The data transfer objects between the front end, the backend, documenting them using TypeScript is one of the key use cases that I used to convince backend and they'll set the knee TypeScript. So quite commonly I'll ask them that you gave me this end point, what are the things that it returns? They do follow something like open spec or something like that. So I go to APIs but like in code.</p><p><strong>Basarat:</strong>            If they want to read their own code in JavaScript and tell me the answer, the answer would be much easier if they had written this tingle Jones and object of these union types in TypeScript. And originally this is no longer a discussion that I have with people but originally this would be, I would write it for them and then be like the mind will be blown away that in this particular case, I had written the wrong thing. I'm sorry for that. So documenting the details and touch scape. Great use case for backend.</p><p><strong>Marius Schulz:</strong>      Yeah, we do the same thing.</p><p><strong>John Lindquist:</strong>     Are Your backend developers using node? Like, are you able to share those type or interfaces between your front end and back end projects?</p><p><strong>Basarat:</strong>            Yep. So a lot of our backend and how all AWS LEM does at my current job written in TypeScript.</p><p><strong>John Lindquist:</strong>     Yeah. If you can adopt it across the full stack. I can, I haven't worked on a project like that yet, but I imagine the having confidence that the objects coming across are what they say they are. That sounds amazing. So what have you seen as far as tooling is concerned for people coming from like C# visual studio backgrounds or Java and IntelliJ and eclipse and all those. The history there has been with refactoring you're able to move methods around renamed classes, renamed properties and just to kind of have it magically fix or intelligently fix across your projects.</p><p><strong>John Lindquist:</strong>     Now that's something I've never quite seen in JavaScript land because you're never certain that the name of one thing, in one place is the name of another thing and in other place, especially with, you know, accessing something with a race in tax or what not. Are you using refactoring tool's that come with TypeScript? Do you, are you confident in them? Are you seeing them being adopted?</p><p><strong>Marius Schulz:</strong>      So the one thing I use all the time is the renaming refactoring, because I'm always trying to find better names for all my symbols. So it'd be that types or variables or functions. It doesn't matter, I'm constantly renaming things. And that's not a string replace. I mean, That is the proper refactoring like you note from Java and C#, the one refactoring.</p><p><strong>John Lindquist:</strong>     You're finding that working across all the files in your project properly?</p><p><strong>Marius Schulz:</strong>      Yeah, so rename works really well if you write modern JavaScript in a certain way. It's almost, it's kind of statically, no, erase that part. It's stupid, I'm sorry. So yeah, renaming is working really well for me, especially with the IS 2015 modules because then you're not relying on some sort of global variable that you know is hopefully going to be there and runtime. You're constantly doing imports and exports, so you can track really well where things come from. So the renaming works really well.</p><p><strong>Basarat:</strong>            Yeah. For me-</p><p><strong>John Lindquist:</strong>     Yeah, I take the modern stuff, imports, exports and all that for granted all the time though. I forget so quickly what JavaScript used to be with required.</p><p><strong>Basarat:</strong>            That's a good thing.</p><p><strong>Marius Schulz:</strong>      It was a different time five years ago, it really was.</p><p><strong>John Lindquist:</strong>     Oh yeah. And being able to know those names across files and how things were aliased across files anyway, good riddance. Right?</p><p><strong>Marius Schulz:</strong>      And building off of that, the new auto completion and automatic imports, they worked really well because the TypeScript conserve can know what exports we have, what imports we have, and if you just start the beginning of assemble name, you know, if you do something like get B for example, then you will see, get books in your auto completion. Even though you haven't even imported that method yet or that function yet. That all works because the modular system is really static.</p><p><strong>John Lindquist:</strong>     Basarat, I think I interrupted you.</p><p><strong>Basarat:</strong>            So, Rename works for me 100% of the time, never issues. When I click even do quite commonly is I'll name variables very explicitly like always accepts the name for the person, literally name the variable like that. Cause I know that I almost never have to type that full thing as well because that'll get auto complete from TypeScript.</p><p><strong>Basarat:</strong>            And then once the thing that the whole code section does what it's supposed to do, then I can look back and say, \"Okay, is this always the case that this variable is really used like that?\" If not F2, type in a new name, enter, done.</p><p><strong>John Lindquist:</strong>     So what do you think TypeScript has to do to become more popular in JavaScript land? I think I've seen more project templates using it, more starter templates and I think that really helps. Do you think there's anything else that's-</p><p><strong>Basarat:</strong>            I think it's on a meteoric rise right now. There is absolutely no stopping it. If you look at the trends for TypeScript on, trends.google.com it's amazing. It's exponential. Super exponential. So, and it actually shows up on like on the growth radar for GitHub in the OCTA universe for the last year. It's had a growth of 134% whereas its nearest competitor had a growth of I think 50% so it's a language that's going to self sustain for quite a while.</p><p><strong>Marius Schulz:</strong>      It's literally off the charts.</p><p><strong>Basarat:</strong>            Yes.</p><p><strong>John Lindquist:</strong>     So you're saying I should stop using coffee script then?</p><p><strong>Marius Schulz:</strong>      Please John Keep using coffee script as long as you want to, know flame wars here. Yeah, but do you use TypeScript?</p><p><strong>John Lindquist:</strong>     Yes. Yeah, I'm just trying to keep my job man. Job Security.</p><p><strong>Marius Schulz:</strong>      I think it's key for TypeScript to work well with the popular frameworks. I think this is what is really important, so it has to work well with angular, React, Vue and all the other ones. They're doing a great job there. And don't get me wrong, I just think this is something you'll always have to keep investing in because as you said before, decorators were crucial for angular. So as soon as TypeScript supported those really well, it was a great fit for angular.</p><p><strong>Marius Schulz:</strong>      For react, they needed JSX, so now he can use TypeScript with react really well. And sometimes I see a feature in the compiler and you can, you can tell why the team built it. So for example, they built a feature to accommodate redux reducers a little bit better. So if you're doing redux with react, TypeScript can help you do the switch cases a little bit nicer with the flow analysis.</p><p><strong>John Lindquist:</strong>     I've actually been really impressed recently in the past six months or so with the typing's improvement for four projects that don't ship with their own typing's files or you know, the definition files and being able to just find some random package. I need my project, whether it's a date utility or whatever it is. And then I'll see the auto completion pop up. I'm like, oh, I didn't, I wasn't expecting to have any help from my editor in this.</p><p><strong>Marius Schulz:</strong>      Where did that even come from?</p><p><strong>John Lindquist:</strong>     Yeah. So, seeing that the migration whenever that was, where it went to the at types packages and the community supporting them and cause that, that was, personally for me a hassle for a long time as the typing support for the third party. But that seems pretty much resolved now.</p><p><strong>Marius Schulz:</strong>      And honestly I think they're settled on a pretty elegant solution, because we had TSD before. So the TypeScript, what was it, was it TSD?</p><p><strong>Basarat:</strong>            Yep.</p><p><strong>Marius Schulz:</strong>      Yeah, TypeScript definitions I think. And then typing another TypeScript definition manager. So this is another tool, another package manager and now we just rely on NPM, which is I think a beautiful solution.</p><p><strong>John Lindquist:</strong>     Yeah, I remember seeing the definitely type GitHub repo and scrolling down for pages and pages and pages. It has been like, what is this? What is this project? It just kind of laughed at it at the time. It solves the problem, but it wasn't as elegant as NPM is for sure.</p><p><strong>Basarat:</strong>            Yeah. GitHub up, doesn't even show the route number of projects and definitely typed ... is at 3000 and they only show an X amount, 4,000 root level files.</p><p><strong>John Lindquist:</strong>     Oh wow. I wonder if that's unique to that project?</p><p><strong>Basarat:</strong>            I would assume so.</p><p><strong>Marius Schulz:</strong>      Yeah, maybe.</p><p><strong>Basarat:</strong>            So, like to increase tax ships adoption within other frameworks as well. Frameworks need to make a few better choices in the API designs as well. For example, string literals are not really statically analyze, well, if you're using string literals everywhere. And another thing that I see quite commonly in the libraries out there, especially in the CSS and JS libraries, is that they'll take objects that have key values with the keys being the name of properties for CSS properties, like a background color, color, font size and all that combined with selectors for nested elements such as on colon focus, go ahead and do this.</p><p><strong>Basarat:</strong>            Now, colon focus is something that is analyzable, but when you combine it with arbitrary selectors like on call and focus with Dev under it and a span under it, on that particular span at these particular set of Caesar's properties. What they essentially are doing there is combining these random strings with well use that are from a predetermined set. And if you want type safety for that year essentially can't have that cause you never know if the user is actually making an error in spelling a CSS property or are they going into a nested structure there.</p><p><strong>Basarat:</strong>            So this is something that we fixed with adding a special selector called dollar nest with Thai style. But is quite commonly in other CSS and JS solutions, I don't see it there and I can't really add 100% type safety to those libraries. Quite commonly like, if you want great safety, you have to think about it upfront in your API design is something worth mentioning.</p><p><strong>John Lindquist:</strong>     It's amazing to me that TypeScript is even useful for CSS. Like, what I saw and introduced at, that's not anything that ever crossed my mind or even the whole CSS and JavaScript, all those projects is one of those words that come from who had that crazy idea. And now it's a wildly, people just want to use JavaScript everywhere. JavaScript, all of the things I guess, and always been on JavaScript and it's amazing that CSS, analyze my TypeScript is a thing like that's blows my mind.</p><p><strong>Marius Schulz:</strong>      Yeah. JavaScript is now literally running everywhere. So even in astronauts helmets, we have JavaScript running, although I'm not entirely sure I would want to depend on Java script in then situation, but yeah.</p><p><strong>Basarat:</strong>            Yeah, CSS and JS is very similar to HTML being analyzed by JavaScript, which is essentially what GSX is. So like once Facebook came up with the concept of GSX, it was natural for people to see, oh, there's just one more thing we do in the front end web development, which is CSS, why can't we do that Intel script and that's where it came from.</p><p><strong>John Lindquist:</strong>     So what do you two use as far as you start a project, and web pack, and all that sort of stuff with TypeScript or if you were to just start a project from scratch right now, what would you turn to?</p><p><strong>Marius Schulz:</strong>      So I'm currently heavily invested in react, so I usually use react with web pack and TypeScript. And to Hook TypeScripts into web pack I use TS loader, so just the loader for TypeScript, which compiles all the files and let's meet import type script files. It works super well. I can strongly recommend this setup.</p><p><strong>John Lindquist:</strong>     Is there like create react app template for that?</p><p><strong>Marius Schulz:</strong>      There is a create react app port for TypeScript, although I'm not using that. So I usually start from scratch with an empty folder, and just set it up myself.</p><p><strong>Basarat:</strong>            That is pretty much what I do as well. So just copy the webpack.config.js from the last project, paste it into the new one. And I recently did a lesson on this, so it's really not that hard. It takes three minutes, to like literally write everything. And the Web pack Configuration that I have is essentially following the docs in TS loader which is the TypeScript loader for web pack. The reason why I don't use the solid cases is that they evolve really fast and they come up with a lot of things that I don't actually need.</p><p><strong>Basarat:</strong>            For CSS I use types you don't need any configuration for that study, just imported as a module, start using it. That's literally NPM install TypeScript type style, type shell shallow style, blah blah, blah, done. I like pictures like that.</p><p><strong>John Lindquist:</strong>     So, what's you're saying is when you're the person who answers all the questions on stack overflow, you don't copy and paste from stack overflow, you copy and paste from your own previous projects?</p><p><strong>Basarat:</strong>            Thank you for that.</p><p><strong>Marius Schulz:</strong>      Because this where this is like overflow answers came from in the first place.</p><p><strong>Basarat:</strong>            Yes.</p><p><strong>John Lindquist:</strong>     Let's see what else. So, is there anything upcoming in type script on the roadmap that either of you were super excited about that you can't wait to use or any reason to use this is there a prerelease usually there's at next version that has some new things to play around with.</p><p><strong>Marius Schulz:</strong>      Yeah. So we have the preview, releases every night. The Nike bills with the gift next tag. I'm really looking forward to JSX fragments, now that react 16 has landed, we can finally returned arrays from components when we render and Facebook standardized an extension of JSX, which formalizes fragments, right? And this is the new syntax and JSX and the TypeScript team has built this test of this committed this feature, and they're thinking about back porting it to 2.6.2 TypeScript. Or maybe we'll have to wait until 2.7 either way, I'm really looking forward to fragments.</p><p><strong>Basarat:</strong>            So, alien tooth the ID that I wrote for TypeScript. Always chips with TypeScript nightly. The reason why I wrote alien tooth is that I wanted a reliable ID for myself, And it comes with very strong opinions. And one of those strong opinions is that you should be on TypeScript nightly cause they're doing a great job. It'll find more bugs in your code. And it really does help me personally as well in the projects that I work on, even though the package that Jason has TypeScript 2.6 as an example, which released two days ago, ALM would be running TypeScript the next day after and if the new version of types could find more bugs, Ellen will highlight those for me and I'll fix them.</p><p><strong>Basarat:</strong>            So I would essentially be fixing bugs a bit known. What do you even know how I came up with the idea to fix this bug, but it's really just tight ship telling me that this thing cannot be this in this particular context and fix him. In terms of new features in TypeScript like JSX fragments would be really nice. But really, I'm very happy with it. Every single time a update they find more bugs in existing code bases.</p><p><strong>Basarat:</strong>            And other thing that they found recently was genetics used to be when they couldn't be inferred, they used to be inferred as any, but they changed that to now it's infant as an empty object. So if you don't specify a generic, and you try to use its value in, for example, in the promise Shane, you intellectually complained that property food does not exist on an empty object. What is the genetic that you expect?</p><p><strong>Basarat:</strong>            And, this makes sense in for example, in affects your quest to the backend. There's no way for to infer what's the return response is going to be. So you have to actually put the generic position in there, that is going to be an object that has just these particular properties. But yeah, just update to that script nightly new stuff comes up every single day.</p><p><strong>John Lindquist:</strong>     That's amazing. I have working with a nightly build in production type apps is like a horror story for most people. And it's incredible to me that you're actually advocating that. Like you're, so TypeScript has proven itself so well to you that you're confident to use the nightly and that it will actually help you find bugs sooner. That is a story that's hard to believe but wow. I mean.</p><p><strong>Marius Schulz:</strong>      But I can attest to the quality of the master branch. So I have the same experience. I did the same and one of my projects never did I see anything fail. So it was a really high quality build. And the fun thing is, or the funny thing about this is, if they want to cut a new TypeScript release, they simply pick the newest master commit and attach a tag to it. This is what releasing a new types group version looks like.</p><p><strong>Marius Schulz:</strong>      So it's not like they're pulling off different branch, stabilizing that for six weeks. They're just picking the top most master commit at a certain point. And then that's TypeScript, you know, 2.6 there you go.</p><p><strong>Basarat:</strong>            They never release a new feature without breaking anything. And all new features come with new tests as well. So if the master bill succeeds, you got to go, and it's probably going to affect some obscure issue that you had in your code previously that you didn't know about.</p><p><strong>John Lindquist:</strong>     I'm sure the TypeScript compiler and language services and all that, like their test covered is probably a great place to learn how to test your code. If you want to get on GitHub and look at their tests.</p><p><strong>Basarat:</strong>            Maybe, maybe not. It's probably too aggressive for many of the projects out there. It's kind of very opening at a test harness as well, and that's specific to types of course, like if you want to build a compiler, and you want excellent test for that, and then yes, TypeScript is the place to go to, to read the source code.</p><p><strong>Marius Schulz:</strong>      Yeah, I agree. For typical crud apps or a typical web development apps that we ride in everyday, web development jobs, the tests width of the TypeScript compiler is a different beast. They even have their own test harness framework because they test everything about TypeScript, right? They test that the red squeegees that an editor would show exactly in the right place and not one character to the left or to the right and this is so much customization. It's, yeah, not what you would use for your everyday projects.</p><p><strong>Basarat:</strong>            The test auto complete shows up the right things. The test that the symbols that TypeScript has inferred, for example, that this thing is out numbered at a particular position. They have a test harness to do that as well and their own language to do that as well.</p><p><strong>Marius Schulz:</strong>      But it's perfect because for them, it's a really good tool to catch regressions because if you're working at this breakneck speed, do you want to make sure that you don't break all this stuff from, you know, previous releases.</p><p><strong>John Lindquist:</strong>     Yeah, for sure. Do either of you have a wishlist or is there a feature that you think or that you would love to be implemented other than the fragments which you mentioned earlier that if you had someone from the TypeScript team, he'd be like, \"Please get this done.\"</p><p><strong>Marius Schulz:</strong>      Let's see. I'm pretty happy with the general state of affairs to be honest. And I also respect their decision very much that they don't want to deviate too much from the current ECMAScript standards. So they're not making up any new syntax anymore for nonstandard JavaScript features because if TC39 standardizes new features, test has to accommodate all of these features so they can't constantly make up new syntax. Otherwise, we might run into conflicts there. So I respect that decision very much. I think it's a good decision.</p><p><strong>John Lindquist:</strong>     At what stage does a feature have to be in before TypeScript considers it?</p><p><strong>Marius Schulz:</strong>      Pretty stable. Correct me Basarat if I'm wrong, but I think they're not looking at features before stage three and onwards. I would say. So it has to be fairly stable.</p><p><strong>Basarat:</strong>            Yep. So, the features that I'm looking forward to are all telescope features because of the reasons that Mary's explained, they don't add new features and they stay gels and the features in JavaScript that I want are the [inaudible 00:39:51] operator, also called the existential operator, the question mark dot. That would make life so much easier, especially with TypeScript, straighten all jacks.</p><p><strong>Basarat:</strong>            It would actually infer that how the Nelda flowing to the whole thing as well, but just giving a syntax to deal with knows a bit better with the Elvis operators just would be so much easier working with, especially with the dom where quite commonly things are, for example, document.getelementbyid, this element may not exist. Dot Style, Dot the index read me that really like ... if you want to write code like that, you have to do document that get element by ID doesn't exist.</p><p><strong>Basarat:</strong>            If it does not, then either you do the query twice, which would be a bad idea, but what you'd actually do is you store it in a variable. Then you take the nail in the variable and then you go to style and then you go to the index with existential, you could just write document.getelementbyid?.style.zindex and that shouldn't go further. This value maybe a number of maybe a now and then when you try to use it as a number, you can get you on the Elvis thing of your code if you wanted to.</p><p><strong>Marius Schulz:</strong>      Yeah, I agree. That is a fantastic operator. So if that's coming to JavaScript when that's coming to JavaScript, then TypeScript will definitely have to implement it and I'm really looking forward to that one. Also there is one other proposal for the pipe operator. So the operator is a pipe symbol, and a great than sign and I think currently it's at stage one of the TC39 process. The idea of the pipe operator's that you can pipe values on the left into functions on the right.</p><p><strong>Marius Schulz:</strong>      So say, you have something like A pipe B, then this means, call the function B with A as an argument. So this is a really functional style of developing and it's really nice if you have a chain of transforms that you want to apply to a certain value. So, say you read an input from a certain text field and then you convert it to an end and then you maybe check it and then you transform it and then you transform it some more.</p><p><strong>Marius Schulz:</strong>      And if we do this in current JavaScript, we have to write it from the inside out. So if you write A opening prem, B opening prem, C prem, you basically have to read it from the inside, right? Because you apply, C first, and then B, and then A. And it will be much more natural if you could say, take this value X and first pipe it into X and then pipe it into B and then pipe it into A. So you can read it an execution order.</p><p><strong>Marius Schulz:</strong>      This one is huge. So if it ends up being standard JavaScript, we'll have it in TypeScript as well of course, because we're a super set of JavaScript and that will be fantastic.</p><p><strong>John Lindquist:</strong>     Yeah, I'd love that as well. I mean it's available in some libraries like [inaudible 00:42:37] as methods are, but having a native feature on it would be fantastic. I agree.</p><p><strong>Basarat:</strong>            The other thing that I love about the types of TypeScript team is they add all these features with static analysis as well. So people use the rest of operator to death even before it was in TypeScript in other [inaudible 00:43:00] and when TypeScript edit the same feature, they did it with the static analysis associated with that as well. For example, if you have an object that has [inaudible 00:43:11] A, B and C, and you destructure it into something that takes a variable A out, and puts everything else into arrest using spread.</p><p><strong>Basarat:</strong>            TypeScript knows that react has the properties B and C, and similarly with like this as well, I would assume that they would add all the static analysis associated to that, with the binded, make sure that the thing that you're bonding to take same arguments that would be get passed to it if you had written in the function inside out men and stuff like that. I would not use any of these features without TypeScript. And just waiting for them to get to TypeScript.</p><p><strong>John Lindquist:</strong>     Yeah. If we had bind and pipes and you showed that code to me five years ago or whatever, I would just have no idea what it even meant.</p><p><strong>Marius Schulz:</strong>      Just look up partial application, the proposal for partial application and it gets even more functional. It looks really funny. So, maybe take some time and read that proposal.</p><p><strong>John Lindquist:</strong>     Yeah, I'm really natural to people coming from that background.</p><p><strong>Marius Schulz:</strong>      Yeah, I think so. There's one more thing that just popped into my mind that I wanted to say about future features that I wish to make it into TypeScript. I think it would be good if we had more support for nominal typing. I know it's on the roadmap, but it's been on the future section of the roadmap for ever basically. The thing is, the type script type system is a structural type system.</p><p><strong>Marius Schulz:</strong>      So if you have two types and they're similar in structure or the same instructure, there is the same for TypeScript mostly. So if you have, for example, a pet type that has a name and an age maybe, and you have a person type that has a name and an age, the two types are the same for TypeScript, because both describe an object with a name, and an age property. That is good in some respects and is usually in JavaScript plan what you want, because you can access the correct properties, they have the same types, yada, yada, yada.</p><p><strong>Marius Schulz:</strong>      But, sometimes it might be helpful to distinguished types by name. So nominal typing means telling types apart by name. And I think that would be really cool if we had some sort of, I don't know, maybe a keyword when declaring types or whatever. I don't care about the implementation. I would just like a certain degree of support for nominal typing. What do you think Basaratd?</p><p><strong>Basarat:</strong>            Yeah, that would be excellent. It's something that we send nominal typing for keys in databases. Essentially user ID is not the same as table ID, even though they're both underlined by a string, you don't want to ever assign one to the other that it sounds ridiculous, but it's a mistake that happens quite commonly in code bases out there. And having support for that entire script would be excellent.</p><p><strong>Marius Schulz:</strong>      Yeah, just think about units of measurements or currencies. You can have two amounts of money. One is in US dollar is one is in euros maybe, you shouldn't just be able to add those. That should be a type error. You can't add a US dollar amount, and euro amount and get something reasonable out of it. So this would be really helpful if you could say this number is not the same as that number.</p><p><strong>Marius Schulz:</strong>      You know at runtime, they're both going to be numbers of course. But one has the name USD maybe, and the other one has the name EUR for the currency symbols. And we can tell them apart and not mix them by accident. So I don't know how many rockets have exploded because people have conflated miles with kilometers.</p><p><strong>Basarat:</strong>            So, basics you know.</p><p><strong>John Lindquist:</strong>     We almost made it to the moon, but we used kilometers instead of miles and such.</p><p><strong>Marius Schulz:</strong>      I wasn't joking about this. Honestly, this is not a joke, sadly.</p><p><strong>John Lindquist:</strong>     Oh, okay.</p><p><strong>Marius Schulz:</strong>      There was a case of, I don't know what mission it was, but one rocket I think exploded or went loss or something caused billions of dollars in damages because part of the team was using the metric system and part of the team wasn't, and when you add distances and you're off by a factor of 1.6 between the two systems, that's really not good.</p><p><strong>Basarat:</strong>            It was a Mars orbiter.</p><p><strong>John Lindquist:</strong>     All right. Let's see, is there anything else either of you would want to talk about or discuss or bring up?</p><p><strong>Marius Schulz:</strong>      I want to thank the TypeScript team, just maybe as the last thing here. I think there been doing a phenomenal job over the last years. All in the open, I don't want to say break neck speed, but at a really, really high velocity, at a tremendous quality. And, I think we're not even close to being done yet. So, thanks to everybody who was involved with the TypeScript project.</p><p><strong>Basarat:</strong>            All of the TypeScript team.</p><p><strong>John Lindquist:</strong>     Awesome. Well Great. Okay, well for the conclusion like the end of the show thing, I'll do a pitch for both of you, both of you and your courses on egghead and all that, and say go to this URL for that and find out the best wording for it. So, I'll add that in later.</p><p><strong>Marius Schulz:</strong>      That was fun. Can you maybe provide some sort of Bitly, or how do you want to do this? I thought about this before. So how do you direct somebody who's just listening to one of your courses? You just say type in, TypeScript in the search box or do you want to create a Bitly or?</p><p><strong>Basarat:</strong>            He'll probably have links.</p><p><strong>John Lindquist:</strong>     Not quite sure yet?</p><p><strong>Basarat:</strong>            He'll probably have for dekagram.</p><p><strong>John Lindquist:</strong>     Yeah, we'll figure something out as far as where the podcast is hosted, and what sort of URLs we can include with that around it, and how all the marketing works around it. We'll, sort that all out as we have to get this edited and stuff around. So thanks for your patience and everything getting around the initial goal of this.</p><p><strong>Marius Schulz:</strong>      Yeah. Thanks for inviting us. I had lots of fun.</p><p><strong>John Lindquist:</strong>     And thank you for all the excellent stuff you've done. You guys are both amazing.</p><p><strong>Basarat:</strong>            Thank you, thank you for having me.</p><p><strong>John Lindquist:</strong>     All right guys. We'll talk soon.</p><p><strong>Marius Schulz:</strong>      Talk to you soon. Bye.</p><p><strong>John Lindquist:</strong>     Bye.</p><p>Announcer:          Learn more about type script from Marius and Basarat on egghead.io.</p>",
    "slug": "using-typescript-with-basarat-and-marius-schulz",
    "description": "<p>Two leading TypeScript experts, Marius Schulz and Basarat Ali Syed, discuss their initial reactions and excitement for TypeScript and how it has evolved and earned their trust over the years. TypeScript has been the main focus of many of their products and trainings and they’ve gained their expertise by closely following the project and digging deep into the TypeScript compiler code. As TypeScript continues to improve with features, tooling, and performance they share their opinions on what they’re most looking forward to in the near future.</p><hr /><h3>Transcript</h3><p><a href=\"https://egghead.simplecast.com/episodes/1c98ec65/transcript\">\"Using TypeScript with Basarat and Marius Schulz\" Transcript</a></p><h3>Resources</h3><ul><li><a href=\"https://egghead.io/courses/advanced-static-types-in-typescript\">Advanced Static Types with TypeScript</a></li></ul><h3>Marius Schulz</h3><ul><li><a href=\"https://twitter.com/mariusschulz?lang=en\">Twitter</a></li><li><a href=\"https://github.com/mariusschulz\">Github</a></li><li><a href=\"https://mariusschulz.com/\">Website</a></li></ul><h3>Basarat</h3><ul><li><a href=\"https://twitter.com/basarat?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor\">Twitter</a></li><li><a href=\"https://github.com/basarat\">Github</a></li><li><a href=\"https://basarat.com/\">Website</a></li></ul><h3>John Lindquist</h3><ul><li><a href=\"https://twitter.com/johnlindquist?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor\">Twitter</a></li><li><a href=\"https://egghead.io/instructors/john-lindquist\">egghead.io</a></li><li><a href=\"https://github.com/johnlindquist\">Github</a></li><li><a href=\"https://johnlindquist.com/\">Website</a></li></ul>",
    "duration": 2734,
    "episode_number": 1,
    "contributors": [
      "John Lindquist"
    ],
    "type": "podcast",
    "http_short_url": "https://egghead.io/s/ms2re",
    "path": "/podcasts/using-typescript-with-basarat-and-marius-schulz",
    "published_at": "November 6th, 2017",
    "url": "https://egghead.io/api/v1/podcasts/using-typescript-with-basarat-and-marius-schulz",
    "edit_podcast_url": "https://egghead.io/podcasts/using-typescript-with-basarat-and-marius-schulz/edit"
  }
]